const nt="ENTRIES",T="KEYS",V="VALUES",F="";class D{constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case V:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const a=o[h-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let l=0;l<c.length;++l,++a){const p=c[l],f=i*a,g=f-i;let d=o[f];const m=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<d&&(d=L)}if(d>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=I(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=O(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=O(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,V)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},O=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return O(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=I(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=I(e);n.set(o+t,s),n.delete(o)},I=e=>e[e.length-1],it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},q=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,lt=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),q(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);q(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},dt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},ft={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},H={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:ft},mt={combineWith:P,prefix:(e,t,s)=>t===s.length-1},pt={batchSize:1e3,batchWait:10},J={minDirtFactor:.1,minDirtCount:20},Ft={...pt,...J};class _t{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ft:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...H,...t.searchOptions||{}},autoSuggestOptions:{...mt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=J,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const yt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},U=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},At=(e,t,s,n)=>{if(!e._index.has(n)){U(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?U(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(ht[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const a=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const d of p.keys()){if(!e._documentIds.has(d)){At(e,l,d,s),f-=1;continue}const m=i?i(e._documentIds.get(d),s,e._storedFields.get(d)):1;if(!m)continue;const y=p.get(d),_=e._fieldLength.get(d)[l],b=at(y,f,e._documentCount,_,g,r),z=n*a*m*b,A=h.get(d);if(A){A.score+=z,ct(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(d,{score:z,terms:[t],match:{[s]:[c]}})}}return h},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((d,m)=>({...d,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:a}={...H.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,m=d<1?Math.min(r,Math.round(t.term.length*d)):d;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[d,m]of f){const y=d.length-t.term.length;if(!y)continue;g==null||g.delete(d);const _=a*d.length/(d.length+.3*y);B(e,t.term,d,_,m,o,u,h,p)}if(g)for(const d of g.keys()){const[m,y]=g.get(d);if(!y)continue;const _=c*d.length/(d.length+y);B(e,t.term,d,_,m,o,u,h,p)}return p},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},l=t.queries.map(p=>K(e,p,a));return Y(l,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(a=>h(a)).filter(a=>!!a).map(dt(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},X=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of X(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o},zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new _t(a);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const d of Object.keys(f)){let m=f[d];c===1&&(m=m.ds),g.set(parseInt(d,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:a?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return X(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[a,l]=u.split(/[#@]/),{contents:p}=n[a]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:a,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:a,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const d=i.map(m=>j(g,m)).filter(m=>m!==null);d.length&&p.push([{type:"text",key:a,...c&&{anchor:l},display:d},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=yt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":723,\"nextId\":723,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-184f4da6\",\"2\":\"v-184f4da6#关于我\",\"3\":\"v-184f4da6#联系我\",\"4\":\"v-184f4da6#开源角色\",\"5\":\"v-184f4da6#我的技能点\",\"6\":\"v-184f4da6#我的github地址\",\"7\":\"v-184f4da6#我的github贡献数据\",\"8\":\"v-184f4da6#我的github提交排行榜\",\"9\":\"v-2e3eac9e\",\"10\":\"v-145c230d\",\"11\":\"v-145c230d#_2022-阅读书籍\",\"12\":\"v-145c230d#专业书籍\",\"13\":\"v-145c230d#非专业书籍\",\"14\":\"v-fc52599a\",\"15\":\"v-fc52599a#左领右舍\",\"16\":\"v-fc52599a#优秀技术博客\",\"17\":\"v-e5e0f262\",\"18\":\"v-e5e0f262@0\",\"19\":\"v-1cac05fa\",\"20\":\"v-1cac05fa@0\",\"21\":\"v-0c785793\",\"22\":\"v-0c785793@0\",\"23\":\"v-0f89bc74\",\"24\":\"v-0f89bc74@0\",\"25\":\"v-5dec6d7e\",\"26\":\"v-5dec6d7e@0\",\"27\":\"v-192d614b\",\"28\":\"v-192d614b@0\",\"29\":\"v-63b561d1\",\"30\":\"v-63b561d1@0\",\"31\":\"v-0a84b330\",\"32\":\"v-0a84b330@0\",\"33\":\"v-d4c8dd20\",\"34\":\"v-d4c8dd20@0\",\"35\":\"v-1809ab5b\",\"36\":\"v-1809ab5b@0\",\"37\":\"v-135d99ea\",\"38\":\"v-135d99ea@0\",\"39\":\"v-bc278204\",\"40\":\"v-bc278204@0\",\"41\":\"v-93f83dec\",\"42\":\"v-93f83dec@0\",\"43\":\"v-b2e3aa22\",\"44\":\"v-b2e3aa22@0\",\"45\":\"v-2fdb221e\",\"46\":\"v-2fdb221e@0\",\"47\":\"v-3d168c60\",\"48\":\"v-3d168c60#_1-类图\",\"49\":\"v-3d168c60#_2-存储位置\",\"50\":\"v-3d168c60#_3-源码解读\",\"51\":\"v-3d168c60#_3-1-核心方法\",\"52\":\"v-3d168c60#boolean构造方法\",\"53\":\"v-3d168c60#valueof方法\",\"54\":\"v-3d168c60#parseboolean方法\",\"55\":\"v-3d168c60#booleanvalue方法\",\"56\":\"v-3d168c60#tostring方法\",\"57\":\"v-3d168c60#getboolean方法\",\"58\":\"v-3d168c60#compare方法\",\"59\":\"v-3d168c60#logicaland方法\",\"60\":\"v-3d168c60#logicalor方法\",\"61\":\"v-3d168c60#logicalxor方法\",\"62\":\"v-3d168c60#_4-使用建议\",\"63\":\"v-3d168c60@0\",\"64\":\"v-3d168c60@1\",\"65\":\"v-3a0be1ce\",\"66\":\"v-3a0be1ce#_1-类图\",\"67\":\"v-3a0be1ce#_2-存储位置\",\"68\":\"v-3a0be1ce#_3-了解ieee-754\",\"69\":\"v-3a0be1ce#_3-1-ieee-754简介\",\"70\":\"v-3a0be1ce#_3-2-ieee-754单精度浮点数表示\",\"71\":\"v-3a0be1ce#_3-1-属性说明\",\"72\":\"v-3a0be1ce#_3-2-方法说明\",\"73\":\"v-3a0be1ce#_3-2-1-double构造方法\",\"74\":\"v-3a0be1ce#_3-2-2-valueof方法\",\"75\":\"v-3a0be1ce#_3-2-3-parsedouble方法\",\"76\":\"v-3a0be1ce#_3-2-4-isinfinite方法与isfinite方法\",\"77\":\"v-3a0be1ce#_3-2-5-doubletolongbits方法\",\"78\":\"v-3a0be1ce#_3-2-6-doubletorawlongbits-native方法与longbitstodouble-native方法\",\"79\":\"v-3a0be1ce#_3-2-7-compare-sum-max-min方法\",\"80\":\"v-3a0be1ce#_4-说明\",\"81\":\"v-3a0be1ce#_4-1-如何判断两个double类型的数字大小\",\"82\":\"v-3a0be1ce@0\",\"83\":\"v-3a0be1ce@1\",\"84\":\"v-48951328\",\"85\":\"v-48951328#_1-类图\",\"86\":\"v-48951328#_2-存储位置\",\"87\":\"v-48951328#_3-了解ieee-754\",\"88\":\"v-48951328#_3-1-ieee-754简介\",\"89\":\"v-48951328#_3-2-ieee-754单精度浮点数表示\",\"90\":\"v-48951328#_4-源码解读\",\"91\":\"v-48951328#_4-1-属性说明\",\"92\":\"v-48951328#_4-2-方法说明\",\"93\":\"v-48951328#float构造方法\",\"94\":\"v-48951328#tohexstring方法\",\"95\":\"v-48951328#valueof方法\",\"96\":\"v-48951328#parsefloat方法\",\"97\":\"v-48951328#isnan方法\",\"98\":\"v-48951328#isinfinite与isinfinite方法\",\"99\":\"v-48951328#floattointbits方法\",\"100\":\"v-48951328#sum-max-min方法\",\"101\":\"v-48951328#floattorawintbits-intbitstofloat-native方法\",\"102\":\"v-48951328#_5-说明\",\"103\":\"v-48951328@0\",\"104\":\"v-48951328@1\",\"105\":\"v-3fcc350a\",\"106\":\"v-3fcc350a#_1-类图\",\"107\":\"v-3fcc350a#_2-存储位置\",\"108\":\"v-3fcc350a#_3-源码解读\",\"109\":\"v-3fcc350a#_3-1-主要属性\",\"110\":\"v-3fcc350a#_3-1-1-第一部分-常量参数\",\"111\":\"v-3fcc350a#_3-1-2-第二部分-数组\",\"112\":\"v-3fcc350a#_3-1-3-integercache静态内部类\",\"113\":\"v-3fcc350a#_3-2-核心方法\",\"114\":\"v-3fcc350a#max-min-sum方法\",\"115\":\"v-3fcc350a#getinteger方法\",\"116\":\"v-3fcc350a#tostring方法\",\"117\":\"v-3fcc350a#reversebytes方法\",\"118\":\"v-3fcc350a#signum方法\",\"119\":\"v-3fcc350a#reverse方法\",\"120\":\"v-3fcc350a#rotateleft-rotateright方法\",\"121\":\"v-3fcc350a#numberofleadingzeros-numberoftrailingzeros方法\",\"122\":\"v-3fcc350a#highestonebit-lowestonebit方法\",\"123\":\"v-3fcc350a#tounsignedlong方法\",\"124\":\"v-3fcc350a#divideunsigned方法\",\"125\":\"v-3fcc350a#remainderunsigned方法\",\"126\":\"v-3fcc350a#_4-经典面试题\",\"127\":\"v-3fcc350a#_1-integer-a-1、integer-a-new-integer-1-、integer-a-integer-valueof-1-的区别\",\"128\":\"v-3fcc350a#_2-你所了解到integercache\",\"129\":\"v-3fcc350a#_5-文章参考\",\"130\":\"v-3fcc350a@0\",\"131\":\"v-3fcc350a@1\",\"132\":\"v-1173472a\",\"133\":\"v-1173472a#_1-类图\",\"134\":\"v-1173472a#_2-核心代码\",\"135\":\"v-1173472a#_2-1-registernatives方法\",\"136\":\"v-1173472a#_2-2-getclass方法\",\"137\":\"v-1173472a#_2-3-hashcode方法\",\"138\":\"v-1173472a#_2-4-equals方法\",\"139\":\"v-1173472a#_2-5-clone方法\",\"140\":\"v-1173472a#_2-6-tostring方法\",\"141\":\"v-1173472a#_2-7-notify方法\",\"142\":\"v-1173472a#_2-8-notifyall方法\",\"143\":\"v-1173472a#_2-9-wait方法\",\"144\":\"v-1173472a#_2-10-finalize方法\",\"145\":\"v-1173472a@0\",\"146\":\"v-1173472a@1\",\"147\":\"v-4630290f\",\"148\":\"v-4630290f@0\",\"149\":\"v-234a12a0\",\"150\":\"v-234a12a0#_1-类图\",\"151\":\"v-234a12a0#_2-核心方法\",\"152\":\"v-234a12a0#_2-1-exit方法\",\"153\":\"v-234a12a0#_2-1-1-源码\",\"154\":\"v-234a12a0#_2-1-2-说明\",\"155\":\"v-234a12a0#_2-2-addshutdownhook方法\",\"156\":\"v-234a12a0#_2-2-1-源码\",\"157\":\"v-234a12a0#_2-2-2-说明\",\"158\":\"v-234a12a0#_2-2-3-示例\",\"159\":\"v-234a12a0#_2-3-removeshutdownhook方法\",\"160\":\"v-234a12a0#_2-3-1-源码\",\"161\":\"v-234a12a0#_2-3-2-说明\",\"162\":\"v-234a12a0#_2-3-3-示例\",\"163\":\"v-234a12a0#_2-4-halt方法\",\"164\":\"v-234a12a0#_2-4-1-源码\",\"165\":\"v-234a12a0#_2-4-2-说明\",\"166\":\"v-234a12a0#_2-4-3-示例\",\"167\":\"v-234a12a0#_2-5-runfinalization方法\",\"168\":\"v-234a12a0#_2-5-1-源码\",\"169\":\"v-234a12a0#_2-5-2-说明\",\"170\":\"v-234a12a0#_2-5-3-说明\",\"171\":\"v-234a12a0#_2-6-exec方法\",\"172\":\"v-234a12a0#_2-6-1-源码\",\"173\":\"v-234a12a0#_2-6-2-说明\",\"174\":\"v-234a12a0#_2-6-3-示例\",\"175\":\"v-234a12a0#_2-7-availableprocessors方法\",\"176\":\"v-234a12a0#_2-8-freememory方法\",\"177\":\"v-234a12a0#_2-9-maxmemory方法\",\"178\":\"v-234a12a0#_2-10-totalmemory方法\",\"179\":\"v-234a12a0#_2-11-gc方法\",\"180\":\"v-234a12a0#_2-11-traceinstructions方法\",\"181\":\"v-234a12a0#_2-11-1-源码\",\"182\":\"v-234a12a0#_2-11-2-说明\",\"183\":\"v-234a12a0#_2-12-tracemethodcalls方法\",\"184\":\"v-234a12a0#_2-12-1-源码\",\"185\":\"v-234a12a0#_2-12-2-说明\",\"186\":\"v-234a12a0#_2-13-load方法\",\"187\":\"v-234a12a0#_2-13-1-源码\",\"188\":\"v-234a12a0#_2-13-2-说明\",\"189\":\"v-234a12a0#_2-13-3-示例\",\"190\":\"v-234a12a0#_2-14-loadlibrary方法\",\"191\":\"v-234a12a0#_2-14-1-源码\",\"192\":\"v-234a12a0#_2-14-2-说明\",\"193\":\"v-234a12a0#_2-14-3-示例\",\"194\":\"v-234a12a0@0\",\"195\":\"v-234a12a0@1\",\"196\":\"v-6f332c45\",\"197\":\"v-6f332c45#arraylist是什么\",\"198\":\"v-6f332c45#为什么要使用arraylist\",\"199\":\"v-6f332c45#在什么环境下使用arraylist\",\"200\":\"v-6f332c45#怎么使用arraylist\",\"201\":\"v-6f332c45#基本api\",\"202\":\"v-6f332c45#基本源码\",\"203\":\"v-6f332c45@0\",\"204\":\"v-6f332c45@1\",\"205\":\"v-13ecd071\",\"206\":\"v-13ecd071#集合关系图谱\",\"207\":\"v-13ecd071#collection\",\"208\":\"v-13ecd071#list\",\"209\":\"v-13ecd071#arraylist\",\"210\":\"v-13ecd071#linkedlist\",\"211\":\"v-13ecd071#set\",\"212\":\"v-13ecd071#hashset\",\"213\":\"v-13ecd071#linkedhashset\",\"214\":\"v-13ecd071#queue\",\"215\":\"v-13ecd071#deque\",\"216\":\"v-13ecd071#arraydeque\",\"217\":\"v-13ecd071@0\",\"218\":\"v-13ecd071@1\",\"219\":\"v-3d54adab\",\"220\":\"v-3d54adab#集合关系图谱\",\"221\":\"v-3d54adab#collection\",\"222\":\"v-3d54adab#list\",\"223\":\"v-3d54adab#arraylist\",\"224\":\"v-3d54adab#linkedlist\",\"225\":\"v-3d54adab#set\",\"226\":\"v-3d54adab#hashset\",\"227\":\"v-3d54adab#linkedhashset\",\"228\":\"v-3d54adab#queue\",\"229\":\"v-3d54adab#deque\",\"230\":\"v-3d54adab#arraydeque\",\"231\":\"v-3d54adab@0\",\"232\":\"v-3d54adab@1\",\"233\":\"v-0be40ec3\",\"234\":\"v-0be40ec3#集合关系图谱\",\"235\":\"v-0be40ec3#介绍\",\"236\":\"v-0be40ec3#collection\",\"237\":\"v-0be40ec3#list\",\"238\":\"v-0be40ec3#arraylist简介\",\"239\":\"v-0be40ec3#linkedlist\",\"240\":\"v-0be40ec3#set\",\"241\":\"v-0be40ec3#hashset\",\"242\":\"v-0be40ec3#linkedhashset\",\"243\":\"v-0be40ec3#treeset\",\"244\":\"v-0be40ec3#queue\",\"245\":\"v-0be40ec3#arraydeque\",\"246\":\"v-0be40ec3#priorityqueue\",\"247\":\"v-0be40ec3#map\",\"248\":\"v-0be40ec3#hashmap\",\"249\":\"v-0be40ec3#linkedhashmap\",\"250\":\"v-0be40ec3#treemap\",\"251\":\"v-0be40ec3#hashtable\",\"252\":\"v-0be40ec3@0\",\"253\":\"v-0be40ec3@1\",\"254\":\"v-582c1751\",\"255\":\"v-582c1751#集合关系图谱\",\"256\":\"v-582c1751#collection\",\"257\":\"v-582c1751#list\",\"258\":\"v-582c1751#arraylist\",\"259\":\"v-582c1751#linkedlist\",\"260\":\"v-582c1751#set\",\"261\":\"v-582c1751#hashset\",\"262\":\"v-582c1751#linkedhashset\",\"263\":\"v-582c1751#queue\",\"264\":\"v-582c1751#deque\",\"265\":\"v-582c1751#arraydeque\",\"266\":\"v-582c1751@0\",\"267\":\"v-582c1751@1\",\"268\":\"v-1a97133b\",\"269\":\"v-1a97133b@0\",\"270\":\"v-0e779d90\",\"271\":\"v-0e779d90#_1-官网\",\"272\":\"v-0e779d90#_1-1-jdk8\",\"273\":\"v-0e779d90#_1-2-the-relation-of-jdk-jre-jvm\",\"274\":\"v-0e779d90#_2-源码到类文件\",\"275\":\"v-0e779d90#_2-1-源码\",\"276\":\"v-0e779d90#_2-2-编译过程\",\"277\":\"v-0e779d90#_2-3-类文件-class文件\",\"278\":\"v-0e779d90#_3-类文件到虚拟机-类加载机制\",\"279\":\"v-0e779d90#_3-1-装载-load\",\"280\":\"v-0e779d90#_3-2-链接-link\",\"281\":\"v-0e779d90#_3-2-1-验证-verify-保证被加载类的正确性\",\"282\":\"v-0e779d90#_3-2-2-准备-prepare\",\"283\":\"v-0e779d90#_3-2-3-解析-resolve\",\"284\":\"v-0e779d90#_3-3-初始化-initialize\",\"285\":\"v-0e779d90#_3-4-类加载机制图解\",\"286\":\"v-0e779d90#_4-类装载器classloader\",\"287\":\"v-0e779d90#_4-1-分类\",\"288\":\"v-0e779d90#_4-2-图解\",\"289\":\"v-0e779d90#_4-3-加载原则\",\"290\":\"v-0e779d90#_5-运行时数据区-run-time-data-areas\",\"291\":\"v-0e779d90#_5-1-官网概括\",\"292\":\"v-0e779d90#_5-2-图解\",\"293\":\"v-0e779d90#_5-3-常规理解\",\"294\":\"v-0e779d90#_5-3-1-method-area-方法区-类信息、常量、静态变量、即使编译器编译之后的代码\",\"295\":\"v-0e779d90#_5-3-2-heap-堆-对象或者数组\",\"296\":\"v-0e779d90#_5-3-3-java-virtual-machine-stacks-虚拟机栈-局部变量、操作数、返回数\",\"297\":\"v-0e779d90#_5-3-4-the-pc-register-程序计数器\",\"298\":\"v-0e779d90#_5-3-5-native-method-stacks-本地方法栈\",\"299\":\"v-0e779d90@0\",\"300\":\"v-0e779d90@1\",\"301\":\"v-102c762f\",\"302\":\"v-102c762f#_1-结合字节码指令理解java虚拟机栈和栈帧\",\"303\":\"v-102c762f#_2-折腾一下\",\"304\":\"v-102c762f#_2-1栈指向堆\",\"305\":\"v-102c762f#_2-2-方法区指向堆\",\"306\":\"v-102c762f#_2-3-堆指向方法区\",\"307\":\"v-102c762f#_2-4-java对象内存布局\",\"308\":\"v-102c762f#_3-内存模型\",\"309\":\"v-102c762f#_3-1-图解\",\"310\":\"v-102c762f#_3-2-对象创建所在区域\",\"311\":\"v-102c762f#_3-3-survivor区详解\",\"312\":\"v-102c762f#_3-4-old区详解\",\"313\":\"v-102c762f#_3-5-对象的一辈子理解\",\"314\":\"v-102c762f#_3-6-常见问题\",\"315\":\"v-102c762f#_4-体验与验证\",\"316\":\"v-102c762f#_4-1-使用jvisualvm查看\",\"317\":\"v-102c762f#_4-1-堆内存溢出\",\"318\":\"v-102c762f#_4-1-1-代码\",\"319\":\"v-102c762f#_4-1-2-运行结果\",\"320\":\"v-102c762f#_4-2-方法区内存溢出\",\"321\":\"v-102c762f#_4-2-1-asm依赖和class代码\",\"322\":\"v-102c762f#_4-2-2-代码\",\"323\":\"v-102c762f#_4-2-3-运行结果\",\"324\":\"v-102c762f#_4-3-虚拟机栈\",\"325\":\"v-102c762f#_4-3-1-代码演示stackoverflow\",\"326\":\"v-102c762f#_4-3-2-运行结果\",\"327\":\"v-102c762f#_4-3-3-理解和说明\",\"328\":\"v-102c762f@0\",\"329\":\"v-102c762f@1\",\"330\":\"v-11e14ece\",\"331\":\"v-11e14ece#_1-garbage-collect-垃圾回收\",\"332\":\"v-11e14ece#_1-1-如何确定一个对象是垃圾\",\"333\":\"v-11e14ece#_1-1-1-引用计数法\",\"334\":\"v-11e14ece#_1-1-2-可达性分析\",\"335\":\"v-11e14ece#_1-2-垃圾收集算法\",\"336\":\"v-11e14ece#_1-2-1-标记-清除-mark-sweep\",\"337\":\"v-11e14ece#_1-2-2-复制-copying\",\"338\":\"v-11e14ece#_1-2-3-标记-整理-mark-compact\",\"339\":\"v-11e14ece#_1-3-分代收集算法\",\"340\":\"v-11e14ece#_1-4-垃圾收集器\",\"341\":\"v-11e14ece#_1-4-1-serial收集器\",\"342\":\"v-11e14ece#_1-4-2-parnew收集器\",\"343\":\"v-11e14ece#_1-4-3-parallel-scavenge收集器\",\"344\":\"v-11e14ece#_1-4-4-serial-old收集器\",\"345\":\"v-11e14ece#_1-4-5-parallel-old收集器\",\"346\":\"v-11e14ece#_1-4-6-cms收集器\",\"347\":\"v-11e14ece#_1-4-7-g1收集器\",\"348\":\"v-11e14ece#_1-4-8-垃圾收集器分类\",\"349\":\"v-11e14ece#_1-4-9-理解吞吐量和停顿时间\",\"350\":\"v-11e14ece#_1-4-10-如何选择合适的垃圾收集器\",\"351\":\"v-11e14ece#_1-4-11-如何开启需要的垃圾收集器\",\"352\":\"v-11e14ece@0\",\"353\":\"v-11e14ece@1\",\"354\":\"v-1396276d\",\"355\":\"v-1396276d#_1-1-jvm参数\",\"356\":\"v-1396276d#_1-1-1-标准参数\",\"357\":\"v-1396276d#_1-1-2-x参数\",\"358\":\"v-1396276d#_1-1-3-xx参数\",\"359\":\"v-1396276d#_1-1-4-其他参数\",\"360\":\"v-1396276d#_1-1-5-查看参数\",\"361\":\"v-1396276d#_1-1-6-设置参数的方式\",\"362\":\"v-1396276d#_1-1-7-实践和单位换算\",\"363\":\"v-1396276d#_1-1-8-常用参数含义\",\"364\":\"v-1396276d#_1-2-常用命令\",\"365\":\"v-1396276d#_1-2-1-jps\",\"366\":\"v-1396276d#_1-2-2-jinfo\",\"367\":\"v-1396276d#_1-2-3-jstat\",\"368\":\"v-1396276d#_1-2-4-jstack\",\"369\":\"v-1396276d#_1-2-5-jmap\",\"370\":\"v-1396276d#_1-3-常用工具\",\"371\":\"v-1396276d#_1-3-1-jconsole\",\"372\":\"v-1396276d#_1-3-2-jvisualvm\",\"373\":\"v-1396276d#_1-3-2-1-监控本地java进程\",\"374\":\"v-1396276d#_1-3-2-2-监控远端java进程\",\"375\":\"v-1396276d#_1-3-3-arthas\",\"376\":\"v-1396276d#_1-3-3-1-下载安装\",\"377\":\"v-1396276d#_1-3-3-2-常用命令\",\"378\":\"v-1396276d#_1-3-4-mat\",\"379\":\"v-1396276d#_1-3-4-1-dump信息包含的内容\",\"380\":\"v-1396276d#_1-3-4-2-获取dump文件\",\"381\":\"v-1396276d#_1-3-4-3-使用\",\"382\":\"v-1396276d#_1-3-5-gc日志分析工具\",\"383\":\"v-1396276d@0\",\"384\":\"v-1396276d@1\",\"385\":\"v-154b000c\",\"386\":\"v-154b000c#_1-1-重新认知jvm\",\"387\":\"v-154b000c#_1-2-gc优化\",\"388\":\"v-154b000c#_1-2-1-垃圾收集发生的时机\",\"389\":\"v-154b000c#_1-2-2-实验环境准备\",\"390\":\"v-154b000c#_1-2-3-gc日志文件\",\"391\":\"v-154b000c#_1-2-3-1-parallel-gc日志\",\"392\":\"v-154b000c#_1-2-3-2-cms日志\",\"393\":\"v-154b000c#_1-2-3-3-g1日志\",\"394\":\"v-154b000c#_1-2-4-gc日志文件分析工具\",\"395\":\"v-154b000c#_1-2-4-1-gceasy\",\"396\":\"v-154b000c#_1-2-4-2-gcviewer\",\"397\":\"v-154b000c#_1-2-5-g1调优与最佳指南\",\"398\":\"v-154b000c#_1-2-5-1-调优\",\"399\":\"v-154b000c#_1-2-5-2-最佳指南\",\"400\":\"v-154b000c#_1-3-高并发场景分析\",\"401\":\"v-154b000c#_1-4-jvm性能优化指南\",\"402\":\"v-154b000c#_1-5-常见问题思考\",\"403\":\"v-154b000c@0\",\"404\":\"v-154b000c@1\",\"405\":\"v-384bea7c\",\"406\":\"v-384bea7c@0\",\"407\":\"v-3ea02550\",\"408\":\"v-3ea02550#hsdis环境准备\",\"409\":\"v-3ea02550#_1-下载hsdis-amd64-dylib\",\"410\":\"v-3ea02550#_2-下载hsdis-amd64-dll\",\"411\":\"v-3ea02550#_3-配置hsdis-amd64-dylib和hsdis-amd64-dll\",\"412\":\"v-3ea02550#_4-测试验证是否配置成功\",\"413\":\"v-3ea02550#_5-自行构建hsdis-如果你有兴趣的话\",\"414\":\"v-3ea02550#jitwatch环境\",\"415\":\"v-3ea02550#_1-下载jitwatch\",\"416\":\"v-3ea02550#_2-配置运行jitwatch\",\"417\":\"v-3ea02550#_3-jitwatch简单使用\",\"418\":\"v-3ea02550#模块化查看字节码和汇编码\",\"419\":\"v-3ea02550#使用toplist查看资源占用率\",\"420\":\"v-3ea02550#更多资料\",\"421\":\"v-3ea02550#参考文章\",\"422\":\"v-3ea02550@0\",\"423\":\"v-3ea02550@1\",\"424\":\"v-aefe5358\",\"425\":\"v-aefe5358@0\",\"426\":\"v-43e725d7\",\"427\":\"v-43e725d7@0\",\"428\":\"v-cfaecee0\",\"429\":\"v-cfaecee0#_1-线程池的创建方式\",\"430\":\"v-cfaecee0#_2-线程池的关键参数\",\"431\":\"v-cfaecee0#_3-线程池设计的技巧\",\"432\":\"v-cfaecee0@0\",\"433\":\"v-cfaecee0@1\",\"434\":\"v-35a5f41b\",\"435\":\"v-35a5f41b#_1-什么是线程安全\",\"436\":\"v-35a5f41b#_2-java内存模型-jmm\",\"437\":\"v-35a5f41b#_3-共享变量-共享资源\",\"438\":\"v-35a5f41b#_4-线程安全的实现\",\"439\":\"v-35a5f41b#_4-1-无状态实现\",\"440\":\"v-35a5f41b#_4-2-不可变的实现\",\"441\":\"v-35a5f41b#_4-3-线程私有-threadlocal-字段\",\"442\":\"v-35a5f41b#_4-4-同步集合类\",\"443\":\"v-35a5f41b#_4-5-支持并发的集合\",\"444\":\"v-35a5f41b#_4-6-原子化对象\",\"445\":\"v-35a5f41b#_4-7-同步方法\",\"446\":\"v-35a5f41b#_4-8-同步语句\",\"447\":\"v-35a5f41b#_4-8-其他对象作为锁\",\"448\":\"v-35a5f41b#_5-参考文章\",\"449\":\"v-35a5f41b@0\",\"450\":\"v-35a5f41b@1\",\"451\":\"v-28f36bde\",\"452\":\"v-28f36bde#说明\",\"453\":\"v-28f36bde#作者引言\",\"454\":\"v-28f36bde#_1-什么是一致性\",\"455\":\"v-28f36bde#_1-1-coherence\",\"456\":\"v-28f36bde#_1-2-consensus\",\"457\":\"v-28f36bde#_1-2-1-paxos与raft\",\"458\":\"v-28f36bde#_1-2-2-复制状态机\",\"459\":\"v-28f36bde#_1-2-3-区块链\",\"460\":\"v-28f36bde#_1-3-consistency\",\"461\":\"v-28f36bde#_2-背景\",\"462\":\"v-28f36bde#_2-1-顺序一致性-sequential-consistency\",\"463\":\"v-28f36bde#_2-1-1-顺序一致性理论基础\",\"464\":\"v-28f36bde#_2-1-2-顺序一致性解释说明\",\"465\":\"v-28f36bde#_2-1-3-zookeeper\",\"466\":\"v-28f36bde#_2-2-线性一致性-linearizability\",\"467\":\"v-28f36bde#_2-2-1-etcd-与-raft\",\"468\":\"v-28f36bde#_2-3-linearizability-和-serializability\",\"469\":\"v-28f36bde#_2-4-因果一致性-causal-consistency\",\"470\":\"v-28f36bde#_2-5-最终一致性-eventual-consistency\",\"471\":\"v-28f36bde#_2-6-acid理论\",\"472\":\"v-28f36bde#_2-7-cap理论\",\"473\":\"v-28f36bde#_2-8-base理论\",\"474\":\"v-28f36bde#_2-9-acid一致性与cap一致性的区别\",\"475\":\"v-28f36bde#_2-10-acid-2pc-3pc-tcc-paxos-关系\",\"476\":\"v-28f36bde#_3-参考\",\"477\":\"v-28f36bde@0\",\"478\":\"v-28f36bde@1\",\"479\":\"v-9910830e\",\"480\":\"v-9910830e@0\",\"481\":\"v-21b11f95\",\"482\":\"v-21b11f95#_1-前言\",\"483\":\"v-21b11f95#_2-总体思路\",\"484\":\"v-21b11f95#_3-一级缓存\",\"485\":\"v-21b11f95#_3-1-一级缓存的设计\",\"486\":\"v-21b11f95#_3-2-何时存入数据\",\"487\":\"v-21b11f95#_3-3-何时匹配数据\",\"488\":\"v-21b11f95#_3-4-何时删除数据\",\"489\":\"v-21b11f95#_3-5-何时使用一级缓存\",\"490\":\"v-21b11f95#_4-二级缓存匹配\",\"491\":\"v-21b11f95#_4-1-二级缓存的设计\",\"492\":\"v-21b11f95#_4-2-何时存入数据\",\"493\":\"v-21b11f95#_4-3-何时匹配数据\",\"494\":\"v-21b11f95#_4-4-何时删除数据\",\"495\":\"v-21b11f95#_4-5-何时使用二级缓存\",\"496\":\"v-21b11f95#_5-三级缓存匹配\",\"497\":\"v-21b11f95#_5-1-何时存入数据\",\"498\":\"v-21b11f95#_5-2-何时匹配数据\",\"499\":\"v-21b11f95#_5-3-何时删除数据\",\"500\":\"v-21b11f95@0\",\"501\":\"v-21b11f95@1\",\"502\":\"v-52d2453a\",\"503\":\"v-52d2453a#_1-前言\",\"504\":\"v-52d2453a#_2-apache-shenyu整合sentinel源码分析\",\"505\":\"v-52d2453a#_2-1-如何设置sentinel加载资源的resourcename\",\"506\":\"v-52d2453a#_2-1-sentinel加载shenyu配置的限流、降级规则\",\"507\":\"v-52d2453a#_2-2-shenyu是如何获取应用错误并进行流控、降级的\",\"508\":\"v-52d2453a#_2-2-1-在exchange注册http状态码消费者-何时消费\",\"509\":\"v-52d2453a#_2-2-1-shenyu是如何将应用资源交予sentinel管理的\",\"510\":\"v-52d2453a@0\",\"511\":\"v-52d2453a@1\",\"512\":\"v-76ab910e\",\"513\":\"v-76ab910e@0\",\"514\":\"v-3d80adee\",\"515\":\"v-3d80adee@0\",\"516\":\"v-3d80adee@1\",\"517\":\"v-9e0f2f7c\",\"518\":\"v-9e0f2f7c@0\",\"519\":\"v-9e0f2f7c@1\",\"520\":\"v-0a1a0fee\",\"521\":\"v-0a1a0fee@0\",\"522\":\"v-0a1a0fee@1\",\"523\":\"v-8a6cc228\",\"524\":\"v-8a6cc228@0\",\"525\":\"v-8a6cc228@1\",\"526\":\"v-eac3c2a6\",\"527\":\"v-eac3c2a6@0\",\"528\":\"v-6a9f592c\",\"529\":\"v-6a9f592c@0\",\"530\":\"v-68b90299\",\"531\":\"v-68b90299#服务版本说明\",\"532\":\"v-68b90299#springcloud-2022-x-分支\",\"533\":\"v-68b90299#springcloud-2021-x-分支\",\"534\":\"v-68b90299#springboot-2-2-x-分支\",\"535\":\"v-68b90299#搭建项目公共的parent\",\"536\":\"v-68b90299#parent初始化\",\"537\":\"v-68b90299#pom-xml文件\",\"538\":\"v-68b90299#打包安装到本地\",\"539\":\"v-68b90299#新建moremind-example-module1\",\"540\":\"v-68b90299#moremind-example-module1初始化\",\"541\":\"v-68b90299#pom-xml文件配置\",\"542\":\"v-68b90299#删除无用文件\",\"543\":\"v-68b90299#新建moremind-example-module1-api模块\",\"544\":\"v-68b90299#moremind-example-module1-api初始化\",\"545\":\"v-68b90299#moremind-example-module1-api的pom文件\",\"546\":\"v-68b90299#配置多环境以及nacos\",\"547\":\"v-68b90299#配置applicatioin-dev-yml\",\"548\":\"v-68b90299#配置application-test-yml\",\"549\":\"v-68b90299#配置application-prod-yml\",\"550\":\"v-68b90299#module1-api-test-yaml文件配置\",\"551\":\"v-68b90299#module1-api-prod-yaml文件配置\",\"552\":\"v-68b90299#配置logback文件\",\"553\":\"v-68b90299#启动测试\",\"554\":\"v-68b90299#启动nacos\",\"555\":\"v-68b90299#设置spring-profiles-active-dev参数\",\"556\":\"v-68b90299#设置spring-profiles-active-test参数\",\"557\":\"v-68b90299#设置spring-profiles-active-prod参数\",\"558\":\"v-68b90299#添加测试的controller\",\"559\":\"v-68b90299#新建moremind-example-module1-openfeign子模块\",\"560\":\"v-68b90299#moremind-example-module1-openfeign子模块的init\",\"561\":\"v-68b90299#moremind-example-module1-api-openfeign的pom文件\",\"562\":\"v-68b90299#在api-feign目录下编写添加feignclient\",\"563\":\"v-68b90299#将moremind-example-module1-api-openfeign打包到本地\",\"564\":\"v-68b90299#测试调用feign服务\",\"565\":\"v-68b90299#moremind-example-module1-consumer项目初始化\",\"566\":\"v-68b90299#moremind-example-module1-consumer的pom-xml文件\",\"567\":\"v-68b90299#配置nacos注册中心\",\"568\":\"v-68b90299#消费者启动类配置\",\"569\":\"v-68b90299#调用openfeign接口\",\"570\":\"v-68b90299#检查nacos是否已经注册consumer服务\",\"571\":\"v-68b90299#调用服务\",\"572\":\"v-68b90299#项目git管理问题\",\"573\":\"v-68b90299#项目地址\",\"574\":\"v-68b90299@0\",\"575\":\"v-68b90299@1\",\"576\":\"v-74375b62\",\"577\":\"v-74375b62@0\",\"578\":\"v-1ac7baee\",\"579\":\"v-1ac7baee#什么是apache-shenyu\",\"580\":\"v-1ac7baee#apache-shenyu-基准测试的环境\",\"581\":\"v-1ac7baee#mock服务器配置\",\"582\":\"v-1ac7baee#apache-shenyu-bootstrap配置\",\"583\":\"v-1ac7baee#shenyu-版本\",\"584\":\"v-1ac7baee#测试工具\",\"585\":\"v-1ac7baee#测试工具下载\",\"586\":\"v-1ac7baee#测试工具安装\",\"587\":\"v-1ac7baee#测试工具安装位置\",\"588\":\"v-1ac7baee#测试用例说明\",\"589\":\"v-1ac7baee#说明\",\"590\":\"v-1ac7baee#jvm配置\",\"591\":\"v-1ac7baee#公共配置\",\"592\":\"v-1ac7baee#webclient配置\",\"593\":\"v-1ac7baee#nettyclient配置\",\"594\":\"v-1ac7baee#启动shenyu和mock服务\",\"595\":\"v-1ac7baee#启动shenyu-admin\",\"596\":\"v-1ac7baee#启动shenyu-bootstrap\",\"597\":\"v-1ac7baee#启动mock服务\",\"598\":\"v-1ac7baee#如何测试\",\"599\":\"v-1ac7baee#测试mock服务\",\"600\":\"v-1ac7baee#测试shenyu-bootstrap\",\"601\":\"v-1ac7baee#测试结果\",\"602\":\"v-1ac7baee#直接访问后端\",\"603\":\"v-1ac7baee#netty\",\"604\":\"v-1ac7baee#webclient\",\"605\":\"v-1ac7baee@0\",\"606\":\"v-1ac7baee@1\",\"607\":\"v-27319f48\",\"608\":\"v-27319f48@0\",\"609\":\"v-41a33a54\",\"610\":\"v-41a33a54#zettlr\",\"611\":\"v-41a33a54#关于zettlr\",\"612\":\"v-41a33a54#zettlr下载地址\",\"613\":\"v-41a33a54#zettlr的使用\",\"614\":\"v-41a33a54#打开工作区\",\"615\":\"v-41a33a54#设置目录显示的格式\",\"616\":\"v-41a33a54#文件目录\",\"617\":\"v-41a33a54#优点\",\"618\":\"v-41a33a54#缺点\",\"619\":\"v-41a33a54#用户使用说明书\",\"620\":\"v-41a33a54#gridea\",\"621\":\"v-41a33a54#关于gridea\",\"622\":\"v-41a33a54#gridea下载\",\"623\":\"v-41a33a54#gridea的特性\",\"624\":\"v-41a33a54#优点-1\",\"625\":\"v-41a33a54#缺点-1\",\"626\":\"v-41a33a54#gridea的使用文档\",\"627\":\"v-41a33a54@0\",\"628\":\"v-41a33a54@1\",\"629\":\"v-574d7b70\",\"630\":\"v-574d7b70#git与svn\",\"631\":\"v-574d7b70#svn\",\"632\":\"v-574d7b70#git\",\"633\":\"v-574d7b70#网址\",\"634\":\"v-574d7b70#选择你的os版本即可\",\"635\":\"v-574d7b70@0\",\"636\":\"v-0de5d30e\",\"637\":\"v-0de5d30e#工作区\",\"638\":\"v-0de5d30e#暂存区\",\"639\":\"v-0de5d30e#撤销修改\",\"640\":\"v-0de5d30e#最简单的方法-手动修改\",\"641\":\"v-0de5d30e#使用之前所使用的命令进行版本回滚\",\"642\":\"v-0de5d30e#使用git-checkout-test-txt-一点要带文件名-不然会创建分支\",\"643\":\"v-0de5d30e#删除文件\",\"644\":\"v-0de5d30e#rm-命令-linux下的软删除命令\",\"645\":\"v-0de5d30e@0\",\"646\":\"v-0de5d30e@1\",\"647\":\"v-cfc0b610\",\"648\":\"v-cfc0b610#git-init\",\"649\":\"v-cfc0b610#git-add-把项目提交到git仓库\",\"650\":\"v-cfc0b610#git-commit\",\"651\":\"v-cfc0b610#git-status-查看状态\",\"652\":\"v-cfc0b610#git-diff\",\"653\":\"v-cfc0b610#git-log\",\"654\":\"v-cfc0b610#版本回滚-git-reset-hard-head\",\"655\":\"v-cfc0b610#cat命令\",\"656\":\"v-cfc0b610#git-reflog\",\"657\":\"v-cfc0b610#git-reset-hard-版本号\",\"658\":\"v-cfc0b610@0\",\"659\":\"v-cfc0b610@1\",\"660\":\"v-4fe09264\",\"661\":\"v-4fe09264#创建与合并分支\",\"662\":\"v-4fe09264#创建分支\",\"663\":\"v-4fe09264#合并分支\",\"664\":\"v-4fe09264#处理分支矛盾\",\"665\":\"v-4fe09264#分支策略\",\"666\":\"v-4fe09264#bug分支\",\"667\":\"v-4fe09264@0\",\"668\":\"v-4fe09264@1\",\"669\":\"v-03db91be\",\"670\":\"v-03db91be#查看远程仓库信息\",\"671\":\"v-03db91be#推送分支\",\"672\":\"v-03db91be#抓取分支\",\"673\":\"v-03db91be#推荐阅读\",\"674\":\"v-03db91be@0\",\"675\":\"v-03db91be@1\",\"676\":\"v-9a6362ac\",\"677\":\"v-9a6362ac#配置远程仓库-创建ssh-key-检查用户目录\",\"678\":\"v-9a6362ac#在github中设置ssh\",\"679\":\"v-9a6362ac#选择new-repository-添加仓库\",\"680\":\"v-9a6362ac@0\",\"681\":\"v-9a6362ac@1\",\"682\":\"v-574e94dc\",\"683\":\"v-574e94dc@0\",\"684\":\"v-7b3a1464\",\"685\":\"v-7b3a1464@0\",\"686\":\"v-78ab0fd2\",\"687\":\"v-78ab0fd2#mavan打包工具的使用\",\"688\":\"v-78ab0fd2@0\",\"689\":\"v-0ddfd07a\",\"690\":\"v-0ddfd07a#_1-使用maven-assembly-plugin进行配置分离\",\"691\":\"v-0ddfd07a#_2-pom-xml文件build节点的配置\",\"692\":\"v-0ddfd07a#_3-编写shell脚本或者bat脚本\",\"693\":\"v-0ddfd07a#_4-项目目录如下\",\"694\":\"v-0ddfd07a@0\",\"695\":\"v-0ddfd07a@1\",\"696\":\"v-405d5957\",\"697\":\"v-405d5957@0\",\"698\":\"v-3bd88bdf\",\"699\":\"v-3bd88bdf@0\",\"700\":\"v-4fd7ffef\",\"701\":\"v-4fd7ffef@0\",\"702\":\"v-a6c6f66a\",\"703\":\"v-a6c6f66a@0\",\"704\":\"v-c213185e\",\"705\":\"v-c213185e@0\",\"706\":\"v-2e42b057\",\"707\":\"v-2d0aa3df\",\"708\":\"v-ed954500\",\"709\":\"v-444340b4\",\"710\":\"v-ed95419c\",\"711\":\"v-11af89ce\",\"712\":\"v-3ad5e8a9\",\"713\":\"v-1326239e\",\"714\":\"v-ff5966aa\",\"715\":\"v-8b0f09ec\",\"716\":\"v-114938ab\",\"717\":\"v-59715303\",\"718\":\"v-6207a34c\",\"719\":\"v-36147253\",\"720\":\"v-7fbeb2b3\",\"721\":\"v-6d4db60b\",\"722\":\"v-4f04a6a6\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[1,8],\"3\":[1,8],\"4\":[1,13],\"5\":[1,38],\"6\":[1,4],\"7\":[1],\"8\":[1],\"9\":[2],\"10\":[4],\"11\":[2],\"12\":[1,4],\"13\":[1,3],\"14\":[1],\"15\":[1,62],\"16\":[1,51],\"17\":[1,2],\"18\":[null,null,1],\"19\":[1,2],\"20\":[null,null,1],\"21\":[1,2],\"22\":[null,null,1],\"23\":[1,2],\"24\":[null,null,1],\"25\":[1,2],\"26\":[null,null,1],\"27\":[1,2],\"28\":[null,null,1],\"29\":[1,2],\"30\":[null,null,1],\"31\":[1,2],\"32\":[null,null,1],\"33\":[1,2],\"34\":[null,null,1],\"35\":[2,2],\"36\":[null,null,1],\"37\":[1,2],\"38\":[null,null,2],\"39\":[1,1],\"40\":[null,null,2],\"41\":[1,2],\"42\":[null,null,1],\"43\":[1,2],\"44\":[null,null,1],\"45\":[1,2],\"46\":[null,null,1],\"47\":[2],\"48\":[2,2],\"49\":[2,25],\"50\":[2],\"51\":[3],\"52\":[1,37],\"53\":[1,22],\"54\":[1,37],\"55\":[1,15],\"56\":[1,21],\"57\":[1,42],\"58\":[1,36],\"59\":[1,28],\"60\":[1,29],\"61\":[1,27],\"62\":[2,12],\"63\":[null,null,2],\"64\":[null,null,2],\"65\":[2],\"66\":[2],\"67\":[2,5],\"68\":[3],\"69\":[4,37],\"70\":[4,63],\"71\":[3,96],\"72\":[3],\"73\":[4,20],\"74\":[3,22],\"75\":[3,22],\"76\":[4,51],\"77\":[4,41],\"78\":[6,26],\"79\":[7,55],\"80\":[2],\"81\":[3,44],\"82\":[null,null,2],\"83\":[null,null,2],\"84\":[2],\"85\":[2,2],\"86\":[2,5],\"87\":[3],\"88\":[4,39],\"89\":[4,41],\"90\":[2],\"91\":[3,114],\"92\":[3],\"93\":[1,24],\"94\":[1,74],\"95\":[1,42],\"96\":[1,22],\"97\":[1,22],\"98\":[1,47],\"99\":[1,57],\"100\":[3,22],\"101\":[4,63],\"102\":[2,22],\"103\":[null,null,2],\"104\":[null,null,2],\"105\":[2],\"106\":[2,2],\"107\":[2,32],\"108\":[2],\"109\":[3],\"110\":[4,82],\"111\":[5,79],\"112\":[3,108],\"113\":[3],\"114\":[3,33],\"115\":[1,53],\"116\":[1,67],\"117\":[1,23],\"118\":[1,38],\"119\":[1,42],\"120\":[2,58],\"121\":[2,41],\"122\":[2,40],\"123\":[1,30],\"124\":[1,38],\"125\":[1,39],\"126\":[2],\"127\":[7,18],\"128\":[2,16],\"129\":[2,7],\"130\":[null,null,2],\"131\":[null,null,2],\"132\":[2],\"133\":[2,15],\"134\":[2,56],\"135\":[3,49],\"136\":[2,75],\"137\":[3,457],\"138\":[3,44],\"139\":[3,270],\"140\":[3,10],\"141\":[3,238],\"142\":[3,4],\"143\":[3,505],\"144\":[3,18],\"145\":[null,null,2],\"146\":[null,null,2],\"147\":[1],\"148\":[null,null,2],\"149\":[2],\"150\":[2],\"151\":[2],\"152\":[3],\"153\":[3,15],\"154\":[3,33],\"155\":[2],\"156\":[3,19],\"157\":[2,8],\"158\":[3,23],\"159\":[3],\"160\":[4,20],\"161\":[3,1],\"162\":[3,30],\"163\":[3],\"164\":[4,16],\"165\":[3,7],\"166\":[4,29],\"167\":[3],\"168\":[4,8],\"169\":[3,18],\"170\":[4,19],\"171\":[3],\"172\":[4,37],\"173\":[3,36],\"174\":[4,61],\"175\":[3,18],\"176\":[3,25],\"177\":[3,27],\"178\":[3,25],\"179\":[3,32],\"180\":[3],\"181\":[4,7],\"182\":[3,19],\"183\":[3],\"184\":[4,7],\"185\":[3,19],\"186\":[3],\"187\":[4,40],\"188\":[3,26],\"189\":[4,33],\"190\":[3],\"191\":[4,43],\"192\":[3,32],\"193\":[4,34],\"194\":[null,null,2],\"195\":[null,null,2],\"196\":[1],\"197\":[2],\"198\":[2],\"199\":[2],\"200\":[2],\"201\":[1],\"202\":[1],\"203\":[null,null,2],\"204\":[null,null,3],\"205\":[1],\"206\":[1,4],\"207\":[1],\"208\":[1],\"209\":[1],\"210\":[1],\"211\":[1],\"212\":[1],\"213\":[1],\"214\":[1],\"215\":[1],\"216\":[1],\"217\":[null,null,2],\"218\":[null,null,2],\"219\":[1],\"220\":[1,4],\"221\":[1],\"222\":[1],\"223\":[1],\"224\":[1],\"225\":[1],\"226\":[1],\"227\":[1],\"228\":[1],\"229\":[1],\"230\":[1],\"231\":[null,null,2],\"232\":[null,null,2],\"233\":[1],\"234\":[1,4],\"235\":[1,33],\"236\":[1],\"237\":[1],\"238\":[1,23],\"239\":[1,16],\"240\":[1],\"241\":[1,23],\"242\":[1,14],\"243\":[1,17],\"244\":[1],\"245\":[1,23],\"246\":[1,23],\"247\":[1],\"248\":[1,31],\"249\":[1,15],\"250\":[1,29],\"251\":[1,18],\"252\":[null,null,2],\"253\":[null,null,2],\"254\":[2],\"255\":[1,4],\"256\":[1],\"257\":[1],\"258\":[1],\"259\":[1],\"260\":[1],\"261\":[1],\"262\":[1],\"263\":[1],\"264\":[1],\"265\":[1],\"266\":[null,null,2],\"267\":[null,null,2],\"268\":[2,2],\"269\":[null,null,2],\"270\":[2],\"271\":[2,2],\"272\":[2],\"273\":[8,63],\"274\":[2],\"275\":[3,25],\"276\":[2,12],\"277\":[5,90],\"278\":[4,2],\"279\":[5,33],\"280\":[5],\"281\":[6,4],\"282\":[5,9],\"283\":[5,7],\"284\":[4,9],\"285\":[3,2],\"286\":[2,13],\"287\":[3,38],\"288\":[3,2],\"289\":[3,46],\"290\":[7,21],\"291\":[3,50],\"292\":[3,3],\"293\":[3],\"294\":[10,157],\"295\":[6,75],\"296\":[10,97],\"297\":[8,93],\"298\":[7,35],\"299\":[null,null,1],\"300\":[null,null,1],\"301\":[2],\"302\":[2,144],\"303\":[2],\"304\":[2,16],\"305\":[2,13],\"306\":[3,9],\"307\":[3,5],\"308\":[2],\"309\":[3,24],\"310\":[3,25],\"311\":[2,36],\"312\":[3,7],\"313\":[3,27],\"314\":[3,86],\"315\":[2],\"316\":[3,13],\"317\":[3],\"318\":[3,25],\"319\":[4,19],\"320\":[3,1],\"321\":[4,69],\"322\":[3,24],\"323\":[4,23],\"324\":[3],\"325\":[4,18],\"326\":[4,2],\"327\":[3,28],\"328\":[null,null,1],\"329\":[null,null,1],\"330\":[2],\"331\":[5,16],\"332\":[3],\"333\":[2,11],\"334\":[3,14],\"335\":[3],\"336\":[7,22],\"337\":[5,12],\"338\":[8,13],\"339\":[3,11],\"340\":[3,2],\"341\":[3,14],\"342\":[4,13],\"343\":[5,24],\"344\":[4,10],\"345\":[5,9],\"346\":[4,47],\"347\":[4,59],\"348\":[4,28],\"349\":[4,13],\"350\":[4,16],\"351\":[4,16],\"352\":[null,null,1],\"353\":[null,null,1],\"354\":[2],\"355\":[2],\"356\":[2,5],\"357\":[3,8],\"358\":[3,22],\"359\":[3,8],\"360\":[3,7],\"361\":[3,13],\"362\":[3,33],\"363\":[3,200],\"364\":[3],\"365\":[3,1],\"366\":[3,18],\"367\":[4,19],\"368\":[4,64],\"369\":[4,44],\"370\":[3],\"371\":[3,8],\"372\":[4,2],\"373\":[4,2],\"374\":[4,106],\"375\":[3,10],\"376\":[3,15],\"377\":[4,35],\"378\":[4,14],\"379\":[4,42],\"380\":[5,12],\"381\":[4,43],\"382\":[4,13],\"383\":[null,null,1],\"384\":[null,null,1],\"385\":[2],\"386\":[2],\"387\":[3,4],\"388\":[3,25],\"389\":[3],\"390\":[4,15],\"391\":[5,37],\"392\":[4,9],\"393\":[4,103],\"394\":[4],\"395\":[4,12],\"396\":[4,2],\"397\":[4],\"398\":[4,66],\"399\":[4,58],\"400\":[3,2],\"401\":[3],\"402\":[3,117],\"403\":[null,null,1],\"404\":[null,null,1],\"405\":[1,2],\"406\":[null,null,1],\"407\":[3,5],\"408\":[1],\"409\":[4,11],\"410\":[4,7],\"411\":[5,21],\"412\":[2,8],\"413\":[4,26],\"414\":[1],\"415\":[2,25],\"416\":[2,35],\"417\":[2],\"418\":[1,2],\"419\":[1,4],\"420\":[1,16],\"421\":[1,29],\"422\":[null,null,1],\"423\":[null,null,1],\"424\":[1,2],\"425\":[null,null,3],\"426\":[1,2],\"427\":[null,null,2],\"428\":[1],\"429\":[2],\"430\":[2],\"431\":[2],\"432\":[null,null,2],\"433\":[null,null,2],\"434\":[2],\"435\":[3,25],\"436\":[3,18],\"437\":[4,47],\"438\":[2],\"439\":[3,43],\"440\":[3,34],\"441\":[5,82],\"442\":[2,42],\"443\":[3,37],\"444\":[3,50],\"445\":[3,48],\"446\":[3,27],\"447\":[3,41],\"448\":[2,57],\"449\":[null,null,2],\"450\":[null,null,2],\"451\":[2],\"452\":[1,8],\"453\":[1,13],\"454\":[3,19],\"455\":[2,19],\"456\":[3,47],\"457\":[3,27],\"458\":[3,22],\"459\":[4,34],\"460\":[3,181],\"461\":[2,56],\"462\":[6,29],\"463\":[3,38],\"464\":[3,123],\"465\":[4,54],\"466\":[4,59],\"467\":[5,258],\"468\":[5,50],\"469\":[5,19],\"470\":[5,55],\"471\":[3,45],\"472\":[3,34],\"473\":[3,33],\"474\":[3,25],\"475\":[8,39],\"476\":[2,62],\"477\":[null,null,1],\"478\":[null,null,1],\"479\":[1,166],\"480\":[null,null,1],\"481\":[2],\"482\":[2,33],\"483\":[2,8],\"484\":[2],\"485\":[3,38],\"486\":[3,144],\"487\":[2,59],\"488\":[3,80],\"489\":[3,12],\"490\":[2],\"491\":[3,105],\"492\":[3,86],\"493\":[3,108],\"494\":[2,63],\"495\":[3,11],\"496\":[2,26],\"497\":[3,46],\"498\":[3,48],\"499\":[3,40],\"500\":[null,null,1],\"501\":[null,null,2],\"502\":[2],\"503\":[2,32],\"504\":[3],\"505\":[3,17],\"506\":[4,95],\"507\":[3],\"508\":[5,25],\"509\":[3,44],\"510\":[null,null,1],\"511\":[null,null,3],\"512\":[2,2],\"513\":[null,null,1],\"514\":[2],\"515\":[null,null,1],\"516\":[null,null,1],\"517\":[2],\"518\":[null,null,1],\"519\":[null,null,1],\"520\":[2],\"521\":[null,null,1],\"522\":[null,null,1],\"523\":[1],\"524\":[null,null,1],\"525\":[null,null,1],\"526\":[1,2],\"527\":[null,null,1],\"528\":[1],\"529\":[null,null,1],\"530\":[2,10],\"531\":[1,12],\"532\":[4,11],\"533\":[4,17],\"534\":[4,44],\"535\":[1],\"536\":[1],\"537\":[2,182],\"538\":[1,4],\"539\":[3],\"540\":[3],\"541\":[2,74],\"542\":[1,2],\"543\":[4],\"544\":[4],\"545\":[4,118],\"546\":[1],\"547\":[3,113],\"548\":[3,61],\"549\":[3,64],\"550\":[4,68],\"551\":[4,68],\"552\":[1,134],\"553\":[1],\"554\":[1,8],\"555\":[3,161],\"556\":[3,169],\"557\":[3,170],\"558\":[1,25],\"559\":[4],\"560\":[4],\"561\":[5,74],\"562\":[2,37],\"563\":[5,7],\"564\":[1],\"565\":[4,6],\"566\":[5,96],\"567\":[1,31],\"568\":[1,28],\"569\":[1,33],\"570\":[1],\"571\":[1,42],\"572\":[1,4],\"573\":[1,6],\"574\":[null,null,1],\"575\":[null,null,1],\"576\":[1,2],\"577\":[null,null,1],\"578\":[2],\"579\":[2,8],\"580\":[3],\"581\":[1,9],\"582\":[3,9],\"583\":[2,6],\"584\":[1,4],\"585\":[1,5],\"586\":[1,18],\"587\":[1,3],\"588\":[1],\"589\":[1,25],\"590\":[1,11],\"591\":[1,68],\"592\":[1,28],\"593\":[1,27],\"594\":[1],\"595\":[2,14],\"596\":[2,14],\"597\":[1,12],\"598\":[1],\"599\":[1,12],\"600\":[2,15],\"601\":[1],\"602\":[1,21],\"603\":[1,60],\"604\":[1,61],\"605\":[null,null,2],\"606\":[null,null,4],\"607\":[1,2],\"608\":[null,null,1],\"609\":[1],\"610\":[1],\"611\":[1,14],\"612\":[1,9],\"613\":[1,7],\"614\":[1,3],\"615\":[1,7],\"616\":[1,6],\"617\":[1,10],\"618\":[1,8],\"619\":[1,6],\"620\":[1],\"621\":[1,7],\"622\":[1,10],\"623\":[1,46],\"624\":[1,12],\"625\":[1,5],\"626\":[1,5],\"627\":[null,null,1],\"628\":[null,null,2],\"629\":[1],\"630\":[1],\"631\":[1,12],\"632\":[1,13],\"633\":[1,2],\"634\":[1,1],\"635\":[null,null,1],\"636\":[2],\"637\":[1,11],\"638\":[1,45],\"639\":[1],\"640\":[2,3],\"641\":[1,12],\"642\":[7,33],\"643\":[1],\"644\":[4,44],\"645\":[null,null,1],\"646\":[null,null,1],\"647\":[2,23],\"648\":[2,5],\"649\":[4,8],\"650\":[2,6],\"651\":[3,14],\"652\":[2,14],\"653\":[2,11],\"654\":[5,22],\"655\":[1,10],\"656\":[2,7],\"657\":[4,15],\"658\":[null,null,1],\"659\":[null,null,1],\"660\":[2],\"661\":[1,4],\"662\":[1,27],\"663\":[1,23],\"664\":[1,25],\"665\":[1,46],\"666\":[1,60],\"667\":[null,null,1],\"668\":[null,null,1],\"669\":[1],\"670\":[1,4],\"671\":[1,15],\"672\":[1,67],\"673\":[1,1],\"674\":[null,null,1],\"675\":[null,null,1],\"676\":[2],\"677\":[4,14],\"678\":[1,17],\"679\":[4,49],\"680\":[null,null,1],\"681\":[null,null,1],\"682\":[1,2],\"683\":[null,null,1],\"684\":[1,2],\"685\":[null,null,1],\"686\":[1],\"687\":[1],\"688\":[null,null,1],\"689\":[2],\"690\":[4,82],\"691\":[3,134],\"692\":[2,33],\"693\":[2,1],\"694\":[null,null,1],\"695\":[null,null,1],\"696\":[1,2],\"697\":[null,null,1],\"698\":[1,2],\"699\":[null,null,1],\"700\":[1,2],\"701\":[null,null,1],\"702\":[1,2],\"703\":[null,null,1],\"704\":[1,2],\"705\":[null,null,1],\"706\":[1],\"707\":[1],\"708\":[1],\"709\":[2],\"710\":[1],\"711\":[1],\"712\":[2],\"713\":[1],\"714\":[1],\"715\":[1],\"716\":[1],\"717\":[1],\"718\":[2],\"719\":[1],\"720\":[1],\"721\":[1],\"722\":[1]},\"averageFieldLength\":[2.350896777099794,32.295950412323435,0.7506109687874298],\"storedFields\":{\"0\":{\"h\":\"Home\"},\"1\":{\"h\":\"moremind的博客记录\"},\"2\":{\"h\":\"关于我\",\"t\":[\"欢迎来到moremind的博客,我是一名普通的Java、Go开发者，同时也是一名开源爱好者。如果您有兴趣交个朋友，欢迎到Friend提交您的链接。我将及时添加您的博客。\"]},\"3\":{\"h\":\"联系我\",\"t\":[\"email: \",\"hefengen@apache.org\",\"hefengen@hotmail.com\",\"wecaht: yijia1949\"]},\"4\":{\"h\":\"开源角色\",\"t\":[\"Apache ShenYu PMC && Committer\",\"Apache eventmesh contributor\",\"AcmeStack envcd PMC\",\"Gsoc 2023 mentor\",\"开源之夏2023 Apache ShenYu导师\"]},\"5\":{\"h\":\"我的技能点\",\"t\":[\"Major Language：Java,Go\",\"Micro-Service: \",\"SpringCloud\",\"Dubbo\",\"Sofa\",\"Middleware: \",\"cache: redis\",\"message middleware: rabbitmq, kafka\",\"document database: mongodb\",\"search engine: elasticsearch\",\"database synchronization: shardingshere\",\"log trace and monitor: elk/skywalking\",\"Cloud Native: \",\"Kubernetes\",\"Docker\",\"Native Images\",\"LB\",\"ingress controller\"]},\"6\":{\"h\":\"我的github地址\",\"t\":[\"https://github.com/moremind\"]},\"7\":{\"h\":\"我的github贡献数据\"},\"8\":{\"h\":\"我的github提交排行榜\"},\"9\":{\"h\":\"Slide page\"},\"10\":{\"h\":\"My Book For 2022\"},\"11\":{\"h\":\"2022 阅读书籍\"},\"12\":{\"h\":\"专业书籍\",\"t\":[\" Plan A\",\" Plan B\"]},\"13\":{\"h\":\"非专业书籍\",\"t\":[\" 结构性改革-中国经济的问题与对策\"]},\"14\":{\"h\":\"友链\"},\"15\":{\"h\":\"左领右舍\",\"t\":[\"✌️✌️名称\",\"👍👍链接\",\"简介🎉 💯\",\"南瓜慢说\",\"南瓜慢说\",\"敢一行，则予知。脚踏实地，知行合一。\",\"云扬四海\",\"云扬四海\",\"源码大佬\",\"赵俊\",\"赵俊的博客\",\"一个 Java 学习者的博客\",\"R'Blog\",\"R'Blog\",\"分享资源\",\"随遇而安\",\"随遇而安\",\"技术分享&生活吐槽\",\"GongJS\",\"GongJS\",\"Talk is cheap,show me the code.\",\"谭升的博客\",\"谭升的博客\",\"人工智能算法，数学基础类原创博客\",\"冰水鉴心的博客\",\"冰水鉴心的博客\",\".软工渣.编程痴.开发宅.系统迷.强迫症\",\"LmCjl在线工具\",\"LmCjl在线工具\",\"YuYe\",\"YuYe\",\"专注于前端技术\",\"笨小孩杂谈\",\"笨小孩杂谈\",\"专注前端技术\",\"yoko blog\",\"yoko blog\",\"目前主要写些c++和Go语言方面的博客\",\"六阿哥博客\",\"六阿哥博客\",\"记录一个程序员的成长历程\",\"枫糖\",\"枫糖\",\"From rookie to master\",\"Serence\",\"Serence\",\"一个程序员 + 文艺青年的博客\",\"羽叶丶\",\"羽叶丶\",\"羽叶丶的个人博客\",\"飞跃高山和大洋的🐟\",\"飞跃高山和大洋的🐟\",\"前端\"]},\"16\":{\"h\":\"优秀技术博客\",\"t\":[\"名称\",\"链接\",\"简介\",\"美团技术团队\",\"美团技术团队\",\"美团技术团队相关文档\",\"FEX技术周刊\",\"FEX技术周刊\",\"FEX技术周刊\",\"前端精读周刊\",\"前端精读周刊\",\"前端精读周刊\",\"前端资源汇总仓库\",\"前端资源汇总仓库\",\"前端资源汇总仓库\",\"后端架构师技术图谱\",\"后端架构师技术图谱\",\"后端架构师技术图谱\",\"CS-NOTES\",\"CS-NOTES\",\"CS-NOTES\",\"JAVA-进阶\",\"JAVA-进阶\",\"JAVA-进阶\",\"经典编程书籍大全\",\"经典编程书籍大全\",\"经典编程书籍大全\",\"代码日志\",\"代码日志\",\"代码日志\",\"阿里中间件团队博客\",\"阿里中间件团队博客\",\"阿里中间件团队博客\",\"自然语言处理\",\"自然语言处理\",\"自然语言处理\",\"崔庆才的个人博客\",\"崔庆才的个人博客\",\"崔庆才的个人博客\",\"Frank\",\"Frank\",\"Frank的个人博客\",\"并发编程网\",\"并发编程网\",\"并发编程网\",\"java与cs-base\",\"java与cs-base\",\"java与cs-base\",\"Tips\",\"欢迎留言提交互加友链!最好提供你网站的简介哟 如果您需要更改您的链接或者链接有错误，请联系我: hefengen@hotmail.com\",\"我的个人链接\",\"昵称：moremind\\n链接：https://moremind.cn/\\n头像链接：https://finen-1251602255.cos.ap-shanghai.myqcloud.com/file/pic/finen.png\\n介绍：Stay Hungry! Stay Foolish!\"]},\"17\":{\"h\":\"算法\",\"t\":[\"JVM 内存分析图\"]},\"18\":{\"c\":[\"jvm\"]},\"19\":{\"h\":\"算法\",\"t\":[\"JVM 内存分析图\"]},\"20\":{\"c\":[\"jvm\"]},\"21\":{\"h\":\"算法\",\"t\":[\"JVM 内存分析图\"]},\"22\":{\"c\":[\"jvm\"]},\"23\":{\"h\":\"数据结构\",\"t\":[\"JVM 内存分析图\\nJVM 内存分析图\"]},\"24\":{\"c\":[\"jvm\"]},\"25\":{\"h\":\"计算机网络\",\"t\":[\"JVM 内存分析图\"]},\"26\":{\"c\":[\"jvm\"]},\"27\":{\"h\":\"操作系统\",\"t\":[\"JVM 内存分析图\"]},\"28\":{\"c\":[\"jvm\"]},\"29\":{\"h\":\"hibernate\",\"t\":[\"JVM 内存分析图\"]},\"30\":{\"c\":[\"Hibernate\"]},\"31\":{\"h\":\"jpa\",\"t\":[\"JVM 内存分析图\"]},\"32\":{\"c\":[\"JPA\"]},\"33\":{\"h\":\"mybatis\",\"t\":[\"JVM 内存分析图\"]},\"34\":{\"c\":[\"Mybaits\"]},\"35\":{\"h\":\"mybatis-进阶\",\"t\":[\"JVM 内存分析图\"]},\"36\":{\"c\":[\"Mybaits\"]},\"37\":{\"h\":\"数据库进阶\",\"t\":[\"JVM 内存分析图\"]},\"38\":{\"c\":[\"Relation-Database\"]},\"39\":{\"h\":\"数据库知识体系\",\"t\":[\"数据库基础知识体系\"]},\"40\":{\"c\":[\"Relation-Database\"]},\"41\":{\"h\":\"MySQL知识体系\",\"t\":[\"JVM 内存分析图\"]},\"42\":{\"c\":[\"MySQL\"]},\"43\":{\"h\":\"Elasticsearch知识体系\",\"t\":[\"JVM 内存分析图\"]},\"44\":{\"c\":[\"Elasticsearch\"]},\"45\":{\"h\":\"Redis知识体系\",\"t\":[\"JVM 内存分析图\"]},\"46\":{\"c\":[\"Redis\"]},\"47\":{\"h\":\"JVM源码解读-Boolean类\"},\"48\":{\"h\":\"1.类图\",\"t\":[\"Boolean-Class\"]},\"49\":{\"h\":\"2.存储位置\",\"t\":[\"Boolean类中有两个状态码，TRUE和FALSE，这两个属性存在JVM方法区的静态区，对应源码如下：\",\" /** * The {@code Boolean} object corresponding to the primitive * value {@code true}. */ public static final Boolean TRUE = new Boolean(true); /** * The {@code Boolean} object corresponding to the primitive * value {@code false}. */ public static final Boolean FALSE = new Boolean(false); \",\"通过new Boolean()创建的对象都存储在堆区。\"]},\"50\":{\"h\":\"3.源码解读\"},\"51\":{\"h\":\"3.1 核心方法\"},\"52\":{\"h\":\"Boolean构造方法\",\"t\":[\"从Java9开始弃用\",\"public final class Boolean implements java.io.Serializable, Comparable<Boolean> { // 将传过来的boolean作为参数 public Boolean(boolean value) { this.value = value; } // 将输入拖来的字符串解析为true或者false public Boolean(String s) { this(parseBoolean(s)); } } \",\"public class BooleanDemoTest { @Test public void testBoolean() { Boolean b1 = new Boolean(\\\"TRue\\\"); // true Boolean b2 = new Boolean(\\\"True\\\"); // true Boolean b3 = new Boolean(\\\"fAlse\\\"); // false Boolean b4 = new Boolean(\\\"False\\\"); // false Boolean b5 = new Boolean(\\\"Trrue\\\"); // false } } \"]},\"53\":{\"h\":\"valueOf方法\",\"t\":[\"public final class Boolean implements java.io.Serializable, Comparable<Boolean> { // 根据值返回TRUE或者FALSE，对应Boolean的两个属性 public static Boolean valueOf(boolean b) { return (b ? TRUE : FALSE); } public static Boolean valueOf(String s) { return parseBoolean(s) ? TRUE : FALSE; } } \"]},\"54\":{\"h\":\"parseBoolean方法\",\"t\":[\"该方法是将字符串值转为对应boolean值，如果传入的值为true或者false的大小写，则返回true或者false，如果传入不是true或者false(null或者其他)，则返回false\",\"public final class Boolean implements java.io.Serializable, Comparable<Boolean> { public static boolean parseBoolean(String s) { return ((s != null) && s.equalsIgnoreCase(\\\"true\\\")); } } \",\"public class BooleanDemoTest { @Test public void testParseBoolean() { System.out.println(Boolean.parseBoolean(null)); // false System.out.println(Boolean.parseBoolean(\\\"True\\\")); // true System.out.println(Boolean.parseBoolean(\\\"False\\\")); // false System.out.println(Boolean.parseBoolean(\\\"ttur\\\")); // false } } \"]},\"55\":{\"h\":\"booleanValue方法\",\"t\":[\"将对应的Boolean值转为对应的boolean值。\",\"public final class Boolean implements java.io.Serializable, Comparable<Boolean> { public boolean booleanValue() { return value; } } \"]},\"56\":{\"h\":\"toString方法\",\"t\":[\"该方法是将boolean值转为对应的boolean字符串\",\"public final class Boolean implements java.io.Serializable, Comparable<Boolean> { // 根据不同的boolean值返回对应boolean字符串 public static String toString(boolean b) { return b ? \\\"true\\\" : \\\"false\\\"; } public String toString() { return value ? \\\"true\\\" : \\\"false\\\"; } } \"]},\"57\":{\"h\":\"getBoolean方法\",\"t\":[\"该方法是获取系统设置的参数，并且将对应的参数转为true或者false，如果没有获取到参数或者获取错误都返回false。\",\"public final class Boolean implements java.io.Serializable, Comparable<Boolean> { public static boolean getBoolean(String name) { boolean result = false; try { result = parseBoolean(System.getProperty(name)); } catch (IllegalArgumentException | NullPointerException e) { } return result; } } \",\"public class BooleanDemoTest { @Test public void testGetBoolean() { System.setProperty(\\\"test-boolean\\\", \\\"55\\\"); System.out.println(Boolean.getBoolean(\\\"test-boolean\\\")); // false System.setProperty(\\\"test-boolean2\\\", \\\"true\\\"); System.out.println(Boolean.getBoolean(\\\"test-boolean2\\\")); // true } } \"]},\"58\":{\"h\":\"compare方法\",\"t\":[\"该方法是比较两个boolean值，并且返回对应的int值，如果两个值相等则返回0，如果两个值不等，则返回1或者-1，如果第一个值是false则返回-1，如果第一个值为true则返回1\",\"public final class Boolean implements java.io.Serializable, Comparable<Boolean> { public static int compare(boolean x, boolean y) { return (x == y) ? 0 : (x ? 1 : -1); } } \",\"public class BooleanDemoTest { @Test public void testCompare() { System.out.println(Boolean.compare(true, true)); // 0 System.out.println(Boolean.compare(true, false)); // 1 System.out.println(Boolean.compare(false, true)); // -1 System.out.println(Boolean.compare(false, false)); // 0 } } \"]},\"59\":{\"h\":\"logicalAnd方法\",\"t\":[\"逻辑和方法，该方法要求两个值必须同时满足才返回true，否则返回false\",\"public final class Boolean implements java.io.Serializable, Comparable<Boolean> { public static boolean logicalAnd(boolean a, boolean b) { return a && b; } } \",\"public class BooleanDemoTest { @Test public void testLogicalAnd() { System.out.println(Boolean.logicalAnd(true, false)); // false System.out.println(Boolean.logicalAnd(true, true)); // true System.out.println(Boolean.logicalAnd(false, false)); // false } } \"]},\"60\":{\"h\":\"logicalOr方法\",\"t\":[\"逻辑或方法，传入的两个boolean值只要有一个为true则返回true，否则返回false\",\"public final class Boolean implements java.io.Serializable, Comparable<Boolean> { public static boolean logicalOr(boolean a, boolean b) { return a || b; } } \",\"public class BooleanDemoTest { @Test public void testLogicalOr() { System.out.println(Boolean.logicalOr(true, false)); // true System.out.println(Boolean.logicalOr(false, false)); // false } } \"]},\"61\":{\"h\":\"logicalXor方法\",\"t\":[\"该方法返回对分配的布尔操作数执行逻辑异或运算的结果。\",\"public final class Boolean implements java.io.Serializable, Comparable<Boolean> { public static boolean logicalXor(boolean a, boolean b) { return a ^ b; } } \",\"public class BooleanDemoTest { @Test public void testLogicalXor() { System.out.println(Boolean.logicalXor(true, false)); // true System.out.println(Boolean.logicalXor(false, false)); // false System.out.println(Boolean.logicalXor(false, true)); // true System.out.println(Boolean.logicalXor(true, true)); // false } } \"]},\"62\":{\"h\":\"4.使用建议\",\"t\":[\"推荐使用Boolean.TRUE或Boolean.valueOf(true)或Boolean.valueOf(\\\"true\\\")，避免重复创建对象\",\"两个值进行比较时，使用Boolean.TRUE.equals(xxx)进行判断\"]},\"63\":{\"c\":[\"Java-Source\"]},\"64\":{\"c\":[\"Java-Source\"]},\"65\":{\"h\":\"JVM源码解读-Double类\"},\"66\":{\"h\":\"1.类图\"},\"67\":{\"h\":\"2.存储位置\",\"t\":[\"Double类中的静态属性存储在方法区中的静态区。\",\"通过new Double()方法创建出来的对象存储在堆区。\"]},\"68\":{\"h\":\"3.了解IEEE 754\"},\"69\":{\"h\":\"3.1 IEEE 754简介\",\"t\":[\"该标准定义了浮点数的格式还有一些特殊值，它规定了计算机中二进制与十进制浮点数转换的格式及方法。规定了四种表示浮点数值的方法，单精确度（32位）、双精确度（64位）、延伸单精确度（43位以上）与延伸双精确度（79位以上）。 多数编程语言支持单精确度和双精确度，该标准的全称为IEEE二进制浮点数算术标准（ANSI/IEEE Std 754-1985），又称IEC 60559:1989，微处理器系统的二进制浮点数算术（本来的编号是IEC 559:1989）。后来还有“与基数无关的浮点数”的“IEEE 854-1987标准”，有规定基数为2跟10的状况。最新标准是“ISO/IEC/IEEE FDIS 60559:2010”。 Double就是Java的双精度实现。\"]},\"70\":{\"h\":\"3.2 IEEE 754单精度浮点数表示\",\"t\":[\"IEEE-754双精度浮点数(double floating-point)存储为64bit，由符号位(s)、有偏指数(e)、小数部分(f)组成：\",\"组成\",\"描述\",\"位数\",\"位置\",\"sign\",\"符号，0表示正，1表示负\",\"1bit\",\"63\",\"exponent\",\"指数部分\",\"11bit\",\"52-62\",\"fraction\",\"小数部分\",\"52bit\",\"0-51\",\"11位的指数部分可存储00000000000 ~ 11111111111（十进制范围为0 ~ 2047），取值可分为3种情况：\",\"11位指数不为00000000000和11111111111，即在00000000001 ~ 11111111110（1 ~ 2046）范围，这被称为规格化。 指数值为00000000000（0），这被称为非规格化 指数值为11111111111（2047），这是特殊值，有两种情况： 当52位小数部分f全为0时，若符号位是0，则表示+Infinity(正无穷)，若符号位是1，则表示-Infinity(负无穷) 当52位小数部分f不全为0时，表示NaN(Not a Number)\"]},\"71\":{\"h\":\"3.1 属性说明\",\"t\":[\"public final class Double extends Number implements Comparable<Double> { /** * 用来表示正无穷大，按照IEEE 754浮点标准规定，任何有限正数除以0为正无穷大，正无穷的值为0x7ff0000000000000L。 * System.out.println(Double.POSITIVE_INFINITY == Double.longBitsToDouble(0x7ff0000000000000L)); => true * System.out.println(Double.POSITIVE_INFINITY); => Infinity */ public static final double POSITIVE_INFINITY = 1.0 / 0.0; /** * 用来表示负无穷大，任何有限负数除以0为负无穷的，负无穷的值为(0xfff0000000000000L)。 * System.out.println(Double.NEGATIVE_INFINITY == Double.longBitsToDouble(0xfff0000000000000L)); => true * System.out.println(Double.NEGATIVE_INFINITY); => -Infinity */ public static final double NEGATIVE_INFINITY = -1.0 / 0.0; /** * NaN 用来表示处理计算中出现的错误情况，比如0除以0或负数平方根。对于单精度浮点数，IEEE 标准规定 NaN 的指数域全为 1，且尾数域不等于零的浮点数。它并没有要求具体的尾数域，所以 NaN 实际上不非是一个，而是一族。Java这里定义的值为0x7ff8000000000000L。 * System.out.println(Double.isNaN(Double.longBitsToDouble(0x7ff8000000000000L))); // true * System.out.println(Double.longBitsToDouble(0x7ff8000000000000L)); // NaN */ public static final double NaN = 0.0d / 0.0; /** * MAX_VALUE 用来表示Double的最大值 * System.out.println(Double.MAX_VALUE == Double.longBitsToDouble(0x7fefffffffffffffL)); // true * System.out.println(Double.longBitsToDouble(0x7fefffffffffffffL)); //1.7976931348623157E308 */ public static final double MAX_VALUE = 0x1.fffffffffffffP+1023; // 1.7976931348623157e+308 /** * 保持 double -1022类型的最小正正常值的常量。 * System.out.println(Double.MIN_NORMAL == Double.longBitsToDouble(0x0010000000000000L)); // true * @since 1.6 */ public static final double MIN_NORMAL = 0x1.0p-1022; // 2.2250738585072014E-308 /** * 保持 double类型的最小正非零值的常量, 2^-1074 * System.out.println(Double.MIN_VALUE == Double.longBitsToDouble(0x1L)); // true */ public static final double MIN_VALUE = 0x0.0000000000001P-1022; // 4.9e-324 /** * Double类型的最大可能的指数值 * System.out.println(Double.MAX_EXPONENT == Math.getExponent(Double.MAX_VALUE)); // true * System.out.println(Double.MAX_EXPONENT); // 1023 * System.out.println(Math.getExponent(Double.MAX_VALUE)); // 1023 * * @since 1.6 */ public static final int MAX_EXPONENT = 1023; /** * Double类型的最小指数值 * System.out.println(Double.MIN_EXPONENT == Math.getExponent(Double.MIN_NORMAL)); // true * System.out.println(Double.MIN_EXPONENT); // -1022 * System.out.println(Math.getExponent(Double.MIN_NORMAL)); // -1022 * * @since 1.6 */ public static final int MIN_EXPONENT = -1022; /** * 用于表示 double值的位数。 * * @since 1.5 */ public static final int SIZE = 64; /** * 用于表示 double值所占用的字节数。 * * @since 1.8 */ public static final int BYTES = SIZE / Byte.SIZE; } \"]},\"72\":{\"h\":\"3.2 方法说明\"},\"73\":{\"h\":\"3.2.1 Double构造方法\",\"t\":[\"Double的构造方法有2哥，分别是将String类型的数字转为Double类型和将双精度浮点数double数装箱为Double类型\",\"public final class Double extends Number implements Comparable<Double> { public Double(String s) throws NumberFormatException { value = parseDouble(s); } public Double(double value) { this.value = value; } } \"]},\"74\":{\"h\":\"3.2.2 valueOf方法\",\"t\":[\"valueOf方法有两个，一个将String类型的数字转为Double类型的数字和将double数字装箱为Double类型。\",\"public final class Double extends Number implements Comparable<Double> { public static Double valueOf(String s) throws NumberFormatException { return new Double(parseDouble(s)); } public static Double valueOf(double d) { return new Double(d); } } \"]},\"75\":{\"h\":\"3.2.3 parseDouble方法\",\"t\":[\"parseDouble是将字符串类型转为双精度浮点数。valueOf与parseDouble的区别在于valueOf返回Double类型，而parseDouble返回double，valueOf在返回的时候用了构造方法。\",\"public final class Double extends Number implements Comparable<Double> { public static double parseDouble(String s) throws NumberFormatException { return FloatingDecimal.parseDouble(s); } } \"]},\"76\":{\"h\":\"3.2.4 isInfinite方法与isFinite方法\",\"t\":[\"isInfinite:如果此对象表示的值是正无穷大或负无穷大，则返回 true；否则返回false。\",\"isFinite:确定指定值是否为有限值（零、不正常或正常）。\",\"public final class Double extends Number implements Comparable<Double> { public static boolean isInfinite(double v) { return (v == POSITIVE_INFINITY) || (v == NEGATIVE_INFINITY); } public boolean isInfinite() { return isInfinite(value); } public static boolean isFinite(double d) { return Math.abs(d) <= DoubleConsts.MAX_VALUE; } } \",\"// 使用方法 public class Test { public static void main(String[] args) { if (Double.isInfinite(val) || Double.isNaN(val)){ throw new NumberFormatException(\\\"Infinite or NaN\\\"); } } } \"]},\"77\":{\"h\":\"3.2.5 doubleToLongBits方法\",\"t\":[\"public final class Double extends Number implements Comparable<Double> { public static long doubleToLongBits(double value) { long result = doubleToRawLongBits(value); // Check for NaN based on values of bit fields, maximum // exponent and nonzero significand. if ( ((result & DoubleConsts.EXP_BIT_MASK) == DoubleConsts.EXP_BIT_MASK) && (result & DoubleConsts.SIGNIF_BIT_MASK) != 0L) result = 0x7ff8000000000000L; return result; } } \"]},\"78\":{\"h\":\"3.2.6 doubleToRawLongBits native方法与longBitsToDouble native方法\",\"t\":[\"public final class Double extends Number implements Comparable<Double> { // 根据IEEE 754浮点“双格式”位布局返回指定浮点值的表示，保留非数字（NaN）值。 public static native long doubleToRawLongBits(double value); // 返回与给定位表示相对应的 double值。 public static native double longBitsToDouble(long bits); } \"]},\"79\":{\"h\":\"3.2.7 compare/sum/max/min方法\",\"t\":[\"sum方法是用来计算两个double值之和。\",\"max方法是用来查找两个double值的最大值。\",\"min方法是用来查找两个double值的最小值。\",\"public final class Double extends Number implements Comparable<Double> { public static int compare(double d1, double d2) { if (d1 < d2) return -1; // Neither val is NaN, thisVal is smaller if (d1 > d2) return 1; // Neither val is NaN, thisVal is larger // Cannot use doubleToRawLongBits because of possibility of NaNs. long thisBits = Double.doubleToLongBits(d1); long anotherBits = Double.doubleToLongBits(d2); return (thisBits == anotherBits ? 0 : // Values are equal (thisBits < anotherBits ? -1 : // (-0.0, 0.0) or (!NaN, NaN) 1)); // (0.0, -0.0) or (NaN, !NaN) } public static double sum(double a, double b) { return a + b; } public static double max(double a, double b) { return Math.max(a, b); } public static double min(double a, double b) { return Math.min(a, b); } } \"]},\"80\":{\"h\":\"4.说明\"},\"81\":{\"h\":\"4.1 如何判断两个double类型的数字大小\",\"t\":[\"1.使用Double.doubleToLongBits\",\"Double.doubleToLongBits(0.01) == Double.doubleToLongBits(0.01) Double.doubleToLongBits(0.02) > Double.doubleToLongBits(0.01) Double.doubleToLongBits(0.02) < Double.doubleToLongBits(0.01) \",\"将double数转为字符串，判断字符串是否相等\",\"3.使用BigDecimal类型进行判断\",\"double a = 0.001; double b = 0.0011; BigDecimal data1 = new BigDecimal(a); BigDecimal data2 = new BigDecimal(b); data1.compareTo(data2) 非整型数，运算由于精度问题，可能会有误差，建议使用BigDecimal类型！ 当此 BigDecimal 在数字上小于、等于或大于 val 时，返回 -1、0 或 1。 \",\"4.判断是否在误差范围内\",\"double a =...; double b =...; if (Math.abs(a-b) < 1E-6d) { ... } \"]},\"82\":{\"c\":[\"Java-Source\"]},\"83\":{\"c\":[\"Java-Source\"]},\"84\":{\"h\":\"JVM源码解读-Float类\"},\"85\":{\"h\":\"1.类图\",\"t\":[\"Float-Class\"]},\"86\":{\"h\":\"2.存储位置\",\"t\":[\"Float类中的静态属性存储在方法区中的静态区。\",\"通过new Float()方法创建出来的对象存储在堆区。\"]},\"87\":{\"h\":\"3.了解IEEE 754\"},\"88\":{\"h\":\"3.1 IEEE 754简介\",\"t\":[\"在看Float前需要先了解IEEE 754标准，该标准定义了浮点数的格式还有一些特殊值，它规定了计算机中二进制与十进制浮点数转换的格式及方法。规定了四种表示浮点数值的方法，单精确度（32位）、双精确度（64位）、延伸单精确度（43位以上）与延伸双精确度（79位以上）。 多数编程语言支持单精确度和双精确度，该标准的全称为IEEE二进制浮点数算术标准（ANSI/IEEE Std 754-1985），又称IEC 60559:1989，微处理器系统的二进制浮点数算术（本来的编号是IEC 559:1989）。后来还有“与基数无关的浮点数”的“IEEE 854-1987标准”，有规定基数为2跟10的状况。最新标准是“ISO/IEC/IEEE FDIS 60559:2010”。 Float就是Java的单精度实现。\"]},\"89\":{\"h\":\"3.2 IEEE 754单精度浮点数表示\",\"t\":[\"浮点数由三部分组成，分别是符号位s、指数e和尾数f。\",\"在IEEE754标准中，一个规格化的32位浮点数x的真值表示为 x = (−1)s∗(1.f)∗2(e−127) e = E - 127\",\"其中尾数域所表示的值是1.f。由于规格化的浮点数的尾数域最左位（最高有效位）总是1，故这一位经常不予存储，而认为隐藏在小数点的左边。于是用23位字段可以存储24位有效数。\",\"我们举个例子来看，二进制的“01000001001101100000000000000000”表示的浮点数是啥？ 符号位为0，表示正数。 指数为“10000010”，减去127后为3。 尾数对应的值为“1.011011”。 于是最终得到浮点数为“1011.011”，转成十进制为“11.375”。 \"]},\"90\":{\"h\":\"4.源码解读\"},\"91\":{\"h\":\"4.1 属性说明\",\"t\":[\"public final class Float extends Number implements Comparable<Float> { // System.out.println(Float.POSITIVE_INFINITY == Float.intBitsToFloat(0x7f800000)); // true // System.out.println(Float.POSITIVE_INFINITY); ==> Infinity // 用来表示正无穷大，按照IEEE 754浮点标准规定，任何有限正数除以0为正无穷大，正无穷的值为0x7f800000。 public static final float POSITIVE_INFINITY = 1.0f / 0.0f; // System.out.println(Float.NEGATIVE_INFINITY == Float.intBitsToFloat(0xff800000)); // true // System.out.println(Float.NEGATIVE_INFINITY); // -Infinity // 用来表示负无穷大，任何有限负数除以0为负无穷的，负无穷的值为0xff800000。 public static final float NEGATIVE_INFINITY = -1.0f / 0.0f; // System.out.println(Float.isNaN(Float.intBitsToFloat(0x7fc00000))); // true // System.out.println(Float.intBitsToFloat(0x7fc00000)); // NaN // NaN 用来表示处理计算中出现的错误情况，比如0除以0或负数平方根。对于单精度浮点数，IEEE 标准规定 NaN 的指数域全为 1，且尾数域不等于零的浮点数。它并没有要求具体的尾数域，所以 NaN 实际上不非是一个，而是一族。Java这里定义的值为0x7fc00000。 public static final float NaN = 0.0f / 0.0f; // System.out.println(Float.MAX_VALUE == Float.intBitsToFloat(0x7f7fffff)); // true // System.out.println(Float.intBitsToFloat(0x7f7fffff)); // 3.4028235E38 // 用来表示最大的浮点数值，它定义为0x1.fffffeP+127f，这里0x表示十六进制，1.fffffe表示十六进制的小数，P表示2，+表示几次方，这里就是2的127次方，最后的f是转成浮点型。所以最后最大值为3.4028235E38。 public static final float MAX_VALUE = 0x1.fffffeP+127f; // 3.4028235e+38f // System.out.println(Float.MIN_NORMAL == Float.intBitsToFloat(0x00800000)); // true // System.out.println(Float.intBitsToFloat(0x00800000)); // 1.17549435E-38 // 1.6开始存在 // 用来表示最小标准值，它定义为0x1.0p-126f，这里其实就是2的-126次方的了，值为1.17549435E-38f。 public static final float MIN_NORMAL = 0x1.0p-126f; // 1.17549435E-38f // System.out.println(Float.MIN_VALUE == Float.intBitsToFloat(0x1)); // true // System.out.println(Float.intBitsToFloat(0x1)); // 1.4E-45 // 用来表示浮点数最小值，它定义为0x0.000002P-126f，最后的值为1.4e-45f public static final float MIN_VALUE = 0x0.000002P-126f; // 1.4e-45f // System.out.println(Math.getExponent(Float.MAX_VALUE) == Float.MAX_EXPONENT); // true // System.out.println(Math.getExponent(Float.MAX_VALUE)); // 127 // 1.6开始 // 用来表示指数的最大值，这里定为127，这个也是按照IEEE 754浮点标准的规定。 public static final int MAX_EXPONENT = 127; // System.out.println(Math.getExponent(Float.MIN_NORMAL) == Float.MIN_EXPONENT); // true // System.out.println(Float.MIN_EXPONENT); // -126 // 1.6开始 // 用来表示指数的最小值，按照IEEE 754浮点标准的规定，它为-126。 public static final int MIN_EXPONENT = -126; // 用来表示二进制float值的比特数，值为32，静态变量且不可变。 public static final int SIZE = 32; // 用来表示二进制float值的字节数，值为SIZE除于Byte.SIZE，结果为4字节，表示存储一个Float类型的变量占用4字节。 public static final int BYTES = SIZE / Byte.SIZE; } \"]},\"92\":{\"h\":\"4.2 方法说明\"},\"93\":{\"h\":\"Float构造方法\",\"t\":[\"Float构造方法有3个，第一个是将float但精度浮点数转为Float值，第二个是将double值的双精度浮点数转为单精度浮点数，该转化可能出现精度丢失的情况。 第三个构造方法是将字符串转为单精度浮点数。\",\"public final class Float extends Number implements Comparable<Float> { public Float(float value) { this.value = value; } public Float(double value) { this.value = (float)value; } public Float(String s) throws NumberFormatException { value = parseFloat(s); } } \"]},\"94\":{\"h\":\"toHexString方法\",\"t\":[\"该方法是将浮点数转为16进制数的字符串\",\"Floating-point Value\",\"Hexadecimal String\",\"1.0\",\"0x1.0p0\",\"0.25\",\"0x1.0p-2\",\"Float.MAX_VALUE\",\"0x1.fffffep127\",\"Float.MIN_VALUE\",\"0x0.000002p-126\",\"public final class Float extends Number implements Comparable<Float> { public static String toHexString(float f) { if (Math.abs(f) < FloatConsts.MIN_NORMAL && f != 0.0f ) {// float subnormal // Adjust exponent to create subnormal double, then // replace subnormal double exponent with subnormal float // exponent String s = Double.toHexString(Math.scalb((double)f, /* -1022+126 */ DoubleConsts.MIN_EXPONENT- FloatConsts.MIN_EXPONENT)); return s.replaceFirst(\\\"p-1022$\\\", \\\"p-126\\\"); } else // double string will be the same as float string return Double.toHexString(f); } } \",\"public class FloatDemoTest { @Test public void testToHexString() { System.out.println(Float.toHexString(1.0f)); //0x1.0p0 } } \"]},\"95\":{\"h\":\"valueOf方法\",\"t\":[\"改方法有两个，一个是将字符串转为单精度浮点数，一个是将float值转化为Float对象\",\"public final class Float extends Number implements Comparable<Float> { public static Float valueOf(String s) throws NumberFormatException { return new Float(parseFloat(s)); } public static Float valueOf(float f) { return new Float(f); } } \",\"public class FloatDemoTest { @Test public void testValueOf() { System.out.println(Float.valueOf(1.01f)); // 1.01 System.out.println(Float.valueOf(\\\"1.01\\\")); // 1.01 System.out.println(Float.valueOf(\\\"+1.01f\\\")); // 1.01 System.out.println(Float.valueOf(\\\"-1.01f\\\")); // -1.01 System.out.println(Float.valueOf(\\\"1.01F\\\")); // 1.01 System.out.println(Float.valueOf(\\\"1.01d\\\")); // 1.01 System.out.println(Float.valueOf(\\\"1.01I\\\")); // java.lang.NumberFormatException: For input string: \\\"1.01I\\\" } } \"]},\"96\":{\"h\":\"parseFloat方法\",\"t\":[\"该是Java中的内置方法，该方法返回一个新的float，该新float初始化为指定的String表示的值，这由Float类的valueOf方法完成。\",\"public final class Float extends Number implements Comparable<Float> { public static float parseFloat(String s) throws NumberFormatException { return FloatingDecimal.parseFloat(s); } } \"]},\"97\":{\"h\":\"isNaN方法\",\"t\":[\"该方法是判断是否是非数字的值(NAN)， NaN是Not a Number的缩写。\",\"public final class Float extends Number implements Comparable<Float> { public boolean isNaN() { return isNaN(value); } public static boolean isNaN(float v) { return (v != v); } } \"]},\"98\":{\"h\":\"isInfinite与isInfinite方法\",\"t\":[\"isInfinite()方法用于检查此Float对象的无穷大(即正无穷大或负无穷大)\",\"isFinite() 方法如果传递的参数是有限浮点数，则返回 true，否则返回 false(在 NaN 和无穷大参数的情况下)。\",\"public final class Float extends Number implements Comparable<Float> { public static boolean isInfinite(float v) { return (v == POSITIVE_INFINITY) || (v == NEGATIVE_INFINITY); } public static boolean isFinite(float f) { return Math.abs(f) <= FloatConsts.MAX_VALUE; } } \",\"public class FloatDemoTest { @Test public void testInfiniteAndFinite() { System.out.println(Float.isInfinite(Float.POSITIVE_INFINITY)); // true System.out.println(Float.isInfinite(0.05f)); // false System.out.println(Float.isFinite(0.05f)); // true System.out.println(Float.isFinite(Float.POSITIVE_INFINITY)); // false } } \"]},\"99\":{\"h\":\"floatToIntBits方法\",\"t\":[\"Float类中的floatToIntBits()方法是Java中的内置函数，它根据IEEE 754浮点“single format”位布局返回指定浮点值的表示形式。\",\"返回值：该函数返回表示浮点数的整数位。以下是特殊情况：\",\"如果参数为正无穷大，则结果为0x7f800000。\",\"如果参数为负无穷大，则结果为0xff800000。\",\"如果参数为NaN，则结果为0x7fc00000。\",\"public final class Float extends Number implements Comparable<Float> { public static int floatToIntBits(float value) { int result = floatToRawIntBits(value); // Check for NaN based on values of bit fields, maximum // exponent and nonzero significand. if ( ((result & FloatConsts.EXP_BIT_MASK) == FloatConsts.EXP_BIT_MASK) && (result & FloatConsts.SIGNIF_BIT_MASK) != 0) result = 0x7fc00000; return result; } } \"]},\"100\":{\"h\":\"sum/max/min方法\",\"t\":[\"sum方法是用来计算两个float值之和。\",\"max方法是用来查找两个float值的最大值。\",\"min方法是用来查找两个float值的最小值。\",\"public final class Float extends Number implements Comparable<Float> { public static float sum(float a, float b) { return a + b; } public static float max(float a, float b) { return Math.max(a, b); } public static float min(float a, float b) { return Math.min(a, b); } } \"]},\"101\":{\"h\":\"floatToRawIntBits/intBitsToFloat native方法()\",\"t\":[\"Float类中的floatToRawIntBits()方法是Java中的内置函数，该函数根据IEEE 754浮点“single format”位布局返回指定浮点值的表示形式，并保留Not-a-Number(NaN)值。\",\"返回值：该函数返回代表浮点数的位。但是，有3种特殊情况：\",\"* 如果参数为正无穷大，则结果为0x7f800000。 * 如果参数为负无穷大，则结果为0xff800000。 * 如果参数为NaN，则结果为0x7fc00000。 \",\"Java Float 类的 intBitsToFloat() 方法返回与给定位表示相关的浮点值。根据 IEEE 754 浮点 'single format' 位布局，传递的参数被视为浮点值的表示。\",\"此方法返回具有相同位模式的浮点值。\",\"* 如果传递的参数为 0X7f800000，则返回的结果为正无穷大。 * 如果传递的参数为 0Xff800000，则返回的结果为负无穷大。 * 如果传递的参数在 0x7f800001 到 0x7fffffff 之间的范围内或在 0xff800001 到 0xffffffff 之间的范围内，则返回的结果为 Nan。 \",\"public final class Float extends Number implements Comparable<Float> { public static native int floatToRawIntBits(float value); public static native float intBitsToFloat(int bits); } \"]},\"102\":{\"h\":\"5.说明\",\"t\":[\"需要精确计算时不要使用float和double，如果需要精度计算，请使用BigDecimal\",\"不能用浮点数作为循环变量,浮点数不能为循环因子，精度问题会导致 (float)2000000000 == 2000000050为true\",\"浮点型数据判断相等不能直接使用,应采用如下方式\",\"float a =...; float b =...; if (Math.abs(a-b) < 1E-6f) { ... } \"]},\"103\":{\"c\":[\"Java-Source\"]},\"104\":{\"c\":[\"Java-Source\"]},\"105\":{\"h\":\"JVM源码解读-Integer类\"},\"106\":{\"h\":\"1. 类图\",\"t\":[\"Integer-Class\"]},\"107\":{\"h\":\"2. 存储位置\",\"t\":[\"-128-127的值存储在JVM方法区的静态区,是因为Integer内部有一个静态内部类IntegerCache\",\"其余的存储在JVM堆区，都是通过new Integer(x)创建出来\",\"public class IntegerDemoTest { @Test public void newIntegerTest() { Integer a = 3; Integer b = 3; Integer a = 3; <==> Integer.valueOf(3); // a == b 为true，是因为对应同一个IntegerCache游标的地址 System.out.println(a == b); Integer c = 129; Integer d = 129; // c == d 为false,是因为本身就是两个不同的地址 System.out.println(c == d); } } \"]},\"108\":{\"h\":\"3. 源码解读\"},\"109\":{\"h\":\"3.1 主要属性\"},\"110\":{\"h\":\"3.1.1 第一部分-常量参数\",\"t\":[\"/** * A constant holding the minimum value an {@code int} can * have, -2^31. */ @Native public static final int MIN_VALUE = 0x80000000; /** * A constant holding the maximum value an {@code int} can * have, 2^31-1. */ @Native public static final int MAX_VALUE = 0x7fffffff; /** * The {@code Class} instance representing the primitive type * {@code int}. * * @since JDK1.1 */ @SuppressWarnings(\\\"unchecked\\\") public static final Class<Integer> TYPE = (Class<Integer>) Class.getPrimitiveClass(\\\"int\\\"); /** * The number of bits used to represent an {@code int} value in two's * complement binary form. * * @since 1.5 */ @Native public static final int SIZE = 32; /** * The number of bytes used to represent a {@code int} value in two's * complement binary form. * * @since 1.8 */ public static final int BYTES = SIZE / Byte.SIZE; \",\"MIN_VALUE为Integer可定义的最小值，为-2^31 = -2147483648。\",\"MIN_VALUE为Integer可定义的最大值，为2^31-1 = 2147483647。\",\"SIZE用来表示二进制补码形式的int值的比特数，值为32，静态变量且不可变。\",\"BYTES用来表示二进制补码形式的int值的字节数，值为SIZE除于Byte.SIZE，不同机器的值可能不一样，在16位机中为2字节，在32位机和64位机中为4字节。\",\"TYPE表示执行toString后的类型为int, Class的getPrimitiveClass是一个native方法，在Class.c中有个Java_java_lang_Class_getPrimitiveClass方法与之对应，所以JVM层面会通过JVM_FindPrimitiveClass函数根据int字符串获得class，最终到Java层则为Class<Integer>\"]},\"111\":{\"h\":\"3.1.2 第二部分-数组\",\"t\":[\"final static char [] DigitTens = { '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', } ; final static char [] DigitOnes = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', } ; final static char[] digits = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' }; final static int [] sizeTable = { 9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, Integer.MAX_VALUE }; // Requires positive x static int stringSize(int x) { for (int i=0; ; i++) if (x <= sizeTable[i]) return i+1; } \",\"DigitTens和DigitOnes两个数组放到一起讲更好理解，它们主要用于获取0到99之间某个数的十位和个位，比如48，通过DigitTens数组直接取出来十位为4，而通过DigitOnes数组取出来个位为8。\",\"digits数组用于表示数字的所有可能的字符，因为int支持从2进制到36进制，所以这里需要有36个字符才能表示所有不同进制的数字。\",\"sizeTable数组主要用在判断一个int型数字对应字符串的长度。比如相关的方法如下，这种方法可以高效得到对应字符串长度，避免了使用除法或求余等操作。\"]},\"112\":{\"h\":\"3.1.3 IntegerCache静态内部类\",\"t\":[\"private static class IntegerCache { static final int low = -128; static final int high; static final Integer cache[]; static { // high value may be configured by property int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\\\"java.lang.Integer.IntegerCache.high\\\"); // 如果设置了cache的高位，缓存就设置为[-128, high] if (integerCacheHighPropValue != null) { try { // 解析为int的静态值 int i = parseInt(integerCacheHighPropValue); // 取最大值 i = Math.max(i, 127); // 最大值是Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); } catch( NumberFormatException nfe) { // If the property cannot be parsed into an int, ignore it. } } high = h; // cache空间为256 cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k < cache.length; k++) // 生成cache值的缓存空间 cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high >= 127; } private IntegerCache() {} } \",\"IntegerCache为静态内部类，存储在方法区中的静态区，IntegerCache中的cache参数存储在静态区，包含了int可能值的Integer数组，默认范围是[-128,127],最大值可通过指定方式进行调整，在启动时 通过JVM参数Djava.lang.Integer.IntegerCache.high=xxx进行调整。当Integer的值范围在[-128,127]时则直接从缓存中获取对应的Integer对象， 不必重新实例化。这些缓存值都是静态且final的，避免重复的实例化和回收。\",\" public static Integer valueOf(int i) { if (i >= IntegerCache.low && i <= IntegerCache.high) // IntegerCache.cache空间如下: [0] = -128 [1] = -127 ... [129] = 1 [130] = 2 [256] = 127 // e.g. i = 1, 那就从IntegerCache.cache[1+128] => Integer.cache[129] = 1 return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); } \",\"由上述代码可知，当值在[-128,127]之间时，取值是直接从IntegerCache的cache中取值。\"]},\"113\":{\"h\":\"3.2 核心方法\"},\"114\":{\"h\":\"max/min/sum方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { // 取两者之间的最大值 public static int max(int a, int b) { return Math.max(a, b); } // 取两者之间的最小值 public static int min(int a, int b) { return Math.min(a, b); } // 取两者之间的和 public static int sum(int a, int b) { return a + b; } } public class IntegerDemoTest { @Test public void maxTest() { // a => 97, b => 98 => max => 98 System.out.println(Integer.max('a', 'b')); // a => 97, b => 98 => min => 97 System.out.println(Integer.min('a', 'b')); // a => 97, b => 98 => sum => 195 System.out.println(Integer.sum('a', 'b')); } } \"]},\"115\":{\"h\":\"getInteger方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { public static Integer getInteger(String nm) { return getInteger(nm, null); } public static Integer getInteger(String nm, int val) { Integer result = getInteger(nm, null); return (result == null) ? Integer.valueOf(val) : result; } public static Integer getInteger(String nm, Integer val) { String v = null; try { v = System.getProperty(nm); } catch (IllegalArgumentException | NullPointerException e) { } if (v != null) { try { return Integer.decode(v); } catch (NumberFormatException e) { } } return val; } } \",\"Integer.getInteger(String)的功能是根据指定的名称得到系统属性的整数值。第一个参数将被认为是系统属性的名称。系统属性可以通过 System.getProperty(java.lang.String)方法访问得到。属性值字符串将被解释成一个整数，并且以表示这个值的Integer对象形式返回。可能出现的数字格式的详细说明可以在 getProperty 的定义说明里找到。\",\" @Test public void testGetInteger() { System.setProperty(\\\"test-integer\\\", \\\"55\\\"); Integer testNumber = Integer.getInteger(\\\"test-integer\\\"); Assertions.assertEquals(55, testNumber); } \"]},\"116\":{\"h\":\"toString方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { public static String toString(int i) { if (i == Integer.MIN_VALUE) return \\\"-2147483648\\\"; int size = (i < 0) ? stringSize(-i) + 1 : stringSize(i); char[] buf = new char[size]; getChars(i, size, buf); return new String(buf, true); } public String toString() { return toString(value); } public static String toString(int i, int radix) { if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) radix = 10; /* Use the faster version */ if (radix == 10) { return toString(i); } char buf[] = new char[33]; boolean negative = (i < 0); int charPos = 32; if (!negative) { i = -i; } while (i <= -radix) { buf[charPos--] = digits[-(i % radix)]; i = i / radix; } buf[charPos] = digits[-i]; if (negative) { buf[--charPos] = '-'; } return new String(buf, charPos, (33 - charPos)); } } \",\"一共有3个toString方法，两个静态方法一个是非静态方法，第一个toString方法很简单，就是先用stringSize得到数字是多少位，再用getChars获取数字对应的char数组，最后返回一个String类型。第二个toString调用第一个toString。第三个toString方法是带了进制信息的，它会转换成对应进制的字符串。凡是不在2到36进制范围之间的都会被处理成10进制，我们都知道从十进制转成其他进制时就是不断地除于进制数得到余数，然后把余数反过来串起来就是最后结果，所以这里其实也是这样子做的，得到余数后通过digits数组获取到对应的字符，而且这里是用负数的形式来运算的。\"]},\"117\":{\"h\":\"reverseBytes方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { public static int reverseBytes(int i) { return ((i >>> 24) ) | ((i >> 8) & 0xFF00) | ((i << 8) & 0xFF0000) | ((i << 24)); } } \",\"该方法返回通过反转指定int值的二进制补码表示形式的字节顺序而获得的值。\"]},\"118\":{\"h\":\"signum方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { public static int signum(int i) { // HD, Section 2-7 return (i >> 31) | (-i >>> 31); } } \",\"改方法确定输入的数的符号，如果输入的是正数则返回1，如果输入的是零则返回0，如果输入的是负数则返回-1。\",\" @Test public void testSignum() { // the result is -1 System.out.println(Integer.signum(-99)); // the result is 1 System.out.println(Integer.signum(99)); // the result is 0 System.out.println(Integer.signum(0)); } \"]},\"119\":{\"h\":\"reverse方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { public static int reverse(int i) { // HD, Figure 7-1 i = (i & 0x55555555) << 1 | (i >>> 1) & 0x55555555; i = (i & 0x33333333) << 2 | (i >>> 2) & 0x33333333; i = (i & 0x0f0f0f0f) << 4 | (i >>> 4) & 0x0f0f0f0f; i = (i << 24) | ((i & 0xff00) << 8) | ((i >>> 8) & 0xff00) | (i >>> 24); return i; } } \",\"用于返回指定int值的二进制补码二进制表示形式的位的相反顺序。\",\" @Test public void testReverse() { // the result is 100663296 System.out.println(Integer.reverse(96)); } \"]},\"120\":{\"h\":\"rotateLeft/rotateRight方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { public static int rotateRight(int i, int distance) { return (i >>> distance) | (i << -distance); } public static int rotateLeft(int i, int distance) { return (i << distance) | (i >>> -distance); } } \",\"rotateRight该方法通过将指定int值a的二进制补码二进制表示形式向右旋转指定位数来返回获得的值。位向右移，即低位。\",\" public static void main(String[] args){ int a = 64; int shifts = 0; while (shifts < 3) { // It will return the value obtained by rotating left a = Integer.rotateRight(a, 2); System.out.println(a); shifts++; } } \",\"16 4 1 \",\"rotateLeft该方法返回通过将指定int值的二进制补码二进制表示形式向左旋转指定数量的移位位数而获得的值。\",\" public static void main(String[] args){ int a = 2; int shifts = 0; while (shifts < 6) { // It will return the value obtained by rotating left a = Integer.rotateLeft(a, 2); System.out.println(a); shifts++; } } \",\"8 32 128 512 2048 8192 \"]},\"121\":{\"h\":\"numberOfLeadingZeros/numberOfTrailingZeros方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { public static int numberOfLeadingZeros(int i) { // HD, Figure 5-6 if (i == 0) return 32; int n = 1; if (i >>> 16 == 0) { n += 16; i <<= 16; } if (i >>> 24 == 0) { n += 8; i <<= 8; } if (i >>> 28 == 0) { n += 4; i <<= 4; } if (i >>> 30 == 0) { n += 2; i <<= 2; } n -= i >>> 31; return n; } public static int numberOfTrailingZeros(int i) { // HD, Figure 5-14 int y; if (i == 0) return 32; int n = 31; y = i <<16; if (y != 0) { n = n -16; i = y; } y = i << 8; if (y != 0) { n = n - 8; i = y; } y = i << 4; if (y != 0) { n = n - 4; i = y; } y = i << 2; if (y != 0) { n = n - 2; i = y; } return n - ((i << 1) >>> 31); } } \"]},\"122\":{\"h\":\"highestOneBit/lowestOneBit方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { // 返回一个 int 值，最多有一个单个位，位于指定 int 值中最高（“最左边”）一位的位置。 如果指定的值在其二进制补码表示中没有一位，即等于零，则返回零。 public static int highestOneBit(int i) { // HD, Figure 3-1 i |= (i >> 1); i |= (i >> 2); i |= (i >> 4); i |= (i >> 8); i |= (i >> 16); return i - (i >>> 1); } public static int lowestOneBit(int i) { // 返回一个 int 值，最多只有一个一位，位于指定 int 值中最低位（“最右边”）一位的位置。 如果指定的值在其二进制补码表示中没有一位，即等于零，则返回零。 // HD, Section 2-1 return i & -i; } } \"]},\"123\":{\"h\":\"toUnsignedLong方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { /** * * @param x 它是一个用于转换为 unsigned long 的值。 * @return */ public static long toUnsignedLong(int x) { return ((long) x) & 0xffffffffL; } } \",\"它通过无符号转换将参数转换为 long。在对 long 的无符号转换中，long 的 high-order 32 位为零，低 32 位等于整数参数的位。\"]},\"124\":{\"h\":\"divideUnsigned方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { /** * e.g. dividend=55,divisor=5, result为11 * @param dividend 它是一个将被分割的 int 值。 * @param divisor 将进行除法过程的值。 * @return */ public static int divideUnsigned(int dividend, int divisor) { // In lieu of tricky code, for now just use long arithmetic. return (int) (toUnsignedLong(dividend) / toUnsignedLong(divisor)); } } \",\"该方法它返回第一个参数除以第二个参数的无符号商，其中每个参数和结果都被解释为一个无符号值。\"]},\"125\":{\"h\":\"remainderUnsigned方法\",\"t\":[\"public final class Integer extends Number implements Comparable<Integer> { /** * dividend=56, divisor=5, the result is 1 * @param dividend 它是一个将被分割的 int 值 * @param divisor 将进行除法过程的值 * @return */ public static int remainderUnsigned(int dividend, int divisor) { // In lieu of tricky code, for now just use long arithmetic. return (int) (toUnsignedLong(dividend) % toUnsignedLong(divisor)); } } \",\"它返回第一个参数除以第二个参数的无符号余数，其中每个参数和结果都被解释为无符号值。\"]},\"126\":{\"h\":\"4.经典面试题\"},\"127\":{\"h\":\"1. Integer a = 1、Integer a = new Integer(1)、Integer a = Integer.valueOf(1)的区别\",\"t\":[\"Integer a = 1与Integer.valueOf(1)含义相同,所存储的对象在方法区的静态区。new Integer(1)存储的位置在堆区。\",\"-128-127的值存储在JVM方法区的静态区,是因为Integer内部有一个静态内部类IntegerCache。\",\"new Integer(1)存储在JVM堆区，都是通过new Integer(x)创建出来。\"]},\"128\":{\"h\":\"2. 你所了解到IntegerCache\",\"t\":[\"IntegerCache是Integer类的中的内部静态类\",\"IntegerCache中有一个低位，有一个高位，有一个Integer类型的数组缓存。其中低位为-128，不可改变，高位如果不设置则为127,高位可以通过通过JVM参数Djava.lang.Integer.IntegerCache.high=xxx进行调整，用缓存的好处在于快速读取，不用再重新创建对象。\"]},\"129\":{\"h\":\"5. 文章参考\",\"t\":[\"1.https://www.cmsblogs.com/article/1389544331186147328\"]},\"130\":{\"c\":[\"Java-Source\"]},\"131\":{\"c\":[\"Java-Source\"]},\"132\":{\"h\":\"JVM源码解读-Object类\"},\"133\":{\"h\":\"1. 类图\",\"t\":[\"Object\",\"Java的Object是所有其他类的父类，从继承的层次来看它就是最顶层根，所以它也是唯一一个没有父类的类。它包含了对象常用的一些方法，比如getClass、hashCode、equals、clone、toString、notify、wait等常用方法。所以其他类继承了Object后就可以不用重复实现这些方法。这些方法大多数是native方法。\"]},\"134\":{\"h\":\"2.核心代码\",\"t\":[\"public class Object { private static native void registerNatives(); static { registerNatives(); } public final native Class<?> getClass(); public native int hashCode(); public boolean equals(Object obj) { return (this == obj); } protected native Object clone() throws CloneNotSupportedException; public String toString() { return getClass().getName() + \\\"@\\\" + Integer.toHexString(hashCode()); } public final native void notify(); public final native void notifyAll(); public final native void wait(long timeout) throws InterruptedException; public final void wait(long timeout, int nanos) throws InterruptedException { if (timeout < 0) { throw new IllegalArgumentException(\\\"timeout value is negative\\\"); } if (nanos < 0 || nanos > 999999) { throw new IllegalArgumentException( \\\"nanosecond timeout value out of range\\\"); } if (nanos > 0) { timeout++; } wait(timeout); } public final void wait() throws InterruptedException { wait(0); } protected void finalize() throws Throwable { } } \"]},\"135\":{\"h\":\"2.1 registerNatives方法\",\"t\":[\"由于registerNatives方法被static块修饰，所以在加载Object类时就会执行该方法，对应的本地方法为Java_java_lang_Object_registerNatives，如下\",\"static JNINativeMethod methods[] = { {\\\"hashCode\\\", \\\"()I\\\", (void *)&JVM_IHashCode}, {\\\"wait\\\", \\\"(J)V\\\", (void *)&JVM_MonitorWait}, {\\\"notify\\\", \\\"()V\\\", (void *)&JVM_MonitorNotify}, {\\\"notifyAll\\\", \\\"()V\\\", (void *)&JVM_MonitorNotifyAll}, {\\\"clone\\\", \\\"()Ljava/lang/Object;\\\", (void *)&JVM_Clone}, }; JNIEXPORT void JNICALL Java_java_lang_Object_registerNatives(JNIEnv *env, jclass cls) { (*env)->RegisterNatives(env, cls, methods, sizeof(methods)/sizeof(methods[0])); } \",\"它干的事大概就是将Java层的方法名和本地函数对应起来，方便执行引擎在执行字节码时根据这些对应关系表来调用C/C++函数，如下面，将这些方法进行注册，执行引擎执行到hashCode方法时就可以通过关系表来查找到JVM的JVM_IHashCode函数，其中()I还可以得知Java层上的类型应该转为int类型。这个映射其实就可以看成将字符串映射到函数指针。\"]},\"136\":{\"h\":\"2.2 getClass方法\",\"t\":[\"返回此对象的运行时类。返回的Class对象是被所表示类的静态同步方法锁定的对象。\",\"getClass方法调用了本地的Java_java_lang_Object_getClass方法，如果该对象为NULL则直接抛出空指针，否则就就调用GetObjectClass方法，所以真正获取对象的方法为：GetObjectClass\",\"JNIEXPORT jclass JNICALL Java_java_lang_Object_getClass(JNIEnv *env, jobject this) { if (this == NULL) { JNU_ThrowNullPointerException(env, NULL); return 0; } else { return (*env)->GetObjectClass(env, this); } } \",\"Java层的Class在C++层与之对应的则是Kclass，所以关于类的元数据和方法信息可以通过它获得，源码目录为：hotspot/src/share/vm/prims/jni.cpp\",\"JNI_ENTRY(jclass, jni_GetObjectClass(JNIEnv *env, jobject obj)) JNIWrapper(\\\"GetObjectClass\\\"); #ifndef USDT2 DTRACE_PROBE2(hotspot_jni, GetObjectClass__entry, env, obj); #else /* USDT2 */ HOTSPOT_JNI_GETOBJECTCLASS_ENTRY( env, obj); #endif /* USDT2 */ Klass* k = JNIHandles::resolve_non_null(obj)->klass(); jclass ret = (jclass) JNIHandles::make_local(env, k->java_mirror()); #ifndef USDT2 DTRACE_PROBE1(hotspot_jni, GetObjectClass__return, ret); #else /* USDT2 */ HOTSPOT_JNI_GETOBJECTCLASS_RETURN( ret); #endif /* USDT2 */ return ret; JNI_END \",\"用法:\",\"Number n = 0; Class<? extends Number> c = n.getClass(); \"]},\"137\":{\"h\":\"2.3 hashCode方法\",\"t\":[\"hashCode方法一般约定为：\",\"在Java应用程序的执行过程中，只要在同一个对象上多次调用hashCode方法，hashCode方法必须一致地返回相同的整数，前提是该对象上的等号比较中使用的信息没有被修改。这个整数不需要在应用程序的一次执行和同一应用程序的另一次执行之间保持一致。\",\"如果根据equals(Object)方法，两个对象相等，那么在这两个对象上调用hashCode方法必须产生相同的整数结果。\",\"如果根据equals(Object)方法，两个对象是不相等的，那么对每个对象调用hashCode方法必须产生不同的整数结果，这是不要求的。然而，程序员应该意识到，为不相等的对象生成不同的整数结果可能会提高哈希表的性能。 在合理实用的情况下，类Object定义的hashCode方法确实为不同的对象返回不同的整数。(这通常是通过将对象的内部地址转换为整数来实现的，但是Java™编程语言并不需要这种实现技术。)\",\"hashCode方法对应的函数为JVM_IHashCode,源码目录为：hotspot/src/share/vm/prims/jvm.cpp\",\"JVM_ENTRY(jint, JVM_IHashCode(JNIEnv* env, jobject handle)) JVMWrapper(\\\"JVM_IHashCode\\\"); // as implemented in the classic virtual machine; return 0 if object is NULL return handle == NULL ? 0 : ObjectSynchronizer::FastHashCode (THREAD, JNIHandles::resolve_non_null(handle)) ; JVM_END \",\"Java的hashCode主要有JVM_IHashCode实现，而JVM_IHashCode主要调用ObjectSynchronizer::FastHashCode方法实现(该方法源码目录为：hotspot/src/share/vm/runtime/synchronizer.cpp),FastHashCode方法如下：\",\"intptr_t ObjectSynchronizer::FastHashCode (Thread * Self, oop obj) { // 判断是否开启偏向锁，可以使用`-XX:+UseBiasedLocking=true`参数开启偏向锁 if (UseBiasedLocking) { // NOTE: many places throughout the JVM do not expect a safepoint // to be taken here, in particular most operations on perm gen // objects. However, we only ever bias Java instances and all of // the call sites of identity_hash that might revoke biases have // been checked to make sure they can handle a safepoint. The // added check of the bias pattern is to avoid useless calls to // thread-local storage. if (obj->mark()->has_bias_pattern()) { // Box and unbox the raw reference just in case we cause a STW safepoint. Handle hobj (Self, obj) ; // Relaxing assertion for bug 6320749. assert (Universe::verify_in_progress() || !SafepointSynchronize::is_at_safepoint(), \\\"biases should not be seen by VM thread here\\\"); BiasedLocking::revoke_and_rebias(hobj, false, JavaThread::current()); obj = hobj() ; assert(!obj->mark()->has_bias_pattern(), \\\"biases should be revoked by now\\\"); } } // hashCode() is a heap mutator ... // Relaxing assertion for bug 6320749. assert (Universe::verify_in_progress() || !SafepointSynchronize::is_at_safepoint(), \\\"invariant\\\") ; assert (Universe::verify_in_progress() || Self->is_Java_thread() , \\\"invariant\\\") ; assert (Universe::verify_in_progress() || ((JavaThread *)Self)->thread_state() != _thread_blocked, \\\"invariant\\\") ; ObjectMonitor* monitor = NULL; markOop temp, test; intptr_t hash; // 生成针对该对象的标记 markOop mark = ReadStableMark (obj); // object should remain ineligible for biased locking assert (!mark->has_bias_pattern(), \\\"invariant\\\") ; // 如果该对象有正常的对象头，并且已经有hashcode就直接返回该hashcode if (mark->is_neutral()) { hash = mark->hash(); // this is a normal header if (hash) { // if it has hash, just return it return hash; } // 对于没有hashcode的对象则需要重新生成一个对象头 hash = get_next_hash(Self, obj); // allocate a new hash code // 将生成的hash值放回对象头中 temp = mark->copy_set_hash(hash); // merge the hash code into header // use (machine word version) atomic operation to install the hash // 对对象进行原子操作标记，如果能够生成markOop对象标记则直接返回当前对象的hash值 test = (markOop) Atomic::cmpxchg_ptr(temp, obj->mark_addr(), mark); if (test == mark) { return hash; } // If atomic operation failed, we must inflate the header // into heavy weight monitor. We could add more code here // for fast path, but it does not worth the complexity. } else if (mark->has_monitor()) { // 原子操作失败，对对象加重量级锁，这里跟synchronized一样，加重量锁用来生成hash值 monitor = mark->monitor(); temp = monitor->header(); assert (temp->is_neutral(), \\\"invariant\\\") ; hash = temp->hash(); if (hash) { return hash; } // Skip to the following code to reduce code size } else if (Self->is_lock_owned((address)mark->locker())) { temp = mark->displaced_mark_helper(); // this is a lightweight monitor owned assert (temp->is_neutral(), \\\"invariant\\\") ; hash = temp->hash(); // by current thread, check if the displaced if (hash) { // header contains hash code return hash; } // WARNING: // The displaced header is strictly immutable. // It can NOT be changed in ANY cases. So we have // to inflate the header into heavyweight monitor // even the current thread owns the lock. The reason // is the BasicLock (stack slot) will be asynchronously // read by other threads during the inflate() function. // Any change to stack may not propagate to other threads // correctly. } // Inflate the monitor to set hash code // 利用monitor机制在对象头设置hash值 monitor = ObjectSynchronizer::inflate(Self, obj); // Load displaced header and check it has hash code mark = monitor->header(); assert (mark->is_neutral(), \\\"invariant\\\") ; hash = mark->hash(); // 如果hash值为0，重新调用get_next_hash来生成hash值 if (hash == 0) { hash = get_next_hash(Self, obj); temp = mark->copy_set_hash(hash); // merge hash code into header assert (temp->is_neutral(), \\\"invariant\\\") ; test = (markOop) Atomic::cmpxchg_ptr(temp, monitor, mark); if (test != mark) { // The only update to the header in the monitor (outside GC) // is install the hash code. If someone add new usage of // displaced header, please update this code hash = test->hash(); assert (test->is_neutral(), \\\"invariant\\\") ; assert (hash != 0, \\\"Trivial unexpected object/monitor header usage.\\\"); } } // We finally get the hash return hash; } \",\"而生成hashCode的主要方法为：get_next_hash,该方法源码如下：\",\"get_next_hash生成hashcode的方法有6种，分别为：\",\"A randomly generated number.\",\"A function of memory address of the object.\",\"A hardcoded 1 (used for sensitivity testing.)\",\"A sequence.\",\"The memory address of the object, cast to int.\",\"Thread state combined with xorshift (https://en.wikipedia.org/wiki/Xorshift)\",\"根据globals.hpp文件，OpenJDK8默认采用第五种方法。而OpenJDK7 和OpenJDK6都是使用第一种方法，即随机数生成器。当然你也可以使用命令-XX:hashCode=0或者其他数可以设置生成对象的hashcode的策略。\",\" product(intx, hashCode, 5, \\\\ \\\"(Unstable) select hashCode generation algorithm\\\") \\\\ \",\"static inline intptr_t get_next_hash(Thread * Self, oop obj) { intptr_t value = 0 ; if (hashCode == 0) { // This form uses an unguarded global Park-Miller RNG, // so it's possible for two threads to race and generate the same RNG. // On MP system we'll have lots of RW access to a global, so the // mechanism induces lots of coherency traffic. value = os::random() ; } else if (hashCode == 1) { // This variation has the property of being stable (idempotent) // between STW operations. This can be useful in some of the 1-0 // synchronization schemes. intptr_t addrBits = cast_from_oop<intptr_t>(obj) >> 3 ; value = addrBits ^ (addrBits >> 5) ^ GVars.stwRandom ; } else if (hashCode == 2) { value = 1 ; // for sensitivity testing } else if (hashCode == 3) { value = ++GVars.hcSequence ; } else if (hashCode == 4) { value = cast_from_oop<intptr_t>(obj) ; } else { // Marsaglia's xor-shift scheme with thread-specific state // This is probably the best overall implementation -- we'll // likely make this the default in future releases. unsigned t = Self->_hashStateX ; t ^= (t << 11) ; Self->_hashStateX = Self->_hashStateY ; Self->_hashStateY = Self->_hashStateZ ; Self->_hashStateZ = Self->_hashStateW ; unsigned v = Self->_hashStateW ; v = (v ^ (v >> 19)) ^ (t ^ (t >> 8)) ; Self->_hashStateW = v ; value = v ; } value &= markOopDesc::hash_mask; if (value == 0) value = 0xBAD ; assert (value != markOopDesc::no_hash, \\\"invariant\\\") ; TEVENT (hashCode: GENERATE) ; return value; } \",\"对象头中偏向锁和hashcode的冲突\",\"normal object和biased object分别存放的是hashcode和java的线程id。因此也就是说如果调用了本地方法hashCode，就会占用偏向锁对象使用的位置，偏向锁将会失效，晋升为轻量级锁。\",\"总结\",\"OpenJDK默认的hashCode方法实现和对象内存地址无关，在版本6和7中，它是随机生成的数字，在版本8中，它是基于线程状态的数字。（AZUL-ZING的hashcode是基于地址的）\",\"在Hotspot中，hash值会存在标记字中。\",\"hashCode方法和System.identityHashCode()会让对象不能使用偏向锁，所以如果想使用偏向锁，那就最好重写hashCode方法。\",\"如果大量对象跨线程使用，可以禁用偏向锁。\",\"使用-XX:hashCode=4来修改默认的hash方法实现。\"]},\"138\":{\"h\":\"2.4 equals方法\",\"t\":[\"equal方法是一个简单的设计，就是==的比较\",\"equals方法如何使用hashcode\",\"对称性。若 a.equal(b) 返回”true”, 则 b.equal(a) 也必须返回 “true”.\",\"反射性。a.equal(a) 必须返回”true”.\",\"传递性。若a.equal(b) 返回 “true”, 且 b.equal(c)返回 “true”, 则c.equal(a)必返回”true”.\",\"一致性。若a.equal(b) 返回”true”, 只要a, b内容不变，不管重复多少次a.equal(b)必须返回”true”.\",\"任何情况下，a.equals(null)，永远返回是“false”；a.equals(和a不同类型的对象)永远返回是“false”.hashCode()的返回值和equals()的关系.\",\"hashCode()的返回值和equals()的关系.\",\"如果a.equals(b)返回“true”，那么a和b的hashCode()必须相等。\",\"如果a.equals(b)返回“false”，那么a和b的hashCode()有可能相等，也有可能不等。\",\"equals方法的注意事项：\",\"每当重写hashCode方法时，通常都需要重写equals方法，以便维护hashCode方法的一般契约，该契约规定相等的对象必须具有相等的散列码。\"]},\"139\":{\"h\":\"2.5 clone方法\",\"t\":[\"由元数据数据方法可知，clone方法对应的jvm方法为：JVM_Clone, clone方法主要实现对象的克隆功能，根据该对象生成一个相同的新对象（我们常见的类的对象的属性如果是原始类型则会克隆值，但如果是对象则会克隆对象的地址）。 Java的类要实现克隆则需要实现Cloneable接口，if (!klass->is_cloneable())这里会校验是否有实现该接口。然后判断是否是数组分两种情况分配内存空间，新对象为new_obj，接着对new_obj进行copy及C++层数据结构的设置。最后再转成jobject类型方便转成Java层的Object类型。\",\"JVM_ENTRY(jobject, JVM_Clone(JNIEnv* env, jobject handle)) JVMWrapper(\\\"JVM_Clone\\\"); Handle obj(THREAD, JNIHandles::resolve_non_null(handle)); const KlassHandle klass (THREAD, obj->klass()); JvmtiVMObjectAllocEventCollector oam; #ifdef ASSERT // Just checking that the cloneable flag is set correct if (obj->is_array()) { guarantee(klass->is_cloneable(), \\\"all arrays are cloneable\\\"); } else { guarantee(obj->is_instance(), \\\"should be instanceOop\\\"); bool cloneable = klass->is_subtype_of(SystemDictionary::Cloneable_klass()); guarantee(cloneable == klass->is_cloneable(), \\\"incorrect cloneable flag\\\"); } #endif // Check if class of obj supports the Cloneable interface. // All arrays are considered to be cloneable (See JLS 20.1.5) if (!klass->is_cloneable()) { ResourceMark rm(THREAD); THROW_MSG_0(vmSymbols::java_lang_CloneNotSupportedException(), klass->external_name()); } // Make shallow object copy const int size = obj->size(); oop new_obj_oop = NULL; if (obj->is_array()) { const int length = ((arrayOop)obj())->length(); new_obj_oop = CollectedHeap::array_allocate(klass, size, length, CHECK_NULL); } else { new_obj_oop = CollectedHeap::obj_allocate(klass, size, CHECK_NULL); } // 4839641 (4840070): We must do an oop-atomic copy, because if another thread // is modifying a reference field in the clonee, a non-oop-atomic copy might // be suspended in the middle of copying the pointer and end up with parts // of two different pointers in the field. Subsequent dereferences will crash. // 4846409: an oop-copy of objects with long or double fields or arrays of same // won't copy the longs/doubles atomically in 32-bit vm's, so we copy jlongs instead // of oops. We know objects are aligned on a minimum of an jlong boundary. // The same is true of StubRoutines::object_copy and the various oop_copy // variants, and of the code generated by the inline_native_clone intrinsic. assert(MinObjAlignmentInBytes >= BytesPerLong, \\\"objects misaligned\\\"); Copy::conjoint_jlongs_atomic((jlong*)obj(), (jlong*)new_obj_oop, (size_t)align_object_size(size) / HeapWordsPerLong); // Clear the header new_obj_oop->init_mark(); // Store check (mark entire object and let gc sort it out) BarrierSet* bs = Universe::heap()->barrier_set(); assert(bs->has_write_region_opt(), \\\"Barrier set does not have write_region\\\"); bs->write_region(MemRegion((HeapWord*)new_obj_oop, size)); Handle new_obj(THREAD, new_obj_oop); // Special handling for MemberNames. Since they contain Method* metadata, they // must be registered so that RedefineClasses can fix metadata contained in them. if (java_lang_invoke_MemberName::is_instance(new_obj()) && java_lang_invoke_MemberName::is_method(new_obj())) { Method* method = (Method*)java_lang_invoke_MemberName::vmtarget(new_obj()); // MemberName may be unresolved, so doesn't need registration until resolved. if (method != NULL) { methodHandle m(THREAD, method); // This can safepoint and redefine method, so need both new_obj and method // in a handle, for two different reasons. new_obj can move, method can be // deleted if nothing is using it on the stack. m->method_holder()->add_member_name(new_obj()); } } // Caution: this involves a java upcall, so the clone should be // \\\"gc-robust\\\" by this stage. if (klass->has_finalizer()) { assert(obj->is_instance(), \\\"should be instanceOop\\\"); new_obj_oop = InstanceKlass::register_finalizer(instanceOop(new_obj()), CHECK_NULL); new_obj = Handle(THREAD, new_obj_oop); } return JNIHandles::make_local(env, new_obj()); JVM_END \"]},\"140\":{\"h\":\"2.6 toString方法\",\"t\":[\"实现:getClass().getName() + \\\"@\\\" + Integer.toHexString(hashCode());,获取class名称加上@再加上十六进制的hashCode。\"]},\"141\":{\"h\":\"2.7 notify方法\",\"t\":[\"此方法主要是用来唤醒线程，final修饰说明不可重写。与之对应的本地方法为JVM_MonitorNotify,ObjectSynchronizer::notify最终会调用ObjectMonitor::notify(TRAPS)， 这个过程是ObjectSynchronizer会尝试当前线程获取free ObjectMonitor对象，不成功则尝试从全局中获取。\",\"JVM_ENTRY(void, JVM_MonitorNotify(JNIEnv* env, jobject handle)) JVMWrapper(\\\"JVM_MonitorNotify\\\"); Handle obj(THREAD, JNIHandles::resolve_non_null(handle)); ObjectSynchronizer::notify(obj, CHECK); JVM_END \",\"ObjectSynchronizer::notify方法源码在:hotspot/src/share/vm/runtime/synchronizer.cpp,源码如下：\",\"void ObjectSynchronizer::notify(Handle obj, TRAPS) { // 如果使用偏向锁 if (UseBiasedLocking) { BiasedLocking::revoke_and_rebias(obj, false, THREAD); assert(!obj->mark()->has_bias_pattern(), \\\"biases should be revoked by now\\\"); } markOop mark = obj->mark(); if (mark->has_locker() && THREAD->is_lock_owned((address)mark->locker())) { return; } ObjectSynchronizer::inflate(THREAD, obj())->notify(THREAD); } \",\"ObjectMonitor对象包含一个_WaitSet队列对象，此对象保存着所有处于wait状态的线程，用ObjectWaiter对象表示。notify要做的事是先获取_WaitSet队列锁， 再取出_WaitSet队列中第一个ObjectWaiter对象，再根据不同策略处理该对象，比如把它加入到_EntryList队列中。然后再释放_WaitSet队列锁。它并没有释放synchronized对应的锁，所以锁只能等到synchronized同步块结束时才释放。\",\"// Consider: // If the lock is cool (cxq == null && succ == null) and we're on an MP system // then instead of transferring a thread from the WaitSet to the EntryList // we might just dequeue a thread from the WaitSet and directly unpark() it. void ObjectMonitor::notify(TRAPS) { CHECK_OWNER(); if (_WaitSet == NULL) { TEVENT (Empty-Notify) ; return ; } DTRACE_MONITOR_PROBE(notify, this, object(), THREAD); int Policy = Knob_MoveNotifyee ; Thread::SpinAcquire (&_WaitSetLock, \\\"WaitSet - notify\\\") ; ObjectWaiter * iterator = DequeueWaiter() ; if (iterator != NULL) { TEVENT (Notify1 - Transfer) ; guarantee (iterator->TState == ObjectWaiter::TS_WAIT, \\\"invariant\\\") ; guarantee (iterator->_notified == 0, \\\"invariant\\\") ; if (Policy != 4) { iterator->TState = ObjectWaiter::TS_ENTER ; } iterator->_notified = 1 ; Thread * Self = THREAD; iterator->_notifier_tid = Self->osthread()->thread_id(); ObjectWaiter * List = _EntryList ; if (List != NULL) { assert (List->_prev == NULL, \\\"invariant\\\") ; assert (List->TState == ObjectWaiter::TS_ENTER, \\\"invariant\\\") ; assert (List != iterator, \\\"invariant\\\") ; } if (Policy == 0) { // prepend to EntryList if (List == NULL) { iterator->_next = iterator->_prev = NULL ; _EntryList = iterator ; } else { List->_prev = iterator ; iterator->_next = List ; iterator->_prev = NULL ; _EntryList = iterator ; } } else if (Policy == 1) { // append to EntryList if (List == NULL) { iterator->_next = iterator->_prev = NULL ; _EntryList = iterator ; } else { // CONSIDER: finding the tail currently requires a linear-time walk of // the EntryList. We can make tail access constant-time by converting to // a CDLL instead of using our current DLL. ObjectWaiter * Tail ; for (Tail = List ; Tail->_next != NULL ; Tail = Tail->_next) ; assert (Tail != NULL && Tail->_next == NULL, \\\"invariant\\\") ; Tail->_next = iterator ; iterator->_prev = Tail ; iterator->_next = NULL ; } } else if (Policy == 2) { // prepend to cxq // prepend to cxq if (List == NULL) { iterator->_next = iterator->_prev = NULL ; _EntryList = iterator ; } else { iterator->TState = ObjectWaiter::TS_CXQ ; for (;;) { ObjectWaiter * Front = _cxq ; iterator->_next = Front ; if (Atomic::cmpxchg_ptr (iterator, &_cxq, Front) == Front) { break ; } } } } else if (Policy == 3) { // append to cxq iterator->TState = ObjectWaiter::TS_CXQ ; for (;;) { ObjectWaiter * Tail ; Tail = _cxq ; if (Tail == NULL) { iterator->_next = NULL ; if (Atomic::cmpxchg_ptr (iterator, &_cxq, NULL) == NULL) { break ; } } else { while (Tail->_next != NULL) Tail = Tail->_next ; Tail->_next = iterator ; iterator->_prev = Tail ; iterator->_next = NULL ; break ; } } } else { ParkEvent * ev = iterator->_event ; iterator->TState = ObjectWaiter::TS_RUN ; OrderAccess::fence() ; ev->unpark() ; } if (Policy < 4) { iterator->wait_reenter_begin(this); } // _WaitSetLock protects the wait queue, not the EntryList. We could // move the add-to-EntryList operation, above, outside the critical section // protected by _WaitSetLock. In practice that's not useful. With the // exception of wait() timeouts and interrupts the monitor owner // is the only thread that grabs _WaitSetLock. There's almost no contention // on _WaitSetLock so it's not profitable to reduce the length of the // critical section. } Thread::SpinRelease (&_WaitSetLock) ; if (iterator != NULL && ObjectMonitor::_sync_Notifications != NULL) { ObjectMonitor::_sync_Notifications->inc() ; } } \"]},\"142\":{\"h\":\"2.8 notifyAll方法\",\"t\":[\"与notify方法类似，只是在取_WaitSet队列时不是取第一个而是取所有。\"]},\"143\":{\"h\":\"2.9 wait方法\",\"t\":[\"wait方法是让线程等待，它对应的本地方法是JVM_MonitorWait，间接调用了ObjectSynchronizer::wait，\",\"JVM_ENTRY(void, JVM_MonitorWait(JNIEnv* env, jobject handle, jlong ms)) JVMWrapper(\\\"JVM_MonitorWait\\\"); Handle obj(THREAD, JNIHandles::resolve_non_null(handle)); JavaThreadInObjectWaitState jtiows(thread, ms != 0); if (JvmtiExport::should_post_monitor_wait()) { JvmtiExport::post_monitor_wait((JavaThread *)THREAD, (oop)obj(), ms); // The current thread already owns the monitor and it has not yet // been added to the wait queue so the current thread cannot be // made the successor. This means that the JVMTI_EVENT_MONITOR_WAIT // event handler cannot accidentally consume an unpark() meant for // the ParkEvent associated with this ObjectMonitor. } ObjectSynchronizer::wait(obj, ms, CHECK); JVM_END \",\"ObjectSynchronizer::wait源码如下：\",\"// Wait/Notify/NotifyAll // NOTE: must use heavy weight monitor to handle wait() void ObjectSynchronizer::wait(Handle obj, jlong millis, TRAPS) { if (UseBiasedLocking) { BiasedLocking::revoke_and_rebias(obj, false, THREAD); assert(!obj->mark()->has_bias_pattern(), \\\"biases should be revoked by now\\\"); } if (millis < 0) { TEVENT (wait - throw IAX) ; THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), \\\"timeout value is negative\\\"); } // 调用ObjectMonitor::wait方法，用来获取Monitor对象 ObjectMonitor* monitor = ObjectSynchronizer::inflate(THREAD, obj()); DTRACE_MONITOR_WAIT_PROBE(monitor, obj(), THREAD, millis); monitor->wait(millis, true, THREAD); /* This dummy call is in place to get around dtrace bug 6254741. Once that's fixed we can uncomment the following line and remove the call */ // DTRACE_MONITOR_PROBE(waited, monitor, obj(), THREAD); dtrace_waited_probe(monitor, obj, THREAD); } \",\"该方法对应调用ObjectMonitor::wait方法，对应源码如下：\",\"void ObjectMonitor::wait(jlong millis, bool interruptible, TRAPS) { Thread * const Self = THREAD ; assert(Self->is_Java_thread(), \\\"Must be Java thread!\\\"); JavaThread *jt = (JavaThread *)THREAD; DeferredInitialize () ; // Throw IMSX or IEX. CHECK_OWNER(); EventJavaMonitorWait event; // check for a pending interrupt if (interruptible && Thread::is_interrupted(Self, true) && !HAS_PENDING_EXCEPTION) { // post monitor waited event. Note that this is past-tense, we are done waiting. if (JvmtiExport::should_post_monitor_waited()) { // Note: 'false' parameter is passed here because the // wait was not timed out due to thread interrupt. JvmtiExport::post_monitor_waited(jt, this, false); // In this short circuit of the monitor wait protocol, the // current thread never drops ownership of the monitor and // never gets added to the wait queue so the current thread // cannot be made the successor. This means that the // JVMTI_EVENT_MONITOR_WAITED event handler cannot accidentally // consume an unpark() meant for the ParkEvent associated with // this ObjectMonitor. } if (event.should_commit()) { post_monitor_wait_event(&event, 0, millis, false); } TEVENT (Wait - Throw IEX) ; THROW(vmSymbols::java_lang_InterruptedException()); return ; } TEVENT (Wait) ; assert (Self->_Stalled == 0, \\\"invariant\\\") ; Self->_Stalled = intptr_t(this) ; jt->set_current_waiting_monitor(this); // create a node to be put into the queue // Critically, after we reset() the event but prior to park(), we must check // for a pending interrupt. // 创建ObjectWaiter对象 ObjectWaiter node(Self); node.TState = ObjectWaiter::TS_WAIT ; Self->_ParkEvent->reset() ; OrderAccess::fence(); // ST into Event; membar ; LD interrupted-flag // Enter the waiting queue, which is a circular doubly linked list in this case // but it could be a priority queue or any data structure. // _WaitSetLock protects the wait queue. Normally the wait queue is accessed only // by the the owner of the monitor *except* in the case where park() // returns because of a timeout of interrupt. Contention is exceptionally rare // so we use a simple spin-lock instead of a heavier-weight blocking lock. Thread::SpinAcquire (&_WaitSetLock, \\\"WaitSet - add\\\") ; // 将对讲加入ObjectWaiter中 AddWaiter (&node) ; Thread::SpinRelease (&_WaitSetLock) ; if ((SyncFlags & 4) == 0) { _Responsible = NULL ; } intptr_t save = _recursions; // record the old recursion count _waiters++; // increment the number of waiters _recursions = 0; // set the recursion level to be 1 exit (true, Self) ; // exit the monitor guarantee (_owner != Self, \\\"invariant\\\") ; // The thread is on the WaitSet list - now park() it. // On MP systems it's conceivable that a brief spin before we park // could be profitable. // // TODO-FIXME: change the following logic to a loop of the form // while (!timeout && !interrupted && _notified == 0) park() int ret = OS_OK ; int WasNotified = 0 ; { // State transition wrappers OSThread* osthread = Self->osthread(); OSThreadWaitState osts(osthread, true); { ThreadBlockInVM tbivm(jt); // Thread is in thread_blocked state and oop access is unsafe. jt->set_suspend_equivalent(); if (interruptible && (Thread::is_interrupted(THREAD, false) || HAS_PENDING_EXCEPTION)) { // Intentionally empty } else if (node._notified == 0) { if (millis <= 0) { Self->_ParkEvent->park () ; } else { ret = Self->_ParkEvent->park (millis) ; } } // were we externally suspended while we were waiting? if (ExitSuspendEquivalent (jt)) { // TODO-FIXME: add -- if succ == Self then succ = null. jt->java_suspend_self(); } } // Exit thread safepoint: transition _thread_blocked -> _thread_in_vm // Node may be on the WaitSet, the EntryList (or cxq), or in transition // from the WaitSet to the EntryList. // See if we need to remove Node from the WaitSet. // We use double-checked locking to avoid grabbing _WaitSetLock // if the thread is not on the wait queue. // // Note that we don't need a fence before the fetch of TState. // In the worst case we'll fetch a old-stale value of TS_WAIT previously // written by the is thread. (perhaps the fetch might even be satisfied // by a look-aside into the processor's own store buffer, although given // the length of the code path between the prior ST and this load that's // highly unlikely). If the following LD fetches a stale TS_WAIT value // then we'll acquire the lock and then re-fetch a fresh TState value. // That is, we fail toward safety. if (node.TState == ObjectWaiter::TS_WAIT) { Thread::SpinAcquire (&_WaitSetLock, \\\"WaitSet - unlink\\\") ; if (node.TState == ObjectWaiter::TS_WAIT) { DequeueSpecificWaiter (&node) ; // unlink from WaitSet assert(node._notified == 0, \\\"invariant\\\"); node.TState = ObjectWaiter::TS_RUN ; } Thread::SpinRelease (&_WaitSetLock) ; } // The thread is now either on off-list (TS_RUN), // on the EntryList (TS_ENTER), or on the cxq (TS_CXQ). // The Node's TState variable is stable from the perspective of this thread. // No other threads will asynchronously modify TState. guarantee (node.TState != ObjectWaiter::TS_WAIT, \\\"invariant\\\") ; OrderAccess::loadload() ; if (_succ == Self) _succ = NULL ; WasNotified = node._notified ; // Reentry phase -- reacquire the monitor. // re-enter contended monitor after object.wait(). // retain OBJECT_WAIT state until re-enter successfully completes // Thread state is thread_in_vm and oop access is again safe, // although the raw address of the object may have changed. // (Don't cache naked oops over safepoints, of course). // post monitor waited event. Note that this is past-tense, we are done waiting. if (JvmtiExport::should_post_monitor_waited()) { JvmtiExport::post_monitor_waited(jt, this, ret == OS_TIMEOUT); if (node._notified != 0 && _succ == Self) { // In this part of the monitor wait-notify-reenter protocol it // is possible (and normal) for another thread to do a fastpath // monitor enter-exit while this thread is still trying to get // to the reenter portion of the protocol. // // The ObjectMonitor was notified and the current thread is // the successor which also means that an unpark() has already // been done. The JVMTI_EVENT_MONITOR_WAITED event handler can // consume the unpark() that was done when the successor was // set because the same ParkEvent is shared between Java // monitors and JVM/TI RawMonitors (for now). // // We redo the unpark() to ensure forward progress, i.e., we // don't want all pending threads hanging (parked) with none // entering the unlocked monitor. node._event->unpark(); } } if (event.should_commit()) { post_monitor_wait_event(&event, node._notifier_tid, millis, ret == OS_TIMEOUT); } OrderAccess::fence() ; assert (Self->_Stalled != 0, \\\"invariant\\\") ; Self->_Stalled = 0 ; assert (_owner != Self, \\\"invariant\\\") ; ObjectWaiter::TStates v = node.TState ; if (v == ObjectWaiter::TS_RUN) { enter (Self) ; } else { guarantee (v == ObjectWaiter::TS_ENTER || v == ObjectWaiter::TS_CXQ, \\\"invariant\\\") ; ReenterI (Self, &node) ; node.wait_reenter_end(this); } // Self has reacquired the lock. // Lifecycle - the node representing Self must not appear on any queues. // Node is about to go out-of-scope, but even if it were immortal we wouldn't // want residual elements associated with this thread left on any lists. guarantee (node.TState == ObjectWaiter::TS_RUN, \\\"invariant\\\") ; assert (_owner == Self, \\\"invariant\\\") ; assert (_succ != Self , \\\"invariant\\\") ; } // OSThreadWaitState() jt->set_current_waiting_monitor(NULL); guarantee (_recursions == 0, \\\"invariant\\\") ; _recursions = save; // restore the old recursion count _waiters--; // decrement the number of waiters // Verify a few postconditions assert (_owner == Self , \\\"invariant\\\") ; assert (_succ != Self , \\\"invariant\\\") ; assert (((oop)(object()))->mark() == markOopDesc::encode(this), \\\"invariant\\\") ; if (SyncFlags & 32) { OrderAccess::fence() ; } // check if the notification happened if (!WasNotified) { // no, it could be timeout or Thread.interrupt() or both // check for interrupt event, otherwise it is timeout if (interruptible && Thread::is_interrupted(Self, true) && !HAS_PENDING_EXCEPTION) { TEVENT (Wait - throw IEX from epilog) ; THROW(vmSymbols::java_lang_InterruptedException()); } } // NOTE: Spurious wake up will be consider as timeout. // Monitor notify has precedence over thread interrupt. } \",\"该方法创建一个ObjectWaiter对象，接着获取_WaitSet队列锁将ObjectWaiter对象添加到该队列中，再释放队列锁。另外，它还会释放synchronized对应的锁，所以锁没有等到synchronized同步块结束时才释放。\"]},\"144\":{\"h\":\"2.10 finalize方法\",\"t\":[\"finalize方法的主要作用为：当垃圾回收确定对象不再有引用时，由垃圾回收器在对象上调用。子类重写finalize方法以处理系统资源或执行其他清理。\\nJava并不保证哪个线程将调用给定对象的finalize方法。但是，可以保证调用finalize的线程在调用finalize时不会持有任何用户可见的同步锁。如果finalize方法抛出了一个未捕获的异常，则该异常将被忽略，该对象的终结将终止。\\n在为对象调用finalize方法之后，不会采取进一步的操作，直到Java虚拟机再次确定没有任何方法可以让任何尚未死亡的线程访问该对象，包括其他对象或准备完成的类可能的操作，此时对象可能会被丢弃。\\n对于任何给定的对象，Java虚拟机只调用finalize方法一次。\"]},\"145\":{\"c\":[\"Java-Source\"]},\"146\":{\"c\":[\"Java-Source\"]},\"147\":{\"h\":\"java基础\"},\"148\":{\"c\":[\"Java-Basic\"]},\"149\":{\"h\":\"JVM源码解读-Runtime类\"},\"150\":{\"h\":\"1.类图\"},\"151\":{\"h\":\"2.核心方法\"},\"152\":{\"h\":\"2.1 exit方法\"},\"153\":{\"h\":\"2.1.1 源码\",\"t\":[\"public void exit(int status) { SecurityManager security = System.getSecurityManager(); if (security != null) { security.checkExit(status); } Shutdown.exit(status); } \"]},\"154\":{\"h\":\"2.1.2 说明\",\"t\":[\"该方法作用是终止当前正在运行的Java虚拟机，这个status表示退出的状态码，非零表示异常终止。JVM的关闭序列首先调用所有已注册的关闭挂钩，并等待它们完成。然后，如果启用了退出完成，它将运行所有未调用的终结器。最后，它停止了JVM。\",\"exit(0):正常退出，程序正常执行结束退出，Java GC进行垃圾回收，直接退出。\",\"exit(1):是非正常退出，就是说无论程序正在执行与否，都退出。1.如果为非0的话，如果这个方法被调用后，虚拟机已开始关闭序列如果关闭钩子正在运行，此方法将无限期阻塞。 2.如果钩子运行完成，并且未调用的finalizers，在finalization-on-exit允许的情况下启动回收完成，虚拟机停止。\"]},\"155\":{\"h\":\"2.2 addShutdownHook方法\"},\"156\":{\"h\":\"2.2.1 源码\",\"t\":[\"public void addShutdownHook(Thread hook) { SecurityManager sm = System.getSecurityManager(); if (sm != null) { sm.checkPermission(new RuntimePermission(\\\"shutdownHooks\\\")); } ApplicationShutdownHooks.add(hook); } \"]},\"157\":{\"h\":\"2.2.2 说明\",\"t\":[\"jvm中增加一个关闭的钩子，当jvm关闭的时候，会执行系统中已经设置的所有通过方法addShutdownHook添加的钩子，当系统执行完这些钩子后，jvm才会关闭。所以这些钩子可以在jvm关闭的时候进行内存清理、对象销毁等操作。\"]},\"158\":{\"h\":\"2.2.3 示例\",\"t\":[\"public class RuntimeDemo { @Test public void test2() { ExecutorService executor = Executors.newSingleThreadExecutor(); Runtime.getRuntime().addShutdownHook(new Thread(() -> { System.out.println(\\\"优雅的关闭\\\"); executor.shutdown(); })); } } \"]},\"159\":{\"h\":\"2.3 removeShutdownHook方法\"},\"160\":{\"h\":\"2.3.1 源码\",\"t\":[\"public boolean removeShutdownHook(Thread hook) { SecurityManager sm = System.getSecurityManager(); if (sm != null) { sm.checkPermission(new RuntimePermission(\\\"shutdownHooks\\\")); } return ApplicationShutdownHooks.remove(hook); } \"]},\"161\":{\"h\":\"2.3.2 说明\",\"t\":[\"用来关闭添加的钩子已经添加的钩子\"]},\"162\":{\"h\":\"2.3.3 示例\",\"t\":[\"public class RuntimeDemo { @Test public void test3() { Thread thread = new Thread(() -> System.out.println(\\\"Do something1 in Shutdown Hook\\\"), \\\"test\\\"); Runtime.getRuntime().addShutdownHook(thread); Runtime.getRuntime().addShutdownHook(new Thread(() -> System.out.println(\\\"Do something2 in Shutdown Hook2\\\"), \\\"test2\\\")); System.out.println(\\\"hello world\\\"); Runtime.getRuntime().removeShutdownHook(thread); } } \"]},\"163\":{\"h\":\"2.4 halt方法\"},\"164\":{\"h\":\"2.4.1 源码\",\"t\":[\"public void halt(int status) { SecurityManager sm = System.getSecurityManager(); if (sm != null) { sm.checkExit(status); } Shutdown.beforeHalt(); Shutdown.halt(status); } \"]},\"165\":{\"h\":\"2.4.2 说明\",\"t\":[\"可用于强制终止正在运行的JVM, 与exit方法不同，此方法不会触发JVM关闭序列。 因此，当我们调用halt方法时，都不会执行关闭钩子或终结器.\"]},\"166\":{\"h\":\"2.4.3 示例\",\"t\":[\"public class RuntimeDemo { @Test public void test4() { Thread thread = new Thread(() -> System.out.println(\\\"Do something1 in Shutdown Hook\\\"), \\\"test\\\"); Runtime.getRuntime().addShutdownHook(thread); System.out.println(\\\"hello world\\\"); Runtime.getRuntime().removeShutdownHook(thread); Runtime.getRuntime().halt(0); } } \"]},\"167\":{\"h\":\"2.5 runFinalization方法\"},\"168\":{\"h\":\"2.5.1 源码\",\"t\":[\"public void runFinalization() { runFinalization0(); } private static native void runFinalization0(); \"]},\"169\":{\"h\":\"2.5.2 说明\",\"t\":[\"java.lang.Runtime.runFinalization() 方法运行任何等待终结的对象的终结方法。 调用此方法表明 Java 虚拟机花费精力运行已发现已丢弃但尚未运行其 finalize 方法的对象的 finalize 方法。 当控制从方法调用返回时，虚拟机已尽最大努力完成所有未完成的终结。\",\"如果未显式调用 runFinalization 方法，虚拟机会根据需要在单独的线程中自动执行终结过程。 System.runFinalization() 方法是调用此方法的常规且方便的方法。\"]},\"170\":{\"h\":\"2.5.3 说明\",\"t\":[\"public class RuntimeDemo { @Test public void test5() { System.out.println(\\\"Program is starting...\\\"); System.out.println(\\\"Running Finalization...\\\"); Runtime.getRuntime().runFinalization(); System.out.println(\\\"Done.\\\"); System.out.println(\\\"Test.\\\"); } } \"]},\"171\":{\"h\":\"2.6 exec方法\"},\"172\":{\"h\":\"2.6.1 源码\",\"t\":[\"public class Runtime { public Process exec(String command) throws IOException { return exec(command, null, null); } public Process exec(String command, String[] envp) throws IOException { return exec(command, envp, null); } public Process exec(String command, String[] envp, File dir) throws IOException { if (command.isEmpty()) throw new IllegalArgumentException(\\\"Empty command\\\"); StringTokenizer st = new StringTokenizer(command); String[] cmdarray = new String[st.countTokens()]; for (int i = 0; st.hasMoreTokens(); i++) cmdarray[i] = st.nextToken(); return exec(cmdarray, envp, dir); } public Process exec(String cmdarray[]) throws IOException { return exec(cmdarray, null, null); } public Process exec(String[] cmdarray, String[] envp) throws IOException { return exec(cmdarray, envp, null); } public Process exec(String[] cmdarray, String[] envp, File dir) throws IOException { return new ProcessBuilder(cmdarray) .environment(envp) .directory(dir) .start(); } } \"]},\"173\":{\"h\":\"2.6.2 说明\",\"t\":[\"java.lang.Runtime.exec(String command) 方法在单独的进程中执行指定的字符串命令。 这是一种方便的方法。 调用 exec(command) 形式的行为与调用 exec(command, null, null) 完全相同。\",\"java.lang.Runtime.exec(String[] cmdarray) 方法在单独的进程中执行指定的命令和参数。 这是一种方便的方法。 exec(cmdarray) 形式的调用与调用 exec(cmdarray, null, null) 的行为方式完全相同。\",\"java.lang.Runtime.exec(String[] cmdarray, String[] envp) 方法在具有指定环境的单独进程中执行指定的命令和参数。 这是一种方便的方法。 exec(cmdarray, envp) 形式的调用与调用 exec(cmdarray, envp, null) 的行为方式完全相同。\",\"java.lang.Runtime.exec(String command, String[] envp) 方法在具有指定环境的单独进程中执行指定的字符串命令。 这是一种方便的方法。 exec(command, envp) 形式的调用与调用 exec(command, envp, null) 的行为方式完全相同。\",\"java.lang.Runtime.exec(String command, String[] envp, File dir) 方法在具有指定环境和工作目录的单独进程中执行指定的字符串命令。 这是一种方便的方法。 exec(command, envp, dir) 形式的调用与 exec(cmdarray, envp, dir) 调用的行为方式完全相同，其中 cmdarray 是命令中所有标记的数组。 更准确地说，命令字符串使用由调用 new StringTokenizer(command) 创建的 StringTokenizer 分解为标记，而无需进一步修改字符类别。 标记器生成的标记然后以相同的顺序放置在新的字符串数组 cmdarray 中。\"]},\"174\":{\"h\":\"2.6.3 示例\",\"t\":[\"public class RuntimeDemo { @Test public void test6() throws IOException { // create a new array of 2 strings String[] cmdArray = new String[2]; // first argument is the program we want to open cmdArray[0] = \\\"notepad.exe\\\"; // second argument is a txt file we want to open with notepad cmdArray[1] = \\\"example.txt\\\"; // print a message System.out.println(\\\"Executing notepad.exe and opening example.txt\\\"); // create a process and execute cmdArray Process process = Runtime.getRuntime().exec(cmdArray); File dir = new File(\\\"C:/\\\"); // create a process and execute notepad.exe and currect environment Process process2 = Runtime.getRuntime().exec(\\\"notepad.exe\\\", null, dir); // print another message System.out.println(\\\"example.txt should now open.\\\"); } } \"]},\"175\":{\"h\":\"2.7 availableProcessors方法\",\"t\":[\"public native int availableProcessors(); \",\"此方法返回 Java 虚拟机可用的处理器数量。\",\"public class RuntimeDemo { @Test public void test7() { System.out.println(Runtime.getRuntime().availableProcessors()); } } \"]},\"176\":{\"h\":\"2.8 freeMemory方法\",\"t\":[\"public native long freeMemory(); \",\"java.lang.Runtime.freeMemory() 方法返回 Java 虚拟机中的可用内存量。 调用 gc 方法可能会导致 freeMemory 返回的值增加。\",\"public class RuntimeDemo { @Test public void test8() { // 231296640 System.out.println(Runtime.getRuntime().freeMemory()); } } \"]},\"177\":{\"h\":\"2.9 maxMemory方法\",\"t\":[\"public native long maxMemory(); \",\"java.lang.Runtime.maxMemory() 方法返回 Java 虚拟机将尝试使用的最大内存量。 如果没有固有限制，则返回 Long.MAX_VALUE 值。\",\"public class RuntimeDemo { @Test public void test9() { // 3782737920 System.out.println(Runtime.getRuntime().maxMemory()); } } \"]},\"178\":{\"h\":\"2.10 totalMemory方法\",\"t\":[\"public native long totalMemory(); \",\"java.lang.Runtime.totalMemory() 方法返回 Java 虚拟机中的内存总量。 此方法返回的值可能会随时间变化，具体取决于主机环境。 请注意，保存任何给定类型的对象所需的内存量可能取决于实现。\",\"public class RuntimeDemo { @Test public void test10() { // 255328256 System.out.println(Runtime.getRuntime().totalMemory()); } } \"]},\"179\":{\"h\":\"2.11 gc方法\",\"t\":[\"public native void gc(); \",\"java.lang.Runtime.gc() 方法运行垃圾收集器。 调用此方法表明 Java 虚拟机花费精力回收未使用的对象，以使它们当前占用的内存可用于快速重用。 当控制从方法调用返回时，虚拟机已尽最大努力回收所有丢弃的对象。\",\"名称 gc 代表\\\"垃圾收集器\\\"。 虚拟机根据需要在单独的线程中自动执行此回收过程，即使没有显式调用 gc 方法。 System.gc() 方法是调用此方法的常规且方便的方法。\",\"其实基本没什么机会用得到这个命令, 因为这个命令只是建议JVM安排GC运行, 还有可能完全被拒绝。 GC本身是会周期性的自动运行的,由JVM决定运行的时机,而且现在的版本有多种更智能的模式可以选择,还会根据运行的机器自动去做选择,就算真的有性能上的需求,也应该去对GC的运行机制进行微调,而不是通过使用这个命令来实现性能的优化\"]},\"180\":{\"h\":\"2.11 traceInstructions方法\"},\"181\":{\"h\":\"2.11.1 源码\",\"t\":[\"public native void traceInstructions(boolean on); \"]},\"182\":{\"h\":\"2.11.2 说明\",\"t\":[\"java.lang.Runtime.traceInstructions(boolean on) 方法启用/禁用指令跟踪。 如果布尔参数为真，则此方法建议 Java 虚拟机在执行时为虚拟机中的每条指令发出调试信息。 此信息的格式以及将其发送到的文件或其他输出流取决于主机环境。 如果虚拟机不支持此功能，它可能会忽略此请求。跟踪输出的目的地取决于系统。如果布尔参数为假，此方法会导致虚拟机停止执行它正在执行的详细指令跟踪。\"]},\"183\":{\"h\":\"2.12 traceMethodCalls方法\"},\"184\":{\"h\":\"2.12.1 源码\",\"t\":[\"public native void traceMethodCalls(boolean on); \"]},\"185\":{\"h\":\"2.12.2 说明\",\"t\":[\"java.lang.Runtime.traceMethodCalls(boolean on) 方法启用/禁用方法调用的跟踪。如果布尔参数为真，则此方法建议 Java 虚拟机在调用虚拟机时为虚拟机中的每个方法发出调试信息。此信息的格式以及将其发送到的文件或其他输出流取决于主机环境。如果虚拟机不支持此功能，它可能会忽略此请求。使用参数 false 调用此方法表明虚拟机停止发出每次调用的调试信息。\"]},\"186\":{\"h\":\"2.13 load方法\"},\"187\":{\"h\":\"2.13.1 源码\",\"t\":[\"public class Runtime { @CallerSensitive public void load(String filename) { load0(Reflection.getCallerClass(), filename); } synchronized void load0(Class<?> fromClass, String filename) { SecurityManager security = System.getSecurityManager(); if (security != null) { security.checkLink(filename); } if (!(new File(filename).isAbsolute())) { throw new UnsatisfiedLinkError( \\\"Expecting an absolute path of the library: \\\" + filename); } ClassLoader.loadLibrary(fromClass, filename, true); } } \"]},\"188\":{\"h\":\"2.13.2 说明\",\"t\":[\"java.lang.Runtime.load(String filename) 方法将指定的文件名加载为动态库。 文件名参数必须是完整的路径名，（例如 Runtime.getRuntime().load()。首先，如果有安全管理器，则以文件名作为参数调用其 checkLink 方法。这可能会导致安全 异常。这类似于方法 loadLibrary(String)，但它接受一个通用文件名作为参数，而不仅仅是一个库名，允许加载任何本机代码文件。方法 System.load(String) 是 调用此方法的常规和方便的方法。\"]},\"189\":{\"h\":\"2.13.3 示例\",\"t\":[\"public class RuntimeDemo { @Test public void test12() { // print when the program starts System.out.println(\\\"Program starting...\\\"); // load a library that is Windows/System32 folder System.out.println(\\\"Loading Library...\\\"); Runtime.getRuntime().load(\\\"C:/Windows/System32/crypt32.dll\\\"); System.out.println(\\\"Library Loaded.\\\"); } } \"]},\"190\":{\"h\":\"2.14 loadLibrary方法\"},\"191\":{\"h\":\"2.14.1 源码\",\"t\":[\"public class Runtime { @CallerSensitive public void loadLibrary(String libname) { loadLibrary0(Reflection.getCallerClass(), libname); } synchronized void loadLibrary0(Class<?> fromClass, String libname) { SecurityManager security = System.getSecurityManager(); if (security != null) { security.checkLink(libname); } if (libname.indexOf((int)File.separatorChar) != -1) { throw new UnsatisfiedLinkError( \\\"Directory separator should not appear in library name: \\\" + libname); } ClassLoader.loadLibrary(fromClass, libname, false); } } \"]},\"192\":{\"h\":\"2.14.2 说明\",\"t\":[\"java.lang.Runtime.loadLibrary(String filename) 方法加载具有指定库名的动态库。包含本地代码的文件是从本地文件系统从通常获取库文件的地方加载的。此过程的细节取决于实现。从库名到特定文件名的映射是以系统特定的方式完成的。\",\"首先，如果有一个安全管理器，它的 checkLink 方法会以 libname 作为参数调用。 这可能会导致安全异常。 System.loadLibrary(String) 方法是调用此方法的常规且方便的方法。 如果要在类的实现中使用本地方法，标准策略是将本地代码放入库文件（称为 LibFile）中，然后放入静态初始化程序static { System.loadLibrary(\\\"LibFile\\\"); }, 在类声明中。 当类被加载和初始化时，本地方法的必要本地代码实现也将被加载。 如果使用相同的库名称多次调用此方法，则忽略第二次和后续调用。\"]},\"193\":{\"h\":\"2.14.3 示例\",\"t\":[\"public class RuntimeDemo { @Test public void test13() { // print when the program starts System.out.println(\\\"Program starting...\\\"); // load a library that is Windows/System32 folder System.out.println(\\\"Loading Library...\\\"); Runtime.getRuntime().loadLibrary(\\\"C:/Windows/System32/crypt32.dll\\\"); System.out.println(\\\"Library Loaded.\\\"); } } \"]},\"194\":{\"c\":[\"Java-Source\"]},\"195\":{\"c\":[\"Java-Source\"]},\"196\":{\"h\":\"ArrayList源码解析\"},\"197\":{\"h\":\"ArrayList是什么?\"},\"198\":{\"h\":\"为什么要使用ArrayList?\"},\"199\":{\"h\":\"在什么环境下使用ArrayList?\"},\"200\":{\"h\":\"怎么使用ArrayList?\"},\"201\":{\"h\":\"基本API\"},\"202\":{\"h\":\"基本源码\"},\"203\":{\"c\":[\"Java-Collection\"]},\"204\":{\"c\":[\"Java-Collection\",\"ArrayList\"]},\"205\":{\"h\":\"HashSet源码解析\"},\"206\":{\"h\":\"集合关系图谱\",\"t\":[\"Java集合框架包括Collection和Map，Collection主要用于存储对象，Map主要用用于存储键值对数据。\"]},\"207\":{\"h\":\"Collection\"},\"208\":{\"h\":\"List\"},\"209\":{\"h\":\"ArrayList\"},\"210\":{\"h\":\"LinkedList\"},\"211\":{\"h\":\"Set\"},\"212\":{\"h\":\"Hashset\"},\"213\":{\"h\":\"LinkedHashSet\"},\"214\":{\"h\":\"Queue\"},\"215\":{\"h\":\"Deque\"},\"216\":{\"h\":\"ArrayDeque\"},\"217\":{\"c\":[\"Java-Collection\"]},\"218\":{\"c\":[\"Java-Collection\"]},\"219\":{\"h\":\"LinkedList源码解析\"},\"220\":{\"h\":\"集合关系图谱\",\"t\":[\"Java集合框架包括Collection和Map，Collection主要用于存储对象，Map主要用用于存储键值对数据。\"]},\"221\":{\"h\":\"Collection\"},\"222\":{\"h\":\"List\"},\"223\":{\"h\":\"ArrayList\"},\"224\":{\"h\":\"LinkedList\"},\"225\":{\"h\":\"Set\"},\"226\":{\"h\":\"Hashset\"},\"227\":{\"h\":\"LinkedHashSet\"},\"228\":{\"h\":\"Queue\"},\"229\":{\"h\":\"Deque\"},\"230\":{\"h\":\"ArrayDeque\"},\"231\":{\"c\":[\"Java-Collection\"]},\"232\":{\"c\":[\"Java-Collection\"]},\"233\":{\"h\":\"java集合框架知识图谱\"},\"234\":{\"h\":\"集合关系图谱\",\"t\":[\"Java集合框架包括Collection和Map，Collection主要用于存储对象，Map主要用用于存储键值对数据。\"]},\"235\":{\"h\":\"介绍\",\"t\":[\"容器，就是可以容纳其他Java对象的对象。*Java Collections Framework(JCF)*为Java开发者提供了通用的容器，其始于JDK 1.2，优点是:\",\"降低编程难度\",\"提高程序性能\",\"提高API间的互操作性\",\"降低学习难度\",\"降低设计和实现相关API的难度\",\"增加程序的重用性 Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Double等)才能放到容器里。很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。\"]},\"236\":{\"h\":\"Collection\"},\"237\":{\"h\":\"List\"},\"238\":{\"h\":\"ArrayList简介\",\"t\":[\"1.ArrayList继承自AbstractList，实现了List、RandomAccess、Cloneable、Serializable接口。\",\"2.底层基于动态数组实现容量大小动态变化（容量可自动增长）。\",\"3.允许null的存在。\",\"4.ArrayList是支持快速访问、复制、序列化的。基于动态数组实现，支持。\",\"5.ArrayList是非同步的。\",\"6.ArrayList的iterator和listIterator方法返回的迭代器是fail-fast的。\"]},\"239\":{\"h\":\"LinkedList\",\"t\":[\"1.LinkedList继承自AbstractSequentialList，实现了List、Deque、Cloneable、Serializable接口，LinkedList是基于链表实现的，只能顺序访问。\",\"2.LinkedList插入和删除方面要优于ArrayList。\",\"3.LinkedList是非同步的。\",\"4.LinkedList的iterator和listIterator方法返回的迭代器是fail-fast的。\"]},\"240\":{\"h\":\"Set\"},\"241\":{\"h\":\"Hashset\",\"t\":[\"1.HashSet继承自AbstractSet,实现了Set、Cloneable、Serializable接口,底层是一个HashMap。\",\"2.HashSet是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于：hashCode与equals方法。\",\"3.HashSet中元素都是无序的(即存取顺序不一致)；\",\"4.HashSet没有下标选取，只能通过增强for循环或者迭代器取出元素；\",\"5.HashSet是非同步的；\",\"6.HashSet的iterator方法返回的迭代器是fail-fast的。\"]},\"242\":{\"h\":\"LinkedHashSet\",\"t\":[\"1.LinkedHashSet继承自HashSet，实现了Set、Cloneable接口，底层其实是一个LinkedHashMap。\",\"2.不能保证插入和输出的顺序一致。\",\"3.不允许重复的元素插入，可以插入null。\",\"4.HashSet的iterator方法返回的迭代器是fail-fast的。\"]},\"243\":{\"h\":\"TreeSet\",\"t\":[\"1.TreeSet继承自AbstractSet，实现了NavigableSet、Cloneable、Serializable接口。\",\"2.一种基于TreeMap的NavigableSet实现,意味着它支持一系列的导航方法。\",\"3.TreeSet是有序的Set集合,通过TreeMap实现的一个有序的、不可重复的集合，底层维护的是红黑树结构。\",\"4.TreeSet的iterator方法返回的迭代器是fail-fast的。\"]},\"244\":{\"h\":\"Queue\"},\"245\":{\"h\":\"ArrayDeque\",\"t\":[\"1.ArrayDeque是Deque接口的一个实现，使用了可变数组，所以没有容量上的限制。\",\"2.ArrayDeque是线程不安全的，在没有外部同步的情况下，不能再多线程环境下使用。\",\"3.ArrayDeque是Deque的实现类，可以作为栈来使用，效率高于Stack； 也可以作为队列来使用，效率高于LinkedList。\",\"4.ArrayDeque不支持null值。\",\"5.ArrayDeque的iterator方法返回的迭代器是fail-fast的。\",\"6.ArrayDeque两端都可以操作,支持双向迭代器遍历。\"]},\"246\":{\"h\":\"PriorityQueue\",\"t\":[\"1.PriorityQueue继承自AbstractQueue，实现了Serializable接口。\",\"2.PriorityQueue队列元素根据自然排序或者根据具体的比较器排序。\",\"3.PriorityQueue实例化时若未指定初始容量，默认容量为11。\",\"4.PriorityQueue自动扩容。如果容量小于64，两倍增长扩容；否则增长50%,PriorityQueue是无边界容器。\",\"5.PriorityQueue的迭代器不具有以特定顺序访问队列元素。\",\"6.PriorityQueue不支持null元素。\",\"7.PriorityQueue入队出队的时间复杂度O(log(n))\"]},\"247\":{\"h\":\"Map\"},\"248\":{\"h\":\"HashMap\",\"t\":[\"1.HashMap继承自AbstractMap,实现Map、Cloneable、Serializable接口。\",\"2.HashMap 基于哈希表的Map接口实现，是以 key-value 存储形式存在，即主要用来存放键值对。\",\"3.HashMap 的实现不是同步的，这意味着它不是线程安全的。\",\"4.HashMap 中的映射不是有序的(即存取顺序不一致)。\",\"5.JDK1.5-JDK1.7实现的结果是数组+链表，JDK1.8实现结构是数组+链表+红黑树。\",\"6.HashMap key值能为null,value值可以为null，且key值不允许重复。\",\"7.HashMap的iterator方法返回的迭代器是fail-fastl的。\"]},\"249\":{\"h\":\"LinkedHashMap\",\"t\":[\"1.LinkedHashMap继承自HashMap,实现了Map接口。\",\"2.LinkedHashMap维护了一个Entry的双向链表，保证了插入的Entry中的顺序。\",\"3.使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。\",\"4.LinkedHashMap的iterator方法返回的迭代器是fail-fastl的。\"]},\"250\":{\"h\":\"TreeMap\",\"t\":[\"1.TreeMap 继承自AbstractMap，实现了NavigableMap、Cloneable、Serializable接口。\",\"2.TreeMap不允许出现重复的key。\",\"3.TreeMap可以插入null键，null值。\",\"4.TreeMap可以对元素进行排序。\",\"5.TreeMap无序集合（插入和遍历顺序不一致）。\",\"6.TreeMap基于红黑树（Red-Black tree）实现。该映射根据其键的自然顺序进行排序，或者根据创建映射时提供的Comparator进行排序，具体取决于使用的构造方法。\",\"7.TreeMap的iterator方法返回的迭代器是fail-fastl的。\"]},\"251\":{\"h\":\"HashTable\",\"t\":[\"1.与HashMap一样，Hashtable也是一个散列表，是以key-value存储形式存在，即主要用来存放键值对；\",\"2.与HashMap不同，Hashtable的函数都是同步的，这意味着它是线程安全的；\",\"3.Hashtable的key、value都不可以为null，并且，Hashtable中的映射不是有序的；\",\"4.实现结构是数组+单向链表。\"]},\"252\":{\"c\":[\"Java-Collection\"]},\"253\":{\"c\":[\"Java-Collection\"]},\"254\":{\"h\":\"TreeMap&TreeSet源码解析\"},\"255\":{\"h\":\"集合关系图谱\",\"t\":[\"Java集合框架包括Collection和Map，Collection主要用于存储对象，Map主要用用于存储键值对数据。\"]},\"256\":{\"h\":\"Collection\"},\"257\":{\"h\":\"List\"},\"258\":{\"h\":\"ArrayList\"},\"259\":{\"h\":\"LinkedList\"},\"260\":{\"h\":\"Set\"},\"261\":{\"h\":\"Hashset\"},\"262\":{\"h\":\"LinkedHashSet\"},\"263\":{\"h\":\"Queue\"},\"264\":{\"h\":\"Deque\"},\"265\":{\"h\":\"ArrayDeque\"},\"266\":{\"c\":[\"Java-Collection\"]},\"267\":{\"c\":[\"Java-Collection\"]},\"268\":{\"h\":\"Java IO框架图谱\",\"t\":[\"JVM 内存分析图\"]},\"269\":{\"c\":[\"Java-IO\"]},\"270\":{\"h\":\"JVM前奏-JVM堆栈内存简析\"},\"271\":{\"h\":\"1 官网\",\"t\":[\"image-20220310000943157\"]},\"272\":{\"h\":\"1.1 JDK8\"},\"273\":{\"h\":\"1.2 The relation of JDK/JRE/JVM\",\"t\":[\"Reference -> Developer Guides -> 定位到:https://docs.oracle.com/javase/8/docs/index.html\",\"JDK 8 is a superset of JRE 8, and contains everything that is in JRE 8, plus tools such as the compilers and debuggers necessary for developing applets and applications. JRE 8 provides the libraries, the Java Virtual Machine (JVM), and other components to run applets and applications written in the Java programming language. Note that the JRE includes components not required by the Java SE specification, including both standard and non-standard Java components.\",\"image-20220309202058012\",\"image-20220309203220133\"]},\"274\":{\"h\":\"2 源码到类文件\"},\"275\":{\"h\":\"2.1 源码\",\"t\":[\"class Person{ private String name; private int age; private static String address; private final static String hobby=\\\"Programming\\\"; public void say(){ System.out.println(\\\"person say...\\\"); } public int calc(int op1,int op2){ return op1+op2; } } \"]},\"276\":{\"h\":\"2.2 编译过程\",\"t\":[\"Person.java -> 词法分析器 -> tokens流 -> 语法分析器 -> 语法树/抽象语法树 -> 语义分析器 -> 注解抽象语法树 -> 字节码生成器 -> Person.class文件\"]},\"277\":{\"h\":\"2.3 类文件(Class文件)\",\"t\":[\"官网The class File Format :https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html\",\"cafe babe 0000 0034 0027 0a00 0600 1809 0019 001a 0800 1b0a 001c 001d 0700 1e07 001f 0100 046e 616d 6501 0012 4c6a 6176 612f 6c61 6e67 2f53 7472 696e 673b 0100 0361 6765 0100 0149 0100 0761 6464 7265 \",\"image-20220309204252776\",\"minor_version, major_version\",\"minor_version, major_version \",\"constant_pool_count\",\"0027 对应十进制27，代表常量池中27个常量\",\"ClassFile { u4 magic; u2 minor_version; u2 major_version; u2 constant_pool_count; cp_info constant_pool[constant_pool_count-1]; u2 access_flags; u2 this_class; u2 super_class; u2 interfaces_count; u2 interfaces[interfaces_count]; u2 fields_count; field_info fields[fields_count]; u2 methods_count; method_info methods[methods_count]; u2 attributes_count; attribute_info attributes[attributes_count]; } \",\".class字节码文件\",\"魔数与class文件版本 常量池 访问标志 类索引、父类索引、接口索引 字段表集合 方法表集合 属性表集合 \"]},\"278\":{\"h\":\"3 类文件到虚拟机(类加载机制)\",\"t\":[\"image-20220309204625348\"]},\"279\":{\"h\":\"3.1 装载(Load)\",\"t\":[\"Chapter 5. Loading, Linking, and Initializing (oracle.com)\",\"a.找到类文件所在的位置---:磁盘-->类装载器ClassLoader --> 寻找类\",\"b.类文件的信息交给JVM --> 类文件字节码流静态存储结构 --> JVM里卖弄的某一块区域\",\"c.类文件所对应的对象Class ---> JVM\",\"查找和导入class文件 --> JVM --> 堆\",\"(1)通过一个类的全限定名获取定义此类的二进制字节流 (2)将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构 (3)在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口 \"]},\"280\":{\"h\":\"3.2 链接(Link)\"},\"281\":{\"h\":\"3.2.1 验证(Verify):保证被加载类的正确性\",\"t\":[\"文件格式验证\",\"元数据验证\",\"字节码验证\",\"符号引用验证\"]},\"282\":{\"h\":\"3.2.2 准备(Prepare)\",\"t\":[\"为类的静态变量分配内存，并将其初始化为默认值\",\"static int num = 10; // 在准备阶段为num分配内存空间，并初始化其值为0\"]},\"283\":{\"h\":\"3.2.3 解析(Resolve)\",\"t\":[\"把类中的符号引用转换为直接引用\",\"地址：String str =地址是什么，直接对应到内存中某个地址指向。\"]},\"284\":{\"h\":\"3.3 初始化(Initialize)\",\"t\":[\"对类的静态变量，静态代码块执行初始化操作\",\"static int num = 10; // 此时，num才会被真正的赋值为10\"]},\"285\":{\"h\":\"3.4 类加载机制图解\",\"t\":[\"image-20220309205334127\"]},\"286\":{\"h\":\"4 类装载器ClassLoader\",\"t\":[\"在装载(Load)阶段，其中第(1)步:通过类的全限定名获取其定义的二进制字节流，需要借助类装载 器完成，顾名思义，就是用来装载Class文件的。\",\"(1)通过一个类的全限定名获取定义此类的二进制字节流。\"]},\"287\":{\"h\":\"4.1 分类\",\"t\":[\"1）Bootstrap ClassLoader 负责加载$JAVA_HOME中 jre/lib/rt.jar 里所有的class或 Xbootclassoath选项指定的jar包。由C++实现，不是ClassLoader子类。\",\"2）Extension ClassLoader 负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中 jre/lib/*.jar 或 -Djava.ext.dirs指定目录下的jar包。\",\"3）App ClassLoader 负责加载classpath中指定的jar包及 Djava.class.path 所指定目录下的类和 jar包。\",\"4）Custom ClassLoader 通过java.lang.ClassLoader的子类自定义加载class，属于应用程序根据 自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现ClassLoader。\"]},\"288\":{\"h\":\"4.2 图解\",\"t\":[\"image-20220309205433326\"]},\"289\":{\"h\":\"4.3 加载原则\",\"t\":[\"检查某个类是否已经加载：顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检 查，只要某个Classloader已加载，就视为已加载此类，保证此类只所有ClassLoader加载一次。\",\"加载的顺序：加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。\",\"双亲委派机制：\",\"定义：如果一个类加载器在接到加载类的请求时，它首先不会自己尝试去加载这个类，而是把 这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成类加载任务，就 成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。\",\"优势：Java类随着加载它的类加载器一起具备了一种带有优先级的层次关系。比如，Java中的 Object类，它存放在rt.jar之中,无论哪一个类加载器要加载这个类，最终都是委派给处于模型 最顶端的启动类加载器进行加载，因此Object在各种类加载环境中都是同一个类。如果不采用 双亲委派模型，那么由各个类加载器自己取加载的话，那么系统中会存在多种不同的Object 类。\",\"破坏：可以继承ClassLoader类，然后重写其中的loadClass方法，其他方式大家可以自己了解 拓展一下。\"]},\"290\":{\"h\":\"5 运行时数据区(Run-Time Data Areas)\",\"t\":[\"在装载阶段的第(2),(3)步可以发现有运行时数据，堆，方法区等名词\",\"(2)将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\",\"(3)在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口\",\"说白了就是类文件被类装载器装载进来之后，类中的内容(比如变量，常量，方法，对象等这些数 据得要有个去处，也就是要存储起来，存储的位置肯定是在JVM中有对应的空间)\"]},\"291\":{\"h\":\"5.1 官网概括\",\"t\":[\"Chapter 2. The Structure of the Java Virtual Machine (oracle.com)\",\"The Java Virtual Machine defines various run-time data areas that are used during execution of a program. Some of these data areas are created on Java Virtual Machine start-up and are destroyed only when the Java Virtual Machine exits. Other data areas are per thread. Per-thread data areas are created when a thread is created and destroyed when the thread exits >>> Java 虚拟机定义了在程序执行期间使用的各种运行时数据区域。 其中一些数据区是在 Java 虚拟机启动时创建的，只有在 Java 虚拟机退出时才会被销毁。 其他数据区域是每个线程。 每线程数据区在创建线程时创建，在线程退出时销毁 \"]},\"292\":{\"h\":\"5.2 图解\",\"t\":[\"image-20220309213359201\",\"image-20220309211847128\"]},\"293\":{\"h\":\"5.3 常规理解\"},\"294\":{\"h\":\"5.3.1 Method Area(方法区):类信息、常量、静态变量、即使编译器编译之后的代码\",\"t\":[\"在JDK1.8中，方法区存放运行时常量池、方法数据、方法的代码和构造方法，包括类中的实例化方法和接口初始化方法。 存放如下数据：\",\"// 该类型数据存放在方法区 public static final CONSTSANT = \\\"constant\\\"; // 方法区存放方法以及方法的代码 public class Test { // 该方法存放在方法区 public Test() { } // 该方法存放在方法区 public void testMethod() { } } public interface IXXService() { // 该方法存放在方法区 default void test () { } } \",\"The Java Virtual Machine has a method area that is shared among all Java Virtual Machine threads. >> 方法区只有一个，线程共享的内存区域【线程非安全】，生命周期是跟虚拟机一样的。 It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors, including the special methods (§2.9) used in class and instance initialization and interface initialization. >> 类信息、常量、静态变量、即使编译器编译之后的代码。 The method area is created on virtual machine start-up. Although the method area is logically part of the heap【逻辑上是属于堆的一部分】, simple implementations may choose not to either garbage collect or compact it. 垃圾回收不太会讨论方法区的垃圾回收 If memory in the method area cannot be made available to satisfy an allocation request, the Java Virtual Machine throws an OutOfMemoryError. >> OOM \",\"方法区是各个线程共享的内存区域，在虚拟机启动时创建。\",\"用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\",\"虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却又一个别名叫做Non-Heap(非堆)，目 的是与Java堆区分开来。\",\"当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。\",\"此时回看装载阶段的第2步：(2)将这个字节流所代表的静态存储结构转化为方法区的运行时数据 结构\",\"如果这时候把从Class文件到装载的第(1)和(2)步合并起来理解的话，可以画个图\",\"image-20220309211440247\",\"(1)方法区在JDK 8中就是Metaspace，在JDK6或7中就是Perm Space (2)Run-Time Constant Pool\",\"(2)Run-Time Constant Pool\",\"Class文件中除了有类的版本、字段、方法、接口等描述信息外，\",\"还有一项信息就是常量池，用于存放编译时期生成的各种字面量和符号引用，这部分内容将在 类加载后进 入方法区的运行时常量池中存放。\",\"Each run-time constant pool is allocated from the Java Virtual Machine's method area (§2.5.4).s\",\"每个运行时常量池都是从 Java 虚拟机的方法中分配的区域 (§2.5.4).s\"]},\"295\":{\"h\":\"5.3.2 Heap(堆):对象或者数组\",\"t\":[\"Java堆是Java虚拟机所管理内存中最大的一块，在虚拟机启动时创建，被所有线程共享。\",\"Java对象实例以及数组都在堆上分配。\",\"The Java Virtual Machine has a heap that is shared among all Java Virtual Machine threads. 堆只有一个，线程共享内存区域的【线程非安全】，生命周期跟虚拟机一样。 The heap is the run-time data area from which memory for all class instances and arrays is allocated. 存储数据包括：对象或者数组 The heap is created on virtual machine start-up. If a computation requires more heap than can be made available by the automatic storage management system, the Java Virtual Machine throws an OutOfMemoryError. 【如果内存不够，也会发生OOM】 \",\"此时回看装载阶段的第3步：(3)在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方 法区中这些数据的访问入口\",\"此时装载(1)(2)(3)的图可以改动一下\",\"image-20220309211847128\"]},\"296\":{\"h\":\"5.3.3 Java Virtual Machine Stacks(虚拟机栈):局部变量、操作数、返回数\",\"t\":[\"Each Java Virtual Machine thread has a private Java Virtual Machine stack, created at the same time as the thread. A Java Virtual Machine stack stores frames (§2.6) 【每个线程独有的线程栈】 \",\"一个线程的创建代表一个栈，每个方法被当前线程调用了，就代表一个栈帧。\",\"image-20220309220003612\",\"If the computation in a thread requires a larger Java Virtual Machine stack than is permitted, the Java Virtual Machine throws a StackOverflowError. 【StackOverflowError】 If Java Virtual Machine stacks can be dynamically expanded, and expansion is attempted but insufficient memory can be made available to effect the expansion, or if insufficient memory can be made available to create the initial Java Virtual Machine stack for a new thread, the Java Virtual Machine throws an OutOfMemoryError. \",\"经过上面的分析，类加载机制的装载过程已经完成，后续的链接，初始化也会相应的生效。\",\"假如目前的阶段是初始化完成了，后续做啥呢？肯定是Use使用咯，不用的话这样折腾来折腾去 有什么意义？那怎样才能被使用到？换句话说里面内容怎样才能被执行？比如通过主函数main调 用其他方法，这种方式实际上是main线程执行之后调用的方法，即要想使用里面的各种内容，得 要以线程为单位，执行相应的方法才行。\",\"那一个线程执行的状态如何维护？一个线程可以执行多少个方法？这样的关系怎么维护呢？\",\"虚拟机栈是一个线程执行的区域，保存着一个线程中方法的调用状态。换句话说，一个Java线程的运行 状态，由一个虚拟机栈来保存，所以虚拟机栈肯定是线程私有的，独有的，随着线程的创建而创建。\",\"每一个被线程执行的方法，为该栈中的栈帧，即每个方法对应一个栈帧。\",\"调用一个方法，就会向栈中压入一个栈帧；一个方法调用完成，就会把该栈帧从栈中弹出。\"]},\"297\":{\"h\":\"5.3.4 The pc Register(程序计数器)\",\"t\":[\"我们都知道一个JVM进程中有多个线程在执行，而线程中的内容是否能够拥有执行权，是根据 CPU调度来的。\",\"假如线程A正在执行到某个地方，突然失去了CPU的执行权，切换到线程B了，然后当线程A再获 得CPU执行权的时候，怎么能继续执行呢？这就是需要在线程中维护一个变量，记录线程执行到 的位置。\",\"程序计数器占用的内存空间很小，由于Java虚拟机的多线程是通过线程轮流切换，并分配处理器执行时 间的方式来实现的，在任意时刻，一个处理器只会执行一条线程中的指令。因此，为了线程切换后能够 恢复到正确的执行位置，每条线程需要有一个独立的程序计数器(线程私有)。\",\"如果线程正在执行Java方法，则计数器记录的是正在执行的虚拟机字节码指令的地址；\",\"如果正在执行的是Native方法，则这个计数器为空。\",\"The Java Virtual Machine can support many threads of execution at once (JLS §17). Each Java Virtual Machine thread has its own pc (program counter)register. At any point, each Java Virtual Machine thread is executing the code of a single method, namely the current method (§2.6) for that thread. If that method is not native, the pc register contains the address of the Java Virtual Machine instruction currently being executed. If the method currently being executed by the thread is native, the value of the Java Virtual Machine's pcregister is undefined. The Java Virtual Machine's pc register is wide enough to hold a returnAddress or a native pointer on the specific platform \"]},\"298\":{\"h\":\"5.3.5 Native Method Stacks(本地方法栈)\",\"t\":[\"An implementation of the Java Virtual Machine may use conventional stacks, colloquially called \\\"C stacks,\\\" to support native methods (methods written in a language other than the Java programming language). >> Java 虚拟机的实现可以使用传统的堆栈，通俗地称为“C 堆栈”，以支持本地方法（以 Java 编程语言以外的语言编写的方法） \",\"如果当前线程执行的方法是Native类型的，这些方法就会在本地方法栈中执行。\"]},\"299\":{\"c\":[\"JVM\"]},\"300\":{\"c\":[\"JVM\"]},\"301\":{\"h\":\"JVM进行时-JVM堆栈内存详解\"},\"302\":{\"h\":\"1 结合字节码指令理解Java虚拟机栈和栈帧\",\"t\":[\"官网 ：https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.6\",\"栈帧：每个栈帧对应一个被调用的方法，可以理解为一个方法的运行空间。\",\"每个栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向运行时常量池的引用(A reference to the run-time constant pool)、方法返回地址(Return Address)和附加信息。\",\"每个栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向运行时常量池的引用(A reference to the run-time constant pool)、方法返回地址(Return Address)和附加信息。 \",\"操作数栈:以压栈和出栈的方式存储操作数的 \",\"动态链接:每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接(Dynamic Linking)。 \",\"方法返回地址:当一个方法开始执行后,只有两种方式可以退出，一种是遇到方法返回的字节码指令；一种是遇见异常，并且这个异常没有在方法体内得到处理。 \",\"image-20220309223600414\",\"class Person{ private String name=\\\"Jack\\\"; private int age; private final double salary=100; private static String address; private final static String hobby=\\\"Programming\\\"; public void say(){ System.out.println(\\\"person say...\\\"); } public static int calc(int op1,int op2){ op1=3; int result=op1+op2; return result; } public static void order(){ } public static void main(String[] args){ calc(1,2); order(); } } \",\"此时你需要一个能够看懂反编译指令的宝典\",\"比如官网的：https://docs.oracle.com/javase/specs/jvms/se8/html/index.html\",\"class Person { Person(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object.\\\"<init>\\\":()V 4: aload_0 5: ldc #2 // String Jack 7: putfield #3 // Field name:Ljava/lang/String; 10: aload_0 11: ldc2_w #4 // double 100.0d 14: putfield #6 // Field salary:D 17: return public void say(); Code: 0: getstatic #7 // Field java/lang/System.out:Ljava/io/PrintStream; 3: ldc #8 // String person say... 5: invokevirtual #9 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 8: return public static int calc(int, int); Code: 0: iconst_3 //将int类型常量3压入[操作数栈] 1: istore_0 //将int类型值存入局部变量表[局部变量0] ==> op = 3 2: iload_0 //从[局部变量0]中装载int类型值入栈 3: iload_1 //从[局部变量1]中装载int类型值入栈 4: iadd //将栈顶元素弹出栈，执行int类型的加法，结果入栈 5: istore_2 //将栈顶int类型值保存到[局部变量2]中 6: iload_2 //从[局部变量2]中装载int类型值入栈 7: ireturn //从方法中返回int类型的数据 public static void order(); Code: 0: return public static void main(java.lang.String[]); Code: 0: iconst_1 1: iconst_2 2: invokestatic #10 // Method calc:(II)I 5: pop 6: invokestatic #11 // Method order:()V 9: return } \",\"image-20220309223510002\"]},\"303\":{\"h\":\"2 折腾一下\"},\"304\":{\"h\":\"2.1栈指向堆\",\"t\":[\"如果在栈帧中有一个变量，类型为引用类型，比如Object obj=new Object()，这时候就是典型的栈中元素指向堆中的对象。\",\"class Person { public void order() { Object obj = new Object(); } } \",\"image-20220309230040459\"]},\"305\":{\"h\":\"2.2 方法区指向堆\",\"t\":[\"方法区中会存放静态变量，常量等数据。如果是下面这种情况，就是典型的方法区中元素指向堆中的对象。\",\"class Person { private static Object obj=new Object(); // 方法区指向堆 } \",\"image-20220309230410111\"]},\"306\":{\"h\":\"2.3 堆指向方法区\",\"t\":[\"方法区中会包含类的信息，堆中会有对象，那怎么知道对象是哪个类创建的呢？\",\"思考 ：一个对象怎么知道它是由哪个类创建出来的？怎么记录？这就需要了解一个Java对象的具体信息咯。\",\"image-20220309230858070\"]},\"307\":{\"h\":\"2.4 Java对象内存布局\",\"t\":[\"一个Java对象在内存中包括3个部分：对象头、实例数据和对齐填充\",\"image-20220309230913143\"]},\"308\":{\"h\":\"3 内存模型\"},\"309\":{\"h\":\"3.1 图解\",\"t\":[\"一块是非堆区，一块是堆区。 堆区分为两大块，一个是Old区，一个是Young区。 Young区分为两大块，一个是Survivor区（S0+S1），一块是Eden区。 Eden:S0:S1=8:1:1 S0和S1一样大，也可以叫From和To。 \",\"image-20220309233401625\",\"image-20220309233506458\",\"根据之前对于Heap的介绍可以知道，一般对象和数组的创建会在堆中分配内存空间，关键是堆中有这么多区 域，那一个对象的创建到底在哪个区域呢？\"]},\"310\":{\"h\":\"3.2 对象创建所在区域\",\"t\":[\"一般情况下，新创建的对象都会被分配到Eden区，一些特殊的大的对象会直接分配到Old区。\",\"比如有对象A，B，C等创建在Eden区，但是Eden区的内存空间肯定有限，比如有100M，假如已经使用了 100M或者达到一个设定的临界值，这时候就需要对Eden内存空间进行清理，即垃圾收集(Garbage Collect)， 这样的GC我们称之为Minor GC，Minor GC指得是Young区的GC。 经过GC之后，有些对象就会被清理掉，有些对象可能还存活着，对于存活着的对象需要将其复制到Survivor 区，然后再清空Eden区中的这些对象。\"]},\"311\":{\"h\":\"3.3 Survivor区详解\",\"t\":[\"由图解可以看出，Survivor区分为两块S0和S1，也可以叫做From和To。\",\"在同一个时间点上，S0和S1只能有一个区有数据，另外一个是空的。\",\"接着上面的GC来说，比如一开始只有Eden区和From中有对象，To中是空的。\",\"此时进行一次GC操作，From区中对象的年龄就会+1，我们知道Eden区中所有存活的对象会被复制到To区， From区中还能存活的对象会有两个去处。\",\"若对象年龄达到之前设置好的年龄阈值，此时对象会被移动到Old区，如果Eden区和From区没有达到阈值的\",\"对象会被复制到To区。 此时Eden区和From区已经被清空(被GC的对象肯定没了，没有被GC的对象都有了各 自的去处)\",\"这时候From和To交换角色，之前的From变成了To，之前的To变成了From。\",\"也就是说无论如何都要保证名为To的Survivor区域是空的。\",\"Minor GC会一直重复这样的过程，直到To区被填满，然后会将所有对象复制到老年代中。\",\"从上面的分析可以看出，一般Old区都是年龄比较大的对象，或者相对超过了某个阈值的对象。\",\"在Old区也会有GC的操作，Old区的GC我们称作为Major GC。\"]},\"312\":{\"h\":\"3.4 Old区详解\",\"t\":[\"从上面的分析可以看出，一般Old区都是年龄比较大的对象，或者相对超过了某个阈值的对象。 在Old区也会有GC的操作，Old区的GC我们称作为Major GC。\"]},\"313\":{\"h\":\"3.5 对象的一辈子理解\",\"t\":[\"我是一个普通的Java对象,我出生在Eden区,在Eden区我还看到和我长的很像的小兄弟,我们在Eden区中玩了挺长时间。有一天Eden区中的人实在是太多了,我就被迫去了Survivor区的“From”区,自从去了Survivor区,我就开始漂了,有时候在Survivor的“From”区,有时候在Survivor的“To”区,居无定所。直到我18岁的时候,爸爸说我成人了,该去社会上闯闯了。 于是我就去了年老代那边,年老代里,人很多,并且年龄都挺大的,我在这里也认识了很多人。在年老代里,我生活了20年(每次GC加一岁),然后被回收。 \",\"image-20220309235221230\"]},\"314\":{\"h\":\"3.6 常见问题\",\"t\":[\"如何理解Minor/Major/Full GC\",\"Minor GC:新生代 Major GC:老年代 Full GC:新生代+老年代 \",\"为什么需要Survivor区?只有Eden不行吗？\",\"如果没有Survivor,Eden区每进行一次Minor GC,并且没有年龄限制的话，存活的对象就会被送到老年代。 这样一来，老年代很快被填满,触发Major GC(因为Major GC一般伴随着Minor GC,也可以看做触发了Full GC)。 老年代的内存空间远大于新生代,进行一次Full GC消耗的时间比Minor GC长得多。 执行时间长有什么坏处?频发的Full GC消耗的时间很长,会影响大型程序的执行和响应速度。 可能你会说，那就对老年代的空间进行增加或者较少咯。 假如增加老年代空间，更多存活对象才能填满老年代。虽然降低Full GC频率，但是随着老年代空间加大,一旦发生Full GC,执行所需要的时间更长。 假如减少老年代空间，虽然Full GC所需时间减少，但是老年代很快被存活对象填满,Full GC频率增加。 所以Survivor的存在意义,就是减少被送到老年代的对象,进而减少Full GC的发生,Survivor的预筛选保证,只有经历16次Minor GC还能在新生代中存活的对象,才会被送到老年代。 \",\"为什么需要两个Survivor区?\",\"最大的好处就是解决了碎片化。也就是说为什么一个Survivor区不行?第一部分中,我们知道了必须设置Survivor区。假设现在只有一个Survivor区,我们来模拟一下流程: 刚刚新建的对象在Eden中,一旦Eden满了,触发一次Minor GC,Eden中的存活对象就会被移动Survivor区。这样继续循环下去,下一次Eden满了的时候,问题来了,此时进行Minor GC,Eden和Survivor各有一些存活对象,如果此时把Eden区的存活对象硬放到Survivor区,很明显这两部分对象所占有的内存是不连续的,也就导致了内存碎片化。 永远有一个Survivor space是空的,另一个非空的Survivor space无碎片。 \",\"新生代中Eden:S1:S2为什么是8:1:1？\",\"新生代中的可用内存：复制算法用来担保的内存为9：1 可用内存中Eden：S1区为8：1 即新生代中Eden:S1:S2 = 8：1：1 \"]},\"315\":{\"h\":\"4 体验与验证\"},\"316\":{\"h\":\"4.1 使用jvisualvm查看\",\"t\":[\"visualgc插件下载链接 ： https://visualvm.github.io/pluginscenters.html --->选择对应版本链接--->Tools--->Visual GC\",\"image-20220310000015238\"]},\"317\":{\"h\":\"4.1 堆内存溢出\"},\"318\":{\"h\":\"4.1.1 代码\",\"t\":[\"@RestController public class HeapController { List<Person> list=new ArrayList<Person>(); @GetMapping(\\\"/heap\\\") public String heap() throws Exception{ while(true){ list.add(new Person()); Thread.sleep(1); } } } \",\"记得设置参数比如-Xmx20M -Xms20M\"]},\"319\":{\"h\":\"4.1.2 运行结果\",\"t\":[\"访问->http://localhost:8080/heap\",\"Exception in thread \\\"http-nio-8080-exec-2\\\" java.lang.OutOfMemoryError: GC overhead limit exceeded\"]},\"320\":{\"h\":\"4.2 方法区内存溢出\",\"t\":[\"比如向方法区中添加Class的信息\"]},\"321\":{\"h\":\"4.2.1 asm依赖和Class代码\",\"t\":[\"<dependency> <groupId>asm</groupId> <artifactId>asm</artifactId> <version>3.3.1</version> </dependency> \",\"public class MetaspaceUtil extends ClassLoader { public static List<Class<?>> createClasses() { List<Class<?>> classes = new ArrayList<Class<?>>(); for (int i = 0; i < 10000000; ++i) { ClassWriter cw = new ClassWriter(0); cw.visit(Opcodes.V1_1, Opcodes.ACC_PUBLIC, \\\"Class\\\" + i, null, \\\"java/lang/Object\\\", null); MethodVisitor mw = cw.visitMethod(Opcodes.ACC_PUBLIC, \\\"<init>\\\", \\\"()V\\\", null, null); mw.visitVarInsn(Opcodes.ALOAD, 0); mw.visitMethodInsn(Opcodes.INVOKESPECIAL, \\\"java/lang/Object\\\", \\\"<init>\\\", \\\"()V\\\"); mw.visitInsn(Opcodes.RETURN); mw.visitMaxs(1, 1); mw.visitEnd(); MetaspaceUtil test = new MetaspaceUtil(); byte[] code = cw.toByteArray(); Class<?> exampleClass = test.defineClass(\\\"Class\\\" + i, code, 0, code.length); classes.add(exampleClass); } return classes; } } \"]},\"322\":{\"h\":\"4.2.2 代码\",\"t\":[\"@RestController public class NonHeapController { List<Class<?>> list=new ArrayList<Class<?>>(); @GetMapping(\\\"/nonheap\\\") public String heap() throws Exception{ while(true){ list.addAll(MetaspaceUtil.createClasses()); Thread.sleep(5); } } } \"]},\"323\":{\"h\":\"4.2.3 运行结果\",\"t\":[\"访问->http://localhost:8080/nonheap\",\"java.lang.OutOfMemoryError: Metaspace at java.lang.ClassLoader.defineClass1(Native Method) ~[na:1.8.0_191] at java.lang.ClassLoader.defineClass(ClassLoader.java:763) ~[na:1.8.0_191] \"]},\"324\":{\"h\":\"4.3 虚拟机栈\"},\"325\":{\"h\":\"4.3.1 代码演示StackOverFlow\",\"t\":[\"public class StackOverFlowDemo { public static long count=0; public static void method(long i){ System.out.println(count++); method(i); } public static void main(String[] args) { method(1); } } \"]},\"326\":{\"h\":\"4.3.2 运行结果\",\"t\":[\"image-20220310000555900\"]},\"327\":{\"h\":\"4.3.3 理解和说明\",\"t\":[\"Stack Space用来做方法的递归调用时压入Stack Frame(栈帧)。所以当递归调用太深的时候，就有可能耗尽StackSpace，爆出StackOverflow的错误。 -Xss128k：设置每个线程的堆栈大小。JDK 5以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。根据应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。 线程栈的大小是个双刃剑，如果设置过小，可能会出现栈溢出，特别是在该线程内有递归、大的循环时出现溢出的可能性更大，如果该值设置过大，就有影响到创建栈的数量，如果是多线程的应用，就会出现内存溢出的错误。 \"]},\"328\":{\"c\":[\"JVM\"]},\"329\":{\"c\":[\"JVM\"]},\"330\":{\"h\":\"JVM升华-JVM垃圾回收算法以及垃圾回收器\"},\"331\":{\"h\":\"1 Garbage Collect(垃圾回收)\",\"t\":[\"GC Root:虚拟机栈中的本地变量、static成员、常量引用、本地方法栈[Thread C]中的变量\",\"类加载器：如果它找到一条路线，能到到达某个对象，也不能称为垃圾。\",\"Thread:Java进程(线程)\"]},\"332\":{\"h\":\"1.1 如何确定一个对象是垃圾？\"},\"333\":{\"h\":\"1.1.1 引用计数法\",\"t\":[\"对于某个对象而言，只要应用程序中持有该对象的引用，就说明该对象不是垃圾，如果一个对象没有任 何指针对其 引用，它就是垃圾。\",\"弊端 :如果AB相互持有引用，导致永远不能被回收。\"]},\"334\":{\"h\":\"1.1.2 可达性分析\",\"t\":[\"通过GC Root的对象，开始向下寻找，看某个对象是否可达\",\"能作为GC Root:类加载器、Thread、虚拟机栈的本地变量表、static成员、常量引用、本地方法 栈的变量等。\"]},\"335\":{\"h\":\"1.2 垃圾收集算法\"},\"336\":{\"h\":\"1.2.1 标记-清除(Mark-Sweep)\",\"t\":[\"标记\",\"找出内存中需要回收的对象，并且把它们标记出来\",\"此时堆中所有的对象都会被扫描一遍，从而才能确定需要回收的对象，比较耗时\",\"image-20220310004158070\",\"清除\",\"清除掉被标记需要回收的对象，释放出对应的内存空间\",\"image-20220310004225334\",\"缺点：\",\"标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。 (1)标记和清除两个过程都比较耗时，效率不高 (2)会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。 \"]},\"337\":{\"h\":\"1.2.2 复制(Copying)\",\"t\":[\"将内存划分为两块相等的区域，每次只使用其中一块，如下图所示：\",\"当其中一块内存使用完了，就将还存活的对象复制到另外一块上面，然后把已经使用过的内存空间一次 清除掉。\",\"image-20220310004442121\",\"缺点: 空间利用率降低。\"]},\"338\":{\"h\":\"1.2.3 标记-整理(Mark-Compact)\",\"t\":[\"标记过程仍然与\\\"标记-清除\\\"算法一样，但是后续步骤不是直接对可回收对象进行清理，而是让所有存活 的对象都向一端移动，然后直接清理掉端边界以外的内存。\",\"image-20220310004604646\",\"让所有存活的对象都向一端移动，清理掉边界意外的内存。\"]},\"339\":{\"h\":\"1.3 分代收集算法\",\"t\":[\"Young区：复制算法(对象在被分配之后，可能生命周期比较短，Young区复制效率比较高)\",\"Old区：标记清除或标记整理(Old区对象存活时间比较长，复制来复制去没必要，不如做个标记再清理)\"]},\"340\":{\"h\":\"1.4 垃圾收集器\",\"t\":[\"image-20220310004914409\"]},\"341\":{\"h\":\"1.4.1 Serial收集器\",\"t\":[\"Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK1.3.1之前）是虚拟机新生代收集的唯 一选择。\",\"它是一种单线程收集器，不仅仅意味着它只会使用一个CPU或者一条收集线程去完成垃圾收集工作，更 重要的是其在进行垃圾收集的时候需要暂停其他线程。\",\"image-20220310204357425\"]},\"342\":{\"h\":\"1.4.2 ParNew收集器\",\"t\":[\"优点：在多CPU时，比Serial效率高。 缺点：收集过程暂停所有应用程序线程，单CPU时比Serial效率差。 算法：复制算法 适用范围：新生代 应用：运行在Server模式下的虚拟机中首选的新生代收集器 \"]},\"343\":{\"h\":\"1.4.3 Parallel Scavenge收集器\",\"t\":[\"Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集 器，看上去和ParNew一样，但是Parallel Scanvenge更关注系统的吞吐量 。\",\"吞吐量=运行用户代码的时间/(运行用户代码的时间+垃圾收集时间) 比如虚拟机总共运行了100分钟，垃圾收集时间用了1分钟，吞吐量=(100-1)/100=99%。 若吞吐量越大，意味着垃圾收集的时间越短，则用户代码可以充分利用CPU资源，尽快完成程序的运算任务。 \",\"-XX:MaxGCPauseMillis控制最大的垃圾收集停顿时间， -XX:GCTimeRatio直接设置吞吐量的大小。 \"]},\"344\":{\"h\":\"1.4.4 Serial Old收集器\",\"t\":[\"Serial Old收集器是Serial收集器的老年代版本，也是一个单线程收集器，不同的是采用\\\"标记-整理算 法\\\"，运行过程和Serial收集器一样。\",\"image-20220310205235758\"]},\"345\":{\"h\":\"1.4.5 Parallel Old收集器\",\"t\":[\"Parallel Old收集器是Parallel Scavenge收集器的老年代版本，使用多线程和\\\"标记-整理算法\\\"进行垃圾 回收。\"]},\"346\":{\"h\":\"1.4.6 CMS收集器\",\"t\":[\"CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间 为目标的收集器。\",\"采用的是\\\"标记-清除算法\\\",整个过程分为4步\",\"(1)初始标记 CMS initial mark 标记GC Roots能关联到的对象 Stop The World--->速度很快 (2)并发标记 CMS concurrent mark 进行GC Roots Tracing (3)重新标记 CMS remark 修改并发标记因用户程序变动的内容 Stop The World 4)并发清除 CMS concurrent sweep \",\"由于整个过程中，并发标记和并发清除，收集器线程可以与用户线程一起工作，所以总体上来 说，CMS收集器的内存回收过程是与用户线程一起并发地执行的。\",\"优点：并发收集、低停顿 缺点：产生大量空间碎片、并发阶段会降低吞吐量 \",\"image-20220310210434471\"]},\"347\":{\"h\":\"1.4.7 G1收集器\",\"t\":[\"G1特点:\",\"并行与并发 分代收集（仍然保留了分代的概念） 空间整合（整体上属于“标记-整理”算法，不会导致空间碎片） 可预测的停顿（比CMS更先进的地方在于能让使用者明确指定一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒） \",\"使用G1收集器时，Java堆的内存布局与就与其他收集器有很大差别，它将整个Java堆划分为多个 大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再 是物理隔离的了，它们都是一部分Region（不需要连续）的集合。\",\"工作过程分为以下几个阶段：\",\"初始标记（Initial Marking） 标记一下GC Roots能够关联的对象，并且修改TAMS的值，需要暂停用户线程 并发标记（Concurrent Marking） 从GC Roots进行可达性分析，找出存活的对象，与用户线程并发执行 最终标记（Final Marking） 修正在并发标记阶段因为用户程序的并发执行导致变动的数据，需暂停用户线程 筛选回收（Live Data Counting and Evacuation） 对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间制定回收计划 \",\"判断是否需要使用G1收集器？\",\"（1）50%以上的堆被存活对象占用 （2）对象分配和晋升的速度变化非常大 （3）垃圾回收时间比较长 \"]},\"348\":{\"h\":\"1.4.8 垃圾收集器分类\",\"t\":[\"串行收集器->Serial和Serial Old\",\"只能有一个垃圾回收线程执行，用户线程暂停。 适用于内存比较小的嵌入式设备 。\",\"并行收集器[吞吐量优先]->Parallel Scanvenge、Parallel Old\",\"多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。 适用于科学计算、后台处理等若交互场 景 。\",\"并发收集器[停顿时间优先]->CMS、G1\",\"用户线程和垃圾收集线程同时执行(但并不一定是并行的，可能是交替执行的)，垃圾收集线程在执行的 时候不会停顿用户线程的运行。 适用于相对时间有要求的场景，比如Web 。\"]},\"349\":{\"h\":\"1.4.9 理解吞吐量和停顿时间\",\"t\":[\"停顿时间->垃圾收集器 进行 垃圾回收终端应用执行响应的时间\",\"吞吐量->运行用户代码时间/(运行用户代码时间+垃圾收集时间)\",\"停顿时间越短就越适合需要和用户交互的程序，良好的响应速度能提升用户体验； 高吞吐量则可以高效地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。 \"]},\"350\":{\"h\":\"1.4.10 如何选择合适的垃圾收集器\",\"t\":[\"Available Collectors (oracle.com)\",\"优先调整堆的大小让服务器自己来选择\",\"如果内存小于100M，使用串行收集器\",\"如果是单核，并且没有停顿时间要求，使用串行或JVM自己选\",\"如果允许停顿时间超过1秒，选择并行或JVM自己选\",\"如果响应时间最重要，并且不能超过1秒，使用并发收集器 G1收集\"]},\"351\":{\"h\":\"1.4.11 如何开启需要的垃圾收集器\",\"t\":[\"（1）串行 -XX：+UseSerialGC -XX：+UseSerialOldGC （2）并行(吞吐量优先)： -XX：+UseParallelGC -XX：+UseParallelOldGC （3）并发收集器(响应时间优先) -XX：+UseConcMarkSweepGC -XX：+UseG1GC \"]},\"352\":{\"c\":[\"JVM\"]},\"353\":{\"c\":[\"JVM\"]},\"354\":{\"h\":\"JVM实战-JVM性能分析以及调优分析\"},\"355\":{\"h\":\"1.1 JVM参数\"},\"356\":{\"h\":\"1.1.1 标准参数\",\"t\":[\"-version -help -server -cp \"]},\"357\":{\"h\":\"1.1.2 -X参数\",\"t\":[\"-Xint 解释执行 -Xcomp 第一次使用就编译成本地代码 -Xmixed 混合模式，JVM自己来决定 \"]},\"358\":{\"h\":\"1.1.3 -XX参数\",\"t\":[\"使用得最多的参数类型 非标准化参数，相对不稳定，主要用于JVM调优和Debug\",\"a.Boolean类型 格式：-XX:[+-]<name> +或-表示启用或者禁用name属性 比如：-XX:+UseConcMarkSweepGC 表示启用CMS类型的垃圾回收器 -XX:+UseG1GC 表示启用G1类型的垃圾回收器 ** b.非Boolean类型 格式：-XX<name>=<value>表示name属性的值是value 比如：-XX:MaxGCPauseMillis=500 \"]},\"359\":{\"h\":\"1.1.4 其他参数\",\"t\":[\"-Xms1000等价于-XX:InitialHeapSize=1000 -Xmx1000等价于-XX:MaxHeapSize=1000 -Xss100等价于-XX:ThreadStackSize=100 \"]},\"360\":{\"h\":\"1.1.5 查看参数\",\"t\":[\"java -XX:+PrintFlagsFinal -version > flags.txt\"]},\"361\":{\"h\":\"1.1.6 设置参数的方式\",\"t\":[\"开发工具中设置比如IDEA，eclipse\",\"运行jar包的时候:java -XX:+UseG1GC xxx.jar\",\"web容器比如tomcat，可以在脚本中的进行设置\",\"通过jinfo实时调整某个java进程的参数(参数只有被标记为manageable的flags可以被实时修改)\"]},\"362\":{\"h\":\"1.1.7 实践和单位换算\",\"t\":[\"1Byte(字节)=8bit(位) 1KB=1024Byte(字节) 1MB=1024KB 1GB=1024MB 1TB=1024GB \",\"(1)设置堆内存大小和参数打印 -Xmx100M -Xms100M -XX:+PrintFlagsFinal (2)查询+PrintFlagsFinal的值 :=true (3)查询堆内存大小MaxHeapSize := 104857600 (4)换算 104857600(Byte)/1024=102400(KB) 102400(KB)/1024=100(MB) (5)结论 104857600是字节单位 \"]},\"363\":{\"h\":\"1.1.8 常用参数含义\",\"t\":[\"JVM参数说明：JVM参数\",\"调优堆栈内存-堆栈大小典型配置参数\",\"配置参数\",\"说明\",\"示例\",\"-Xmx\",\"设置最大堆大小。\",\"-Xmx3550m，设置JVM最大可用内存为3550 MB。\",\"-Xms\",\"设置JVM初始内存。\",\"-Xms3550m，设置JVM初始内存为3550 MB。此值建议与-Xmx相同，避免每次垃圾回收完成后JVM重新分配内存。\",\"-Xmn\",\"设置年轻代大小。\",\"-Xmn2g，设置年轻代大小为2 GB。整个JVM内存大小=年轻代大小+年老代大小+持久代大小。持久代一般固定大小为64 MB，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。\",\"-Xss\",\"设置线程的栈大小。\",\"-Xss128k，设置每个线程的栈大小为128 KB。说明 JDK 5.0版本以后每个线程栈大小为1 MB，JDK 5.0以前版本每个线程栈大小为256 KB。请依据应用的线程所需内存大小进行调整。在相同物理内存下，减小该值可以生成更多的线程。但是操作系统对一个进程内的线程个数有一定的限制，无法无限生成，一般在3000个~5000个。\",\"-XX:NewRatio=n\",\"设置年轻代和年老代的比值。\",\"-XX:NewRatio=4，设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。如果设置为4，那么年轻代与年老代所占比值为1:4，年轻代占整个堆栈的1/5。\",\"-XX:SurvivorRatio=n\",\"年轻代中Eden区与两个Survivor区的比值。\",\"-XX:SurvivorRatio=4，设置年轻代中Eden区与Survivor区的大小比值。如果设置为4，那么两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6。\",\"-XX:MaxPermSize=n\",\"设置持久代大小。\",\"-XX:MaxPermSize=16m，设置持久代大小为16 MB。\",\"-XX:MaxTenuringThreshold=n\",\"设置垃圾最大年龄。\",\"-XX:MaxTenuringThreshold=0，设置垃圾最大年龄。如果设置为0，那么年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，提高了效率。如果将此值设置为较大值，那么年轻代对象会在Survivor区进行多次复制，增加了对象在年轻代的存活时间，增加在年轻代即被回收的概率。\",\"调优回收器GC-吞吐量优先的GC典型配置参数\",\"配置参数\",\"说明\",\"示例\",\"-XX:+UseParallelGC\",\"选择垃圾收集器为并行收集器。\",\"-Xmx3800m -Xms3800m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20，-XX:+UseParallelGC此配置仅对年轻代有效，即在示例配置下，年轻代使用并发收集，而年老代仍旧使用串行收集。\",\"-XX:ParallelGCThreads\",\"配置并行收集器的线程数，即同时多少个线程一起进行垃圾回收。说明 此值建议配置与处理器数目相等。\",\"-Xmx3800m -Xms3800m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20，-XX:ParallelGCThreads=20表示配置并行收集器的线程数为20个。\",\"-XX:+UseParallelOldGC\",\"配置年老代垃圾收集方式为并行收集。说明 JDK 6.0支持对年老代并行收集。\",\"-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20 -XX:+UseParallelOldGC，-XX:+UseParallelOldGC表示对年老代进行并行收集。\",\"-XX:MaxGCPauseMillis\",\"设置每次年轻代垃圾回收的最长时间，如果无法满足此时间，JVM会自动调整年轻代大小，以满足此值。\",\"-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:MaxGCPauseMillis=100，-XX:MaxGCPauseMillis=100设置每次年轻代垃圾回收的最长时间为100 ms。\",\"-XX:+UseAdaptiveSizePolicy\",\"设置此选项后，并行收集器自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低响应时该间或者收集频率，该值建议使用并行收集器时，并且一直打开。\",\"-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:MaxGCPauseMillis=100 -XX:+UseAda\",\"响应时间优先的GC典型配置参数\",\"配置参数\",\"说明\",\"示例\",\"-XX:+UseConcMarkSweepGC\",\"设置年老代为并发收集。说明 配置了-XX:+UseConcMarkSweepGC，建议年轻代大小使用-Xmn设置。\",\"-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:ParallelGCThreads=20 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC\",\"-XX:+UseParNewGC\",\"设置年轻代为并行收集。可与CMS收集同时使用。JDK 5.0以上版本，JVM根据系统配置自行设置，无需再设置此值。\",\"-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:ParallelGCThreads=20 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC\",\"-XX:CMSFullGCsBeforeCompaction\",\"由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩、整理。\",\"-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection，-XX:CMSFullGCsBeforeCompaction=5，表示运行GC5次后对内存空间进行压缩、整理。\",\"-XX:+UseCMSCompactAtFullCollection\",\"打开对年老代的压缩。说明 该值可能会影响性能，但是可以消除碎片。\",\"-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection\",\"用于辅助的GC典型配置参数\",\"配置参数\",\"说明\",\"-XX:+PrintGC\",\"用于输出GC日志。\",\"-XX:+PrintGCDetails\",\"用于输出GC日志。\",\"-XX:+PrintGCTimeStamps\",\"用于输出GC时间戳（JVM启动到当前日期的总时长的时间戳形式）。示例如下：0.855: [GC (Allocation Failure) [PSYoungGen: 33280K->5118K(38400K)] 33280K->5663K(125952K), 0.0067629 secs] [Times: user=0.01 sys=0.01, real=0.00 secs]\",\"-XX:+PrintGCDateStamps\",\"用于输出GC时间戳（日期形式）。示例如下：2022-01-27T16:22:20.885+0800: 0.299: [GC pause (G1 Evacuation Pause) (young), 0.0036685 secs]\",\"-XX:+PrintHeapAtGC\",\"在进行GC前后打印出堆的信息。\",\"-Xloggc:../logs/gc.log\",\"日志文件的输出路径。\",\"全部参数查看：https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html\"]},\"364\":{\"h\":\"1.2 常用命令\"},\"365\":{\"h\":\"1.2.1 jps\",\"t\":[\"查看java进程\"]},\"366\":{\"h\":\"1.2.2 jinfo\",\"t\":[\"(1)实时查看和调整JVM配置参数\",\"(2)查看\",\"jinfo -flag name PID 查看某个java进程的name属性的值 \",\"(3)修改\",\"参数只有被标记为manageable的flags可以被实时修改\",\"jinfo -flag [+|-] PID\",\"jinfo -flag = PID\",\"(4)查看曾经赋过值的一些参数\",\"jinfo -flags PID \"]},\"367\":{\"h\":\"1.2.3 jstat\",\"t\":[\"(1)查看虚拟机性能统计信息\",\"(2)查看类装载信息\",\"jstat -class PID 1000 10 查看某个java进程的类装载信息，每1000毫秒输出一次，共输出10次 \",\"image-20220310220302064\",\"(3)查看垃圾收集信息\",\"jstat -gc PID 1000 10 \",\"image-20220310220241447\"]},\"368\":{\"h\":\"1.2.4 jstack\",\"t\":[\"(1)查看线程堆栈信息\",\"(2)用法\",\"jstack PID \",\"(3) 排查死锁\",\"DeadLockDemo\",\"//运行主类 public class DeadLockDemo { public static void main(String[] args) { DeadLock d1=new DeadLock(true); DeadLock d2=new DeadLock(false); Thread t1=new Thread(d1); Thread t2=new Thread(d2); t1.start(); t2.start(); } } //定义锁对象 class MyLock{ public static Object obj1=new Object(); public static Object obj2=new Object(); } //死锁代码 class DeadLock implements Runnable{ private boolean flag; DeadLock(boolean flag){ this.flag=flag; } public void run() { if(flag) { while(true) { synchronized(MyLock.obj1) { System.out.println(Thread.currentThread().getName()+\\\"----if获得obj1锁\\\"); synchronized(MyLock.obj2) { System.out.println(Thread.currentThread().getName()+\\\"----if获得obj2锁\\\"); } } } } else { while(true){ synchronized(MyLock.obj2) { System.out.println(Thread.currentThread().getName()+\\\"----否则获得obj2锁\\\"); synchronized(MyLock.obj1) { System.out.println(Thread.currentThread().getName()+\\\"----否则获得obj1锁\\\"); } } } } } } \",\"jstack 分析\",\"image-20220310221042830\"]},\"369\":{\"h\":\"1.2.5 jmap\",\"t\":[\"(1)生成堆转储快照\",\"(2)打印出堆内存相关信息\",\"1.设置：-XX:+PrintFlagsFinal -Xms300M -Xmx300M 2.查看jmap -heap PID \",\"image-20220310221505262\",\"image-20220310221521362\",\"(3)dump出堆内存相关信息、\",\"jmap -dump:format=b,file=heap.hprof PID jmap -dump:format=b,file=heap.hprof 44808 \",\"image-20220310221914338\",\"(4)要是在发生堆内存溢出的时候，能自动dump出该文件就好了\",\"一般在开发中，JVM参数可以加上下面两句，这样内存溢出时，会自动dump出该文件\",\"-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=heap.hprof \",\"设置堆内存大小: -Xms20M -Xmx20M 启动，然后访问localhost:9090/heap，使得堆内存溢出 \",\"(5)关于dump下来的文件\",\"一般dump下来的文件可以结合工具来分析\"]},\"370\":{\"h\":\"1.3 常用工具\"},\"371\":{\"h\":\"1.3.1 jconsole\",\"t\":[\"JConsole工具是JDK自带的可视化监控工具。查看java应用程序的运行概况、监控堆信息、永久区使用 情况、类加载情况等。\",\"启动命令：jconsole\"]},\"372\":{\"h\":\"1.3.2 jvisualvm\",\"t\":[\"启动命令：jvisualvm\"]},\"373\":{\"h\":\"1.3.2.1 监控本地Java进程\",\"t\":[\"image-20220310222954259\"]},\"374\":{\"h\":\"1.3.2.2 监控远端Java进程\",\"t\":[\"比如监控远端tomcat，演示部署在阿里云服务器上的tomcat\",\"(1)在visualvm中选中“远程”，右击“添加”\",\"(2)主机名上写服务器的ip地址，比如31.100.39.63，然后点击“确定”\",\"(3)右击该主机“31.100.39.63”，添加“JMX”[也就是通过JMX技术具体监控远端服务器哪个Java进程]\",\"(4)要想让服务器上的tomcat被连接，需要改一下 bin/catalina.sh 这个文件\",\"JAVA_OPTS=\\\"$JAVA_OPTS -Dcom.sun.management.jmxremote - Djava.rmi.server.hostname=31.100.39.63 -Dcom.sun.management.jmxremote.port=8998 -Dcom.sun.management.jmxremote.ssl=false - Dcom.sun.management.jmxremote.authenticate=true - Dcom.sun.management.jmxremote.access.file=../conf/jmxremote.access - Dcom.sun.management.jmxremote.password.file=../conf/jmxremote.password\\\" \",\"(5)在 ../conf 文件中添加两个文件jmxremote.access和jmxremote.password\",\"jmxremote.access 文件\",\"guest readonly manager readwrite \",\"jmxremote.password 文件\",\"guest guest manager manager \",\"授予权限 : chmod 600 * jmxremot *\",\"(6)将连接服务器地址改为公网ip地址\",\"hostname -i 查看输出情况 172.26.225.240 172.17.0.1 vim /etc/hosts 172.26.255.240 31.100.39.63 \",\"(7)设置上述端口对应的阿里云安全策略和防火墙策略\",\"(8)启动tomcat，来到bin目录\",\"./startup.sh \",\"(9)查看tomcat启动日志以及端口监听\",\"tail -f ../logs/catalina.out lsof -i tcp:8080 \",\"(10)查看8998监听情况，可以发现多开了几个端口\",\"lsof -i:8998 得到PID netstat -antup | grep PID \",\"(11)在刚才的JMX中输入8998端口，并且输入用户名和密码则登录成功\",\"端口:8998 用户名:manager 密码:manager \"]},\"375\":{\"h\":\"1.3.3 Arthas\",\"t\":[\"github ：https://github.com/alibaba/arthas\",\"Arthas 是Alibaba开源的Java诊断工具，采用命令行交互模式，是排查jvm相关问题的利器。\"]},\"376\":{\"h\":\"1.3.3.1 下载安装\",\"t\":[\"curl -O https://alibaba.github.io/arthas/arthas-boot.jar java -jar arthas-boot.jar # 然后可以选择一个Java进程 \",\"Print usage\",\"java -jar arthas-boot.jar -h \"]},\"377\":{\"h\":\"1.3.3.2 常用命令\",\"t\":[\"version:查看arthas版本号 help:查看命名帮助信息 cls:清空屏幕 session:查看当前会话信息 quit:退出arthas客户端 --- dashboard:当前进程的实时数据面板 thread:当前JVM的线程堆栈信息 jvm:查看当前JVM的信息 sysprop:查看JVM的系统属性 --- sc:查看JVM已经加载的类信息 dump:dump已经加载类的byte code到特定目录 jad:反编译指定已加载类的源码 --- monitor:方法执行监控 watch:方法执行数据观测 trace:方法内部调用路径，并输出方法路径上的每个节点上耗时 stack:输出当前方法被调用的调用路径 \"]},\"378\":{\"h\":\"1.3.4 MAT\",\"t\":[\"Java堆分析器，用于查找内存泄漏 Heap Dump，称为堆转储文件，是Java进程在某个时间内的快照 下载地址 ：https://www.eclipse.org/mat/downloads.php\"]},\"379\":{\"h\":\"1.3.4.1 Dump信息包含的内容\",\"t\":[\"All Objects\",\"Class, fields, primitive values and references\",\"All Classes\",\"Classloader, name, super class, static fields\",\"Garbage Collection Roots\",\"Objects defined to be reachable by the JVM\",\"Thread Stacks and Local Variables\",\"The call-stacks of threads at the moment of the snapshot, and per-frame information about local objects\"]},\"380\":{\"h\":\"1.3.4.2 获取Dump文件\",\"t\":[\"手动\",\"jmap -dump:format=b,file=heap.hprof 44808 \",\"自动\",\"-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=heap.hprof \"]},\"381\":{\"h\":\"1.3.4.3 使用\",\"t\":[\"Histogram\",\"Histogram可以列出内存中的对象，对象的个数及其大小\",\"Class Name:类名称，java类名 Objects:类的对象的数量，这个对象被创建了多少个 Shallow Heap:一个对象内存的消耗大小，不包含对其他对象的引用 Retained Heap:是shallow Heap的总和，即该对象被GC之后所能回收到内存的总和 \",\"右击类名--->List Objects--->with incoming references--->列出该类的实例 \",\"右击Java对象名--->Merge Shortest Paths to GC Roots--->exclude all ...--->找到GC Root以及原因 \",\"Leak Suspects\",\"查找并分析内存泄漏的可能原因\",\"Reports--->Leak Suspects--->Details \",\"Top Consumers\",\"Top Consumers\"]},\"382\":{\"h\":\"1.3.5 GC日志分析工具\",\"t\":[\"-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xloggc:gc.log \",\"在线 http://gceasy.io\",\"GCViewer\"]},\"383\":{\"c\":[\"JVM\"]},\"384\":{\"c\":[\"JVM\"]},\"385\":{\"h\":\"JVM终篇-JVM分析\"},\"386\":{\"h\":\"1.1 重新认知JVM\"},\"387\":{\"h\":\"1.2 GC优化\",\"t\":[\"内存被使用了之后，难免会有不够用或者达到设定值的时候，就需要对内存空间进行垃圾回收。\"]},\"388\":{\"h\":\"1.2.1 垃圾收集发生的时机\",\"t\":[\"GC是由JVM自动完成的，根据JVM系统环境而定，所以时机是不确定的。 当然，我们可以手动进行垃圾回收， 比如调用System.gc()方法通知JVM进行一次垃圾回收，但是具体什么时刻运行也无法控制。也就是说 System.gc()只是通知要回收，什么时候回收由JVM决定。 但是不建议手动调用该方法，因为消耗的资源比较 大。\",\"一般以下几种情况会发生垃圾回收:\",\"（1）当Eden区或者S区不够用了 （2）老年代空间不够用了 （3）方法区空间不够用了 （4）System.gc() \"]},\"389\":{\"h\":\"1.2.2 实验环境准备\"},\"390\":{\"h\":\"1.2.3 GC日志文件\",\"t\":[\"image-20220310232235655\",\"要想分析日志的信息，得先拿到GC日志文件才行，所以得先配置一下，之前也看过这些参数。\",\"-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xloggc:gc.log \",\"然后启动项目，可以看到默认使用的是ParallelGC\"]},\"391\":{\"h\":\"1.2.3.1 Parallel GC日志\",\"t\":[\"【吞吐量优先】\",\"2019-06-10T23:21:53.305+0800: 1.303: [GC (Allocation Failure) [PSYoungGen: 65536K[Young区回收前]->10748K[Young区回收后] (76288K[Young区总大小])] 65536K[整个堆回收前]->15039K[整个堆回收后](251392K[整个堆总大小]), 0.0113277 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \",\"注意 如果回收的差值中间有出入，说明这部分空间是Old区释放出来的\"]},\"392\":{\"h\":\"1.2.3.2 CMS日志\",\"t\":[\"【停顿时间优先】\",\"参数设置：-XX:+UseConcMarkSweepGC -Xloggc:cms-gc.log\"]},\"393\":{\"h\":\"1.2.3.3 G1日志\",\"t\":[\"【停顿时间优先】\",\"参数设置：-XX:+UseG1GC -Xloggc:g1-gc.log\",\"理解G1日志格式：https://blogs.oracle.com/poonam/understanding-g1-gc-logs\",\"-XX:+UseG1GC # 使用了G1垃圾收集器 # 什么时候发生的GC，相对的时间刻，GC发生的区域young，总共花费的时间，0.00478s， # It is a stop-the-world activity and all # the application threads are stopped at a safepoint during this time. 2019-12-18T16:06:46.508+0800: 0.458: [GC pause (G1 Evacuation Pause) (young), 0.0047804 secs] # 多少个垃圾回收线程，并行的时间 [Parallel Time: 3.0 ms, GC Workers: 4] # GC线程开始相对于上面的0.458的时间刻 [GC Worker Start (ms): Min: 458.5, Avg: 458.5, Max: 458.5, Diff: 0.0] # This gives us the time spent by each worker thread scanning the roots # (globals, registers, thread stacks and VM data structures). [Ext Root Scanning (ms): Min: 0.2, Avg: 0.4, Max: 0.7, Diff: 0.5, Sum: 1.7] # Update RS gives us the time each thread spent in updating the Remembered Sets. [Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] \"]},\"394\":{\"h\":\"1.2.4 GC日志文件分析工具\"},\"395\":{\"h\":\"1.2.4.1 gceasy\",\"t\":[\"官网 ：https://gceasy.io\",\"可以比较不同的垃圾收集器的吞吐量和停顿时间\",\"比如打开cms-gc.log和g1-gc.log\",\"image-20220310232816712\",\"image-20220310232830568\"]},\"396\":{\"h\":\"1.2.4.2 GCViewer\",\"t\":[\"image-20220310232844104\"]},\"397\":{\"h\":\"1.2.5 G1调优与最佳指南\"},\"398\":{\"h\":\"1.2.5.1 调优\",\"t\":[\"是否选用G1垃圾收集器的判断依据\",\"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/G1.html#use_cases\",\"（1）50%以上的堆被存活对象占用 （2）对象分配和晋升的速度变化非常大 （3）垃圾回收时间比较长 \",\"思考 ：https://blogs.oracle.com/poonam/increased-heap-usage-with-g1-gc\",\"(1)使用G1GC垃圾收集器: -XX:+UseG1GC\",\"修改配置参数，获取到gc日志，使用GCViewer分析吞吐量和响应时间\",\"image-20220310233115552\",\"(2)调整内存大小再获取gc日志分析\",\"-XX:MetaspaceSize=100M -Xms300M -Xmx300M \",\"比如设置堆内存的大小，获取到gc日志，使用GCViewer分析吞吐量和响应时间\",\"image-20220310233227857\",\"(3)调整最大停顿时间\",\"-XX:MaxGCPauseMillis=20 设置最大GC停顿时间指标 \",\"比如设置最大停顿时间，获取到gc日志，使用GCViewer分析吞吐量和响应时间\",\"image-20220310233319130\",\"(4)启动并发GC时堆内存占用百分比\",\"-XX:InitiatingHeapOccupancyPercent=45 G1用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比例。值为 0 则表示“一直执行GC循环)'. 默认值为 45 (例如, 全部的 45% 或者使用了45%). \",\"比如设置该百分比参数，获取到gc日志，使用GCViewer分析吞吐量和响应时间\",\"image-20220310233428017\"]},\"399\":{\"h\":\"1.2.5.2 最佳指南\",\"t\":[\"官网建议 ：https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc_tuning.html#recommendations\",\"(1)不要手动设置新生代和老年代的大小，只要设置整个堆的大小\",\"G1收集器在运行过程中，会自己调整新生代和老年代的大小其实是通过adapt代的大小来调整对象晋升的速度和年龄，从而达到为收集器设置的暂停时间目标 如果手动设置了大小就意味着放弃了G1的自动调优 \",\"(2)不断调优暂停时间目标\",\"一般情况下这个值设置到100ms或者200ms都是可以的(不同情况下会不一样)，但如果设置成50ms就不太合理。暂停时间设置的太短，就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态。暂停时间只是一个目标，并不能总是得到满足。 \",\"(3)使用-XX:ConcGCThreads=n来增加标记线程的数量\",\"IHOP如果阀值设置过高，可能会遇到转移失败的风险，比如对象进行转移时空间不足。如果阀值设置过低，就会使标记周期运行过于频繁，并且有可能混合收集期回收不到空间。 IHOP值如果设置合理，但是在并发周期时间过长时，可以尝试增加并发线程数，调高ConcGCThreads。 \",\"(4)MixedGC调优\",\"-XX:InitiatingHeapOccupancyPercent -XX:G1MixedGCLiveThresholdPercent -XX:G1MixedGCCountTarger -XX:G1OldCSetRegionThresholdPercent \",\"(5)适当增加堆内存大小\"]},\"400\":{\"h\":\"1.3 高并发场景分析\",\"t\":[\"image-20220311001043190\"]},\"401\":{\"h\":\"1.4 JVM性能优化指南\"},\"402\":{\"h\":\"1.5 常见问题思考\",\"t\":[\"（1）内存泄漏与内存溢出的区别\",\"内存泄漏：对象无法得到及时的回收，持续占用内存空间，从而造成内存空间的浪费。\",\"内存溢出：内存泄漏到一定的程度就会导致内存溢出，但是内存溢出也有可能是大对象导致的。\",\"（2）young gc会有stw吗？\",\"不管什么 GC，都会有 stop-the-world，只是发生时间的长短。\",\"（3）major gc和full gc的区别\",\"major gc指的是老年代的gc，而full gc等于young+old+metaspace的gc。\",\"（4）G1与CMS的区别是什么\",\"CMS 用于老年代的回收，而 G1 用于新生代和老年代的回收。 G1 使用了 Region 方式对堆内存进行了划分，且基于标记整理算法实现，整体减少了垃圾碎片的产生。\",\"（5）什么是直接内存\",\"直接内存是在java堆外的、直接向系统申请的内存空间。通常访问直接内存的速度会优于Java堆。因此出于性能的考 虑，读写频繁的场合可能会考虑使用直接内存。\",\"（6）不可达的对象一定要被回收吗？\",\"即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对 象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此 对象是否有必要执行 finalize 方法。当对象没有覆盖 finalize 方法，或 finalize 方法已经被虚拟机调用过时，虚拟机 将这两种情况视为没有必要执行。 被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关 联，否则就会被真的回收。\",\"（7）方法区中的无用类回收\",\"方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？ 判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满 足下面 3 个条件才能算是 “无用的类” ： 该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。 加载该类的 ClassLoader 已经被回收。 该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。 虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然 被回收。\",\"image-20220311003339439\",\"（8）不同的引用\",\"JDK1.2以后，Java对引用进行了扩充：强引用、软引用、弱引用和虚引用\",\"image-20220311002742261\",\"image-20220311002930038\",\"image-20220311003005058\"]},\"403\":{\"c\":[\"JVM\"]},\"404\":{\"c\":[\"JVM\"]},\"405\":{\"h\":\"JVM内存图谱\",\"t\":[\"JVM 内存分析图\"]},\"406\":{\"c\":[\"jvm\"]},\"407\":{\"h\":\"Java 字节码反编译成汇编-使用JITWatch\",\"t\":[\"本位以windows环境为前提，JDK版本为Oracle Sun JDK8-64位\"]},\"408\":{\"h\":\"Hsdis环境准备\"},\"409\":{\"h\":\"1.下载hsdis-amd64.dylib\",\"t\":[\"下载地址如下：https://github.com/evolvedmicrobe/benchmarks/blob/master/hsdis-amd64.dylib\"]},\"410\":{\"h\":\"2.下载hsdis-amd64.dll\",\"t\":[\"下载地址如下：https://github.com/atzhangsan/file_loaded\"]},\"411\":{\"h\":\"3.配置hsdis-amd64.dylib和hsdis-amd64.dll\",\"t\":[\"a.将下载好的hsdis-amd64.dll文件放置在JDK路径下\\\\jre\\\\bin目录下。\",\"e.g. C:\\\\Program Files\\\\Java\\\\jdk1.8.0_161\\\\jre\\\\bin\",\"b.将下载好的hsdis-amd64.dylib文件放置在JDK路径下的\\\\jre\\\\lib目录下。\",\"e.g. C:\\\\Program Files\\\\Java\\\\jdk1.8.0_161\\\\jre\\\\lib\"]},\"412\":{\"h\":\"4.测试验证是否配置成功\",\"t\":[\"使用命令java -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -version验证是否配置成功。如果出现如下所示则说明配置成功。\",\"image-20210414230849483\"]},\"413\":{\"h\":\"5.自行构建hsdis(如果你有兴趣的话)\",\"t\":[\"如果你有兴趣自行编译hsdis的话，可以参考如下的几个链接，然后把编译好的文件放在jdk的jre目录下的如上所3述路径。\",\"1.http://www.chrisnewland.com/building-hsdis-on-linux-amd64-on-debian-369\",\"2.http://psy-lob-saw.blogspot.com/2013/01/java-print-assembly.html\"]},\"414\":{\"h\":\"JITWatch环境\"},\"415\":{\"h\":\"1.下载JITWatch\",\"t\":[\"下载路径如下：https://github.com/AdoptOpenJDK/jitwatch/releases\",\"如果你有兴趣的话，当然也可以参考官方文档进行编译。\",\"JITWatch链接如下：\",\"https://github.com/AdoptOpenJDK/jitwatch\",\"编译命令如下：\",\"ant编译： ant clean compile test run maven编译： mvn clean compile test exec:java gradle编译： gradlew clean build run \"]},\"416\":{\"h\":\"2.配置运行JITWatch\",\"t\":[\"a.启动，使用java -jar jitwatch-ui-1.4.0-shaded-win.jar启动jitwatch，启动成功后如下所示\",\"image-20210414232505669\",\"b.配置，点击sandbox按钮打开窗口，再点击Configure Sandbox按钮，配置如下几个参数\",\"1.java classes目录\",\"2.java 运行目录为你本地的配置使用的JDK路径\",\"3.java运行参数，添加hsdis的运行参数配置\",\"image-20210414233652204\",\"c.运行，点击open按钮打开需要编译的java代码，点击Run按钮运行得到下图所示\",\"image-20210414232726380\",\"image-20210414234418226\"]},\"417\":{\"h\":\"3.JITwatch简单使用\"},\"418\":{\"h\":\"模块化查看字节码和汇编码\",\"t\":[\"image-20210414234700267\"]},\"419\":{\"h\":\"使用topList查看资源占用率\",\"t\":[\"在JITWatch窗口点击TopList按钮，即可查看资源占用率。\",\"image-20210414235239556\"]},\"420\":{\"h\":\"更多资料\",\"t\":[\"1.https://www.chrisnewland.com/images/jitwatch/HotSpot_Profiling_Using_JITWatch.pdf\",\"2.https://github.com/AdoptOpenJDK/jitwatch/wiki\"]},\"421\":{\"h\":\"参考文章\",\"t\":[\"1.利用hsdis和JITWatch查看分析HotSpot JIT compiler生成的汇编代码.https://blog.csdn.net/hengyunabc/article/details/26898657\",\"2.JITWatch Wiki.https://github.com/AdoptOpenJDK/jitwatch/wiki\",\"我的博客即将同步至腾讯云+社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=17nuh698omdi4\"]},\"422\":{\"c\":[\"JavaTool\"]},\"423\":{\"c\":[\"JavaTool\"]},\"424\":{\"h\":\"Java新特性\",\"t\":[\"JVM 内存分析图\"]},\"425\":{\"c\":[\"Java-New-Feature\"]},\"426\":{\"h\":\"java基础\",\"t\":[\"JVM 内存分析图\"]},\"427\":{\"c\":[\"Java-Thread\"]},\"428\":{\"h\":\"线程池基础知识\"},\"429\":{\"h\":\"1.线程池的创建方式\"},\"430\":{\"h\":\"2.线程池的关键参数\"},\"431\":{\"h\":\"3.线程池设计的技巧\"},\"432\":{\"c\":[\"Java-Thread\"]},\"433\":{\"c\":[\"Java-Thread\"]},\"434\":{\"h\":\"到底什么是线程安全和线程不安全？\"},\"435\":{\"h\":\"1.什么是线程安全？\",\"t\":[\"维基百科给出的定义如下：\",\"线程安全是程式设计中的术语，指某个函数、函数库在多线程环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。\",\"在《Java并发编程实战》一书中给出如下定义：\",\"一个对象是否需要是线程安全的，取决于它是否被多个线程访问。这只和对象在程序中是以何种方式被使用的有关，和对象本身具体是做什么的无关。\",\"在《深入Java虚拟机》一书中给出如下定义：\",\"当多个线程访问同一个对象时，**如果不用考虑这些线程在运行时环境下的调度和交替运行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，**调用这个对象的行为都可以获取正确的结果，那这个对象是线程安全的。\",\"线程安全：在多线程同时访问一个资源时，线程间依照某种方式访问资源时，访问的结果总是能获取到正确的结果。\"]},\"436\":{\"h\":\"2.Java内存模型-JMM\",\"t\":[\"16bf62d8c174d776\",\"上图描述了一个多线程执行场景。 线程 A 和线程 B 分别对主内存的变量进行读写操作。其中主内存中的变量为共享变量,也就是说此变量只此一份，多个线程间共享。但是线程不能直接读写主内存的共享变量，每个线程都有自己的工作内存，线程需要读写主内存的共享变量时需要先将该变量拷贝一份副本到自己的工作内存，然后在自己的工作内存中对该变量进行所有操作，线程工作内存对变量副本完成操作之后需要将结果同步至主内存。\",\"线程的工作内存是线程私有内存，线程间无法互相访问对方的工作内存。\"]},\"437\":{\"h\":\"3.共享变量(共享资源)\",\"t\":[\"所谓共享变量，指的是多个线程都可以操作的变量。进程是分配资源的基本单位，线程是执行的基本单位。所以，多个线程之间是可以共享一部分进程中的数据的。在JVM中，Java堆和方法区的区域是多个线程共享的数据区域。也就是说，多个线程可以操作保存在堆或者方法区中的同一个数据。那么，保存在堆和方法区中的变量就是Java中的共享变量。\",\"那么，Java中哪些变量是存放在堆中，哪些变量是存放在方法区中，又有哪些变量是存放在栈中的呢？\",\"Java中共有三种变量，分别是类变量、成员变量和局部变量。他们分别存放在JVM的方法区、堆内存和栈内存中。（栈内存是程序线程独占空间）\",\"public class Variables { /** * 类变量 */ private static int a; /** * 成员变量 */ private int b; /** * 局部变量 * @param c */ public void test(int c){ int d; } } \",\"上面定义的三个变量中，变量a就是类变量，变量b就是成员变量，而变量c和d是局部变量。\",\"所以，变量a和b是共享变量，变量c和d是非共享变量。所以如果遇到多线程场景，对于变量a和b的操作是需要考虑线程安全的，而对于线程c和d的操作是不需要考虑线程安全的。\"]},\"438\":{\"h\":\"4.线程安全的实现\"},\"439\":{\"h\":\"4.1 无状态实现\",\"t\":[\"在大多数情况下，多线程应用中的错误是错误地在多个线程之间共享状态的结果。\",\"因此，我们要研究的第一种方法是 使用无状态实现来实现线程安全。\",\"为了更好地理解这种方法，让我们考虑一个带有静态方法的简单工具类，该方法可以计算数字的阶乘：\",\"public class MathUtils { public static BigInteger factorial(int number) { BigInteger f = new BigInteger(\\\"1\\\"); for (int i = 2; i <= number; i++) { f = f.multiply(BigInteger.valueOf(i)); } return f; } } \",\"factorial方法是一种无状态确定性函数。 确定性是指：给定特定的输入，它将始终产生相同的输出。\",\"该方法既不依赖外部状态，也不维护自身的状态。因此，它被认为是线程安全的，并且可以同时被多个线程安全地调用。\",\"所有线程都可以安全地调用 factorial 方法，并且将获得预期结果，而不会互相干扰，也不会更改该方法为其他线程生成的输出。\",\"因此，无状态实现是实现线程安全的最简单方法。\"]},\"440\":{\"h\":\"4.2 不可变的实现\",\"t\":[\"如果我们需要在不同线程之间共享状态，则可以通过使它们成为不可变对象来创建线程安全类。\",\"不变性是一个功能强大，与语言无关的概念，在Java中相当容易实现。\",\"当类实例的内部状态在构造之后无法修改时，它是不可变的。\",\"在Java中创建不可变类的最简单方法是声明所有字段为 private 和 final ，且不提供 setter：\",\"public class MessageService { private final String message; public MessageService(String message) { this.message = message; } // 标准 getter } \",\"一个 MessageService 对象实际上是不可变的，因为它的状态在构造之后不能更改。因此，它是线程安全的。\",\"此外，如果 MessageService 实际上是可变的，但是多个线程仅对其具有只读访问权限，那么它也是线程安全的。\",\"因此，不变性是实现线程安全的另一种方法。\"]},\"441\":{\"h\":\"4.3 线程私有 (ThreadLocal) 字段\",\"t\":[\"在面向对象编程（OOP）中，对象实际上需要通过字段维护状态并通过一种或多种方法来实现行为。\",\"如果我们确实需要维护状态，则可以通过使它们的字段成为线程局部的来创建不在线程之间共享状态的线程安全类。\",\"通过简单地在 Thread 类中定义私有字段，我们可以轻松创建其字段为线程局部的类。\",\"例如，我们可以定义一个存储整数数组的 Thread 类：\",\"public class ThreadA extends Thread { private final List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6); @Override public void run() { numbers.forEach(System.out::println); } } \",\"而另一个类可能拥有一个字符串数组：\",\"public class ThreadB extends Thread { private final List<String> letters = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\"); @Override public void run() { letters.forEach(System.out::println); } } \",\"在这两种实现中，这些类都有其自己的状态，但是不与其他线程共享。因此，这些类是线程安全的。\",\"同样，我们可以通过将 ThreadLocal 实例分配给一个字段来创建线程私有字段。\",\"例如，让我们考虑以下 StateHolder 类：\",\"public class StateHolder { private final String state; // 标准的构造函数和 getter } \",\"我们可以很容易地使其成为线程局部（ThreadLocal）变量，如下所示：\",\"public class ThreadState { public static final ThreadLocal<StateHolder> statePerThread = new ThreadLocal<StateHolder>() { @Override protected StateHolder initialValue() { return new StateHolder(\\\"active\\\"); } }; public static StateHolder getState() { return statePerThread.get(); } } \",\"线程局部字段与普通类字段非常相似，不同之处在于，每个通过setter / getter访问它们的线程都将获得该字段的独立初始化副本，以便每个线程都有自己的状态。\"]},\"442\":{\"h\":\"4.4 同步集合类\",\"t\":[\"通过使用collections框架 中包含的一组同步包装器，我们可以轻松地创建线程安全的collections。\",\"例如，我们可以使用以下同步包装之一来创建线程安全的集合：\",\"Collection<Integer> syncCollection = Collections.synchronizedCollection(new ArrayList<>()); Thread thread1 = new Thread(() -> syncCollection.addAll(Arrays.asList(1, 2, 3, 4, 5, 6))); Thread thread2 = new Thread(() -> syncCollection.addAll(Arrays.asList(7, 8, 9, 10, 11, 12))); thread1.start(); thread2.start(); \",\"让我们记住，同步集合在每种方法中都使用内在锁定（我们将在后面介绍内在锁定）。\",\"这意味着该方法一次只能由一个线程访问，而其他线程将被阻塞，直到该方法被第一个线程解锁。\",\"因此，由于同步访问的基本逻辑，同步会对性能造成不利影响。\"]},\"443\":{\"h\":\"4.5 支持并发的集合\",\"t\":[\"除了同步集合，我们可以使用并发集合来创建线程安全的集合。\",\"Java提供了 java.util.concurrent 包，其中包含多个并发集合，例如 ConcurrentHashMap ：\",\"Map<String,String> concurrentMap = new ConcurrentHashMap<>(); concurrentMap.put(\\\"1\\\", \\\"one\\\"); concurrentMap.put(\\\"2\\\", \\\"two\\\"); concurrentMap.put(\\\"3\\\", \\\"three\\\"); \",\"与同步对象不同，并发集合通过将其数据划分为段来实现线程安全。例如，在 ConcurrentHashMap 中，多个线程可以获取不同 Map 段上的锁，因此多个线程可以同时访问 Map 。\",\"由于并发线程访问的先天优势，并发集合类具备远超同步集合类更好的性能。\",\"值得一提的是，同步集合和并发集合仅使集合本身具有线程安全性，而不使content变得线程安全。\"]},\"444\":{\"h\":\"4.6 原子化对象\",\"t\":[\"使用Java提供的一组原子类（包括 AtomicInteger，AtomicLong，AtomicBoolean 和 AtomicReference )也可以实现线程安全。\",\"原子类使我们能够执行安全的原子操作，而无需使用同步。原子操作在单个机器级别的操作中执行。\",\"要了解解决的问题，让我们看下面的 Counter 类：\",\"public class Counter { private int counter = 0; public void incrementCounter() { counter += 1; } public int getCounter() { return counter; } } \",\"让我们假设在竞争条件下，两个线程同时访问 increasingCounter() 方法。\",\"从理论上讲， counter 字段的最终值为2。但是我们不确定结果如何，因为线程在同一时间执行同一代码块，并且增量不是原子的。\",\"让我们使用 AtomicInteger 对象创建 Counter 类的线程安全实现：\",\"public class AtomicCounter { private final AtomicInteger counter = new AtomicInteger(); public void incrementCounter() { counter.incrementAndGet(); } public int getCounter() { return counter.get(); } } \",\"这是线程安全的，因为在++增量执行多个操作的同时， 增量和获取 是原子的。\"]},\"445\":{\"h\":\"4.7 同步方法\",\"t\":[\"尽管较早的方法对于集合和基元非常有用，但有时我们需要的控制权要强于此。\",\"因此，可用于实现线程安全的另一种常见方法是实现同步方法。\",\"简而言之，一次只能有一个线程可以访问同步方法，同时阻止其他线程对该方法的访问。其他线程将保持阻塞状态，直到第一个线程完成或该方法引发异常。\",\"我们可以通过使它成为同步方法，以另一种方式创建线程安全版本的 creationCounter() ：\",\"public synchronized void incrementCounter() { counter += 1; } \",\"我们通过与前缀的方法签名创建一个同步方法 synchronized 关键字。\",\"由于一次一个线程可以访问一个同步方法，因此一个线程将执行 crementCounter() 方法，而其他线程将执行相同的操作。任何重叠的执行都不会发生。\",\"同步方法依赖于“内部锁”或“监视器锁”的使用。固有锁是与特定类实例关联的隐式内部实体。\",\"在多线程上下文中，术语 monitor 是指对关联对象执行锁的角色，因为它强制对一组指定的方法或语句进行排他访问。\",\"当线程调用同步方法时，它将获取内部锁。线程完成执行方法后，它将释放锁，从而允许其他线程获取锁并获得对方法的访问。\",\"我们可以在实例方法，静态方法和语句（已同步的语句）中实现同步。\"]},\"446\":{\"h\":\"4.8 同步语句\",\"t\":[\"有时，如果我们只需要使方法的一部分成为线程安全的，那么同步整个方法可能就显得过分了。\",\"为了说明这个用例，让我们重构 increascountCounter 方法：\",\"public void incrementCounter() { // 此处可有额外不需同步的操作 // ... synchronized(this) { counter += 1; } } \",\"该示例很简单，但是它显示了如何创建同步语句。假设该方法现在执行了一些不需要同步的附加操作，我们仅通过将相关的状态修改部分包装在一个同步块中来对其进行同步。\",\"与同步方法不同，同步语句必须指定提供内部锁的对象，通常是this引用。\",\"同步非常昂贵，因此使用此选项，我们尽可能只同步方法的相关部分。\"]},\"447\":{\"h\":\"4.8 其他对象作为锁\",\"t\":[\"我们可以通过将另一个对象用作监视器锁定，来稍微改善 Counter 类 的线程安全实现。\",\"这不仅可以在多线程环境中提供对共享资源的协调访问，还可以使用外部实体来强制对资源进行独占访问：\",\"public class ObjectLockCounter { private int counter = 0; private final Object lock = new Object(); public void incrementCounter() { synchronized(lock) { counter += 1; } } // 标准 getter } \",\"我们使用一个普通的 Object 实例来强制相互排斥。此实现稍好一些，因为它可以提高锁定级别的安全性。\",\"将 this 用于内部锁定时，攻击者可能会通过获取内部锁定并触发拒绝服务（DoS）条件来导致死锁。\",\"相反，在使用其他对象时， 无法从外部访问该私有实体。这使得攻击者更难获得锁定并导致死锁。\"]},\"448\":{\"h\":\"5.参考文章\",\"t\":[\"1.什么是线程安全?.https://www.jianshu.com/p/44831d1d10d3\",\"2.深入理解Java并发编程（一）：到底什么是线程安全.https://www.hollischuang.com/archives/3060\",\"3.Java 并发基础——线程安全性.https://www.cnblogs.com/NeilZhang/p/8682266.html\",\"4.什么是线程安全以及如何实现？https://segmentfault.com/a/1190000023187634\",\"5.你真的知道什么是线程安全吗？.https://www.hoohack.me/2020/09/01/what-is-thread-safe\",\"6.(解释的比较清楚，透彻的)图解 Java 线程安全.https://juejin.cn/post/6844903890224152584\",\"7.Java进阶（二）当我们说线程安全时，到底在说什么.http://www.jasongj.com/java/thread_safe/\"]},\"449\":{\"c\":[\"Java-Thread\"]},\"450\":{\"c\":[\"Java-Thread\"]},\"451\":{\"h\":\"分布式基础-共识与线性一致性与顺序一致性\"},\"452\":{\"h\":\"说明\",\"t\":[\"本文部分内容来自于：https://segmentfault.com/a/1190000022248118###\",\"本文将会根据该文章适当增减内容！\"]},\"453\":{\"h\":\"作者引言\",\"t\":[\"etcd 是线性一致性读，而 zk 却是顺序一致性读，再加上各种共识、强弱一致的名词，看的时候总会混淆，这篇文档就列举下分布式系统中的那些\\\"一致性名词\\\"，引用了很多其他的文章，不过会多出一些例子来帮助理解。\"]},\"454\":{\"h\":\"1.什么是一致性？\",\"t\":[\"在谈到一致性这个词时，你会想到CAP理论的 consistency，或者 ACID 中的 consistency，或者 cache一致性协议的 coherence，还是 Raft/Paxos 中的 consensus？\",\"一致性这个词在不同的领域具有不同的含义，毕竟这个中文词在英文中对应了不同的术语，consistency，coherence，consensus三个单词统一翻译为”一致性”。因此在谈一致性之前，有必要对这几个概念做一个区分，否则很容易让人迷惑\"]},\"455\":{\"h\":\"1.1 coherence\",\"t\":[\"Coherence 只出现在Cache Coherence 一词中，称为”缓存一致性”，研究多核场景，即怎么保证多个核上的CPU 缓存数据是一致的，一般是单机维度的，不算分布式领域，可以参考这篇文章https://www.infoq.cn/article/cache-coherency-primer/\"]},\"456\":{\"h\":\"1.2 consensus\",\"t\":[\"consensus准确的翻译是共识，即多个提议者达成共识的过程，例如Paxos，Raft 就是共识算法，paxos 是一种共识理论，分布式系统是他的场景，一致性是他的目标。\",\"一些常见的误解：使用了 Raft或者 paxos 的系统都是线性一致的（Linearizability 即强一致），其实不然，共识算法只能提供基础，要实现线性一致还需要在算法之上做出更多的努力。\",\"因为分布式系统引入了多个节点，节点规模越大，宕机、网络时延、网络分区就会成为常态，任何一个问题都可能导致节点之间的数据不一致，因此Paxos 和 Raft 准确来讲是用来解决一致性问题的共识算法，用于分布式场景，而非”缓存一致性“这种单机场景。所以很多文章也就简称”Paxos是分布式系统中的一致性算法“，\",\"一致性（Consistency）的含义比共识（consensus）要宽泛，一致性指的是多个副本对外呈现的状态。包括顺序一致性、线性一致性、最终一致性等。而共识特指达成一致的过程，但注意，共识并不意味着实现了一致性，一些情况下他是做不到的。\"]},\"457\":{\"h\":\"1.2.1 Paxos与Raft\",\"t\":[\"这里提一下Paxos，Paxos 其实是一类协议，Paxos 中包含 Basic Paxos、Multi-Paxos、Cheap Paxos 和其他的变种。Raft 就是 Multi-Paxos 的一个变种，Raft 通过简化 Multi-Paxos 的模型，实现了一种更容易让人理解和工程实现的共识算法，\",\"Paxos是第一个被证明完备的共识算法，能够让分布式网络中的节点在出现错误时仍然保持一致，当然前提是没有恶意节点，也就是拜占庭将军问题。在传统的分布式系统领域是不需要担心这种问题的，因为不论是分布式数据库、消息队列、分布式存储，你的机器都不会故意发送错误信息，最常见的问题反而是节点失去响应，所以它们在这种前提下，Paxos是足够用的。\"]},\"458\":{\"h\":\"1.2.2 复制状态机\",\"t\":[\"consensus共识在实现机制上属于复制状态机(Replicated State Machine)的范畴，复制状态机是一种很有效的容错技术，基于复制日志来实现，每个 Server 存储着一份包含命令序列的日志文件，状态机会按顺序执行这些命令。因为日志中的命令和顺序都相同，因此所有节点会得到相同的数据。\",\"因此保证系统一致性就简化为保证操作日志的一致，这种复制日志的方式被大量运用，如 GSF、HDFS、ZooKeeper和 etcd 都是这种机制。\"]},\"459\":{\"h\":\"1.2.3 区块链\",\"t\":[\"共识算法还有一个很重要的领域，就是比较火的区块链，比如工作量证明（POW）、权益证明（POS）和委托权益证明（DPOS）、置信度证明（PoB）等等，都是共识算法，这篇文章就列出来了 30 种\",\"大家熟知的zk、etcd这种之所以叫“传统分布式”，就是相对于区块链这种”新型分布式系统“而言的，都是多节点共同工作，只是区块链有几点特殊：\",\"区块链需要解决的是拜占庭将军问题，paxos之类的一致性算法无法对抗欺诈节点\",\"区块链中不存在中央控制方，没有一个节点可以控制或协调账本数据的生成\",\"区块链中的共识算法如果达不到一致性，则任何人都可以硬分叉，另建一个社区、一条链\",\"分布式系统的性能理论上可以无限提升，但区块链是以相对的低效率来换取公正，主流的公有链每秒只能处理几笔到几十笔交易\"]},\"460\":{\"h\":\"1.3 consistency\",\"t\":[\"介绍完了Coherence和consensus共识，我们来看consistency一致性，也就是我们平时说的最多的 CAP、Base、ACID之类。\",\"最简单的，客户端C1将系统中的一个值K由V1更新为V2，客户端C2/C3/C4..需要立即读取到K的最新值\",\"一致性要求的是一致，并不是正确，如果所有节点一致给出一个”错误“的答案，那也叫一致性\",\"对于不同的场景，用户角度对于一致性的要求是不一样的，例如：\",\"银行系统：你在柜台存了一笔钱，同时你的朋友转账给你一笔钱，你的女朋友同时又在淘宝消费了一笔钱，你可能会感觉很乱，但你相信，最后你的余额一定是对的，银行可以慢一点，但不会把钱搞错。\",\"电商系统：你在淘宝看到一个库存为 5 的衣服，然后你快速下单，但是被提示”库存不足，无法购买“，你会觉得自己动作太慢，被人抢走了，不太关心库存为啥显示 5。\",\"论坛小站：你注册一个论坛，需要手机验证码，点完发送之后，一直没有响应，过了一天你才收到了这条短信，不过小站而已，不注册也就罢了。\",\"上面是夸张了的用户情况，在实际业务中，一致性也是分等级的，如强一致性和弱一致性，怎么使用要看具体情况和系统的容忍度。\",\"强一致性和弱一致性只是一种统称，按照从强到弱，可以划分为\",\"线性一致性Linearizability consistency ，也称原子一致性或严格一致性指的是程序在执行的历史中在存在可线性化点P的执行模型，这意味着一个操作将在程序的调用和返回之间的某个点P起作用。这里“起作用”的意思是被系统中并发运行的所有其他线程所感知。 关于线性一致性的理论基础可以参看维基百科：https://zh.wikipedia.org/wiki/线性一致性\",\"线性一致性最重要的性质就是其“局部性”（Local property, 或可组合性 - Compositional），即数个线性一致单对象历史的组合也是线性一致的。\",\"线性一致性的非阻塞性(Non-blocking property)：线程P对完全操作(total function)的调用永远不会阻塞。\",\"顺序一致性 Sequential consistency 关于顺序一致性的理论即可参看维基百科：https://en.wikipedia.org/wiki/Sequential_consistency\",\"因果一致性 Causal consistency\",\"最终一致性 Eventual consistency\",\"强一致性包括线性一致性和顺序一致性，其他的如最终一致都是弱一致性。\",\"关于强和弱的定义，可以参考剑桥大学的slide(https://www.cl.cam.ac.uk/teaching/0910/ConcDistS/11a-cons-tx.pdf)\",\"Strong consistency – ensures that only consistent state can be seen. * All replicas return the same value when queried for the attribute of an object * All replicas return the same value when queried for the attribute of an object. This may be achieved at a cost – high latency. Weak consistency – for when the “fast access” requirement dominates. * update some replica, e.g. the closest or some designated replica * the updated replica sends up date messages to all other replicas. * different replicas can return different values for the queried attribute of the object the value should be returned, or “not known”, with a timestamp * in the long term all updates must propagate to all replicas ……. \",\"强一致性集群中，对任何一个节点发起请求都会得到相同的回复，但将产生相对高的延迟。而弱一致性具有更低的响应延迟，但可能会回复过期的数据，最终一致性即是经过一段时间后终会到达一致的弱一致性。\"]},\"461\":{\"h\":\"2.背景\",\"t\":[\"如买最后一张车票，两个售票处分别通过某种方式确认过这张票的存在。这时，两家售票处几乎同时分别来了一个乘客要买这张票，从各自“观察”看来，自己一方的乘客都是先到的，这种情况下，怎么能达成对结果的共识呢？看起来很容易，卖给物理时间上率先提交请求的乘客即可。\",\"如买最后一张车票，两个售票处分别通过某种方式确认过这张票的存在。这时，两家售票处几乎同时分别来了一个乘客要买这张票，从各自“观察”看来，自己一方的乘客都是先到的，这种情况下，怎么能达成对结果的共识呢？看起来很容易，卖给物理时间上率先提交请求的乘客即可。\",\"这也是解决分布式系统领域很多问题的核心秘诀：把不同时空发生的多个事件进行全局唯一排序，而且这个顺序还得是大家都认可的，排了序，一个一个处理就行了，和单机没有任何区别（不考虑突然故障情况，只考虑共识机制）\",\"如果存在可靠的物理时钟，实现排序往往更为简单。高精度的石英钟的漂移率为 10的-7 次方，最准确的原子震荡时钟的漂移率为 10的-13 次方。Google 曾在其分布式数据库 Spanner 中采用基于原子时钟和 GPS 的“TrueTime”方案，能够将不同数据中心的时间偏差控制在 10ms 置信区间。在不考虑成本的前提下，这种方案简单、有效。然而，计算机系统的时钟误差要大得多，这就造成分布式系统达成一致顺序十分具有挑战，或者说基本不可能。\",\"要实现绝对理想的严格一致性（Strict Consistency）代价很大。除非系统不发生任何故障，而且所有节点之间的通信无需任何时间，此时整个系统其实就等价于一台机器了。因此根据实际需求的不用，人们可能选择不同强度的一致性。\"]},\"462\":{\"h\":\"2.1 顺序一致性(Sequential Consistency)\",\"t\":[\"虽然强度上 线性一致性 > 顺序一致性，但因为顺序一致性出现的时间比较早(1979年)，线性是在顺序的基础上的加强(1990 年)。因此先介绍下顺序一致性\",\"顺序一致性也算强一致性的一种，他的原理比较晦涩，论文看这里(https://www.microsoft.com/en-us/research/publication/make-multiprocessor-computer-correctly-executes-multiprocess-programs/)\"]},\"463\":{\"h\":\"2.1.1 顺序一致性理论基础\",\"t\":[\"文章参看：https://en.wikipedia.org/wiki/Sequential_consistency\",\"顺序一致性：任何执行的结果都与所有处理器的操作都按某种顺序执行一样，并且每个单独的处理器的操作按照其程序指定的顺序出现在这个顺序中\",\"即程序在同一处理器（或线程）上的执行顺序与程序顺序相同，而程序在不同处理器（或线程）上的执行顺序是未定义的。\",\"A1、B1和C1之间的执行顺序被保留，即A1在B1之前运行，B1在C1之前。 A2 和 B2 相同。 但是，由于处理器之间的执行顺序未定义，B2 可能在 C1 之前或之后运行（B2 可能在物理上运行在 C1 之前，但 B2 的效果可能在 C1 之后看到，这与“B2 在 C1 之后运行”相同）\"]},\"464\":{\"h\":\"2.1.2 顺序一致性解释说明\",\"t\":[\"举例说明1：下面的图满足了顺序一致，但不满足线性一致。\",\"x 和 y 的初始值为 0\",\"Write(x,4)代表写入 x=4，Read(y,2)为读取 y =2\",\"从图上看，进程P1，P2的一致性并没有冲突。因为从这两个进程的角度来看，顺序应该是这样的：\",\"Write(y,2), Read(x,0), Write(x,4), Read(y,2) \",\"这个顺序对于两个进程内部的读写顺序都是合理的，只是这个顺序与全局时钟下看到的顺序并不一样。在全局时钟的观点来看，P2进程对变量X的读操作在P1进程对变量X的写操作之后，然而P2读出来的却是旧的数据0\",\"举例说明 2:\",\"假设我们有个分布式 KV 系统，以下是四个进程 对其的操作顺序和结果:\",\"--表示持续的时间，因为一次写入或者读取，客户端从发起到响应是有时间的，发起早的客户端，不一定拿到数据就早，有可能因为网络延迟反而会更晚。\",\"情况 1：\",\"A: --W(x,1)---------------------- B: --W(x,2)---------------------- C: -R(x,1)- --R(x,2)- D: -R(x,1)- --R(x,2)-- \",\"情况 2：\",\"A: --W(x,1)---------------------- B: --W(x,2)---------------------- C: -R(x,2)- --R(x,1)- D: -R(x,2)- --R(x,1)-- \",\"上面情况1和2都是满足顺序一致性的，C 和 D 拿的顺序都是 1-2，或 2-1，只要CD 的顺序一致，就是满足顺序一致性。只是从全局看来，情况1更真实，情况2就显得”错误“了，因为情况2是这样的顺序\",\"B W(x,2) -> A W(x,1) -> C R(x,2) -> D R(x,2) -> C R(x,1) -> D R(x,1)\",\"不过一致性不保证正确性，所以这仍然是一个顺序一致。再加一种情况 3：\",\"情况 3：\",\"A: --W(x,1)---------------------- B: --W(x,2)---------------------- C: -R(x,2)- --R(x,1)- D: -R(x,1)- --R(x,2)-- \",\"情况 3 就不属于顺序一致了，因为C 和 D 两个进程的读取顺序不同了。\",\"回到情况 2，C 和 D 拿数据发起的时间是不同的，且有重叠，有可能 C 拿到 1 的时候，D 已经拿到了 2，这就导致了不同的客户端在相同的时间获取了不一样的数据，但其实这种模式在现实中的用的挺广泛的：\",\"如：你在Twitter上写了2条推文，你的操作会耗费一定的时间渗透进一层层的缓存系统，不同的朋友将在不同的时间看到你的信息，但每个朋友都会以相同顺序看到了你的2条推文，不会是乱序。只是一个朋友已经看到了第二条，一个朋友才刚看到第一条，不过没关系，他总会看到两条，顺序没错就行，无伤大雅。\",\"但有些时候，顺序一致是不满足要求的，举例说明 3：\",\"从时间轴上可以看到，B0 发生在 A0 之前，读取到的 x 值为0。B2 发生在 A0 之后，读取到的 x 值为1。而读操作 B1，C0，C1 与写操作 A0 在时间轴上有重叠，因此他们可能读取到旧的值0，也可能读取到新的值1。注意，C1 发生在 B1 之后（二者在时间轴上没有重叠），但是 B1 看到 x 的新值，C1 反而看到的是旧值。即对用户来说，x 的值发生了回跳。\",\"即要求任何一次读都能读到最新数据，和全局时钟一致。对比例1，既满足顺序一致又满足线性一一致应该是这样的：\",\"每个读操作都读到了该变量的最新写的结果，同时两个进程看到的操作顺序与全局时钟的顺序一样，都是Write(y,2), Read(x,4), Write(x,4), Read(y,2)\"]},\"465\":{\"h\":\"2.1.3 ZooKeeper\",\"t\":[\"一种说法是ZooKeeper是最终一致性，因为由于多副本、以及保证大多数成功的Zab协议，当一个客户端进程写入一个新值，另外一个客户端进程不能保证马上就能读到这个值，但是能保证最终能读取到这个值。\",\"另外一种说法是 ZooKeeper的Zab协议类似于Paxos协议，提供了强一致性。\",\"但这两种说法都不准确，ZooKeeper `文档中明确写明它的一致性是 Sequential consistency即顺序一致。\",\"ZooKeeper中针对同一个Follower A提交的写请求request1、request2，某些Follower虽然可能不能在请求提交成功后立即看到（也就是强一致性），但经过自身与Leader之间的同步后，这些Follower在看到这两个请求时，一定是先看到request1，然后再看到request2，两个请求之间不会乱序，即顺序一致性\",\"其实，实现上ZooKeeper 的一致性更复杂一些，ZooKeeper 的读操作是 sequential consistency 的，ZooKeeper 的写操作是 linearizability 的，关于这个说法，ZooKeeper 的官方文档中没有写出来，但是在社区的邮件组有详细的讨论。ZooKeeper 的论文《Modular Composition of Coordination Services》 中也有提到这个观点。\",\"总结一下，可以这么理解 ZooKeeper：从整体（read 操作 +write 操作）上来说是 sequential consistency，写操作实现了 Linearizability。\"]},\"466\":{\"h\":\"2.2 线性一致性 (Linearizability)\",\"t\":[\"线性一致性又被称为强一致性、严格一致性、原子一致性。是程序能实现的最高的一致性模型，也是分布式系统用户最期望的一致性。CAP 中的 C 一般就指它\",\"顺序一致性中进程只关心大家认同的顺序一样就行，不需要与全局时钟一致，线性就更严格，从这种偏序（partial order）要达到全序（total order）\",\"要求是：\",\"1.任何一次读都能读到某个数据的最近一次写的数据。\",\"2.系统中的所有进程，看到的操作顺序，都与全局时钟下的顺序一致。\",\"以上面的例 3 继续讨论：\",\"B1 看到 x 的新值，C1 反而看到的是旧值。即对用户来说，x 的值发生了回跳。\",\"在线性一致的系统中，如果 B1 看到的 x 值为1，则 C1 看到的值也一定为1。任何操作在该系统生效的时刻都对应时间轴上的一个点。如果我们把这些时刻连接起来，如下图中紫线所示，则这条线会一直沿时间轴向前，不会反向回跳。所以任何操作都需要互相比较决定，谁发生在前，谁发生在后。例如 B1 发生在 A0 前，C1 发生在 A0 后。而在前面顺序一致性模型中，我们无法比较诸如 B1 和 A0 的先后关系。\"]},\"467\":{\"h\":\"2.2.1 etcd 与 raft\",\"t\":[\"上面提到ZooKeeper的写是线性一致性，读是顺序一致性。而 etcd读写都做了线性一致，即 etcd 是标准的强一致性保证。\",\"etcd是基于raft来实现的，raft是共识算法，虽然共识和一致性的关系很微妙，经常一起讨论，但共识算法只是提供基础，要实现线性一致还需要在算法之上做出更多的努力如库封装，代码实现等。如raft中对于一致性读给出了两种方案，来保证处理这次读请求的一定是 Leader：\",\"ReadIndex\",\"LeaseRead\",\"基于 raft 的软件有很多，如 etcd、tidb、SOFAJRaft等，这些软件在实现一致读时都是基于这两种方式。\",\"关于 etcd 的选主架构这里不做描述，可以看这篇文章(http://www.xuyasong.com/?p=1706)，这里对ReadIndex和Lease Read做下解释，即etcd 中线性一致性读的具体实现\",\"由于在 Raft 算法中，写操作成功仅仅意味着日志达成了一致（已经落盘），而并不能确保当前状态机也已经 apply 了日志。状态机 apply 日志的行为在大多数 Raft 算法的实现中都是异步的，所以此时读取状态机并不能准确反应数据的状态，很可能会读到过期数据。\",\"基于以上这个原因，要想实现线性一致性读，一个较为简单通用的策略就是：每次读操作的时候记录此时集群的 commited index，当状态机的 apply index 大于或等于 commited index 时才读取数据并返回。由于此时状态机已经把读请求发起时的已提交日志进行了 apply 动作，所以此时状态机的状态就可以反应读请求发起时的状态，符合线性一致性读的要求。这便是 ReadIndex 算法。\",\"那如何准确获取集群的 commited index ？如果获取到的 committed index 不准确，那么以不准确的 committed index 为基准的 ReadIndex 算法将可能拿到过期数据。\",\"为了确保 committed index 的准确，我们需要：\",\"让 leader 来处理读请求；\",\"如果 follower 收到读请求，将请求 forward 给 leader；\",\"确保当前 leader 仍然是 leader；\",\"leader 会发起一次广播请求，如果还能收到大多数节点的应答，则说明此时 leader 还是 leader。这点非常关键，如果没有这个环节，leader 有可能因网络分区等原因已不再是 leader，如果读请求依然由过期的 leader 处理，那么就将有可能读到过去的数据。\",\"这样，我们从 leader 获取到的 commited index 就作为此次读请求的 ReadIndex。\",\"以网络分区为例：\",\"如上图所示：\",\"初始状态时集群有 5 个节点：A、B、C、D 和 E，其中 A 是 leader；\",\"发生网络隔离，集群被分割成两部分，一个 A 和 B，另外一个是 C、D 和 E。虽然 A 会持续向其他几个节点发送 heartbeat，但由于网络隔离，C、D 和 E 将无法接收到 A 的 heartbeat。默认地，A 不处理向 follower 节点发送 heartbeat 失败（此处为网络超时）的情况（协议没有明确说明 heartbeat 是一个必须收到 follower ack 的双向过程）；\",\"C、D 和 E 组成的分区在经过一定时间没有收到 leader 的 heartbeat 后，触发 election timeout，此时 C 成为 leader。此时，原来的 5 节点集群因网络分区分割成两个集群：小集群 A 和 B，A 为 leader；大集群 C、D 和 E，C 为 leader；\",\"此时有客户端进行读写操作。在 Raft 算法中，客户端无法感知集群的 leader 变化（更无法感知服务端有网络隔离的事件发生）。客户端在向集群发起读写请求时，一般是从集群的节点中随机挑选一个进行访问。如果客户端一开始选择 C 节点，并成功写入数据（C 节点集群已经 commit 操作日志），然后因客户端某些原因（比如断线重连），选择节点 A 进行读操作。由于 A 并不知道另外 3 个节点已经组成当前集群的大多数并写入了新的数据，所以节点 A 无法返回准确的数据。此时客户端将读到过期数据。不过相应地，如果此时客户端向节点 A 发起写操作，那么写操作将失败，因为 A 因网络隔离无法收到大多数节点的写入响应；\",\"针对上述情况，其实节点 C、D 和 E 组成的新集群才是当前 5 节点集群中的大多数，读写操作应该发生在这个集群中而不是原来的小集群（节点 A 和 B）。如果此时节点 A 能感知它已经不再是集群的 leader，那么节点 A 将不再处理读写请求。于是，我们可以在 leader 处理读请求时，发起一次 check quorum 环节：leader 向集群的所有节点发起广播，如果还能收到大多数节点的响应，处理读请求。当 leader 还能收到集群大多数节点的响应，说明 leader 还是当前集群的有效 leader，拥有当前集群完整的数据。否则，读请求失败，将迫使客户端重新选择新的节点进行读写操作。\",\"这样一来，Raft 算法就可以保障 CAP 中的 C 和 P，但无法保障 A：网络分区时并不是所有节点都可响应请求，少数节点的分区将无法进行服务，从而不符合 Availability。因此，Raft 算法是 CP 类型的一致性算法。\",\"Raft算法在线可视化：http://www.kailing.pub/raft/index.html\",\"Raft保证读请求Linearizability的方法：\",\"1.Leader把每次读请求作为一条日志记录，以日志复制的形式提交，并应用到状态机后，读取状态机中的数据返回。（一次RTT、一次磁盘写）\",\"2.使用Leader Lease，保证整个集群只有一个Leader，Leader接收到都请求后，记录下当前的commitIndex为readIndex，当applyIndex大于等于readIndex 后，则可以读取状态机中的数据返回。（0次RTT、0次磁盘写）\",\"3.不使用Leader Lease，而是当Leader通过以下两点来保证整个集群中只有其一个正常工作的Leader：（1）在每个Term开始时，由于新选出的Leader可能不知道上一个Term的commitIndex，所以需要先在当前新的Term提交一条空操作的日志；（2）Leader每次接到读请求后，向多数节点发送心跳确认自己的Leader身份。之后的读流程与Leader Lease的做法相同。（一次RTT、0次磁盘写）\",\"4.从Follower节点读：Follower先向Leader询问readIndex，Leader收到Follower的请求后依然要通过2或3中的方法确认自己Leader的身份，然后返回当前的commitIndex作为readIndex，Follower拿到readIndex后，等待本地的applyIndex大于等于readIndex后，即可读取状态机中的数据返回。（2次或1次RTT、0次磁盘写）\"]},\"468\":{\"h\":\"2.3 Linearizability 和 Serializability\",\"t\":[\"Serializability是数据库领域的概念，而Linearizability是分布式系统、并发编程领域的东西，在这个分布式SQL时代，自然Linearizability和Serializability会经常一起出现。\",\"Serializability: 数据库领域的ACID中的I。 数据库的四种隔离级别，由弱到强分别是Read Uncommitted,Read Committed(RC),Repeatable Read(RR)和Serializable。\",\"Serializable的含义是：对并发事务包含的操作进行调度后的结果和某种把这些事务一个接一个的执行之后的结果一样。最简单的一种调度实现就是真的把所有的事务进行排队，一个个的执行，显然这满足Serializability，问题就是性能。可以看出Serializability是与数据库事务相关的一个概念，一个事务包含多个读，写操作，这些操作由涉及到多个数据对象。\",\"Linearizability: 针对单个操作，单个数据对象而说的。属于CAP中C这个范畴。一个数据被更新后，能够立马被后续的读操作读到。\",\"Strict Serializability: 同时满足Serializability和Linearizability。\",\"举个最简单的例子：两个事务T1,T2，T1先开始，更新数据对象o，T1提交。接着T2开始，读数据对象o，提交。以下两种调度：\",\"T1,T2，满足Serializability，也满足Linearizability。\",\"T2,T1，满足Serializability，不满足Linearizability，因为T1之前更新的数据T2读不到。\"]},\"469\":{\"h\":\"2.4 因果一致性 Causal consistency\",\"t\":[\"因果一致性，属于弱一致性，因为在Causal consistency中，只对有因果关系的事件有顺序要求。\",\"没有因果一致性时会发生如下情形：\",\"夏侯铁柱在朋友圈发表状态“我戒指丢了”\",\"夏侯铁柱在同一条状态下评论“我找到啦”\",\"诸葛建国在同一条状态下评论“太棒了”\",\"远在美国的键盘侠看到“我戒指丢了”“太棒了”，开始喷诸葛建国\",\"远在美国的键盘侠看到“我戒指丢了”“我找到啦”“太棒了”，意识到喷错人了\",\"所以很多系统采用因果一致性系统来避免这种问题，例如微信的朋友圈就采用了因果一致性，可以参考：\"]},\"470\":{\"h\":\"2.5 最终一致性 Eventual consistency\",\"t\":[\"最终一致性这个词大家听到的次数应该是最多的，也是弱一致性，不过因为大多数场景下用户可以接受，应用也就比较广泛。\",\"理念：不保证在任意时刻任意节点上的同一份数据都是相同的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化。\",\"简单说，就是在一段时间后，节点间的数据会最终达到一致状态。不过最终一致性的要求非常低，除了像gossip这样明确以最终一致性为卖点的协议外，包括redis主备、mongoDB、乃至mysql热备都可以算是最终一致性，甚至如果我记录操作日志，然后在副本故障了100天之后手动在副本上执行日志以达成一致，也算是符合最终一致性的定义。有人说最终一致性就是没有一致性，因为没人可以知道什么时候算是最终。\",\"上边提到的因果一致性可以理解为是最终一致性的变种, 如果进程 A 通知进程 B 它已经更新了一个数据项，那么进程 B 的后续访问将返回更新后的值，并且写操作将被保证取代前一次写入。和进程 A 没有因果关系的 C 的访问将遵循正常的最终一致性规则。\",\"最终一致其实分支很多，以下都是他的变种：\",\"Causal consistency（因果一致性）\",\"Read-your-writes consistency （读己所写一致性）\",\"Session consistency （会话一致性）\",\"Monotonic read consistency （单调读一致性）\",\"Monotonic write consistency （单调写一致性）\",\"后面要提到的 BASE理论中的 E，就是Eventual consistency最终一致\"]},\"471\":{\"h\":\"2.6 ACID理论\",\"t\":[\"ACID 是处理事务的原则，一般特指数据库的一致性约束，ACID 一致性完全与数据库规则相关，包括约束，级联，触发器等。在事务开始之前和事务结束以后，都必须遵守这些不变量，保证数据库的完整性不被破坏，因此 ACID 中的 C 表示数据库执行事务前后状态的一致性，防止非法事务导致数据库被破坏。比如银行系统 A 和 B 两个账户的余额总和为 100，那么无论 A, B 之间怎么转换，这个余额和是不变，前后一致的。\",\"这里的C代表的一致性：事务必须遵循数据库的已定义规则和约束，例如约束，级联和触发器。因此，任何写入数据库的数据都必须有效，并且完成的任何事务都会改变数据库的状态。没有事务可以创建无效的数据状态。注意，这与CAP定理中定义的“一致性”是不同的。\",\"ACID 可以翻译为酸，相对应的是碱，也就是 BASE，不过提BASE之前要先说下 CAP，毕竟 BASE是基于 CAP 提出的折中理论\"]},\"472\":{\"h\":\"2.7 CAP理论\",\"t\":[\"CAP 理论中的 C 也就是我们常说的分布式系统中的一致性，更确切地说，指的是分布式一致性中的一种: 也就是前面讲的线性一致性(Linearizability)，也叫做原子一致性(Atomic consistency)。\",\"CAP 理论也是个被滥用的词汇，关于 CAP 的正确定义可参考cap faq。很多时候我们会用 CAP 模型去评估一个分布式系统，但这篇文章会告诉你 CAP 理论的局限性，因为按照 CAP 理论，很多系统包括 MongoDB，ZooKeeper 既不满足一致性(线性一致性)，也不满足可用性(任意一个工作中的节点都要可以处理请求)，但这并不意味着它们不是优秀的系统，而是 CAP 定理本身的局限性(没有考虑处理延迟，容错等)。\"]},\"473\":{\"h\":\"2.8 BASE理论\",\"t\":[\"正因为 CAP 中的一致性和可用性是强一致性和高可用，后来又有人基于 CAP 理论 提出了BASE 理论，即基本可用(Basically Available）、软状态(Soft State)、最终一致性(Eventual Consistency)。BASE的核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方法来使系统达到最终一致性。显然，最终一致性弱于 CAP 中的 线性一致性。很多分布式系统都是基于 BASE 中的”基本可用”和”最终一致性”来实现的，比如 MySQL/PostgreSQL Replication 异步复制。\"]},\"474\":{\"h\":\"2.9 ACID一致性与CAP一致性的区别\",\"t\":[\"ACID一致性是有关数据库规则，如果数据表结构定义一个字段值是唯一的，那么一致性系统将解决所有操作中导致这个字段值非唯一性的情况，如果带有一个外键的一行记录被删除，那么其外键相关记录也应该被删除，这就是ACID一致性的意思。\",\"CAP理论的一致性是保证同样一个数据在所有不同服务器上的拷贝都是相同的，这是一种逻辑保证，而不是物理，因为光速限制，在不同服务器上这种复制是需要时间的，集群通过阻止客户端查看不同节点上还未同步的数据维持逻辑视图。\",\"当跨分布式系统提供ACID时，这两个概念会混淆在一起，Google’s Spanner system能够提供分布式系统的ACID，其包含ACID+CAP设计，也就是两阶段提交 2PC+ 多副本同步机制（如 Paxos）\"]},\"475\":{\"h\":\"2.10 ACID/2PC/3PC/TCC/Paxos 关系\",\"t\":[\"ACID 是处理事务的原则，限定了原子性、一致性、隔离性、持久性。ACID、CAP、BASE这些都只是理论，只是在实现时的目标或者折中，ACID 专注于分布式事务，CAP 和 BASE是分布式通用理论。\",\"解决分布式事务时有 2pc、3pc、tcc 等方式，通过增加协调者来进行协商，里面也有最终一致的思想。\",\"而Paxos协议与分布式事务并不是同一层面的东西，Paxos用于解决多个副本之间的一致性问题。比如日志同步，保证各个节点的日志一致性，选主的唯一性。简而言之，2PC用于保证多个数据分片上事务的原子性，Paxos协议用于保证同一个数据分片在多个副本的一致性，所以两者可以是互补的关系，不是替代关系。对于2PC协调者单点问题，可以利用Paxos协议解决，当协调者出问题时，选一个新的协调者继续提供服务。原理上Paxos和 2PC相似，但目的上是不同的。etcd 中也有事务的操作，比如迷你事务\"]},\"476\":{\"h\":\"3.参考\",\"t\":[\"https://zhuanlan.zhihu.com/p/27360832\",\"https://www.itcodemonkey.com/article/3932.html\",\"https://zookeeper.apache.org/doc/r3.4.9/zookeeperProgrammers.html#ch_zkGuarantees\",\"https://www.sofastack.tech/blog/sofa-jraft-linear-consistent-read-implementation/\",\"https://feilengcui008.github.io/post/raft读请求/\",\"http://codefever.github.io/2019/09/17/raft-linearizable-read/\",\"https://blog.csdn.net/chao2016/article/details/81149674\",\"https://lentil1016.cn/consistencies-and-raft/\",\"https://www.jdon.com/artichect/acid-cap.html\",\"https://en.wikipedia.org/wiki/Sequential_consistency\",\"https://en.wikipedia.org/wiki/Linearizability\",\"https://en.wikipedia.org/wiki/Serializability\"]},\"477\":{\"c\":[\"分布式\"]},\"478\":{\"c\":[\"分布式\"]},\"479\":{\"h\":\"netty关键参数的说明\",\"t\":[\"MAX_MESSAGES_PER_READ Netty参数，一次Loop读取的最大消息数，对于ServerChannel或者NioByteChannel，默认值为16，其他Channel默认值为1。默认值这样设置，是因为：ServerChannel需要接受足够多的连接，保证大吞吐量，NioByteChannel可以减少不必要的系统调用select。\",\"RCVBUF_ALLOCATOR Netty参数，用于Channel分配接受Buffer的分配器，默认值为AdaptiveRecvByteBufAllocator.DEFAULT，是一个自适应的接受缓冲区分配器，能根据接受到的数据自动调节大小。可选值为FixedRecvByteBufAllocator，固定大小的接受缓冲区分配器。\",\"WRITE_BUFFER_HIGH_WATER_MARK Netty参数，写高水位标记，默认值64KB。如果Netty的写缓冲区中的字节超过该值，Channel的isWritable()返回False。\",\"WRITE_BUFFER_LOW_WATER_MARK Netty参数，写低水位标记，默认值32KB。当Netty的写缓冲区中的字节超过高水位之后若下降到低水位，则Channel的isWritable()返回True。写高低水位标记使用户可以控制写入数据速度，从而实现流量控制。推荐做法是：每次调用channl.write(msg)方法首先调用channel.isWritable()判断是否可写。\",\"MESSAGE_SIZE_ESTIMATOR Netty参数，消息大小估算器，默认为DefaultMessageSizeEstimator.DEFAULT。估算ByteBuf、ByteBufHolder和FileRegion的大小，其中ByteBuf和ByteBufHolder为实际大小，FileRegion估算值为0。该值估算的字节数在计算水位时使用，FileRegion为0可知FileRegion不影响高低水位。\",\"SINGLE_EVENTEXECUTOR_PER_GROUP Netty参数，单线程执行ChannelPipeline中的事件，默认值为True。该值控制执行ChannelPipeline中执行ChannelHandler的线程。如果为Trye，整个pipeline由一个线程执行，这样不需要进行线程切换以及线程同步，是Netty4的推荐做法；如果为False，ChannelHandler中的处理过程会由Group中的不同线程执行。\",\"SO_SNDBUF Socket参数，TCP数据发送缓冲区大小。该缓冲区即TCP发送滑动窗口，linux操作系统可使用命令：cat /proc/sys/net/ipv4/tcp_smem查询其大小。\",\"TCP_NODELAY TCP参数，立即发送数据，默认值为Ture（Netty默认为True而操作系统默认为False）。该值设置Nagle算法的启用，改算法将小的碎片数据连接成更大的报文来最小化所发送的报文的数量，如果需要发送一些较小的报文，则需要禁用该算法。Netty默认禁用该算法，从而最小化报文传输延时。\",\"SO_KEEPALIVE Socket参数，连接保活，默认值为False。启用该功能时，TCP会主动探测空闲连接的有效性。可以将此功能视为TCP的心跳机制，需要注意的是：默认的心跳间隔是7200s即2小时。Netty默认关闭该功能。\",\"SO_LINGER Socket参数，关闭Socket的延迟时间，默认值为-1，表示禁用该功能。-1表示socket.close()方法立即返回，但OS底层会将发送缓冲区全部发送到对端。0表示socket.close()方法立即返回，OS放弃发送缓冲区的数据直接向对端发送RST包，对端收到复位错误。非0整数值表示调用socket.close()方法的线程被阻塞直到延迟时间到或发送缓冲区中的数据发送完毕，若超时，则对端会收到复位错误。\",\"IP_TOS IP参数，设置IP头部的Type-of-Service字段，用于描述IP包的优先级和QoS选项。\",\"ALLOW_HALF_CLOSURE Netty参数，一个连接的远端关闭时本地端是否关闭，默认值为False。值为False时，连接自动关闭；为True时，触发ChannelInboundHandler的userEventTriggered()方法，事件为ChannelInputShutdownEvent。\",\"SO_BROADCAST: Socket参数，设置广播模式。\",\"SO_SNDBUF:已说明\",\"IP_MULTICAST_LOOP_DISABLED: 对应IP参数IP_MULTICAST_LOOP，设置本地回环接口的多播功能。由于IP_MULTICAST_LOOP返回True表示关闭，所以Netty加上后缀_DISABLED防止歧义。\",\"IP_MULTICAST_ADDR: 对应IP参数IP_MULTICAST_IF，设置对应地址的网卡为多播模式。\",\"IP_MULTICAST_IF: 对应IP参数IP_MULTICAST_IF2，同上但支持IPV6。\",\"IP_MULTICAST_TTL: IP参数，多播数据报的time-to-live即存活跳数。\",\"IP_TOS: 已说明\",\"DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION:\\nNetty参数，DatagramChannel注册的EventLoop即表示已激活。\"]},\"480\":{\"c\":[\"netty\"]},\"481\":{\"h\":\"Apache ShenYu匹配缓存设计分析\"},\"482\":{\"h\":\"1.前言\",\"t\":[\"Apache ShenYu是一款支持多语言、多协议(Dubbo,SpringCloud,gRPC,Motan,Sofa,Tars, BRPC)、插件化设计、高度可动态化配置、高度可自主化开发的Java网关。内置丰富的插件支持，鉴权，限流，熔断，防火墙等等。流量配置动态化，性能极高。支持集群部署，支持 A/B Test，蓝绿发布等功能。\",\"Apache ShenYu的匹配缓存主要由3级缓存构成，第一级缓存是由Caffeine实现的本地缓存，第二级缓存是由Caffeine与ConcurrentHashMap实现的前缀树缓存，第三级缓存是由ConcurrentHashMap构成的全局缓存。其中一级缓存和二级缓存都是需要配置开启的，三级缓存是默认使用的。\"]},\"483\":{\"h\":\"2.总体思路\",\"t\":[\"在所有缓存都开启的前提下，如果一级缓存没有命中，那么会从前缀树缓存进行匹配，如果前缀树缓存也没有命中，那么会默认的缓存中进行匹配，如果默认的缓存没有匹配成功，则说明匹配失效。\"]},\"484\":{\"h\":\"3.一级缓存\"},\"485\":{\"h\":\"3.1 一级缓存的设计\",\"t\":[\"shenyu为selector和rule都设计了一级缓存，一级使用ConcurrentHashMap实现，key为pluginName，value是基于Caffeine实现的WindowTinyLFUMap。 当一级缓存是selector缓存时，value为Map<String, SelectorData>，其中lfuMap的key是path，value为SelectorData。 当一级缓存是rule缓存时，value为Map<String, RuleData>，其中lfuMap的key是path，value为RuleData。\",\" /** * pluginName -> LRUMap. * LRUMap: path -> selector data. */ private static final ConcurrentMap<String, Map<String, SelectorData>> SELECTOR_DATA_MAP = Maps.newConcurrentMap(); /** * plugin name -> LRU Map. * LRU Map: path -> rule data. */ private static final ConcurrentMap<String, Map<String, RuleData>> RULE_DATA_MAP = Maps.newConcurrentMap(); \"]},\"486\":{\"h\":\"3.2 何时存入数据\",\"t\":[\"1.当二级缓存或者三级缓存(默认缓存)命中的时候，会将<pluginName, <<path, Rule/Selector>>数据存入一级缓存中。\",\"2.当默认缓存没有命中的时候，也会将数据存入一级缓存中，存储的数据Rule或者Selector为只有pluginName字段，表示当前数据不可能命中(不可能被访问)。\",\"public abstract class AbstractShenyuPlugin implements ShenyuPlugin { /** * cache rule data. * * @param path current uri path * @param ruleData rule data */ private void cacheRuleData(final String path, final RuleData ruleData) { // if the ruleCache is disabled or rule data is null, not cache rule data. if (Boolean.FALSE.equals(ruleMatchConfig.getCache().getEnabled()) || Objects.isNull(ruleData) || Boolean.TRUE.equals(ruleData.getMatchRestful())) { return; } int initialCapacity = ruleMatchConfig.getCache().getInitialCapacity(); long maximumSize = ruleMatchConfig.getCache().getMaximumSize(); // 将空数据存入缓存中，表示当前数据不可能命中(不可能被访问) if (StringUtils.isBlank(ruleData.getId())) { MatchDataCache.getInstance().cacheRuleData(path, ruleData, initialCapacity, maximumSize); return; } List<ConditionData> conditionList = ruleData.getConditionDataList(); if (CollectionUtils.isNotEmpty(conditionList)) { // 如果所有的条件都是uri条件，那么将数据存入缓存中 boolean isUriCondition = conditionList.stream().allMatch(v -> URI_CONDITION_TYPE.equals(v.getParamType())); if (isUriCondition) { MatchDataCache.getInstance().cacheRuleData(path, ruleData, initialCapacity, maximumSize); } } } private RuleData trieMatchRule(final ServerWebExchange exchange, final SelectorData selectorData, final String path) { if (!ruleMatchConfig.getTrie().getEnabled()) { return null; } RuleData ruleData = null; ShenyuTrieNode shenyuTrieNode = ruleTrie.match(path, selectorData.getId()); if (Objects.nonNull(shenyuTrieNode)) { LogUtils.info(LOG, \\\"{} rule match path from shenyu trie\\\", named()); List<?> collection = shenyuTrieNode.getPathCache().get(selectorData.getId()); if (CollectionUtils.isNotEmpty(collection)) { Pair<Boolean, RuleData> ruleDataPair; if (collection.size() > 1) { ruleDataPair = matchRule(exchange, ListUtil.castList(collection, RuleData.class::cast)); } else { Object ruleObj = collection.stream().findFirst().orElse(null); RuleData rule = Objects.nonNull(ruleObj) ? (RuleData) ruleObj : null; boolean cached = Objects.nonNull(rule) && rule.getConditionDataList().stream().allMatch(condition -> URI_CONDITION_TYPE.equals(condition.getParamType())); ruleDataPair = Pair.of(cached, rule); } ruleData = ruleDataPair.getRight(); if (ruleDataPair.getLeft() && Objects.nonNull(ruleData)) { // exist only one rule data, cache rule cacheRuleData(path, ruleData); } } } return ruleData; } private RuleData defaultMatchRule(final ServerWebExchange exchange, final List<RuleData> rules, final String path) { Pair<Boolean, RuleData> matchRulePair = matchRule(exchange, rules); RuleData ruleData = matchRulePair.getRight(); // 如果匹配成功则表示，当前的路径情况下可以匹配成功 if (Objects.nonNull(ruleData)) { LOG.info(\\\"{} rule match path from default strategy\\\", named()); // cache rule data if (matchRulePair.getLeft()) { cacheRuleData(path, ruleData); } return ruleData; } else { // if not match rule, cache empty rule data. if (matchRulePair.getLeft()) { // 如果没有匹配成功，那么将空数据存入缓存中，表示当前数据不可能命中(不可能被访问) RuleData emptyRuleData = RuleData.builder().pluginName(named()).build(); cacheRuleData(path, emptyRuleData); } return null; } } } \"]},\"487\":{\"h\":\"3.3 何时匹配数据\",\"t\":[\"在一级缓存开启的前提下，只有继承了org.apache.shenyu.plugin.base.AbstractShenyuPlugin类的插件才会访问一级缓存。\",\"public abstract class AbstractShenyuPlugin implements ShenyuPlugin { @Override public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginChain chain) { // 省略部分代码 SelectorData selectorData = obtainSelectorDataCacheIfEnabled(path); // ... // 如果不能匹配命中，则从trie缓存中匹配 RuleData ruleData = obtainRuleDataCacheIfEnabled(path); } private SelectorData obtainSelectorDataCacheIfEnabled(final String path) { return selectorMatchConfig.getCache().getEnabled() ? MatchDataCache.getInstance().obtainSelectorData(named(), path) : null; } private RuleData obtainRuleDataCacheIfEnabled(final String path) { return ruleMatchConfig.getCache().getEnabled() ? MatchDataCache.getInstance().obtainRuleData(named(), path) : null; } } \",\"public final class MatchDataCache { public SelectorData obtainSelectorData(final String pluginName, final String path) { final Map<String, SelectorData> lruMap = SELECTOR_DATA_MAP.get(pluginName); return Optional.ofNullable(lruMap).orElse(Maps.newHashMap()).get(path); } } \"]},\"488\":{\"h\":\"3.4 何时删除数据\",\"t\":[\"1.当更新当前插件的时候，会将当前插件相关的selector缓存或者rule缓存删除\",\"如果是更新插件的任意一个选项，如果插件开启的前提下，shenyu将会根据pluginName删除当前插件相关的selector缓存和rule缓存,核心的代码如下：MatchDataCache.getInstance().removeSelectorData(pluginName);, MatchDataCache.getInstance().removeRuleData(pluginName);\",\"2.当更新当前selector或者rule的时候，shenyu会将当前selector或者rule相关的数据删除\",\"当更新selector的时候，shenyu会根据插件名称和selectorId删除当前selector相关的缓存数据，同时也会删除空的selector缓存数据。 在更新selector的同时，shenyu同时也会删除当前selector相关的rule缓存，同时也会删除空的rule缓存数据。\",\"当更新rule的时候，shenyu会根据插件名称和ruleId删除当前rule相关的缓存数据，同时也会删除空的rule缓存数据。\",\"public class CommonPluginDataSubscriber implements PluginDataSubscriber { private <T> void updateCacheData(@NonNull final T data) { if (data instanceof PluginData) { PluginData pluginData = (PluginData) data; // ...... 省略部分代码 final String pluginName = pluginData.getName(); // 如果是更新插件，那么会将当前插件相关的selector缓存和rule缓存删除，并且是根据pluginName进行删除的。 if (selectorMatchConfig.getCache().getEnabled()) { MatchDataCache.getInstance().removeSelectorData(pluginName); } if (ruleMatchCacheConfig.getCache().getEnabled()) { MatchDataCache.getInstance().removeRuleData(pluginName); } } else if (data instanceof SelectorData) { SelectorData selectorData = (SelectorData) data; // 如果是更新更新selector的话，首先会将当前selector相关的缓存删除，同时也会删除空SelectorData的数据 if (selectorMatchConfig.getCache().getEnabled()) { MatchDataCache.getInstance().removeSelectorData(selectorData.getPluginName(), selectorData.getId()); MatchDataCache.getInstance().removeEmptySelectorData(selectorData.getPluginName()); } // 同时删除当前selector相关的rule缓存，同时也会删除空的rule缓存数据 if (ruleMatchCacheConfig.getCache().getEnabled()) { MatchDataCache.getInstance().removeRuleDataBySelector(selectorData.getPluginName(), selectorData.getId()); MatchDataCache.getInstance().removeEmptyRuleData(selectorData.getPluginName()); } updateSelectorTrieCache(selectorData); } else if (data instanceof RuleData) { RuleData ruleData = (RuleData) data; // 如果是更新更新rule的话，首先会将当前rule相关的缓存删除，同时也会删除空RuleData的数据 if (ruleMatchCacheConfig.getCache().getEnabled()) { MatchDataCache.getInstance().removeRuleData(ruleData.getPluginName(), ruleData.getId()); MatchDataCache.getInstance().removeEmptyRuleData(ruleData.getPluginName()); } updateRuleTrieCache(ruleData); } } } \",\"3.当删除当前selector或者rule的时候，shenyu会将当前selector或者rule相关的数据删除\",\"当删除当前selector的时候会将当前selector相关的缓存数据删除，同时也会删除空的selector缓存数据。\",\"当删除当前rule的时候会将当前rule相关的缓存数据删除，同时也会删除空的rule缓存数据。\",\"public class CommonPluginDataSubscriber implements PluginDataSubscriber { private <T> void removeCacheData(@NonNull final T data) { if (data instanceof PluginData) { } else if (data instanceof SelectorData) { SelectorData selectorData = (SelectorData) data; // remove selector match cache if (selectorMatchConfig.getCache().getEnabled()) { MatchDataCache.getInstance().removeSelectorData(selectorData.getPluginName(), selectorData.getId()); MatchDataCache.getInstance().removeEmptySelectorData(selectorData.getPluginName()); } } else if (data instanceof RuleData) { RuleData ruleData = (RuleData) data; if (ruleMatchCacheConfig.getCache().getEnabled()) { MatchDataCache.getInstance().removeRuleData(ruleData.getPluginName(), ruleData.getId()); MatchDataCache.getInstance().removeEmptyRuleData(ruleData.getPluginName()); } } } } \"]},\"489\":{\"h\":\"3.5 何时使用一级缓存\",\"t\":[\"shenyu的一级缓存只有在rule condition中只有uri match的时候才会使用，其他的情况都不会将数据缓存到一级缓存。\",\"如果在同一个selector中有多个相同uri condition的rule，那么就不要开启一级缓存。\",\"当rule或者selector中matchRestful为true的时候(表示匹配restful风格的数据，这样能够节省内存)，shenyu不会将数据缓存到一级缓存中。\"]},\"490\":{\"h\":\"4.二级缓存匹配\"},\"491\":{\"h\":\"4.1 二级缓存的设计\",\"t\":[\"shenyu的二级缓存是基于Caffeine实现的WindowLFUMap实现的前缀树缓存。shenyu的前缀树主要包含了由caffeine实现的keyRootMap和匹配模式。\",\"shenyu的前缀树支持两种匹配模式，一种是antPathMatch，一种是pathPattern。antPathMatch支持路径中待通配符访问，包括支持*，**，*.json格式通配符。\",\"shenyu的前缀树的keyRootMap是一个Map<String, ShenyuTrieNode>，当前缀树是selector前缀树的时候，keyRootMap的key是pluginName，value是ShenyuTrieNode， 当前缀树是rule前缀树的时候，keyRootMap的key是selectorId，value是ShenyuTrieNode。\",\"public class ShenyuTrie { /** * when the trie is selector trie, the key is pluginName, when the trie is rule trie, the key is selectorId. */ private final Map<String, ShenyuTrieNode> keyRootMap; /** * the mode includes antPathMatch and pathPattern * antPathMatch means all full match, pathPattern is used in web. */ private final TrieMatchModeEnum matchMode; public ShenyuTrie(final Long cacheSize, final String matchMode) { this.matchMode = TrieMatchModeEnum.acquireTrieMatch(matchMode); this.keyRootMap = new WindowTinyLFUMap<>(cacheSize); } } \",\"ShenyuTrieNode的数据结构设计如下：\",\"public class ShenyuTrieNode implements Serializable { private static final long serialVersionUID = -2347426887850566364L; /** * abc match abc, :a match all words as a variable names a, * match all words ,** match all words and children. */ private String matchStr; /** * full path. */ private String fullPath; /** * in path /a/b/c, b is child of a, c is child of b. */ private Map<String, ShenyuTrieNode> children; /** * path variables. */ private Map<String, ShenyuTrieNode> pathVariables; /** * path variable node. */ private ShenyuTrieNode pathVariableNode; /** * isWildcard, match all nodes, /a/b/** /** is a match all Node. */ private boolean isWildcard; /** * if true means a real path exists, /a/b/c/d only node of d is true, a,b,c is false. */ private boolean endOfPath; /** * selectorId mapping to RuleData. */ private Map<String, List<?>> pathCache; /** * biz info, if the trie is selector trie, the bizInfo is pluginName, if the trie is rule trie, the bizInfo is selectorId. */ private String bizInfo; /** * parent node. */ private ShenyuTrieNode parentNode; /** * fail to node. */ private ShenyuTrieNode failToNode; } \"]},\"492\":{\"h\":\"4.2 何时存入数据\",\"t\":[\"在前缀树缓存开启的前提下，只有通过shenyu-admin或者本地模式添加selector或者rule数据并且是包含了uri匹配的规则时会将ruledata或者selectordata相关的数据存入对应的RuleTri或者SelectorTrie中。\",\"public class CommonPluginDataSubscriber implements PluginDataSubscriber { private void updateSelectorTrieCache(final SelectorData selectorData) { if (!selectorMatchConfig.getTrie().getEnabled()) { return; } if (Boolean.TRUE.equals(selectorData.getEnabled())) { if (CollectionUtils.isEmpty(selectorData.getBeforeConditionList())) { eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.INSERT, TrieCacheTypeEnum.SELECTOR, selectorData)); } else { // if selector data has before condition, update trie eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.UPDATE, TrieCacheTypeEnum.SELECTOR, selectorData)); } } else { eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.REMOVE, TrieCacheTypeEnum.SELECTOR, selectorData)); } } private void updateRuleTrieCache(final RuleData ruleData) { if (!ruleMatchCacheConfig.getTrie().getEnabled()) { return; } if (Boolean.TRUE.equals(ruleData.getEnabled())) { if (CollectionUtils.isEmpty(ruleData.getBeforeConditionDataList())) { eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.INSERT, TrieCacheTypeEnum.RULE, ruleData)); } else { // if rule data has before condition, update trie eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.UPDATE, TrieCacheTypeEnum.RULE, ruleData)); } } else { eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.REMOVE, TrieCacheTypeEnum.RULE, ruleData)); } } } \",\"public class ShenyuTrieListener implements ApplicationListener<TrieEvent> { @Override public void onApplicationEvent(final TrieEvent event) { // 省略部分代码 if (CollectionUtils.isNotEmpty(filterConditions)) { List<String> uriPaths = filterConditions.stream().map(ConditionData::getParamValue).collect(Collectors.toList()); switch (eventEnum) { case INSERT: insertTrieNode(uriPaths, source, cacheTypeEnum, shenyuTrie); break; case UPDATE: updateTrieNode(uriPaths, source, cacheTypeEnum, shenyuTrie); break; case REMOVE: removeTrieNode(uriPaths, source, cacheTypeEnum, shenyuTrie); break; default: throw new IllegalStateException(\\\"Unexpected value: \\\" + event.getTrieEventEnum()); } } } } \"]},\"493\":{\"h\":\"4.3 何时匹配数据\",\"t\":[\"在开启二级缓存(Trie缓存)缓存的前提下，只有继承了org.apache.shenyu.plugin.base.AbstractShenyuPlugin类的插件才会访二级缓存(前缀树缓存)。\",\"shenyu前缀树的匹配逻辑大致如下(此处以RuleTrie说明)：\",\"1.先从keyRootMap中通过selectorId获取到对应的ShenyuTrieNode，如果没有则返回null。\",\"2.通过path以/进行划分，从第一个节点在trieNode的children中进行访问，如果存在则继续访问，如果不存在则返回null，\",\"3.如果在访问过程中，存在冲突节点，则通过AC自动机构建的失配节点继续访问，知道找到对应的有效节点，如果访问root节点还找不到，则说明无法匹配。\",\"public abstract class AbstractShenyuPlugin implements ShenyuPlugin { private RuleData trieMatchRule(final ServerWebExchange exchange, final SelectorData selectorData, final String path) { if (!ruleMatchConfig.getTrie().getEnabled()) { return null; } RuleData ruleData = null; ShenyuTrieNode shenyuTrieNode = ruleTrie.match(path, selectorData.getId()); if (Objects.nonNull(shenyuTrieNode)) { LogUtils.info(LOG, \\\"{} rule match path from shenyu trie\\\", named()); List<?> collection = shenyuTrieNode.getPathCache().get(selectorData.getId()); if (CollectionUtils.isNotEmpty(collection)) { Pair<Boolean, RuleData> ruleDataPair; if (collection.size() > 1) { ruleDataPair = matchRule(exchange, ListUtil.castList(collection, RuleData.class::cast)); } else { Object ruleObj = collection.stream().findFirst().orElse(null); RuleData rule = Objects.nonNull(ruleObj) ? (RuleData) ruleObj : null; boolean cached = Objects.nonNull(rule) && rule.getConditionDataList().stream().allMatch(condition -> URI_CONDITION_TYPE.equals(condition.getParamType())); ruleDataPair = Pair.of(cached, rule); } ruleData = ruleDataPair.getRight(); if (ruleDataPair.getLeft() && Objects.nonNull(ruleData)) { // exist only one rule data, cache rule cacheRuleData(path, ruleData); } } } return ruleData; } } \"]},\"494\":{\"h\":\"4.4 何时删除数据\",\"t\":[\"shenyu删除前缀树主要有两种方案\",\"当禁用当前选择器或者规则时，会将前缀树的缓存的selector或者rule根据uri进行删除，该过程发生在更新选择器或者规则的时候。\",\"public class CommonPluginDataSubscriber implements PluginDataSubscriber { private <T> void updateCacheData(@NonNull final T data) { if (Boolean.TRUE.equals(ruleData.getEnabled())) { if (CollectionUtils.isEmpty(ruleData.getBeforeConditionDataList())) { eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.INSERT, TrieCacheTypeEnum.RULE, ruleData)); } else { // if rule data has before condition, update trie eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.UPDATE, TrieCacheTypeEnum.RULE, ruleData)); } } else { // 如果是禁用选择器或者规则就删除前缀树中的缓存 eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.REMOVE, TrieCacheTypeEnum.RULE, ruleData)); } } } \",\"当删除当前选择器或者规则时，会将前缀树的缓存的selector或者rule进行删除。\",\"public class CommonPluginDataSubscriber implements PluginDataSubscriber { private <T> void removeCacheData(@NonNull final T data) { if (data instanceof PluginData) { } else if (data instanceof SelectorData) { // remove selector trie cache // 删除selector trie中的缓存 if (selectorMatchConfig.getTrie().getEnabled()) { eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.REMOVE, TrieCacheTypeEnum.SELECTOR, selectorData)); } } else if (data instanceof RuleData) { // 删除rule trie中的缓存 if (ruleMatchCacheConfig.getTrie().getEnabled()) { eventPublisher.publishEvent(new TrieEvent(TrieEventEnum.REMOVE, TrieCacheTypeEnum.RULE, ruleData)); } } } \"]},\"495\":{\"h\":\"4.5 何时使用二级缓存\",\"t\":[\"shenyu二级缓存只有在selector/rule的condition中有uri类型的参数时才会缓存到trie中，如果没有uri类型的参数，则不会使用二级缓存。\",\"尽可能在同一个selector中不要设置多个相同uri的规则，多个相同的uri会导致前缀会执行默认的筛选条件，这样会导致性能的损耗。\",\"尽可能少使用含通配符*,**的uri，这样会导致前缀树的匹配性能损耗。\"]},\"496\":{\"h\":\"5.三级缓存匹配\",\"t\":[\"该缓存是shenyu默认的匹配缓存，selector和rule都是基于ConcurrentHashMap实现的缓存，其主要的数据结构如下：\",\" /** * pluginName -> SelectorData. */ private static final ConcurrentMap<String, List<SelectorData>> SELECTOR_MAP = Maps.newConcurrentMap(); /** * selectorId -> RuleData. */ private static final ConcurrentMap<String, List<RuleData>> RULE_MAP = Maps.newConcurrentMap(); \",\"其中SELECTOR_MAP中key是pluginName，value是对应插件的选择器的集合。RULE_MAP中的key是selectorId，value是对应选择器的规则集合。\"]},\"497\":{\"h\":\"5.1 何时存入数据\",\"t\":[\"shenyu默认的缓存是在网关启动后，通过数据同步或者本地模式添加数据将所有的选择器和规则都存入缓存中。并且在每次更新selector或者rule的时候都会更新对应的selector或者rule数据。\",\"public class CommonPluginDataSubscriber implements PluginDataSubscriber { private <T> void updateCacheData(@NonNull final T data) { if (data instanceof PluginData) { PluginData pluginData = (PluginData) data; final PluginData oldPluginData = BaseDataCache.getInstance().obtainPluginData(pluginData.getName()); BaseDataCache.getInstance().cachePluginData(pluginData); Optional.ofNullable(handlerMap.get(pluginData.getName())) .ifPresent(handler -> handler.handlerPlugin(pluginData)); } else if (data instanceof SelectorData) { SelectorData selectorData = (SelectorData) data; BaseDataCache.getInstance().cacheSelectData(selectorData); Optional.ofNullable(handlerMap.get(selectorData.getPluginName())) .ifPresent(handler -> handler.handlerSelector(selectorData)); } else if (data instanceof RuleData) { RuleData ruleData = (RuleData) data; BaseDataCache.getInstance().cacheRuleData(ruleData); Optional.ofNullable(handlerMap.get(ruleData.getPluginName())) .ifPresent(handler -> handler.handlerRule(ruleData)); } } } \"]},\"498\":{\"h\":\"5.2 何时匹配数据\",\"t\":[\"1.在一级缓存以及二级未匹配到数据的时候，会使用默认缓存进行匹配\",\"2.在一级、二级缓存未开启的时候，会使用默认缓存进行匹配。\",\"shenyu的默认缓存匹配是通过spi实现的匹配，会从rule中获取rule condition，然后根据condition的type进行匹配。\",\"public abstract class AbstractShenyuPlugin implements ShenyuPlugin { @Override public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginChain chain) { List<SelectorData> selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName); List<RuleData> rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId()); } private Boolean filterRule(final RuleData ruleData, final ServerWebExchange exchange) { return ruleData.getEnabled() && MatchStrategyFactory.match(ruleData.getMatchMode(), ruleData.getConditionDataList(), exchange); } } \"]},\"499\":{\"h\":\"5.3 何时删除数据\",\"t\":[\"当在shenyu-admin或者本地模式通过接口删除选择器或规则时，shenyu将会从默认缓存中删除选择器和规则的数据。\",\"public class CommonPluginDataSubscriber implements PluginDataSubscriber { private <T> void removeCacheData(@NonNull final T data) { if (data instanceof PluginData) { } else if (data instanceof SelectorData) { SelectorData selectorData = (SelectorData) data; BaseDataCache.getInstance().removeSelectData(selectorData); Optional.ofNullable(handlerMap.get(selectorData.getPluginName())) .ifPresent(handler -> handler.removeSelector(selectorData)); } else if (data instanceof RuleData) { RuleData ruleData = (RuleData) data; BaseDataCache.getInstance().removeRuleData(ruleData); Optional.ofNullable(handlerMap.get(ruleData.getPluginName())) .ifPresent(handler -> handler.removeRule(ruleData)); } } } \"]},\"500\":{\"c\":[\"shenyu\"]},\"501\":{\"c\":[\"Apache ShenYu\"]},\"502\":{\"h\":\"Apache ShenYu整合Sentinel源码分析\"},\"503\":{\"h\":\"1.前言\",\"t\":[\"Apache ShenYu是一款支持多语言、多协议(Dubbo,SpringCloud,gRPC,Motan,SofaTars, BRPC)、插件化设计、高度可动态化配置、高度可自主化开发的Java网关。内置丰富的插件支持，鉴权，限流，熔断，防火墙等等。流量配置动态化，性能极高。支持集群部署，支持 A/B Test，蓝绿发布等功能。\",\"Sentinel是阿里巴巴开源的一款流量控制组件，主要用于流量控制、熔断降级、系统负载保护等。本文将介绍如何在Apache ShenYu中整合Sentinel的源码分析。\"]},\"504\":{\"h\":\"2.Apache ShenYu整合Sentinel源码分析\"},\"505\":{\"h\":\"2.1 如何设置Sentinel加载资源的resourceName\",\"t\":[\"ShenYu通过rule中获取selectorId和ruleId,拼接成selectorId_ruleId形式的resourceName，例如：150232_1233\",\" public String getKey(final RuleData ruleData) { return String.join(\\\"_\\\", ruleData.getSelectorId(), ruleData.getId()); } \"]},\"506\":{\"h\":\"2.1 Sentinel加载ShenYu配置的限流、降级规则\",\"t\":[\"ShenYu通过org.apache.shenyu.plugin.sentinel.handler.SentinelRuleHandle接收插件所配置的限流、降级规则，然后通过org.apache.shenyu.plugin.sentinel.handler.SentinelRuleHandle#handlerRule方法将规则加载到Sentinel中。\",\"ShenYu会首先从Sentinel中获取流控、降级规则，然后将ShenYu配置的规则添加到Sentinel中，最后将所有规则加载到Sentinel中。\",\"public class SentinelRuleHandle implements PluginDataHandler { @Override public void handlerRule(final RuleData ruleData) { SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(ruleData.getHandle(), SentinelHandle.class); sentinelHandle.checkData(sentinelHandle); String key = CacheKeyUtils.INST.getKey(ruleData); // 获取当前资源的流控规则 List<FlowRule> flowRules = FlowRuleManager.getRules() .stream() .filter(r -> !r.getResource().equals(key)) .collect(Collectors.toList()); if (sentinelHandle.getFlowRuleEnable() == Constants.SENTINEL_ENABLE_FLOW_RULE) { FlowRule rule = new FlowRule(key); rule.setCount(sentinelHandle.getFlowRuleCount()); rule.setGrade(sentinelHandle.getFlowRuleGrade()); rule.setControlBehavior(sentinelHandle.getFlowRuleControlBehavior()); rule.setMaxQueueingTimeMs(sentinelHandle.getFlowRuleMaxQueueingTimeMs()); rule.setWarmUpPeriodSec(sentinelHandle.getFlowRuleWarmUpPeriodSec()); flowRules.add(rule); } // 加载流控规则 FlowRuleManager.loadRules(flowRules); // 获取当前资源的降级规则 List<DegradeRule> degradeRules = DegradeRuleManager.getRules() .stream() .filter(r -> !r.getResource().equals(key)) .collect(Collectors.toList()); if (sentinelHandle.getDegradeRuleEnable() == Constants.SENTINEL_ENABLE_DEGRADE_RULE) { DegradeRule rule = new DegradeRule(key); rule.setCount(sentinelHandle.getDegradeRuleCount()); rule.setGrade(sentinelHandle.getDegradeRuleGrade()); rule.setTimeWindow(sentinelHandle.getDegradeRuleTimeWindow()); rule.setStatIntervalMs(sentinelHandle.getDegradeRuleStatIntervals() * 1000); rule.setMinRequestAmount(sentinelHandle.getDegradeRuleMinRequestAmount()); rule.setSlowRatioThreshold(sentinelHandle.getDegradeRuleSlowRatioThreshold()); degradeRules.add(rule); } // 加载降级规则 DegradeRuleManager.loadRules(degradeRules); } } \"]},\"507\":{\"h\":\"2.2 ShenYu是如何获取应用错误并进行流控、降级的\"},\"508\":{\"h\":\"2.2.1 在exchange注册http状态码消费者？何时消费？\",\"t\":[\"这个http状态码的消费者主要作用就是根据响应码抛出SentinelFallbackException，而SentinelFallbackException就是相当于收集来自原应用端的异常信息。\",\"exchange.getAttributes().put(Constants.WATCHER_HTTP_STATUS, (Consumer<HttpStatus>) status -> { if (status == null || !status.is2xxSuccessful()) { throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status); } }); \"]},\"509\":{\"h\":\"2.2.1 ShenYu是如何将应用资源交予Sentinel管理的\",\"t\":[\"chain.execute(exchange).transform(new SentinelReactorTransformer<>(resourceName)),其中的transform方法就是ShenYu将应用资源交予Sentinel的实现。 其中new SentinelReactorTransformer<>(resourceName)相当于sentinel的Entry entry = SphU.entry(\\\"HelloWorld\\\")\",\"exchange.getAttributes().put(Constants.WATCHER_HTTP_STATUS, (Consumer<HttpStatus>) status -> { if (status == null || !status.is2xxSuccessful()) { throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status); } }); return chain.execute(exchange).transform(new SentinelReactorTransformer<>(resourceName)).onErrorResume(throwable -> fallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable)); \"]},\"510\":{\"c\":[\"opensource\"]},\"511\":{\"c\":[\"Apache ShenYu\",\"sentinel\"]},\"512\":{\"h\":\"spring 知识图谱\",\"t\":[\"JVM 内存分析图\"]},\"513\":{\"c\":[\"Spring\"]},\"514\":{\"h\":\"Spring AOP详解\"},\"515\":{\"c\":[\"Spring\"]},\"516\":{\"c\":[\"Spring\"]},\"517\":{\"h\":\"Spring DI详解\"},\"518\":{\"c\":[\"Spring\"]},\"519\":{\"c\":[\"Spring\"]},\"520\":{\"h\":\"Spring IOC详解\"},\"521\":{\"c\":[\"Spring\"]},\"522\":{\"c\":[\"Spring\"]},\"523\":{\"h\":\"Spring知识图谱\"},\"524\":{\"c\":[\"Spring\"]},\"525\":{\"c\":[\"Spring\"]},\"526\":{\"h\":\"springboot\",\"t\":[\"JVM 内存分析图\"]},\"527\":{\"c\":[\"SpringBoot\"]},\"528\":{\"h\":\"springcloud\"},\"529\":{\"c\":[\"SpringCloud\"]},\"530\":{\"h\":\"从0到1搭建Spring-Cloud项目\",\"t\":[\"文本基于Spring-Boot 2.7.10版本搭建，使用的SpringCloud版本为2021.0.5, 使用nacos作为注册中心和配置中心。\"]},\"531\":{\"h\":\"服务版本说明\",\"t\":[\"由于Spring Boot 3.0,SpringBoot 2.7~2.4 和 SpringBoot 2.4以下版本之间变化较大比较大，所以存在以下三个对应关系:\"]},\"532\":{\"h\":\"SpringCloud 2022.x 分支\",\"t\":[\"SpringBoot版本\",\"SpringCloud版本\",\"SpringCloud Alibaba版本\",\"3.0.0\",\"Spring Cloud 2022.0.0\",\"2022.0.0.0-RC*\"]},\"533\":{\"h\":\"SpringCloud 2021.x 分支\",\"t\":[\"SpringBoot版本\",\"SpringCloud版本\",\"SpringCloud Alibaba版本\",\"2.6.13\",\"Spring Cloud 2021.0.5\",\"2021.0.5.0*\",\"2.6.11\",\"Spring Cloud 2021.0.4\",\"2021.0.4.0\",\"2.6.3\",\"Spring Cloud 2021.0.1\",\"2021.0.1.0\",\"2.4.2\",\"Spring Cloud 2020.0.1\",\"2021.1\"]},\"534\":{\"h\":\"SpringBoot 2.2.x 分支\",\"t\":[\"SpringBoot版本\",\"SpringCloud版本\",\"SpringCloud Alibaba版本\",\"2.3.12.RELEASE\",\"Spring Cloud Hoxton.SR12\",\"2.2.10-RC1*\",\"2.3.12.RELEASE\",\"Spring Cloud Hoxton.SR12\",\"2.2.9.RELEAS\",\"2.3.12.RELEASE\",\"Spring Cloud Hoxton.SR12\",\"2.2.8.RELEAS\",\"2.3.12.RELEASE\",\"Spring Cloud Hoxton.SR12\",\"2.2.7.RELEASE\",\"2.3.2.RELEASE\",\"Spring Cloud Hoxton.SR9\",\"2.2.6.RELEASE\",\"2.2.5.RELEASE\",\"Spring Cloud Hoxton.SR3\",\"2.2.1.RELEASE\",\"2.2.X.RELEASE\",\"Spring Cloud Hoxton.RELEASE\",\"2.2.0.RELEASE\",\"2.1.13.RELEASE\",\"Spring Cloud Greenwich.SR6\",\"2.1.4.RELEASE\",\"2.1.X.RELEASE\",\"Spring Cloud Greenwich\",\"2.1.2.RELEASE\",\"各版本最新对应关系请查看：\",\"https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明\",\"https://docs.spring.io/spring-cloud/docs/current/reference/html/\"]},\"535\":{\"h\":\"搭建项目公共的parent\"},\"536\":{\"h\":\"parent初始化\"},\"537\":{\"h\":\"pom.xml文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.10</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cn.moremind</groupId> <artifactId>moremind-example-boot-starter-parent</artifactId> <version>0.0.1-SNAPSHOT</version> <name>moremind-example-boot-starter-parent</name> <packaging>pom</packaging> <description>moremind-example-boot-starter-parent</description> <properties> <java.version>1.8</java.version> <spring-boot.version>2.7.10</spring-boot.version> <spring-cloud-alibaba.version>2021.0.5.0</spring-cloud-alibaba.version> <spring-cloud.version>2021.0.5</spring-cloud.version> <commons-lang3.version>3.12.0</commons-lang3.version> <hutool.version>5.8.15</hutool.version> <commons-collections4.version>4.4</commons-collections4.version> <commons-io.version>2.11.0</commons-io.version> </properties> <!-- 申明依赖 --> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-alibaba-dependencies</artifactId> <version>${spring-cloud-alibaba.version}</version> <type>pom</type> <scope>import</scope> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <!-- 通用工具类 --> <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-lang3</artifactId> <version>${commons-lang3.version}</version> </dependency> <dependency> <groupId>cn.hutool</groupId> <artifactId>hutool-all</artifactId> <version>${hutool.version}</version> </dependency> <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-collections4</artifactId> <version>${commons-collections4.version}</version> </dependency> <dependency> <groupId>commons-io</groupId> <artifactId>commons-io</artifactId> <version>${commons-io.version}</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> <!-- 发布地址 --> <distributionManagement> <repository> <id>nexus-releases</id> <url>https://domain/nexus/content/repositories/releases/</url> </repository> <snapshotRepository> <id>nexus-snapshots</id> <url>https://domain/nexus/content/repositories/snapshots/</url> </snapshotRepository> </distributionManagement> <repositories> <!-- internal repository --> <repository> <id>nexus</id> <name>Nexus Snapshot Repository</name> <url>https://domain/nexus/content/groups/public/</url> <layout>default</layout> <releases> <enabled>true</enabled> </releases> <snapshots> <enabled>false</enabled> </snapshots> </repository> <repository> <id>aliyun-releases</id> <name>Aliyun Repository</name> <url>https://maven.aliyun.com/repository/public</url> </repository> <repository> <id>central</id> <name>Central Repository</name> <url>https://repo.maven.apache.org/maven2</url> <layout>backup</layout> <releases> <enabled>true</enabled> </releases> <snapshots> <enabled>false</enabled> </snapshots> </repository> </repositories> <!-- 配置从哪个仓库中下载构件，即jar包 --> <pluginRepositories> <pluginRepository> <id>nexus</id> <name>Nexus Snapshot Repository</name> <url>https://domain/nexus/content/groups/public/</url> <releases> <enabled>true</enabled> </releases> <snapshots> <enabled>false</enabled> </snapshots> </pluginRepository> </pluginRepositories> </project> \"]},\"538\":{\"h\":\"打包安装到本地\",\"t\":[\"执行命令mvn clean install 打包到本地\"]},\"539\":{\"h\":\"新建moremind-example-module1\"},\"540\":{\"h\":\"moremind-example-module1初始化\"},\"541\":{\"h\":\"pom.xml文件配置\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>cn.moremind</groupId> <artifactId>moremind-example-boot-starter-parent</artifactId> <version>0.0.1-SNAPSHOT</version> <relativePath/> </parent> <artifactId>moremind-example-module1</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>pom</packaging> <name>moremind-example-module1</name> <description>moremind-example-module1</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> \"]},\"542\":{\"h\":\"删除无用文件\",\"t\":[\"删除src目录/.mvn目录以及其他无用文件\"]},\"543\":{\"h\":\"新建moremind-example-module1-api模块\"},\"544\":{\"h\":\"moremind-example-module1-api初始化\"},\"545\":{\"h\":\"moremind-example-module1-api的pom文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>cn.moremind</groupId> <artifactId>moremind-example-module1</artifactId> <version>0.0.1-SNAPSHOT</version> </parent> <packaging>jar</packaging> <artifactId>moremind-example-module1-api</artifactId> <properties> <maven.compiler.source>8</maven.compiler.source> <maven.compiler.target>8</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <mybatis-plus.version>3.5.3.1</mybatis-plus.version> <mysql-driver.version>8.0.32</mysql-driver.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <exclusions> <exclusion> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-undertow</artifactId> </dependency> <!-- nacos discovery --> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <!-- nacos config --> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-loadbalancer</artifactId> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>${mybatis-plus.version}</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>${mysql-driver.version}</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-logging</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> \"]},\"546\":{\"h\":\"配置多环境以及nacos\"},\"547\":{\"h\":\"配置applicatioin-dev.yml\",\"t\":[\"server: port: 8001 ## Spring Information spring: application: name: module1-api main: allow-bean-definition-overriding: true # config: # import: # # - optional:nacos:application-dev.yml # 监听 PROVIDER_GROUP :module1-api-dev.yml # - optional:nacos:${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension} # 监听 DEFAULT_GROUP:module1-api-dev.yaml # # - optional:nacos:module1-api-dev.yaml?group=group_01 # 覆盖默认 group，监听 group_01:module1-api-dev.yaml # # - optional:nacos:module1-api-dev.yaml?group=group_02&refreshEnabled=false # 不开启动态刷新 # - nacos:${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension} # 在拉取nacos配置异常时会快速失败，会导致 spring 容器启动失败 # 可在nacos配置的文件 datasource: url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&zeroDateTimeBehavior=convertToNull&allowPublicKeyRetrieval=true username: root password: admin@123456 driver-class-name: com.mysql.cj.jdbc.Driver cloud: nacos: server-addr: 127.0.0.1:8848 username: nacos password: nacos config: enabled: false namespace: 3c42f17a-23f2-4f4f-8cf4-bfe086289312 group: user-center context-path: /nacos file-extension: yaml discovery: enabled: true namespace: public service: ${spring.application.name} # actuator management: endpoints: web: exposure: include: - 'health' - 'prometheus' enabled-by-default: true # mybatis plus mybatis-plus: config-location: classpath:/mybatis/mybatis-config.xml mapper-locations: classpath:/mappers/*.xml # feign config feign: client: config: default: connectTimeout: 3000 readTimeout: 3000 \"]},\"548\":{\"h\":\"配置application-test.yml\",\"t\":[\"server: port: 8001 # Spring Information spring: application: name: module1-api main: allow-bean-definition-overriding: true config: import: # - optional:nacos:application-dev.yml # 监听 PROVIDER_GROUP :module1-api-dev.yml - optional:nacos:${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension} # 监听 DEFAULT_GROUP:module1-api-dev.yaml # - optional:nacos:module1-api-dev.yaml?group=group_01 # 覆盖默认 group，监听 group_01:module1-api-dev.yaml # - optional:nacos:module1-api-dev.yaml?group=group_02&refreshEnabled=false # 不开启动态刷新 # - nacos:${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension} # 在拉取nacos配置异常时会快速失败，会导致 spring 容器启动失败 cloud: nacos: config: enabled: true server-addr: 127.0.0.1:8848 username: nacos password: nacos # namespace: 3c42f17a-23f2-4f4f-8cf4-bfe086289312 group: DEFAULT_GROUP context-path: /nacos file-extension: yaml refresh-enabled: true \"]},\"549\":{\"h\":\"配置application-prod.yml\",\"t\":[\"server: port: 8001 # Spring Information spring: application: name: module1-api main: allow-bean-definition-overriding: true config: import: # - optional:nacos:application-dev.yml # 监听 PROVIDER_GROUP :module1-api-dev.yml - optional:nacos:${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension} # 监听 DEFAULT_GROUP:module1-api-dev.yaml # - optional:nacos:module1-api-dev.yaml?group=group_01 # 覆盖默认 group，监听 group_01:user-center-service-dev.yaml # - optional:nacos:module1-api-dev.yaml?group=group_02&refreshEnabled=false # 不开启动态刷新 # - nacos:${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension} # 在拉取nacos配置异常时会快速失败，会导致 spring 容器启动失败 cloud: nacos: config: enabled: true server-addr: 127.0.0.1:8848 username: nacos password: nacos # namespace: 3c42f17a-23f2-4f4f-8cf4-bfe086289312 group: DEFAULT_GROUP context-path: /nacos file-extension: yaml refresh-enabled: true \"]},\"550\":{\"h\":\"module1-api-test.yaml文件配置\",\"t\":[\"spring: datasource: url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&zeroDateTimeBehavior=convertToNull&allowPublicKeyRetrieval=true username: root password: admin@123456 driver-class-name: com.mysql.cj.jdbc.Driver cloud: nacos: discovery: enabled: true server-addr: 127.0.0.1:8848 username: nacos password: nacos namespace: public service: ${spring.application.name} # actuator management: endpoints: web: exposure: include: - 'health' - 'prometheus' enabled-by-default: true # mybatis plus mybatis-plus: config-location: classpath:/mybatis/mybatis-config.xml mapper-locations: classpath:/mappers/*.xml # feign config feign: client: config: default: connectTimeout: 3000 readTimeout: 3000 \"]},\"551\":{\"h\":\"module1-api-prod.yaml文件配置\",\"t\":[\"spring: datasource: url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&zeroDateTimeBehavior=convertToNull&allowPublicKeyRetrieval=true username: root password: admin@123456 driver-class-name: com.mysql.cj.jdbc.Driver cloud: nacos: discovery: enabled: true server-addr: 127.0.0.1:8848 username: nacos password: nacos namespace: public service: ${spring.application.name} # actuator management: endpoints: web: exposure: include: - 'health' - 'prometheus' enabled-by-default: true # mybatis plus mybatis-plus: config-location: classpath:/mybatis/mybatis-config.xml mapper-locations: classpath:/mappers/*.xml # feign config feign: client: config: default: connectTimeout: 3000 readTimeout: 3000 \"]},\"552\":{\"h\":\"配置logback文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration> <shutdownHook class=\\\"ch.qos.logback.core.hook.DelayingShutdownHook\\\"/> <property name=\\\"LOG_HOME\\\" value=\\\"${log.home:-./logs}\\\"/> <property name=\\\"LOG_APP_NAME\\\" value=\\\"${log.app-name:-module1-api}\\\"/> <property name=\\\"MAX_SINGLE_LOG_FILE_SIZE\\\" value=\\\"${log.max-single-log-file-size:-100MB}\\\"/> <property name=\\\"MAX_LOG_FILE_HISTORY\\\" value=\\\"${log.max-log-file-history:-7}\\\"/> <property name=\\\"LOG_FILE_TOTAL_CAPACITY\\\" value=\\\"${log.log-file-total-capacity:-10GB}\\\"/> <property name=\\\"ASYNC_DISCARDING_THRESHOLD\\\" value=\\\"${log.async.discarding-threshold:-0}\\\"/> <property name=\\\"ASYNC_LOG_QUEUE_SIZE\\\" value=\\\"${log.async.queue-size:-256}\\\"/> <property name=\\\"LOG_PATTERN\\\" value=\\\"%red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger) - %cyan(%msg%n)\\\"/> <appender name=\\\"STDOUT\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder> <pattern>${LOG_PATTERN}</pattern> </encoder> </appender> <appender name=\\\"ASYNC_STDOUT\\\" class=\\\"ch.qos.logback.classic.AsyncAppender\\\"> <discardingThreshold>${ASYNC_DISCARDING_THRESHOLD}</discardingThreshold> <queueSize>${ASYNC_LOG_QUEUE_SIZE}</queueSize> <includeCallerData>true</includeCallerData> <appender-ref ref=\\\"STDOUT\\\"/> </appender> <appender name=\\\"FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <file>${LOG_HOME}/${LOG_APP_NAME}.log</file> <append>true</append> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\\"> <fileNamePattern>${LOG_HOME}/${LOG_APP_NAME}.%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern> <maxFileSize>${MAX_SINGLE_LOG_FILE_SIZE}</maxFileSize> <maxHistory>${MAX_LOG_FILE_HISTORY}</maxHistory> <totalSizeCap>${LOG_FILE_TOTAL_CAPACITY}</totalSizeCap> </rollingPolicy> <encoder> <pattern>${LOG_PATTERN}</pattern> </encoder> </appender> <appender name=\\\"ASYNC_FILE\\\" class=\\\"ch.qos.logback.classic.AsyncAppender\\\"> <discardingThreshold>${ASYNC_DISCARDING_THRESHOLD}</discardingThreshold> <queueSize>${ASYNC_LOG_QUEUE_SIZE}</queueSize> <includeCallerData>true</includeCallerData> <appender-ref ref=\\\"FILE\\\"/> </appender> <appender name=\\\"ERROR_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>ERROR</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> <file>${LOG_HOME}/${LOG_APP_NAME}-error.log</file> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\\"> <fileNamePattern>${LOG_HOME}/${LOG_APP_NAME}.%d{yyyy-MM-dd}-error.%i.log.zip</fileNamePattern> <maxFileSize>${MAX_SINGLE_LOG_FILE_SIZE}</maxFileSize> <maxHistory>${MAX_LOG_FILE_HISTORY}</maxHistory> <totalSizeCap>${LOG_FILE_TOTAL_CAPACITY}</totalSizeCap> </rollingPolicy> <encoder> <pattern>${LOG_PATTERN}</pattern> </encoder> </appender> <appender name=\\\"ASYNC_ERROR_FILE\\\" class=\\\"ch.qos.logback.classic.AsyncAppender\\\"> <discardingThreshold>${ASYNC_DISCARDING_THRESHOLD}</discardingThreshold> <queueSize>${ASYNC_LOG_QUEUE_SIZE}</queueSize> <includeCallerData>false</includeCallerData> <appender-ref ref=\\\"ERROR_FILE\\\"/> </appender> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"ASYNC_STDOUT\\\"/> <appender-ref ref=\\\"ASYNC_FILE\\\"/> <appender-ref ref=\\\"ASYNC_ERROR_FILE\\\"/> </root> </configuration> \"]},\"553\":{\"h\":\"启动测试\"},\"554\":{\"h\":\"启动nacos\",\"t\":[\"为了测试，本地都使用nacos单机模式启动，启动命令./startup.sh -m \\\"standalone\\\"\"]},\"555\":{\"h\":\"设置spring.profiles.active=dev参数\",\"t\":[\"dev模式为本地开发模式，应用配置无需配置在配置中心，直接启动module1,无错误并如下日志表示启动成功。\",\"[main] INFO cn.moremind.moremind.example.module1.api.MoremindExampleModule1ApiApplication - The following 1 profile is active: \\\"dev\\\" [main] INFO org.springframework.cloud.commons.util.InetUtils - Cannot determine local hostname [main] WARN org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger - Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath. [main] INFO org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator' [main] INFO io.undertow - starting server: Undertow - 2.2.23.Final [main] INFO org.xnio - XNIO version 3.8.7.Final [main] INFO org.xnio.nio - XNIO NIO Implementation Version 3.8.7.Final [main] INFO org.jboss.threads - JBoss Threads version 3.1.0.Final [main] INFO org.springframework.boot.web.embedded.undertow.UndertowWebServer - Undertow started on port(s) 8001 (http) [main] INFO com.alibaba.nacos.plugin.auth.spi.client.ClientAuthPluginManager - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success. [main] INFO com.alibaba.nacos.plugin.auth.spi.client.ClientAuthPluginManager - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success. [main] INFO com.alibaba.cloud.nacos.registry.NacosServiceRegistry - nacos registry, DEFAULT_GROUP module1-api 192.168.81.152:8001 register finished [main] INFO org.springframework.cloud.commons.util.InetUtils - Cannot determine local hostname [main] INFO cn.moremind.moremind.example.module1.api.MoremindExampleModule1ApiApplication - Started MoremindExampleModule1ApiApplication in 11.372 seconds (JVM running for 12.328) [RMI TCP Connection(1)-192.168.81.152] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting... [RMI TCP Connection(1)-192.168.81.152] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed. [RMI TCP Connection(3)-192.168.81.152] INFO io.undertow.servlet - Initializing Spring DispatcherServlet 'dispatcherServlet' [RMI TCP Connection(3)-192.168.81.152] INFO org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet' [RMI TCP Connection(3)-192.168.81.152] INFO org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms \",\"nacos注册中心已注册module1-api服务。\"]},\"556\":{\"h\":\"设置spring.profiles.active=test参数\",\"t\":[\"将module1-api-test.yaml文件添加到nacos中\",\"以test环境进行启动,见如下日志则启动成功\",\"[main] INFO cn.moremind.moremind.example.module1.api.MoremindExampleModule1ApiApplication - The following 1 profile is active: \\\"test\\\" [main] INFO com.alibaba.cloud.nacos.configdata.NacosConfigDataLoader - [Nacos Config] Load config[dataId=module1-api-test.yaml, group=DEFAULT_GROUP] success [main] INFO org.springframework.cloud.commons.util.InetUtils - Cannot determine local hostname [main] WARN org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger - Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath. [main] INFO org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator' [main] INFO io.undertow - starting server: Undertow - 2.2.23.Final [main] INFO org.xnio - XNIO version 3.8.7.Final [main] INFO org.xnio.nio - XNIO NIO Implementation Version 3.8.7.Final [main] INFO org.jboss.threads - JBoss Threads version 3.1.0.Final [main] INFO org.springframework.boot.web.embedded.undertow.UndertowWebServer - Undertow started on port(s) 8001 (http) [main] INFO com.alibaba.nacos.plugin.auth.spi.client.ClientAuthPluginManager - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success. [main] INFO com.alibaba.nacos.plugin.auth.spi.client.ClientAuthPluginManager - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success. [main] INFO com.alibaba.cloud.nacos.registry.NacosServiceRegistry - nacos registry, DEFAULT_GROUP module1-api 192.168.81.152:8001 register finished [main] INFO org.springframework.cloud.commons.util.InetUtils - Cannot determine local hostname [main] INFO cn.moremind.moremind.example.module1.api.MoremindExampleModule1ApiApplication - Started MoremindExampleModule1ApiApplication in 12.291 seconds (JVM running for 13.54) [main] INFO com.alibaba.cloud.nacos.refresh.NacosContextRefresher - [Nacos Config] Listening config: dataId=module1-api-test.yaml, group=DEFAULT_GROUP [RMI TCP Connection(2)-192.168.81.152] INFO io.undertow.servlet - Initializing Spring DispatcherServlet 'dispatcherServlet' [RMI TCP Connection(2)-192.168.81.152] INFO org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet' [RMI TCP Connection(2)-192.168.81.152] INFO org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms [RMI TCP Connection(1)-192.168.81.152] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting... [RMI TCP Connection(1)-192.168.81.152] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed. \"]},\"557\":{\"h\":\"设置spring.profiles.active=prod参数\",\"t\":[\"将module1-api-prod.yaml文件添加到nacos中\",\"以prod环境进行启动,见如下日志则启动成功\",\"[main] INFO cn.moremind.moremind.example.module1.api.MoremindExampleModule1ApiApplication - The following 1 profile is active: \\\"prod\\\" [main] INFO com.alibaba.cloud.nacos.configdata.NacosConfigDataLoader - [Nacos Config] Load config[dataId=module1-api-prod.yaml, group=DEFAULT_GROUP] success [main] INFO org.springframework.cloud.commons.util.InetUtils - Cannot determine local hostname [main] WARN org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger - Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath. [main] INFO org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator' [main] INFO io.undertow - starting server: Undertow - 2.2.23.Final [main] INFO org.xnio - XNIO version 3.8.7.Final [main] INFO org.xnio.nio - XNIO NIO Implementation Version 3.8.7.Final [main] INFO org.jboss.threads - JBoss Threads version 3.1.0.Final [main] INFO org.springframework.boot.web.embedded.undertow.UndertowWebServer - Undertow started on port(s) 8001 (http) [main] INFO com.alibaba.nacos.plugin.auth.spi.client.ClientAuthPluginManager - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success. [main] INFO com.alibaba.nacos.plugin.auth.spi.client.ClientAuthPluginManager - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success. [main] INFO com.alibaba.cloud.nacos.registry.NacosServiceRegistry - nacos registry, DEFAULT_GROUP module1-api 192.168.81.152:8001 register finished [main] INFO org.springframework.cloud.commons.util.InetUtils - Cannot determine local hostname [main] INFO cn.moremind.moremind.example.module1.api.MoremindExampleModule1ApiApplication - Started MoremindExampleModule1ApiApplication in 12.291 seconds (JVM running for 13.54) [main] INFO com.alibaba.cloud.nacos.refresh.NacosContextRefresher - [Nacos Config] Listening config: dataId=module1-api-test.yaml, group=DEFAULT_GROUP [RMI TCP Connection(2)-192.168.81.152] INFO io.undertow.servlet - Initializing Spring DispatcherServlet 'dispatcherServlet' [RMI TCP Connection(2)-192.168.81.152] INFO org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet' [RMI TCP Connection(2)-192.168.81.152] INFO org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms [RMI TCP Connection(1)-192.168.81.152] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting... [RMI TCP Connection(1)-192.168.81.152] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed. \"]},\"558\":{\"h\":\"添加测试的Controller\",\"t\":[\"package cn.moremind.moremind.example.module1.api.controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\\\"/test\\\") public class TestController { @GetMapping(\\\"/hello\\\") public String hello() { return \\\"moremind, hello world!\\\"; } } \"]},\"559\":{\"h\":\"新建moremind-example-module1-openfeign子模块\"},\"560\":{\"h\":\"moremind-example-module1-openfeign子模块的init\"},\"561\":{\"h\":\"moremind-example-module1-api-openfeign的pom文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>cn.moremind</groupId> <artifactId>moremind-example-module1</artifactId> <version>0.0.1-SNAPSHOT</version> </parent> <artifactId>moremind-example-module1-api-openfeign</artifactId> <version>0.0.1-SNAPSHOT</version> <name>moremind-example-module1-api-openfeign</name> <description>module1-api-openfeign</description> <properties> <maven.compiler.source>8</maven.compiler.source> <maven.compiler.target>8</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> </dependencies> </project> \"]},\"562\":{\"h\":\"在api-feign目录下编写添加FeignClient\",\"t\":[\"package cn.moremind.example.module1.api.openfeign.feign; import cn.moremind.example.module1.api.openfeign.constants.FeignClientNames; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; @FeignClient(value = FeignClientNames.USER_CENTER_SERVICE, path = FeignClientNames.MODULE1_API_TEST) public interface HelloFeignService { @GetMapping(\\\"/hello\\\") String hello(); } \",\"package cn.moremind.example.module1.api.openfeign.constants; public interface FeignClientNames { /** * module1 service name */ String MODULE1_API_SERVICE = \\\"module1-api\\\"; String MODULE1_API_TEST = \\\"test\\\"; } \"]},\"563\":{\"h\":\"将moremind-example-module1-api-openfeign打包到本地\",\"t\":[\"进入moremind-example-module1-api-openfeign目录执行命令mvn clean install\"]},\"564\":{\"h\":\"测试调用feign服务\"},\"565\":{\"h\":\"moremind-example-module1-consumer项目初始化\",\"t\":[\"为了方便测试，在moremind-example-module1下建立测试项目moremind-example-module1-consumer\"]},\"566\":{\"h\":\"moremind-example-module1-consumer的pom.xml文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>cn.moremind</groupId> <artifactId>moremind-example-module1</artifactId> <version>0.0.1-SNAPSHOT</version> <relativePath/> <!-- lookup parent from repository --> </parent> <artifactId>moremind-example-module1-consumer</artifactId> <version>0.0.1-SNAPSHOT</version> <name>moremind-example-module1-consumer</name> <description>moremind-example-module1-consumer</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>cn.moremind</groupId> <artifactId>moremind-example-module1-api-openfeign</artifactId> <version>0.0.1-SNAPSHOT</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <exclusions> <exclusion> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-undertow</artifactId> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-loadbalancer</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> \"]},\"567\":{\"h\":\"配置nacos注册中心\",\"t\":[\"moremind-example-module1-consumer的application.yml配置文件如下:\",\"server: port: 8002 ## Spring Information spring: application: name: module1-consumer cloud: nacos: discovery: enabled: true username: nacos password: nacos server-addr: 127.0.0.1:8848 namespace: public service: ${spring.application.name} \"]},\"568\":{\"h\":\"消费者启动类配置\",\"t\":[\"package cn.moremind.moremind.example.module1.consumer; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.openfeign.EnableFeignClients; @SpringBootApplication @EnableFeignClients(basePackages = \\\"cn.moremind.*\\\") public class MoremindExampleModule1ConsumerApplication { public static void main(String[] args) { SpringApplication.run(MoremindExampleModule1ConsumerApplication.class, args); } } \"]},\"569\":{\"h\":\"调用openfeign接口\",\"t\":[\"package cn.moremind.moremind.example.module1.consumer.controller; import cn.moremind.example.module1.api.openfeign.feign.HelloFeignService; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\\\"/consumer\\\") public class TestHelloController { private final HelloFeignService helloFeignService; public TestHelloController(HelloFeignService helloFeignService) { this.helloFeignService = helloFeignService; } @GetMapping(\\\"/hello\\\") public String testHello() { return helloFeignService.hello(); } } \"]},\"570\":{\"h\":\"检查nacos是否已经注册consumer服务\"},\"571\":{\"h\":\"调用服务\",\"t\":[\"GET http://localhost:8001/test/hello HTTP/1.1 200 OK Connection: keep-alive Content-Type: text/plain;charset=UTF-8 Content-Length: 22 Date: Fri, 31 Mar 2023 05:10:50 GMT moremind, hello world! Response code: 200 (OK); Time: 5ms (5 ms); Content length: 22 bytes (22 B) \"]},\"572\":{\"h\":\"项目git管理问题\",\"t\":[\"通常使用git进行项目的版本管理，通常分为以下集中管理方式\",\"按照模块进行git管理\",\"每个项目都是一个git仓库\"]},\"573\":{\"h\":\"项目地址\",\"t\":[\"https://github.com/moremind/moremind-springcloud-example\"]},\"574\":{\"c\":[\"SpringCloud\"]},\"575\":{\"c\":[\"SpringCloud\"]},\"576\":{\"h\":\"springwebflux\",\"t\":[\"JVM 内存分析图\"]},\"577\":{\"c\":[\"jvm\"]},\"578\":{\"h\":\"Apache ShenYu基准测试\"},\"579\":{\"h\":\"什么是Apache ShenYu\",\"t\":[\"Apache ShenYu是一个异步的，高性能的，跨语言的，响应式的Java API 网关。\"]},\"580\":{\"h\":\"Apache ShenYu 基准测试的环境\"},\"581\":{\"h\":\"Mock服务器配置\",\"t\":[\"CPU: 4核8线程 Intel Cascade Lake @ 3.0GHz\",\"RAM: 16G\"]},\"582\":{\"h\":\"Apache ShenYu Bootstrap配置\",\"t\":[\"CPU: 4核8线程 Intel Cascade Lake @ 3.0GHz\",\"RAM: 16G\"]},\"583\":{\"h\":\"ShenYu 版本\",\"t\":[\"ShenYu Admin: 2.6.0\",\"ShenYu Bootstrap: 2.6.0\"]},\"584\":{\"h\":\"测试工具\",\"t\":[\"wrk-4.2.0\"]},\"585\":{\"h\":\"测试工具下载\",\"t\":[\"https://github.com/wg/wrk\"]},\"586\":{\"h\":\"测试工具安装\",\"t\":[\"yum -y install git make gcc git clone https://github.com/wg/wrk.git wrk cd wrk make cp wrk /usr/local/bin/ \"]},\"587\":{\"h\":\"测试工具安装位置\",\"t\":[\"测试工具占用资源很少，安装在网关节点服务器。\"]},\"588\":{\"h\":\"测试用例说明\"},\"589\":{\"h\":\"说明\",\"t\":[\"使用 Mock 服务模拟一个平均响应时长20ms，响应报文约2k的接口\",\"每次测试时长 3 分钟\",\"JDK版本: OpenJdk-1.8.0\",\"HTTP 请求端分别使用 NettyClient 和 WebClient 进行测试\",\"日志级别为WARN\",\"Apache ShenYu Bootstrap部署模式：单机部署\",\"Apache ShenYu Admin部署在mock服务器上。\"]},\"590\":{\"h\":\"JVM配置\",\"t\":[\"-Xmx 4g -Xms 4g -Xmn 1g -Xss 512k -XX: +DisableExplicitGC -XX: LargePageSizeInBytes=128m \"]},\"591\":{\"h\":\"公共配置\",\"t\":[\"matchCache: selector: selectorEnabled: false initialCapacity: 10000 # initial capacity in cache maximumSize: 10000 # max size in cache rule: initialCapacity: 10000 # initial capacity in cache maximumSize: 65536 # max size in cache trie: enabled: true childrenSize: 10000 pathVariableSize: 1000 pathRuleCacheSize: 1000 matchMode: antPathMatch \",\"netty: http: # set to false, user can custom the netty tcp server config. webServerFactoryEnabled: true selectCount: 1 workerCount: 8 accessLog: false serverSocketChannel: soRcvBuf: 87380 soBackLog: 128 soReuseAddr: false connectTimeoutMillis: 10000 writeBufferHighWaterMark: 65536 writeBufferLowWaterMark: 32768 writeSpinCount: 16 autoRead: false allocType: \\\"pooled\\\" messageSizeEstimator: 8 singleEventExecutorPerGroup: true socketChannel: soKeepAlive: false soReuseAddr: false soLinger: -1 tcpNoDelay: true soRcvBuf: 87380 soSndBuf: 16384 ipTos: 0 allowHalfClosure: false connectTimeoutMillis: 10000 writeBufferHighWaterMark: 65536 writeBufferLowWaterMark: 32768 writeSpinCount: 16 autoRead: false allocType: \\\"pooled\\\" messageSizeEstimator: 8 singleEventExecutorPerGroup: true \"]},\"592\":{\"h\":\"WebClient配置\",\"t\":[\"httpclient: strategy: webClient # netty connectTimeout: 45000 # 45000 responseTimeout: 3000 # 3000 readerIdleTime: 3000 # 3000 writerIdleTime: 3000 # 3000 allIdleTime: 3000 # 3000 readTimeout: 3000 # 3000 writeTimeout: 3000 # 3000 wiretap: false # false keepAlive: false # false maxInMemorySize: 1 # 1 pool: type: ELASTIC # ELASTIC name: proxy # proxy maxConnections: 16 # 16 acquireTimeout: 45000 # 45000 maxIdleTime: 3000 # 3000 \"]},\"593\":{\"h\":\"NettyClient配置\",\"t\":[\"httpclient: strategy: netty # netty connectTimeout: 45000 # 45000 responseTimeout: 3000 # 3000 readerIdleTime: 3000 # 3000 writerIdleTime: 3000 # 3000 allIdleTime: 3000 # 3000 readTimeout: 3000 # 3000 writeTimeout: 3000 # 3000 wiretap: false # false keepAlive: false # false maxInMemorySize: 1 # 1 pool: type: ELASTIC # ELASTIC name: proxy # proxy maxConnections: 16 # 16 acquireTimeout: 45000 # 45000 maxIdleTime: 3000 # 3000 \"]},\"594\":{\"h\":\"启动ShenYu和Mock服务\"},\"595\":{\"h\":\"启动ShenYu Admin\",\"t\":[\"tar -zxvf apache-shenyu-admin-2.6.0.tar.gz cd apache-shenyu-admin-2.6.0 cd bin ./start.sh \"]},\"596\":{\"h\":\"启动ShenYu Bootstrap\",\"t\":[\"tar -zxvf apache-shenyu-bootstrap-2.6.0.tar.gz cd apache-shenyu-bootstrap-2.6.0 cd bin ./start.sh \"]},\"597\":{\"h\":\"启动Mock服务\",\"t\":[\"nohup java -jar shenyu-examples-http.jar -server -Xmx4g -Xms4g -Xmn1g -Xss256k & \"]},\"598\":{\"h\":\"如何测试\"},\"599\":{\"h\":\"测试mock服务\",\"t\":[\"./wrk -t8 -c600 -T10s -d180s --latency http://ip:8189/test/requstBody \"]},\"600\":{\"h\":\"测试ShenYu Bootstrap\",\"t\":[\"./wrk -t8 -c600 -T10s -d180s --latency http://localhost:9195/http/test/requestBody ./wrk -t8 -c800 -T10s -d180s --latency http://localhost:9195/http/test/requestBody ./wrk -t8 -c1000 -T10s -d180s --latency http://localhost:9195/http/test/requestBody ./wrk -t8 -c1200 -T10s -d180s --latency http://localhost:9195/http/test/requestBody \"]},\"601\":{\"h\":\"测试结果\"},\"602\":{\"h\":\"直接访问后端\",\"t\":[\"QPS\",\"50% latency (ms)\",\"75% latency (ms)\",\"90% latency (ms)\",\"99% latency (ms)\",\"平均响应时间(ms)\",\"最大响应时间(ms)\",\"28998.20\",\"19.81\",\"23.78\",\"28.26\",\"41.24\",\"20.92\",\"402.90\"]},\"603\":{\"h\":\"netty\",\"t\":[\"currency\",\"QPS\",\"50% latency (ms)\",\"75% latency (ms)\",\"90% latency (ms)\",\"99% latency (ms)\",\"平均响应时间(ms)\",\"最大响应时间(ms)\",\"600 并发\",\"20472.95\",\"19.37\",\"25.36\",\"32.89\",\"69.92\",\"22.09\",\"1043.33\",\"800 并发\",\"20703.55\",\"23.57\",\"31.32\",\"40.11\",\"77.28\",\"26.11\",\"576.47\",\"1000 并发\",\"20979.91\",\"29.21\",\"37.86\",\"47.23\",\"80.91\",\"31.20\",\"860.55\",\"1200 并发\",\"21129.88\",\"32.45\",\"42.40\",\"52.68\",\"96.10\",\"35.06\",\"1070\"]},\"604\":{\"h\":\"webClient\",\"t\":[\"currency\",\"QPS\",\"50% latency (ms)\",\"75% latency (ms)\",\"90% latency (ms)\",\"99% latency (ms)\",\"平均响应时间(ms)\",\"最大响应时间(ms)\",\"600 并发\",\"18640.47\",\"15.77\",\"24.77\",\"38.26\",\"80.31\",\"20.32\",\"852.06\",\"800 并发\",\"18723.44\",\"18.12\",\"28.69\",\"44.96\",\"95.3\",\"23.52\",\"765.26\",\"1000 并发\",\"18928.99\",\"19.99\",\"31.42\",\"49.09\",\"108.84\",\"25.93\",\"1040\",\"1200 并发\",\"18965.37\",\"22.10\",\"34.62\",\"54.48\",\"122.31\",\"28.66\",\"1075\"]},\"605\":{\"c\":[\"Apache ShenYu\"]},\"606\":{\"c\":[\"Apache ShenYu\",\"benchmark-test\"]},\"607\":{\"h\":\"算法\",\"t\":[\"JVM 内存分析图\"]},\"608\":{\"c\":[\"Docker\"]},\"609\":{\"h\":\"Markdown笔记工具推荐\"},\"610\":{\"h\":\"zettlr\"},\"611\":{\"h\":\"关于zettlr\",\"t\":[\"Zettir是Hendrik Erz的一个项目，以GNU GPL v3协议发布。它是基于Electron框架开发的markdown笔记工具，同时也被称之为适合写作者和研究人员的markdown编辑器。由于以Electron开发，使之能支持多个平台(mac,windows,linux)下使用。\"]},\"612\":{\"h\":\"zettlr下载地址\",\"t\":[\"github下载地址：https://github.com/Zettlr/Zettlr\",\"官网下载地址：https://www.zettlr.com/download\"]},\"613\":{\"h\":\"zettlr的使用\",\"t\":[\"zettlr的设置基本与typora一样，支持主题选择、深色模式、引用、正则表达式与导出等功能，以下介绍zettlr的简单使用。\"]},\"614\":{\"h\":\"打开工作区\",\"t\":[\" zettlr可以打开多个文件夹作为工作区，同时也可以在编辑区打开多个文件作为工作文件。\"]},\"615\":{\"h\":\"设置目录显示的格式\",\"t\":[\"切换：只在工作区显示目录，再次点击才会进入目录内的文件。\",\"分栏：目录和目录内的文件在工作区的左右两栏。\",\"合并：目录以及目录的文件呈树形结构\"]},\"616\":{\"h\":\"文件目录\",\"t\":[\" 点击右侧侧边栏，则能够展示导航栏，参考文献，相关文件和其他文件。点击第一个就能在侧边栏展示导航栏。\"]},\"617\":{\"h\":\"优点\",\"t\":[\"zettlr与typora配置简单，只要简单配置就可以使用，同时支持中文配置。\",\"支持多级目录的工作区，不用再频繁切换工作区。\",\"支持LaTex。\",\"支持多种文件格式导出。\",\"支持导入字典、翻译等工具。\"]},\"618\":{\"h\":\"缺点\",\"t\":[\"不能与在线图床整合，上传图片必须到picgo上传在复制过来。(略麻烦)\",\"可能的卡顿，由于整体功能比较多，在设置或者打开文件可能略有卡顿感。\",\"没有更多的优秀的主题以供选择。\"]},\"619\":{\"h\":\"用户使用说明书\",\"t\":[\"https://docs.zettlr.com/en/\"]},\"620\":{\"h\":\"Gridea\"},\"621\":{\"h\":\"关于Gridea\",\"t\":[\"Gridea 是一个支持markdown的静态博客写作客户端，帮助你更容易地构建并管理博客或任何静态站点，支持Mac，Windows，Linux平台。\"]},\"622\":{\"h\":\"Gridea下载\",\"t\":[\"github下载：https://github.com/getgridea/gridea\",\"官网下载：https://open.gridea.dev/\"]},\"623\":{\"h\":\"gridea的特性\",\"t\":[\"📝 你可以使用最酷的 Markdown 语法，进行快速创作\",\"🌉 你可以给文章配上精美的封面图和在文章任意位置插入图片\",\"🏷️ 你可以对文章进行标签分组\",\"📋 你可以自定义菜单，甚至可以创建外部链接菜单\",\"💻 你可以在 Windows，MacOS 或 Linux 设备上使用此客户端\",\"🌎 你可以使用 𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌 或 Coding Pages 向世界展示，未来将支持更多平台\",\"💬 你可以进行简单的配置，接入 Gitalk 或 DisqusJS 评论系统\",\"🇬🇧 你可以使用中文简体或英语\",\"🌁 你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力\",\"🖥 你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步\"]},\"624\":{\"h\":\"优点\",\"t\":[\"所见即所得，作为一款博客笔记，gridea在本地写好博客文件后即可预览，同时也可以部署到在线平台(github,netflix)。\",\"内置评论系统，作为博客笔记，方便快捷高效。\",\"强大的自定义主题功能，griead可以自定义主题或使用在线主题。\"]},\"625\":{\"h\":\"缺点\",\"t\":[\"在post目录内无法新建目录或者模块。\",\"没有导入导出功能。\",\"目前只能作为一款博客笔记系统，对于强大的笔记可能需要进一步完善。\"]},\"626\":{\"h\":\"gridea的使用文档\",\"t\":[\"https://open.gridea.dev/docs\"]},\"627\":{\"c\":[\"tool\"]},\"628\":{\"c\":[\"tool\",\"markdown\"]},\"629\":{\"h\":\"Git基本简介\"},\"630\":{\"h\":\"git与svn\"},\"631\":{\"h\":\"svn\",\"t\":[\"SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。一般公司用svn的比较多，至于原因,嘿嘿嘿....\"]},\"632\":{\"h\":\"git\",\"t\":[\"git是一个分布式版本控制系统，没有中心服务器，每个人的电脑就是一个版本库，你的电脑上的Gitrepository就是你的版本库，那多人之间是如何合作的呢？这样，\",\"A在A的电脑上修改了A.Gitrepository里面的文件,而B在B的电脑上修改了clone过来的A.Gitrepository，你们两个只要把各自的修改推送给对方就行了，这就是为什么你就是没有网络也能使用版本控制。\"]},\"633\":{\"h\":\"网址\",\"t\":[\"git-download\"]},\"634\":{\"h\":\"选择你的OS版本即可\",\"t\":[\"git\"]},\"635\":{\"c\":[\"Git\"]},\"636\":{\"h\":\"git 进阶操作命令\"},\"637\":{\"h\":\"工作区\",\"t\":[\"Tips\",\"工作区就是在你电脑上的Repository下的某一个工作目录，比如：F:\\\\Repository\\\\test01这个目录。test01这个目录就是工作区，或者你新建的任何一个目录，都是工作区（.git隐藏目录下并非工作区）\"]},\"638\":{\"h\":\"暂存区\",\"t\":[\"Repository目录下有一个（.git隐藏目录），这个就是控制版本的版本控制库。\",\"Tips\",\"（.git隐藏目录）存储了Git为我们创建的各种信息，包括版本信息，暂存区（这是最重要的），还有分支信息（Git已经为我们创建了一个master分支），还有一些配置信息等。\",\"接下来在Repository目录下新建一个test.txt文件，在里面写入123456，然后进行下面的这些操作。\",\"git_add_commit3\",\"继续在test.txt中添加一行数据，然后使用git status查看信息。git会提示你有文件需要git add 并且git commit。\",\"继续下面的操作！---把同一个文件提交到同一个暂存区中，并且使用commit提交到一个分支中。\",\"git_status_add_commit\",\"git_status_commit\",\"这次将所有文件提交到一个分支（master分支）中了，可以使用git log查看你提交的所有分支。\",\"git_log4\",\"这样看起来很碍眼，而且版本较多的话，看起来的确不方便，所有推荐使用\",\"git log --pretty=oneline \",\"接下来，你可以使用上一篇git基础教程讲过的方法对版本进行操作。基本命令请点击链接去查看...\"]},\"639\":{\"h\":\"撤销修改\"},\"640\":{\"h\":\"最简单的方法：手动修改\",\"t\":[\"在你记得你修改了那些地方的情况下，直接手动撤销那些你不要的东西即可。\"]},\"641\":{\"h\":\"使用之前所使用的命令进行版本回滚\",\"t\":[\"具体命令如下：\",\"git log --pretty=oneline git reset --hard HEAD^ git reset --hard HEAD~* git reflog git reset --hard 版本号 \",\"你可以使用这些办法进行你所需要的回滚。\"]},\"642\":{\"h\":\"使用git checkout -- test.txt 一点要带文件名 ，不然会创建分支！\",\"t\":[\"git checkout --test.txt 分为两种状态\",\"git checkout --test.txt \",\"test.txt文件修改后，你没有使用git add命令对其进行提交到暂存区。使用git checkout --test.txt会回退到之前的一个版本。相当于回滚到你最后提交的那个版本。而刚刚修改的内容也将全部丢失。\",\"另一种情况就是你已经使用git add提交文件到暂存区了。那这样使用git checkout --test.txt 就会保存已经在暂存区的内容。而没有写入暂存区的内容则会全部丢失。\",\"接下来使用git进行操作查看。\",\"首先在test.txt文件中添加一行数据 654321，然后使用git add命令提交到暂存区。\",\"git_add2\",\"接着再在test.txt文件中添加一行数据 222222，然后我们不使用git add命令提交文件到暂存区。\",\"最后我们使用git checkout --test.txt命令撤销修改，在查看文件。\",\"git_checkout\",\"跟上面的结论是一样的。\"]},\"643\":{\"h\":\"删除文件\"},\"644\":{\"h\":\"rm 命令（linux下的软删除命令）\",\"t\":[\"假如有人提交了tesxt02.txt的文件，但是这个文件缺失不需要的，我们可以使用rm test02.txt，然后在git commit就可以了。\",\"新建一个test02.txt 文件 git add test02.txt git commit -m \\\"提交test02文件\\\" rm test02.txt git commit -m \\\"删除test02文件\\\" \",\"git_commit4\",\"rm\",\"说明已经删除了文件并且已经commit了，当然假如你删除错误的话，你也可以回滚版本。\",\"git_reflog\",\"假如你已经使用rm test02.txt命令，但是却没有使用git commit命令呢？又改如何恢复文件？你可以使用下面的命令:\",\"git checkout --test02.txt \",\"rm之前：\",\"rm_before\",\"rm 之后：\",\"git_rm_after\",\"然后我们不使用git commit命令，使用git checkout -- test02.txt\",\"使用git checkout -- test02.txt之后\",\"git_check_out\",\"文件又恢复了，恢复多个文件也是同理。\",\" 下面会涉及删除与撤销的操作!请继续浏览！ \"]},\"645\":{\"c\":[\"Git\"]},\"646\":{\"c\":[\"git\"]},\"647\":{\"h\":\"git 基本操作命令\",\"t\":[\"0.你必须安装了git才能继续往下看。 1.新建一个目录(在你磁盘空闲较多的地方，新建一个目录(名称Repository))===>这个Repository就是上面说的你的本地仓库，然后右键选择Git Bash(Git 命令行)，在目录下输入以下命令：\",\"git config --global user.name \\\"username\\\" git config --global user.email \\\"youremail\\\" \",\"这里的就是你刚刚注册的用户名，就是刚刚注册邮箱。\"]},\"648\":{\"h\":\"git init\",\"t\":[\"git_init\",\"此时，你就创建了一个本地仓库了。可以在你的本地查看一下：\",\"git\"]},\"649\":{\"h\":\"git add （把项目提交到git仓库）\",\"t\":[\"新建一个demo.txt的文件，并且在里面写入123456789\",\"git_add\",\"这样就说明你已经把文件提交到文件暂存区了，接下来使用下一个命令你就可以在本地仓库看到了。\"]},\"650\":{\"h\":\"git commit\",\"t\":[\"git_commit\",\"这里的就是你提交的注释，记得以后写一定要使用注释！这是一个好习惯！\"]},\"651\":{\"h\":\"git status ---查看状态\",\"t\":[\"git_status\",\"没有什么东西需要提交，别急，我们在刚刚的demo.txt中,记得保存文件。\",\"git_status2\",\"修改之后就已经有了文件修改的信息，并且git提示你需要commit！所以你需要使用上面的git commit 提交！\"]},\"652\":{\"h\":\"git diff\",\"t\":[\"git_diff\",\"git diff就是比对文件，红色的是告诉你，那是原来的，绿色的就是告诉添加了信息。\",\"之后你就可以放心的提交你的版本了。\",\"你需要执行git add， git commit -m \\\"xxxx\\\"，必须通过add提交到文件暂存区。\",\"git_add_commit1\"]},\"653\":{\"h\":\"git log\",\"t\":[\"在使用git的时候一定要会使用日志功能。\",\"首先我们在demo.txt中添加一行数据,然后git add ，git commit.\",\"git_diff_add_commit\",\"接下来使用git log打印日志\",\"git_log\"]},\"654\":{\"h\":\"版本回滚---git reset --hard HEAD^\",\"t\":[\"上面提到使用git log打印所有版本，其实有更简单的办法。\",\"git log --pretty=oneline \",\"这个可以自己去尝试哟，这个只会提示你的跟。\",\"git reset --hard HEAD^ \",\"git_hard\",\"现在可以打开你的demo.txt看看里面还有什么内容了。是不是少了最后添加的一行数据，只有一行数据了。回滚到添加0000的版本了。\",\"超级回滚：\",\"你需要回滚50个版本，总不能输入50个^号，所以有下面这种更简单的办法。\",\"git reset --hard HEAD~50 \"]},\"655\":{\"h\":\"cat命令\",\"t\":[\"使用cat查看内容。\",\"cat\",\"然后你可以使用git log 查看一下存在的版本\",\"git_log3\",\"加入你要回滚到添加了的版本该怎么办呢？使用下一个命令+下下个命令！！！\"]},\"656\":{\"h\":\"git reflog\",\"t\":[\"这个命令是告诉你所有操作的版本信息\",\"git_reflog\",\"看到版本号了---a0ca311，接下来就可以使用这个版本号进行回滚到添加的那个版本了。\"]},\"657\":{\"h\":\"git reset --hard 版本号\",\"t\":[\"下面是回滚到我的版本\",\"git reset --hard a0ca311 \",\"git_hard\",\"接下来，打开你的demo.txt文档看一下是否已经有了。\",\"或者你可以使用以下命令\",\"cat demo.txt \",\" 下面会涉及删除与撤销的操作!请继续浏览！ \"]},\"658\":{\"c\":[\"Git\"]},\"659\":{\"c\":[\"git\"]},\"660\":{\"h\":\"git 分支操作命令\"},\"661\":{\"h\":\"创建与合并分支\",\"t\":[\"在版本回滚与更新中，git都是用master分支作为主线，通过时间顺序进行更新或者回滚。\"]},\"662\":{\"h\":\"创建分支\",\"t\":[\"git checkout -b dev ==（相当于） git branch dev git checkout dev \",\"查看分支信息：\",\"git branch \",\"git_branch\",\"现在已经在dev分支目录下，接下来可以在demo.txt中添加信息，我们添加一行数据：1111111111111\",\"此时，我们在dev目录下添加内容，并且提交到暂存区，然后commit。\",\"git_branch\",\"接着，我们将目前分支切换到master主分支，查看文件新添加的内容是否存在。使用以下命令：\",\"git checkout master \",\"git_branch4\",\"然后，发现master分支上并没有我们想要看到的内容，所以我们需要合并两个分支。\"]},\"663\":{\"h\":\"合并分支\",\"t\":[\"git merge 分支名 \",\"在master分之下合并分dev分支。使用以下命令：\",\"git merger dev \",\"git_merge\",\"合并完成后即可删除没有用的额分支了，使用以下命令进行删除分支：\",\"git branch -d dev \",\"git_branch_delete\",\"所有命令总结：\",\"查看分支：git branch 创建分支：git branch name 切换分支：git checkout name 创建+切换分支：git checkout -b name 合并某个分支到当前分支：git merge name 删除某个分支：git branch -d name \"]},\"664\":{\"h\":\"处理分支矛盾\",\"t\":[\"新建一个分支，并且other中添加数据：2222222222222，并且检查文件。\",\"git_branch_other\",\"切换分支到master之中，并且master分支中增加内容：3333333333333，在增加之前使用cat命令，查看master坟之中是否存在2222222222222，增加后是否存在3333333333333。\",\"git_checkout2\",\"master分支数据如上，接下来我们继续合并分支。\",\"git_merge\",\"由于我之前在master分支写了一个2222222的信息，，所以这有一个2222222222222222222/33333333333333333这样的信息。不过这样的错误信息也不影响分支是错误。\",\"然后我们就可以git log查看commit后的信息，在此我就截图了哈。\"]},\"665\":{\"h\":\"分支策略\",\"t\":[\"1.创建一个dev分支。 2.修改demo.txt内容。 3.添加到暂存区。 4.切换回主分支(master)。 5.合并dev分支，使用命令 git merge –no-ff -m \\\"注释\\\" dev 6.查看历史记录 \",\"具体命令如下：\",\"git checkout -b dev 在demo.txt文件中添加数据4444444444444 git add demo.txt git commit -m \\\"add merge\\\" git merge --no-ff -m \\\"merge with no-ff\\\" dev git log 或者git log --graph --pretty=oneline --abbrev-commit \",\"git_dev\",\"分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。\"]},\"666\":{\"h\":\"Bug分支\",\"t\":[\"在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。\",\"比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。命令如下：\",\"git checkout -b dev 修改demo.txt文件添加数据：5555555555555 \",\"git_branch5\",\"并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。\",\"隐藏分支：\",\"git stash git status \",\"git_stash\",\"首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支。\",\"git_bug\",\"修改后合并分支，然后删除bug分支即可。\",\"git_bug2\",\"接着，我们继续回到dev分支下：\",\"git checkout dev git status \",\"发现并没有文件，是因为stash隐藏了，所以我们需要从stash恢复。恢复命令如下：\",\"git stash list git stash apply git stash drop cat demo.txt \",\"或者：\",\"git stash list git stash pop \",\"git_stash\"]},\"667\":{\"c\":[\"Git\"]},\"668\":{\"c\":[\"git\"]},\"669\":{\"h\":\"git多人合作开发操作命令\"},\"670\":{\"h\":\"查看远程仓库信息\",\"t\":[\"git remote git remote -v \"]},\"671\":{\"h\":\"推送分支\",\"t\":[\"git push origin master \",\"git_remote\",\"git_push\",\"也可以推送到其他分支：\",\"git push origin dev \",\"那么一般情况下，那些分支要推送呢？\",\"master分支是主分支，因此要时刻与远程同步。\",\"一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。\",\"git_push2\"]},\"672\":{\"h\":\"抓取分支\",\"t\":[\"多人协作时，大家都会往master分支上推送各自的修改。新建一个目录名字叫testgit3。\",\"现在我们的伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：\",\"git_clone2\",\"git checkout –b dev git reset --hard origin/dev \",\"在dev下重置起点，即可，git checkout -b dev origin/dev 错误的。\",\"git\",\"接下来在demo.txt的文件中添加数据6666666666666数据，然后提交到分支即可。\",\"git add demo.txt git commit -m \\\"添加666的数据\\\" git pusu origin dev \",\"git_push3\",\"小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改,添加了数据6666666666666，也试图推送到远程库:\",\"git_push_dev\",\"由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。\",\"git pull git branch --set-upstream dev origin/dev git pull \",\"然后此时会出现冲突，所以需要解决冲突，使用前面讲过的分支策略进行解决。然后在执行：\",\"git add demo.txt git commit -m \\\"****\\\" git push origin dev \",\"多人协作工作模式一般是这样的：\",\"首先，可以试图用git push origin branch-name推送自己的修改.\",\"如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。\",\"如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。\"]},\"673\":{\"h\":\"推荐阅读\",\"t\":[\"ProGit中文版\"]},\"674\":{\"c\":[\"Git\"]},\"675\":{\"c\":[\"git\"]},\"676\":{\"h\":\"git 远端操作命令\"},\"677\":{\"h\":\"配置远程仓库-创建SSH Key-检查用户目录\",\"t\":[\"检查用户目录下有没有id_rsa 和 id_rsa.pub，如果没有这两个文件就使用下面的这个命令生成密钥。\",\"ssh-keygen -t rsa –C \\\"youremail@example.com\\\" \"]},\"678\":{\"h\":\"在github中设置ssh\",\"t\":[\"登录github，打开settings的SSH and GPG keys，选择New SSH key就可以填充SSH key的相关信息。\",\"ssh\",\"填写title，然后将id_rsa.pub里面的密钥复制到Key中，然后点击Add SSH key即可。\"]},\"679\":{\"h\":\"选择New Repository(添加仓库)\",\"t\":[\"新建一个目录TestGit,将所有文件复制到TestGit目录下。\",\"git_1\",\"然年使用命令创建一个一个本地仓库\",\"git init git add demo.txt git add test.txt git test02.txt git commit -m \\\"新建文件\\\" \",\"git_remote\",\"现在把你的目录推送到TestGit远程仓库中\",\"git remote add origin https://github.com/hirCodd/TestGit.git git push -u origin master \",\"git_3\",\"由于远程库是空的，我们第一次推送master分支时，加上了，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。使用\",\"git push origin master \",\"现在查看远端仓库，如下，已经有相关的文件了。\",\"git_3\",\"以后你修改了bug，就可以使用git push origin master推送到github，这样你就拥有分布式版本仓库了。\",\"使用以下命令：\",\"git clone url \",\"首先现在远端创建一个仓库\",\"git_clone\",\"使用命令即可从远端clone文件下来\",\"git_clone2\",\" 下面会涉及删除与撤销的操作!请继续浏览！ \"]},\"680\":{\"c\":[\"Git\"]},\"681\":{\"c\":[\"git\"]},\"682\":{\"h\":\"算法\",\"t\":[\"JVM 内存分析图\"]},\"683\":{\"c\":[\"Kubernates\"]},\"684\":{\"h\":\"算法\",\"t\":[\"JVM 内存分析图\"]},\"685\":{\"c\":[\"Linux\"]},\"686\":{\"h\":\"Maven\"},\"687\":{\"h\":\"Mavan打包工具的使用\"},\"688\":{\"c\":[\"Maven\"]},\"689\":{\"h\":\"Maven对Springboot项目配置文件、依赖分离打包\"},\"690\":{\"h\":\"1.使用maven-assembly-plugin进行配置分离\",\"t\":[\"assembly.xml配置文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <assembly> <!-- 可自定义，这里指定的是项目环境 --> <!-- xxx.tar.gz --> <id>${name}</id> <!-- 打包的类型，如果有N个，将会打N个类型的包 --> <formats> <format>tar.gz</format> <format>zip</format> </formats> <includeBaseDirectory>true</includeBaseDirectory> <fileSets> <!-- 配置文件打包-打包至config目录下 --> <fileSet> <directory>src/main/resources/</directory> <outputDirectory>config</outputDirectory> <fileMode>0644</fileMode> <includes> <include>application.yml</include> <include>*.xml</include> <include>*.properties</include> </includes> </fileSet> <!-- 启动文件目录 --> <fileSet> <directory>${basedir}/src/main/bin</directory> <outputDirectory>bin</outputDirectory> <fileMode>0755</fileMode> <includes> <include>**.sh</include> <include>**.bat</include> </includes> </fileSet> </fileSets> <dependencySets> <dependencySet> <!-- 依赖库 --> <outputDirectory>lib</outputDirectory> <scope>runtime</scope> <fileMode>0755</fileMode> <excludes> <exclude>${project.groupId}:${project.artifactId}</exclude> </excludes> </dependencySet> <dependencySet> <outputDirectory>boot</outputDirectory> <fileMode>0755</fileMode> <includes> <include>${project.groupId}:${project.artifactId}</include> </includes> </dependencySet> </dependencySets> </assembly> \"]},\"691\":{\"h\":\"2.pom.xml文件build节点的配置\",\"t\":[\"pom.xml配置文件\",\" <build> <!-- 打包后的启动jar名称 --> <finalName>app-name</finalName> <plugins> <!-- 用于排除jar中依赖包 --> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <layout>ZIP</layout> <includes> <!-- 项目启动jar包中排除依赖包 --> <include> <groupId>non-exists</groupId> <artifactId>non-exists</artifactId> </include> </includes> </configuration> </plugin> <!-- 将依赖cp到lib目录下 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.0</version> <executions> <execution> <phase>prepare-package</phase> <goals> <goal>copy-dependencies</goal> </goals> <configuration> <!--依赖输出目录--> <outputDirectory>target/lib</outputDirectory> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <includeScope>compile</includeScope> </configuration> </execution> </executions> </plugin> <!-- maven编译 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <configuration> <!-- 不同版本需要制定具体的版本进行编译 --> <source>${java.version}</source> <target>${java.version}</target> </configuration> </plugin> <!-- 打包时跳过测试 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-surefire-plugin</artifactId> <version>2.22.1</version> <configuration> <skipTests>true</skipTests> </configuration> </plugin> <!-- 将项目中代码文件打成jar包 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> <version>3.1.2</version> <configuration> <excludes> <!-- 打包后的jar包中不包括配置文件 --> <!-- 通常是指classpath下目录下的文件，这样可以避免编写时的找不到相应文件 --> <exclude>*.xml</exclude> <exclude>*.properties</exclude> <exclude>*.yml</exclude> </excludes> <archive> <manifest> <!-- 项目启动类 --> <mainClass>cn.moremind.app.SpringBootApplication</mainClass> <!-- 依赖的jar的目录前缀 --> <classpathPrefix>../lib/</classpathPrefix> <addClasspath>true</addClasspath> </manifest> <!-- 将config目录加入classpath目录 --> <manifestEntries> <Class-Path>../config/</Class-Path> </manifestEntries> </archive> </configuration> </plugin> <!-- 打包插件 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-assembly-plugin</artifactId> <version>3.1.0</version> <configuration> <descriptors> <descriptor>src/main/assembly/assembly.xml</descriptor> </descriptors> </configuration> <executions> <execution> <id>make-assembly</id> <phase>package</phase> <goals> <goal>single</goal> </goals> </execution> </executions> </plugin> </plugins> </build> \"]},\"692\":{\"h\":\"3.编写shell脚本或者bat脚本\",\"t\":[\"1.直接运行 java -jar xxxx.jar即可\",\"2.编写shell/bash脚本\",\"在bin目录下编写脚本文件如下：\",\"shell\",\"#! /bin/sh HOME = '/opt/xxx/boot' JAR_HOME = 'xxx.jar' cd $HOME nohup java -jar $JAR_HOME \",\"bash\",\"@echo off rem ====================================================================== rem windows startup script rem rem ====================================================================== rem startup jar java -jar ../boot/xxx.jar pause \"]},\"693\":{\"h\":\"4.项目目录如下\",\"t\":[\"1565327770486\"]},\"694\":{\"c\":[\"Maven\"]},\"695\":{\"c\":[\"Maven\"]},\"696\":{\"h\":\"Memecache\",\"t\":[\"JVM 内存分析图\"]},\"697\":{\"c\":[\"Memcache\"]},\"698\":{\"h\":\"Redis\",\"t\":[\"JVM 内存分析图\"]},\"699\":{\"c\":[\"Redis\"]},\"700\":{\"h\":\"Kafka\",\"t\":[\"JVM 内存分析图\"]},\"701\":{\"c\":[\"Kafka\"]},\"702\":{\"h\":\"RabbitMQ\",\"t\":[\"JVM 内存分析图\"]},\"703\":{\"c\":[\"RabbitMQ\"]},\"704\":{\"h\":\"RocketMQ\",\"t\":[\"JVM 内存分析图\"]},\"705\":{\"c\":[\"RocketMQ\"]},\"706\":{\"h\":\"Construct\"},\"707\":{\"h\":\"Md\"},\"708\":{\"h\":\"Cs\"},\"709\":{\"h\":\"Data Persistence\"},\"710\":{\"h\":\"Db\"},\"711\":{\"h\":\"Java\"},\"712\":{\"h\":\"Distributed Design\"},\"713\":{\"h\":\"Middleware\"},\"714\":{\"h\":\"Netty\"},\"715\":{\"h\":\"Shenyu\"},\"716\":{\"h\":\"Opensource\"},\"717\":{\"h\":\"Spring\"},\"718\":{\"h\":\"Benchmark Test\"},\"719\":{\"h\":\"Tools\"},\"720\":{\"h\":\"Efficiency\"},\"721\":{\"h\":\"Cache\"},\"722\":{\"h\":\"Message\"}},\"dirtCount\":0,\"index\":[[\"依赖的jar的目录前缀\",{\"1\":{\"691\":1}}],[\"依赖输出目录\",{\"1\":{\"691\":1}}],[\"依赖库\",{\"1\":{\"690\":1}}],[\"依赖分离打包\",{\"0\":{\"689\":1}}],[\"依次递归\",{\"1\":{\"289\":1}}],[\"填写title\",{\"1\":{\"678\":1}}],[\"登录github\",{\"1\":{\"678\":1}}],[\"先用git\",{\"1\":{\"672\":1}}],[\"先从keyrootmap中通过selectorid获取到对应的shenyutrienode\",{\"1\":{\"493\":1}}],[\"抓取分支\",{\"0\":{\"672\":1}}],[\"推送失败\",{\"1\":{\"672\":1}}],[\"推送分支\",{\"0\":{\"671\":1}}],[\"推荐阅读\",{\"0\":{\"673\":1}}],[\"推荐做法是\",{\"1\":{\"479\":1}}],[\"推荐使用boolean\",{\"1\":{\"62\":1}}],[\"隐藏分支\",{\"1\":{\"666\":1}}],[\"隐藏起来\",{\"1\":{\"666\":1}}],[\"干活一般情况下在新建的dev分支上干活\",{\"1\":{\"665\":1}}],[\"干完后\",{\"1\":{\"631\":1,\"665\":1}}],[\"现在查看远端仓库\",{\"1\":{\"679\":1}}],[\"现在把你的目录推送到testgit远程仓库中\",{\"1\":{\"679\":1}}],[\"现在我们的伙伴要在dev分支上做开发\",{\"1\":{\"672\":1}}],[\"现在我要在master分支上创建一个临时分支\",{\"1\":{\"666\":1}}],[\"现在已经在dev分支目录下\",{\"1\":{\"662\":1}}],[\"现在可以打开你的demo\",{\"1\":{\"654\":1}}],[\"超级回滚\",{\"1\":{\"654\":1}}],[\"绿色的就是告诉添加了信息\",{\"1\":{\"652\":1}}],[\"红色的是告诉你\",{\"1\":{\"652\":1}}],[\"别急\",{\"1\":{\"651\":1}}],[\"恢复命令如下\",{\"1\":{\"666\":1}}],[\"恢复多个文件也是同理\",{\"1\":{\"644\":1}}],[\"恢复到正确的执行位置\",{\"1\":{\"297\":1}}],[\"跟上面的结论是一样的\",{\"1\":{\"642\":1}}],[\"跟踪输出的目的地取决于系统\",{\"1\":{\"182\":1}}],[\"具体命令如下\",{\"1\":{\"641\":1,\"665\":1}}],[\"具体取决于使用的构造方法\",{\"1\":{\"250\":1}}],[\"具体取决于主机环境\",{\"1\":{\"178\":1}}],[\"撤销修改\",{\"0\":{\"639\":1}}],[\"暂存区\",{\"0\":{\"638\":1},\"1\":{\"638\":1}}],[\"暂停时间只是一个目标\",{\"1\":{\"399\":1}}],[\"暂停时间设置的太短\",{\"1\":{\"399\":1}}],[\"工作区就是在你电脑上的repository下的某一个工作目录\",{\"1\":{\"637\":1}}],[\"工作区\",{\"0\":{\"637\":1}}],[\"工作过程分为以下几个阶段\",{\"1\":{\"347\":1}}],[\"嘿嘿嘿\",{\"1\":{\"631\":1}}],[\"至于原因\",{\"1\":{\"631\":1}}],[\"至少要经历两次标记过程\",{\"1\":{\"402\":1}}],[\"百度网盘\",{\"1\":{\"623\":1}}],[\"评论系统\",{\"1\":{\"623\":1}}],[\"未来将支持更多平台\",{\"1\":{\"623\":1}}],[\"𝖯𝖺𝗀𝖾𝗌\",{\"1\":{\"623\":1}}],[\"𝖦𝗂𝗍𝗁𝗎𝖻\",{\"1\":{\"623\":1}}],[\"设备上使用此客户端\",{\"1\":{\"623\":1}}],[\"设置目录显示的格式\",{\"0\":{\"615\":1}}],[\"设置spring\",{\"0\":{\"555\":1,\"556\":1,\"557\":1}}],[\"设置对应地址的网卡为多播模式\",{\"1\":{\"479\":1}}],[\"设置本地回环接口的多播功能\",{\"1\":{\"479\":1}}],[\"设置广播模式\",{\"1\":{\"479\":1}}],[\"设置ip头部的type\",{\"1\":{\"479\":1}}],[\"设置最大gc停顿时间指标\",{\"1\":{\"398\":1}}],[\"设置最大堆大小\",{\"1\":{\"363\":1}}],[\"设置上述端口对应的阿里云安全策略和防火墙策略\",{\"1\":{\"374\":1}}],[\"设置堆内存大小\",{\"1\":{\"369\":1}}],[\"设置堆内存大小和参数打印\",{\"1\":{\"362\":1}}],[\"设置\",{\"1\":{\"369\":1}}],[\"设置年老代为并发收集\",{\"1\":{\"363\":1}}],[\"设置年轻代为并行收集\",{\"1\":{\"363\":1}}],[\"设置年轻代中eden区与survivor区的大小比值\",{\"1\":{\"363\":1}}],[\"设置年轻代\",{\"1\":{\"363\":1}}],[\"设置年轻代和年老代的比值\",{\"1\":{\"363\":1}}],[\"设置年轻代大小为2\",{\"1\":{\"363\":1}}],[\"设置年轻代大小\",{\"1\":{\"363\":1}}],[\"设置此选项后\",{\"1\":{\"363\":1}}],[\"设置每次年轻代垃圾回收的最长时间\",{\"1\":{\"363\":1}}],[\"设置每个线程的栈大小为128\",{\"1\":{\"363\":1}}],[\"设置每个线程的堆栈大小\",{\"1\":{\"327\":1}}],[\"设置垃圾最大年龄\",{\"1\":{\"363\":2}}],[\"设置持久代大小为16\",{\"1\":{\"363\":1}}],[\"设置持久代大小\",{\"1\":{\"363\":1}}],[\"设置线程的栈大小\",{\"1\":{\"363\":1}}],[\"设置jvm初始内存为3550\",{\"1\":{\"363\":1}}],[\"设置jvm初始内存\",{\"1\":{\"363\":1}}],[\"设置jvm最大可用内存为3550\",{\"1\":{\"363\":1}}],[\"设置参数的方式\",{\"0\":{\"361\":1}}],[\"甚至可以创建外部链接菜单\",{\"1\":{\"623\":1}}],[\"甚至如果我记录操作日志\",{\"1\":{\"470\":1}}],[\"🌁\",{\"1\":{\"623\":1}}],[\"🇬🇧\",{\"1\":{\"623\":1}}],[\"🌎\",{\"1\":{\"623\":1}}],[\"🏷️\",{\"1\":{\"623\":1}}],[\"🌉\",{\"1\":{\"623\":1}}],[\"帮助你更容易地构建并管理博客或任何静态站点\",{\"1\":{\"621\":1}}],[\"略麻烦\",{\"1\":{\"618\":1}}],[\"翻译等工具\",{\"1\":{\"617\":1}}],[\"合并dev分支\",{\"1\":{\"665\":1}}],[\"合并某个分支到当前分支\",{\"1\":{\"663\":1}}],[\"合并完成后即可删除没有用的额分支了\",{\"1\":{\"663\":1}}],[\"合并分支\",{\"0\":{\"663\":1},\"1\":{\"666\":1}}],[\"合并\",{\"1\":{\"615\":1}}],[\"切换回主分支\",{\"1\":{\"665\":1}}],[\"切换分支到master之中\",{\"1\":{\"664\":1}}],[\"切换分支\",{\"1\":{\"663\":1}}],[\"切换\",{\"1\":{\"615\":1}}],[\"切换到线程b了\",{\"1\":{\"297\":1}}],[\"深色模式\",{\"1\":{\"613\":1}}],[\"深入理解java并发编程\",{\"1\":{\"448\":1}}],[\"深入java虚拟机\",{\"1\":{\"435\":1}}],[\"平均响应时间\",{\"1\":{\"602\":1,\"603\":1,\"604\":1}}],[\"公共配置\",{\"0\":{\"591\":1}}],[\"服务模拟一个平均响应时长20ms\",{\"1\":{\"589\":1}}],[\"服务版本说明\",{\"0\":{\"531\":1}}],[\"安装在网关节点服务器\",{\"1\":{\"587\":1}}],[\"版本回滚\",{\"0\":{\"654\":1}}],[\"版本号\",{\"0\":{\"657\":1},\"1\":{\"641\":1}}],[\"版本库是集中放在中央服务器的\",{\"1\":{\"631\":1}}],[\"版本\",{\"0\":{\"583\":1}}],[\"版本说明\",{\"1\":{\"534\":1}}],[\"网址\",{\"0\":{\"633\":1}}],[\"网关\",{\"1\":{\"579\":1}}],[\"网络分区时并不是所有节点都可响应请求\",{\"1\":{\"467\":1}}],[\"网络分区就会成为常态\",{\"1\":{\"456\":1}}],[\"网络时延\",{\"1\":{\"456\":1}}],[\"响应报文约2k的接口\",{\"1\":{\"589\":1}}],[\"响应式的java\",{\"1\":{\"579\":1}}],[\"响应时间优先的gc典型配置参数\",{\"1\":{\"363\":1}}],[\"响应时间优先\",{\"1\":{\"351\":1}}],[\"跨语言的\",{\"1\":{\"579\":1}}],[\"项目目录如下\",{\"0\":{\"693\":1}}],[\"项目启动类\",{\"1\":{\"691\":1}}],[\"项目启动jar包中排除依赖包\",{\"1\":{\"691\":1}}],[\"项目地址\",{\"0\":{\"573\":1}}],[\"项目git管理问题\",{\"0\":{\"572\":1}}],[\"检查用户目录下有没有id\",{\"1\":{\"677\":1}}],[\"检查用户目录\",{\"0\":{\"677\":1}}],[\"检查nacos是否已经注册consumer服务\",{\"0\":{\"570\":1}}],[\"检查某个类是否已经加载\",{\"1\":{\"289\":1}}],[\"测试结果\",{\"0\":{\"601\":1}}],[\"测试shenyu\",{\"0\":{\"600\":1}}],[\"测试mock服务\",{\"0\":{\"599\":1}}],[\"测试用例说明\",{\"0\":{\"588\":1}}],[\"测试工具占用资源很少\",{\"1\":{\"587\":1}}],[\"测试工具安装位置\",{\"0\":{\"587\":1}}],[\"测试工具安装\",{\"0\":{\"586\":1}}],[\"测试工具下载\",{\"0\":{\"585\":1}}],[\"测试工具\",{\"0\":{\"584\":1}}],[\"测试调用feign服务\",{\"0\":{\"564\":1}}],[\"测试验证是否配置成功\",{\"0\":{\"412\":1}}],[\"见如下日志则启动成功\",{\"1\":{\"556\":1,\"557\":1}}],[\"覆盖默认\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"$jar\",{\"1\":{\"692\":1}}],[\"$java\",{\"1\":{\"374\":1}}],[\"$home\",{\"1\":{\"692\":1}}],[\"$\",{\"1\":{\"547\":7,\"548\":6,\"549\":6,\"550\":1,\"551\":1,\"552\":11,\"567\":1,\"690\":2}}],[\"申明依赖\",{\"1\":{\"537\":1}}],[\"搭建项目公共的parent\",{\"0\":{\"535\":1}}],[\"各版本最新对应关系请查看\",{\"1\":{\"534\":1}}],[\"降级的\",{\"0\":{\"507\":1}}],[\"降级规则\",{\"0\":{\"506\":1},\"1\":{\"506\":2}}],[\"降低设计和实现相关api的难度\",{\"1\":{\"235\":1}}],[\"降低学习难度\",{\"1\":{\"235\":1}}],[\"降低编程难度\",{\"1\":{\"235\":1}}],[\"拼接成selectorid\",{\"1\":{\"505\":1}}],[\"三级缓存匹配\",{\"0\":{\"496\":1}}],[\"三级缓存是默认使用的\",{\"1\":{\"482\":1}}],[\"删除某个分支\",{\"1\":{\"663\":1}}],[\"删除test02文件\",{\"1\":{\"644\":1}}],[\"删除文件\",{\"0\":{\"643\":1}}],[\"删除src目录\",{\"1\":{\"542\":1}}],[\"删除selector\",{\"1\":{\"494\":1}}],[\"删除无用文件\",{\"0\":{\"542\":1}}],[\"删除rule\",{\"1\":{\"494\":1}}],[\"知识图谱\",{\"0\":{\"512\":1}}],[\"知道找到对应的有效节点\",{\"1\":{\"493\":1}}],[\"知行合一\",{\"1\":{\"15\":1}}],[\"省略部分代码\",{\"1\":{\"487\":1,\"488\":1,\"492\":1}}],[\"命令如下\",{\"1\":{\"666\":1}}],[\"命令行\",{\"1\":{\"647\":1}}],[\"命令\",{\"0\":{\"644\":1}}],[\"命令字符串使用由调用\",{\"1\":{\"173\":1}}],[\"命中的时候\",{\"1\":{\"486\":1}}],[\"何时消费\",{\"0\":{\"508\":1}}],[\"何时使用二级缓存\",{\"0\":{\"495\":1}}],[\"何时使用一级缓存\",{\"0\":{\"489\":1}}],[\"何时删除数据\",{\"0\":{\"488\":1,\"494\":1,\"499\":1}}],[\"何时匹配数据\",{\"0\":{\"487\":1,\"493\":1,\"498\":1}}],[\"何时存入数据\",{\"0\":{\"486\":1,\"492\":1,\"497\":1}}],[\"何指针对其\",{\"1\":{\"333\":1}}],[\"蓝绿发布等功能\",{\"1\":{\"482\":1,\"503\":1}}],[\"性能极高\",{\"1\":{\"482\":1,\"503\":1}}],[\"流量配置动态化\",{\"1\":{\"482\":1,\"503\":1}}],[\"防火墙等等\",{\"1\":{\"482\":1,\"503\":1}}],[\"防止非法事务导致数据库被破坏\",{\"1\":{\"471\":1}}],[\"熔断降级\",{\"1\":{\"503\":1}}],[\"熔断\",{\"1\":{\"482\":1,\"503\":1}}],[\"限流\",{\"1\":{\"482\":1,\"503\":1}}],[\"限定了原子性\",{\"1\":{\"475\":1}}],[\"鉴权\",{\"1\":{\"482\":1,\"503\":1}}],[\"插件化设计\",{\"1\":{\"482\":1,\"503\":1}}],[\"插入和遍历顺序不一致\",{\"1\":{\"250\":1}}],[\"事件为channelinputshutdownevent\",{\"1\":{\"479\":1}}],[\"事务必须遵循数据库的已定义规则和约束\",{\"1\":{\"471\":1}}],[\"连接自动关闭\",{\"1\":{\"479\":1}}],[\"连接保活\",{\"1\":{\"479\":1}}],[\"启用该功能时\",{\"1\":{\"479\":1}}],[\"启动文件目录\",{\"1\":{\"690\":1}}],[\"启动mock服务\",{\"0\":{\"597\":1}}],[\"启动shenyu\",{\"0\":{\"595\":1,\"596\":1}}],[\"启动shenyu和mock服务\",{\"0\":{\"594\":1}}],[\"启动nacos\",{\"0\":{\"554\":1}}],[\"启动测试\",{\"0\":{\"553\":1}}],[\"启动成功后如下所示\",{\"1\":{\"416\":1}}],[\"启动并发gc时堆内存占用百分比\",{\"1\":{\"398\":1}}],[\"启动tomcat\",{\"1\":{\"374\":1}}],[\"启动命令\",{\"1\":{\"371\":1,\"372\":1,\"554\":1}}],[\"启动\",{\"1\":{\"369\":1,\"416\":1}}],[\"改算法将小的碎片数据连接成更大的报文来最小化所发送的报文的数量\",{\"1\":{\"479\":1}}],[\"改方法确定输入的数的符号\",{\"1\":{\"118\":1}}],[\"改方法有两个\",{\"1\":{\"95\":1}}],[\"立即发送数据\",{\"1\":{\"479\":1}}],[\"估算bytebuf\",{\"1\":{\"479\":1}}],[\"写高低水位标记使用户可以控制写入数据速度\",{\"1\":{\"479\":1}}],[\"写高水位标记\",{\"1\":{\"479\":1}}],[\"写低水位标记\",{\"1\":{\"479\":1}}],[\"写操作\",{\"1\":{\"468\":1}}],[\"写操作成功仅仅意味着日志达成了一致\",{\"1\":{\"467\":1}}],[\"写操作实现了\",{\"1\":{\"465\":1}}],[\"固定大小的接受缓冲区分配器\",{\"1\":{\"479\":1}}],[\"固有锁是与特定类实例关联的隐式内部实体\",{\"1\":{\"445\":1}}],[\"选一个新的协调者继续提供服务\",{\"1\":{\"475\":1}}],[\"选主的唯一性\",{\"1\":{\"475\":1}}],[\"选择new\",{\"0\":{\"679\":1},\"1\":{\"678\":1}}],[\"选择你的os版本即可\",{\"0\":{\"634\":1}}],[\"选择节点\",{\"1\":{\"467\":1}}],[\"选择垃圾收集器为并行收集器\",{\"1\":{\"363\":1}}],[\"选择并行或jvm自己选\",{\"1\":{\"350\":1}}],[\"里面也有最终一致的思想\",{\"1\":{\"475\":1}}],[\"里所有的class或\",{\"1\":{\"287\":1}}],[\"隔离性\",{\"1\":{\"475\":1}}],[\"异步复制\",{\"1\":{\"473\":1}}],[\"异常\",{\"1\":{\"188\":1}}],[\"显然\",{\"1\":{\"473\":1}}],[\"显然这满足serializability\",{\"1\":{\"468\":1}}],[\"任意一个工作中的节点都要可以处理请求\",{\"1\":{\"472\":1}}],[\"任何写入数据库的数据都必须有效\",{\"1\":{\"471\":1}}],[\"任何操作在该系统生效的时刻都对应时间轴上的一个点\",{\"1\":{\"466\":1}}],[\"任何一次读都能读到某个数据的最近一次写的数据\",{\"1\":{\"466\":1}}],[\"任何一个问题都可能导致节点之间的数据不一致\",{\"1\":{\"456\":1}}],[\"任何执行的结果都与所有处理器的操作都按某种顺序执行一样\",{\"1\":{\"463\":1}}],[\"任何重叠的执行都不会发生\",{\"1\":{\"445\":1}}],[\"任何情况下\",{\"1\":{\"138\":1}}],[\"任何有限负数除以0为负无穷的\",{\"1\":{\"71\":1,\"91\":1}}],[\"任何有限正数除以0为正无穷大\",{\"1\":{\"71\":1,\"91\":1}}],[\"既不满足一致性\",{\"1\":{\"472\":1}}],[\"既满足顺序一致又满足线性一一致应该是这样的\",{\"1\":{\"464\":1}}],[\"模型去评估一个分布式系统\",{\"1\":{\"472\":1}}],[\"模块化查看字节码和汇编码\",{\"0\":{\"418\":1}}],[\"毕竟\",{\"1\":{\"471\":1}}],[\"毕竟这个中文词在英文中对应了不同的术语\",{\"1\":{\"454\":1}}],[\"级联和触发器\",{\"1\":{\"471\":1}}],[\"级联\",{\"1\":{\"471\":1}}],[\"乃至mysql热备都可以算是最终一致性\",{\"1\":{\"470\":1}}],[\"理论\",{\"1\":{\"472\":1,\"473\":2}}],[\"理论的局限性\",{\"1\":{\"472\":1}}],[\"理论也是个被滥用的词汇\",{\"1\":{\"472\":1}}],[\"理论中的\",{\"1\":{\"472\":1}}],[\"理念\",{\"1\":{\"470\":1}}],[\"理解g1日志格式\",{\"1\":{\"393\":1}}],[\"理解吞吐量和停顿时间\",{\"0\":{\"349\":1}}],[\"理解和说明\",{\"0\":{\"327\":1}}],[\"意识到喷错人了\",{\"1\":{\"469\":1}}],[\"意味着垃圾收集的时间越短\",{\"1\":{\"343\":1}}],[\"意味着它支持一系列的导航方法\",{\"1\":{\"243\":1}}],[\"远端操作命令\",{\"0\":{\"676\":1}}],[\"远在美国的键盘侠看到\",{\"1\":{\"469\":2}}],[\"远程\",{\"1\":{\"374\":1}}],[\"太棒了\",{\"1\":{\"469\":3}}],[\"诸葛建国在同一条状态下评论\",{\"1\":{\"469\":1}}],[\"夏侯铁柱在同一条状态下评论\",{\"1\":{\"469\":1}}],[\"夏侯铁柱在朋友圈发表状态\",{\"1\":{\"469\":1}}],[\"满足serializability\",{\"1\":{\"468\":2}}],[\"举个最简单的例子\",{\"1\":{\"468\":1}}],[\"举例说明\",{\"1\":{\"464\":2}}],[\"举例说明1\",{\"1\":{\"464\":1}}],[\"针对单个操作\",{\"1\":{\"468\":1}}],[\"针对上述情况\",{\"1\":{\"467\":1}}],[\"问题就是性能\",{\"1\":{\"468\":1}}],[\"问题来了\",{\"1\":{\"314\":1}}],[\"向世界展示\",{\"1\":{\"623\":1}}],[\"向多数节点发送心跳确认自己的leader身份\",{\"1\":{\"467\":1}}],[\"向集群的所有节点发起广播\",{\"1\":{\"467\":1}}],[\"少数节点的分区将无法进行服务\",{\"1\":{\"467\":1}}],[\"拥有当前集群完整的数据\",{\"1\":{\"467\":1}}],[\"环节\",{\"1\":{\"467\":1}}],[\"变化\",{\"1\":{\"467\":1}}],[\"变量\",{\"1\":{\"441\":1}}],[\"变量c和d是非共享变量\",{\"1\":{\"437\":1}}],[\"变量a和b是共享变量\",{\"1\":{\"437\":1}}],[\"变量a就是类变量\",{\"1\":{\"437\":1}}],[\"变量b就是成员变量\",{\"1\":{\"437\":1}}],[\"小伙伴们已经向origin\",{\"1\":{\"672\":1}}],[\"小集群\",{\"1\":{\"467\":1}}],[\"小数部分\",{\"1\":{\"70\":2}}],[\"原理上paxos和\",{\"1\":{\"475\":1}}],[\"原来的\",{\"1\":{\"467\":1}}],[\"原子一致性\",{\"1\":{\"466\":1}}],[\"原子操作在单个机器级别的操作中执行\",{\"1\":{\"444\":1}}],[\"原子操作失败\",{\"1\":{\"137\":1}}],[\"原子类使我们能够执行安全的原子操作\",{\"1\":{\"444\":1}}],[\"原子化对象\",{\"0\":{\"444\":1}}],[\"协议没有明确说明\",{\"1\":{\"467\":1}}],[\"失败\",{\"1\":{\"467\":1}}],[\"节点间的数据会最终达到一致状态\",{\"1\":{\"470\":1}}],[\"节点集群中的大多数\",{\"1\":{\"467\":1}}],[\"节点集群已经\",{\"1\":{\"467\":1}}],[\"节点集群因网络分区分割成两个集群\",{\"1\":{\"467\":1}}],[\"节点\",{\"1\":{\"467\":2}}],[\"节点发送\",{\"1\":{\"467\":1}}],[\"节点规模越大\",{\"1\":{\"456\":1}}],[\"集群通过阻止客户端查看不同节点上还未同步的数据维持逻辑视图\",{\"1\":{\"474\":1}}],[\"集群被分割成两部分\",{\"1\":{\"467\":1}}],[\"集合关系图谱\",{\"0\":{\"206\":1,\"220\":1,\"234\":1,\"255\":1}}],[\"个节点已经组成当前集群的大多数并写入了新的数据\",{\"1\":{\"467\":1}}],[\"个节点\",{\"1\":{\"467\":1}}],[\"个条件的无用类进行回收\",{\"1\":{\"402\":1}}],[\"个条件才能算是\",{\"1\":{\"402\":1}}],[\"处理分支矛盾\",{\"0\":{\"664\":1}}],[\"处理读请求\",{\"1\":{\"467\":1}}],[\"处理读请求时\",{\"1\":{\"467\":1}}],[\"处理\",{\"1\":{\"467\":1}}],[\"仍然是\",{\"1\":{\"467\":1}}],[\"仍然保留了分代的概念\",{\"1\":{\"347\":1}}],[\"确保当前\",{\"1\":{\"467\":1}}],[\"确定性是指\",{\"1\":{\"439\":1}}],[\"确定\",{\"1\":{\"374\":1}}],[\"确定指定值是否为有限值\",{\"1\":{\"76\":1}}],[\"给\",{\"1\":{\"467\":1}}],[\"给定特定的输入\",{\"1\":{\"439\":1}}],[\"收到读请求\",{\"1\":{\"467\":1}}],[\"收集器线程可以与用户线程一起工作\",{\"1\":{\"346\":1}}],[\"收集器是一种以获取最短回收停顿时间\",{\"1\":{\"346\":1}}],[\"收集过程暂停所有应用程序线程\",{\"1\":{\"342\":1}}],[\"符合线性一致性读的要求\",{\"1\":{\"467\":1}}],[\"符号引用验证\",{\"1\":{\"281\":1}}],[\"符号位为0\",{\"1\":{\"89\":1}}],[\"符号\",{\"1\":{\"70\":1}}],[\"动作\",{\"1\":{\"467\":1}}],[\"动态链接\",{\"1\":{\"302\":1}}],[\"谁发生在后\",{\"1\":{\"466\":1}}],[\"谁发生在前\",{\"1\":{\"466\":1}}],[\"继续下面的操作\",{\"1\":{\"638\":1}}],[\"继续在test\",{\"1\":{\"638\":1}}],[\"继续讨论\",{\"1\":{\"466\":1}}],[\"继承自abstractmap\",{\"1\":{\"250\":1}}],[\"严格一致性\",{\"1\":{\"466\":1}}],[\"某些follower虽然可能不能在请求提交成功后立即看到\",{\"1\":{\"465\":1}}],[\"`文档中明确写明它的一致性是\",{\"1\":{\"465\":1}}],[\"提出了base\",{\"1\":{\"473\":1}}],[\"提出的折中理论\",{\"1\":{\"471\":1}}],[\"提交test02文件\",{\"1\":{\"644\":1}}],[\"提交\",{\"1\":{\"468\":1,\"651\":1}}],[\"提供了强一致性\",{\"1\":{\"465\":1}}],[\"提高了效率\",{\"1\":{\"363\":1}}],[\"提高api间的互操作性\",{\"1\":{\"235\":1}}],[\"提高程序性能\",{\"1\":{\"235\":1}}],[\"读己所写一致性\",{\"1\":{\"470\":1}}],[\"读数据对象o\",{\"1\":{\"468\":1}}],[\"读取状态机中的数据返回\",{\"1\":{\"467\":1}}],[\"读取到的\",{\"1\":{\"464\":2}}],[\"读请求失败\",{\"1\":{\"467\":1}}],[\"读写操作应该发生在这个集群中而不是原来的小集群\",{\"1\":{\"467\":1}}],[\"读写频繁的场合可能会考虑使用直接内存\",{\"1\":{\"402\":1}}],[\"读是顺序一致性\",{\"1\":{\"467\":1}}],[\"拿到\",{\"1\":{\"464\":1}}],[\"拿数据发起的时间是不同的\",{\"1\":{\"464\":1}}],[\"拿的顺序都是\",{\"1\":{\"464\":1}}],[\"回滚到添加0000的版本了\",{\"1\":{\"654\":1}}],[\"回到情况\",{\"1\":{\"464\":1}}],[\"回收\",{\"1\":{\"345\":1}}],[\"了日志\",{\"1\":{\"467\":1}}],[\"了\",{\"1\":{\"464\":1}}],[\"了解ieee\",{\"0\":{\"68\":1,\"87\":1}}],[\"发现并没有文件\",{\"1\":{\"666\":1}}],[\"发现master分支上并没有我们想要看到的内容\",{\"1\":{\"662\":1}}],[\"发布地址\",{\"1\":{\"537\":1}}],[\"发起一次\",{\"1\":{\"467\":1}}],[\"发起写操作\",{\"1\":{\"467\":1}}],[\"发起早的客户端\",{\"1\":{\"464\":1}}],[\"发生网络隔离\",{\"1\":{\"467\":1}}],[\"发生在\",{\"1\":{\"464\":3,\"466\":2}}],[\"发展历史最悠久的收集器\",{\"1\":{\"341\":1}}],[\"客户端在向集群发起读写请求时\",{\"1\":{\"467\":1}}],[\"客户端无法感知集群的\",{\"1\":{\"467\":1}}],[\"客户端从发起到响应是有时间的\",{\"1\":{\"464\":1}}],[\"客户端c2\",{\"1\":{\"460\":1}}],[\"客户端c1将系统中的一个值k由v1更新为v2\",{\"1\":{\"460\":1}}],[\"论文看这里\",{\"1\":{\"462\":1}}],[\"论坛小站\",{\"1\":{\"460\":1}}],[\"他总会看到两条\",{\"1\":{\"464\":1}}],[\"他的原理比较晦涩\",{\"1\":{\"462\":1}}],[\"他们分别存放在jvm的方法区\",{\"1\":{\"437\":1}}],[\"计算机系统的时钟误差要大得多\",{\"1\":{\"461\":1}}],[\"计算机网络\",{\"0\":{\"25\":1}}],[\"置信区间\",{\"1\":{\"461\":1}}],[\"置信度证明\",{\"1\":{\"459\":1}}],[\"曾在其分布式数据库\",{\"1\":{\"461\":1}}],[\"曾经\",{\"1\":{\"341\":1}}],[\"次方\",{\"1\":{\"461\":2}}],[\"排了序\",{\"1\":{\"461\":1}}],[\"排查死锁\",{\"1\":{\"368\":1}}],[\"把项目提交到git仓库\",{\"0\":{\"649\":1}}],[\"把同一个文件提交到同一个暂存区中\",{\"1\":{\"638\":1}}],[\"把不同时空发生的多个事件进行全局唯一排序\",{\"1\":{\"461\":1}}],[\"把类中的符号引用转换为直接引用\",{\"1\":{\"283\":1}}],[\"卖给物理时间上率先提交请求的乘客即可\",{\"1\":{\"461\":2}}],[\"观察\",{\"1\":{\"461\":2}}],[\"背景\",{\"0\":{\"461\":1}}],[\"局部性\",{\"1\":{\"460\":1}}],[\"局部变量2\",{\"1\":{\"302\":2}}],[\"局部变量1\",{\"1\":{\"302\":1}}],[\"局部变量0\",{\"1\":{\"302\":2}}],[\"局部变量\",{\"0\":{\"296\":1},\"1\":{\"437\":1}}],[\"起作用\",{\"1\":{\"460\":1}}],[\"按照模块进行git管理\",{\"1\":{\"572\":1}}],[\"按照从强到弱\",{\"1\":{\"460\":1}}],[\"按照ieee\",{\"1\":{\"71\":1,\"91\":2}}],[\"过了一天你才收到了这条短信\",{\"1\":{\"460\":1}}],[\"点完发送之后\",{\"1\":{\"460\":1}}],[\"点击第一个就能在侧边栏展示导航栏\",{\"1\":{\"616\":1}}],[\"点击右侧侧边栏\",{\"1\":{\"616\":1}}],[\"点击run按钮运行得到下图所示\",{\"1\":{\"416\":1}}],[\"点击open按钮打开需要编译的java代码\",{\"1\":{\"416\":1}}],[\"点击sandbox按钮打开窗口\",{\"1\":{\"416\":1}}],[\"库存不足\",{\"1\":{\"460\":1}}],[\"电商系统\",{\"1\":{\"460\":1}}],[\"银行可以慢一点\",{\"1\":{\"460\":1}}],[\"银行系统\",{\"1\":{\"460\":1}}],[\"错误的\",{\"1\":{\"672\":1}}],[\"错误\",{\"1\":{\"460\":1,\"464\":1}}],[\"没有什么东西需要提交\",{\"1\":{\"651\":1}}],[\"没有中心服务器\",{\"1\":{\"632\":1}}],[\"没有导入导出功能\",{\"1\":{\"625\":1}}],[\"没有更多的优秀的主题以供选择\",{\"1\":{\"618\":1}}],[\"没有考虑处理延迟\",{\"1\":{\"472\":1}}],[\"没有事务可以创建无效的数据状态\",{\"1\":{\"471\":1}}],[\"没有因果关系的\",{\"1\":{\"470\":1}}],[\"没有因果一致性时会发生如下情形\",{\"1\":{\"469\":1}}],[\"没有一个节点可以控制或协调账本数据的生成\",{\"1\":{\"459\":1}}],[\"没有被gc的对象都有了各\",{\"1\":{\"311\":1}}],[\"种\",{\"1\":{\"459\":1}}],[\"等以后恢复现场后继续工作\",{\"1\":{\"666\":1}}],[\"等进行多设备同步\",{\"1\":{\"623\":1}}],[\"等方式\",{\"1\":{\"475\":1}}],[\"等待本地的applyindex大于等于readindex后\",{\"1\":{\"467\":1}}],[\"等等\",{\"1\":{\"459\":1}}],[\"等于或大于\",{\"1\":{\"81\":1}}],[\"权益证明\",{\"1\":{\"459\":1}}],[\"消费者启动类配置\",{\"0\":{\"568\":1}}],[\"消息大小估算器\",{\"1\":{\"479\":1}}],[\"消息队列\",{\"1\":{\"457\":1}}],[\"消耗在垃圾收集上的时间不得超过n毫秒\",{\"1\":{\"347\":1}}],[\"线性就更严格\",{\"1\":{\"466\":1}}],[\"线性是在顺序的基础上的加强\",{\"1\":{\"462\":1}}],[\"线性一致性又被称为强一致性\",{\"1\":{\"466\":1}}],[\"线性一致性的非阻塞性\",{\"1\":{\"460\":1}}],[\"线性一致性最重要的性质就是其\",{\"1\":{\"460\":1}}],[\"线性一致性linearizability\",{\"1\":{\"460\":1}}],[\"线性一致性\",{\"0\":{\"466\":1},\"1\":{\"456\":1,\"460\":1,\"462\":1,\"472\":1,\"473\":1}}],[\"线程p对完全操作\",{\"1\":{\"460\":1}}],[\"线程完成执行方法后\",{\"1\":{\"445\":1}}],[\"线程局部字段与普通类字段非常相似\",{\"1\":{\"441\":1}}],[\"线程是执行的基本单位\",{\"1\":{\"437\":1}}],[\"线程间无法互相访问对方的工作内存\",{\"1\":{\"436\":1}}],[\"线程间依照某种方式访问资源时\",{\"1\":{\"435\":1}}],[\"线程的工作内存是线程私有内存\",{\"1\":{\"436\":1}}],[\"线程工作内存对变量副本完成操作之后需要将结果同步至主内存\",{\"1\":{\"436\":1}}],[\"线程需要读写主内存的共享变量时需要先将该变量拷贝一份副本到自己的工作内存\",{\"1\":{\"436\":1}}],[\"线程安全性\",{\"1\":{\"448\":1}}],[\"线程安全的实现\",{\"0\":{\"438\":1}}],[\"线程安全\",{\"1\":{\"435\":1,\"448\":1}}],[\"线程安全是程式设计中的术语\",{\"1\":{\"435\":1}}],[\"线程池设计的技巧\",{\"0\":{\"431\":1}}],[\"线程池的关键参数\",{\"0\":{\"430\":1}}],[\"线程池的创建方式\",{\"0\":{\"429\":1}}],[\"线程池基础知识\",{\"0\":{\"428\":1}}],[\"线程\",{\"1\":{\"331\":1,\"436\":1}}],[\"线程栈的大小是个双刃剑\",{\"1\":{\"327\":1}}],[\"线程私有\",{\"0\":{\"441\":1},\"1\":{\"297\":1}}],[\"线程共享内存区域的\",{\"1\":{\"295\":1}}],[\"线程共享的内存区域\",{\"1\":{\"294\":1}}],[\"线程非安全\",{\"1\":{\"294\":1,\"295\":1}}],[\"准确来讲是用来解决一致性问题的共识算法\",{\"1\":{\"456\":1}}],[\"准备\",{\"0\":{\"282\":1}}],[\"宕机\",{\"1\":{\"456\":1}}],[\"研究多核场景\",{\"1\":{\"455\":1}}],[\"却是顺序一致性读\",{\"1\":{\"453\":1}}],[\"作者引言\",{\"0\":{\"453\":1}}],[\"作为博客笔记\",{\"1\":{\"624\":1}}],[\"作为一款博客笔记\",{\"1\":{\"624\":1}}],[\"作为对方\",{\"1\":{\"295\":1}}],[\"作为对方法区中这些数据的访问入口\",{\"1\":{\"279\":1,\"290\":1}}],[\"作为参数调用\",{\"1\":{\"192\":1}}],[\"二级缓存未开启的时候\",{\"1\":{\"498\":1}}],[\"二级缓存的设计\",{\"0\":{\"491\":1}}],[\"二级缓存匹配\",{\"0\":{\"490\":1}}],[\"二者在时间轴上没有重叠\",{\"1\":{\"464\":1}}],[\"二\",{\"1\":{\"448\":1}}],[\"二进制的\",{\"1\":{\"89\":1}}],[\"透彻的\",{\"1\":{\"448\":1}}],[\"你需要回滚50个版本\",{\"1\":{\"654\":1}}],[\"你需要执行git\",{\"1\":{\"652\":1}}],[\"你就创建了一个本地仓库了\",{\"1\":{\"648\":1}}],[\"你必须安装了git才能继续往下看\",{\"1\":{\"647\":1}}],[\"你也可以回滚版本\",{\"1\":{\"644\":1}}],[\"你没有使用git\",{\"1\":{\"642\":1}}],[\"你们两个只要把各自的修改推送给对方就行了\",{\"1\":{\"632\":1}}],[\"你可以自定义源文件夹\",{\"1\":{\"623\":1}}],[\"你可以自定义菜单\",{\"1\":{\"623\":1}}],[\"你可以任意使用应用内默认主题或任意第三方主题\",{\"1\":{\"623\":1}}],[\"你可以进行简单的配置\",{\"1\":{\"623\":1}}],[\"你可以使用下面的命令\",{\"1\":{\"644\":1}}],[\"你可以使用这些办法进行你所需要的回滚\",{\"1\":{\"641\":1}}],[\"你可以使用上一篇git基础教程讲过的方法对版本进行操作\",{\"1\":{\"638\":1}}],[\"你可以使用中文简体或英语\",{\"1\":{\"623\":1}}],[\"你可以使用\",{\"1\":{\"623\":1}}],[\"你可以使用最酷的\",{\"1\":{\"623\":1}}],[\"你可以在\",{\"1\":{\"623\":1}}],[\"你可以对文章进行标签分组\",{\"1\":{\"623\":1}}],[\"你可以给文章配上精美的封面图和在文章任意位置插入图片\",{\"1\":{\"623\":1}}],[\"你可能会感觉很乱\",{\"1\":{\"460\":1}}],[\"你注册一个论坛\",{\"1\":{\"460\":1}}],[\"你会觉得自己动作太慢\",{\"1\":{\"460\":1}}],[\"你会想到cap理论的\",{\"1\":{\"454\":1}}],[\"你在twitter上写了2条推文\",{\"1\":{\"464\":1}}],[\"你在淘宝看到一个库存为\",{\"1\":{\"460\":1}}],[\"你在柜台存了一笔钱\",{\"1\":{\"460\":1}}],[\"你的电脑上的gitrepository就是你的版本库\",{\"1\":{\"632\":1}}],[\"你的操作会耗费一定的时间渗透进一层层的缓存系统\",{\"1\":{\"464\":1}}],[\"你的女朋友同时又在淘宝消费了一笔钱\",{\"1\":{\"460\":1}}],[\"你的机器都不会故意发送错误信息\",{\"1\":{\"457\":1}}],[\"你真的知道什么是线程安全吗\",{\"1\":{\"448\":1}}],[\"你所了解到integercache\",{\"0\":{\"128\":1}}],[\"相当于\",{\"1\":{\"662\":1}}],[\"相当于回滚到你最后提交的那个版本\",{\"1\":{\"642\":1}}],[\"相当于sentinel的entry\",{\"1\":{\"509\":1}}],[\"相关文件和其他文件\",{\"1\":{\"616\":1}}],[\"相同\",{\"1\":{\"463\":2}}],[\"相反\",{\"1\":{\"447\":1}}],[\"相对应的是碱\",{\"1\":{\"471\":1}}],[\"相对的时间刻\",{\"1\":{\"393\":1}}],[\"相对不稳定\",{\"1\":{\"358\":1}}],[\"条件来导致死锁\",{\"1\":{\"447\":1}}],[\"攻击者可能会通过获取内部锁定并触发拒绝服务\",{\"1\":{\"447\":1}}],[\"来实现的\",{\"1\":{\"473\":1}}],[\"来处理读请求\",{\"1\":{\"467\":1}}],[\"来保证处理这次读请求的一定是\",{\"1\":{\"467\":1}}],[\"来稍微改善\",{\"1\":{\"447\":1}}],[\"来到bin目录\",{\"1\":{\"374\":1}}],[\"已说明\",{\"1\":{\"479\":2}}],[\"已经有相关的文件了\",{\"1\":{\"679\":1}}],[\"已经落盘\",{\"1\":{\"467\":1}}],[\"已经拿到了\",{\"1\":{\"464\":1}}],[\"已经被回收\",{\"1\":{\"402\":1}}],[\"已同步的语句\",{\"1\":{\"445\":1}}],[\"术语\",{\"1\":{\"445\":1}}],[\"监听\",{\"1\":{\"547\":3,\"548\":3,\"549\":3}}],[\"监视器锁\",{\"1\":{\"445\":1}}],[\"监控远端java进程\",{\"0\":{\"374\":1}}],[\"监控本地java进程\",{\"0\":{\"373\":1}}],[\"监控堆信息\",{\"1\":{\"371\":1}}],[\"内置评论系统\",{\"1\":{\"624\":1}}],[\"内置丰富的插件支持\",{\"1\":{\"482\":1,\"503\":1}}],[\"内部锁\",{\"1\":{\"445\":1}}],[\"内存溢出\",{\"1\":{\"402\":1}}],[\"内存泄漏到一定的程度就会导致内存溢出\",{\"1\":{\"402\":1}}],[\"内存泄漏\",{\"1\":{\"402\":1}}],[\"内存泄漏与内存溢出的区别\",{\"1\":{\"402\":1}}],[\"内存被使用了之后\",{\"1\":{\"387\":1}}],[\"内存模型\",{\"0\":{\"308\":1}}],[\"内存分析图\",{\"1\":{\"17\":1,\"19\":1,\"21\":1,\"23\":2,\"25\":1,\"27\":1,\"29\":1,\"31\":1,\"33\":1,\"35\":1,\"37\":1,\"41\":1,\"43\":1,\"45\":1,\"268\":1,\"405\":1,\"424\":1,\"426\":1,\"512\":1,\"526\":1,\"576\":1,\"607\":1,\"682\":1,\"684\":1,\"696\":1,\"698\":1,\"700\":1,\"702\":1,\"704\":1}}],[\"简单说\",{\"1\":{\"470\":1}}],[\"简而言之\",{\"1\":{\"445\":1,\"475\":1}}],[\"简介\",{\"1\":{\"16\":1}}],[\"简介🎉\",{\"1\":{\"15\":1}}],[\"尽可能少使用含通配符\",{\"1\":{\"495\":1}}],[\"尽可能在同一个selector中不要设置多个相同uri的规则\",{\"1\":{\"495\":1}}],[\"尽管较早的方法对于集合和基元非常有用\",{\"1\":{\"445\":1}}],[\"尽快完成程序的运算任务\",{\"1\":{\"343\":1,\"349\":1}}],[\"增量和获取\",{\"1\":{\"444\":1}}],[\"增加后是否存在3333333333333\",{\"1\":{\"664\":1}}],[\"增加在年轻代即被回收的概率\",{\"1\":{\"363\":1}}],[\"增加了对象在年轻代的存活时间\",{\"1\":{\"363\":1}}],[\"增加程序的重用性\",{\"1\":{\"235\":1}}],[\"段上的锁\",{\"1\":{\"443\":1}}],[\"同上但支持ipv6\",{\"1\":{\"479\":1}}],[\"同时支持中文配置\",{\"1\":{\"617\":1}}],[\"同时删除当前selector相关的rule缓存\",{\"1\":{\"488\":1}}],[\"同时也可以部署到在线平台\",{\"1\":{\"624\":1}}],[\"同时也可以在编辑区打开多个文件作为工作文件\",{\"1\":{\"614\":1}}],[\"同时也被称之为适合写作者和研究人员的markdown编辑器\",{\"1\":{\"611\":1}}],[\"同时也会删除空ruledata的数据\",{\"1\":{\"488\":1}}],[\"同时也会删除空selectordata的数据\",{\"1\":{\"488\":1}}],[\"同时也会删除空的rule缓存数据\",{\"1\":{\"488\":4}}],[\"同时也会删除空的selector缓存数据\",{\"1\":{\"488\":2}}],[\"同时也是一名开源爱好者\",{\"1\":{\"2\":1}}],[\"同时满足serializability和linearizability\",{\"1\":{\"468\":1}}],[\"同时两个进程看到的操作顺序与全局时钟的顺序一样\",{\"1\":{\"464\":1}}],[\"同时你的朋友转账给你一笔钱\",{\"1\":{\"460\":1}}],[\"同时阻止其他线程对该方法的访问\",{\"1\":{\"445\":1}}],[\"同步非常昂贵\",{\"1\":{\"446\":1}}],[\"同步语句必须指定提供内部锁的对象\",{\"1\":{\"446\":1}}],[\"同步语句\",{\"0\":{\"446\":1}}],[\"同步方法依赖于\",{\"1\":{\"445\":1}}],[\"同步方法\",{\"0\":{\"445\":1}}],[\"同步会对性能造成不利影响\",{\"1\":{\"442\":1}}],[\"同步集合和并发集合仅使集合本身具有线程安全性\",{\"1\":{\"443\":1}}],[\"同步集合在每种方法中都使用内在锁定\",{\"1\":{\"442\":1}}],[\"同步集合类\",{\"0\":{\"442\":1}}],[\"同样\",{\"1\":{\"441\":1}}],[\"让\",{\"1\":{\"467\":1}}],[\"让我们重构\",{\"1\":{\"446\":1}}],[\"让我们使用\",{\"1\":{\"444\":1}}],[\"让我们假设在竞争条件下\",{\"1\":{\"444\":1}}],[\"让我们看下面的\",{\"1\":{\"444\":1}}],[\"让我们记住\",{\"1\":{\"442\":1}}],[\"让我们考虑以下\",{\"1\":{\"441\":1}}],[\"让我们考虑一个带有静态方法的简单工具类\",{\"1\":{\"439\":1}}],[\"让所有存活的对象都向一端移动\",{\"1\":{\"338\":1}}],[\"上传图片必须到picgo上传在复制过来\",{\"1\":{\"618\":1}}],[\"上边提到的因果一致性可以理解为是最终一致性的变种\",{\"1\":{\"470\":1}}],[\"上来说是\",{\"1\":{\"465\":1}}],[\"上的执行顺序是未定义的\",{\"1\":{\"463\":1}}],[\"上的执行顺序与程序顺序相同\",{\"1\":{\"463\":1}}],[\"上面已经提示我们\",{\"1\":{\"672\":1}}],[\"上面提到使用git\",{\"1\":{\"654\":1}}],[\"上面提到zookeeper的写是线性一致性\",{\"1\":{\"467\":1}}],[\"上面情况1和2都是满足顺序一致性的\",{\"1\":{\"464\":1}}],[\"上面是夸张了的用户情况\",{\"1\":{\"460\":1}}],[\"上面定义的三个变量中\",{\"1\":{\"437\":1}}],[\"上图描述了一个多线程执行场景\",{\"1\":{\"436\":1}}],[\"成为\",{\"1\":{\"467\":1}}],[\"成员变量\",{\"1\":{\"437\":1}}],[\"成员变量和局部变量\",{\"1\":{\"437\":1}}],[\"成功返回\",{\"1\":{\"289\":1}}],[\"哪些变量是存放在方法区中\",{\"1\":{\"437\":1}}],[\"共识算法还有一个很重要的领域\",{\"1\":{\"459\":1}}],[\"共识算法只能提供基础\",{\"1\":{\"456\":1}}],[\"共识并不意味着实现了一致性\",{\"1\":{\"456\":1}}],[\"共识与线性一致性与顺序一致性\",{\"0\":{\"451\":1}}],[\"共享资源\",{\"0\":{\"437\":1}}],[\"共享变量\",{\"0\":{\"437\":1}}],[\"共输出10次\",{\"1\":{\"367\":1}}],[\"函数库在多线程环境中被调用时\",{\"1\":{\"435\":1}}],[\"维基百科给出的定义如下\",{\"1\":{\"435\":1}}],[\"邀请大家一同入驻\",{\"1\":{\"421\":1}}],[\"利用\",{\"1\":{\"623\":1}}],[\"利用hsdis和jitwatch查看分析hotspot\",{\"1\":{\"421\":1}}],[\"利用monitor机制在对象头设置hash值\",{\"1\":{\"137\":1}}],[\"参考文献\",{\"1\":{\"616\":1}}],[\"参考文章\",{\"0\":{\"421\":1,\"448\":1}}],[\"参考\",{\"0\":{\"476\":1}}],[\"参数设置\",{\"1\":{\"392\":1,\"393\":1}}],[\"参数只有被标记为manageable的flags可以被实时修改\",{\"1\":{\"361\":1,\"366\":1}}],[\"弱引用和虚引用\",{\"1\":{\"402\":1}}],[\"软状态\",{\"1\":{\"473\":1}}],[\"软引用\",{\"1\":{\"402\":1}}],[\"软工渣\",{\"1\":{\"15\":1}}],[\"强大的自定义主题功能\",{\"1\":{\"624\":1}}],[\"强大的主题自定义能力\",{\"1\":{\"623\":1}}],[\"强一致性集群中\",{\"1\":{\"460\":1}}],[\"强一致性包括线性一致性和顺序一致性\",{\"1\":{\"460\":1}}],[\"强一致性和弱一致性只是一种统称\",{\"1\":{\"460\":1}}],[\"强弱一致的名词\",{\"1\":{\"453\":1}}],[\"强引用\",{\"1\":{\"402\":1}}],[\"强迫症\",{\"1\":{\"15\":1}}],[\"足下面\",{\"1\":{\"402\":1}}],[\"废弃常量\",{\"1\":{\"402\":1}}],[\"判定一个常量是否是\",{\"1\":{\"402\":1}}],[\"判断是否可写\",{\"1\":{\"479\":1}}],[\"判断是否需要使用g1收集器\",{\"1\":{\"347\":1}}],[\"判断是否开启偏向锁\",{\"1\":{\"137\":1}}],[\"判断是否在误差范围内\",{\"1\":{\"81\":1}}],[\"判断字符串是否相等\",{\"1\":{\"81\":1}}],[\"联\",{\"1\":{\"402\":1}}],[\"联系我\",{\"0\":{\"3\":1}}],[\"除了像gossip这样明确以最终一致性为卖点的协议外\",{\"1\":{\"470\":1}}],[\"除了同步集合\",{\"1\":{\"443\":1}}],[\"除非系统不发生任何故障\",{\"1\":{\"461\":1}}],[\"除非这个对象与引用链上的任何一个对象建立关\",{\"1\":{\"402\":1}}],[\"除去持久代\",{\"1\":{\"363\":1}}],[\"筛选的条件是此\",{\"1\":{\"402\":1}}],[\"筛选回收\",{\"1\":{\"347\":1}}],[\"象死亡\",{\"1\":{\"402\":1}}],[\"缓存的前提下\",{\"1\":{\"493\":1}}],[\"缓存数据是一致的\",{\"1\":{\"455\":1}}],[\"缓存一致性\",{\"1\":{\"455\":1,\"456\":1}}],[\"缓存就设置为\",{\"1\":{\"112\":1}}],[\"缓刑阶段\",{\"1\":{\"402\":1}}],[\"虑\",{\"1\":{\"402\":1}}],[\"什么是apache\",{\"0\":{\"579\":1}}],[\"什么是一致性\",{\"0\":{\"454\":1}}],[\"什么是线程安全以及如何实现\",{\"1\":{\"448\":1}}],[\"什么是线程安全\",{\"0\":{\"435\":1},\"1\":{\"448\":1}}],[\"什么是直接内存\",{\"1\":{\"402\":1}}],[\"什么时候发生的gc\",{\"1\":{\"393\":1}}],[\"什么时候回收由jvm决定\",{\"1\":{\"388\":1}}],[\"适当增加堆内存大小\",{\"1\":{\"399\":1}}],[\"适用于相对时间有要求的场景\",{\"1\":{\"348\":1}}],[\"适用于科学计算\",{\"1\":{\"348\":1}}],[\"适用于内存比较小的嵌入式设备\",{\"1\":{\"348\":1}}],[\"适用范围\",{\"1\":{\"342\":1}}],[\"逐步调整到最佳状态\",{\"1\":{\"399\":1}}],[\"全部的\",{\"1\":{\"398\":1}}],[\"全部参数查看\",{\"1\":{\"363\":1}}],[\"注释\",{\"1\":{\"665\":1}}],[\"注意\",{\"1\":{\"391\":1,\"464\":1,\"471\":1}}],[\"注解抽象语法树\",{\"1\":{\"276\":1}}],[\"难免会有不够用或者达到设定值的时候\",{\"1\":{\"387\":1}}],[\"手动修改\",{\"0\":{\"640\":1}}],[\"手动\",{\"1\":{\"380\":1}}],[\"获取当前资源的降级规则\",{\"1\":{\"506\":1}}],[\"获取当前资源的流控规则\",{\"1\":{\"506\":1}}],[\"获取到的\",{\"1\":{\"467\":1}}],[\"获取到gc日志\",{\"1\":{\"398\":4}}],[\"获取dump文件\",{\"0\":{\"380\":1}}],[\"获取class名称加上\",{\"1\":{\"140\":1}}],[\"输出当前方法被调用的调用路径\",{\"1\":{\"377\":1}}],[\"反而看到的是旧值\",{\"1\":{\"464\":1,\"466\":1}}],[\"反编译指定已加载类的源码\",{\"1\":{\"377\":1}}],[\"反射性\",{\"1\":{\"138\":1}}],[\"退出arthas客户端\",{\"1\":{\"377\":1}}],[\"下面是回滚到我的版本\",{\"1\":{\"657\":1}}],[\"下面会涉及删除与撤销的操作\",{\"1\":{\"644\":1,\"657\":1,\"679\":1}}],[\"下面的图满足了顺序一致\",{\"1\":{\"464\":1}}],[\"下使用\",{\"1\":{\"611\":1}}],[\"下载路径如下\",{\"1\":{\"415\":1}}],[\"下载jitwatch\",{\"0\":{\"415\":1}}],[\"下载hsdis\",{\"0\":{\"409\":1,\"410\":1}}],[\"下载地址如下\",{\"1\":{\"409\":1,\"410\":1}}],[\"下载地址\",{\"1\":{\"378\":1}}],[\"下载安装\",{\"0\":{\"376\":1}}],[\"下一次eden满了的时候\",{\"1\":{\"314\":1}}],[\"采用适当的方法来使系统达到最终一致性\",{\"1\":{\"473\":1}}],[\"采用命令行交互模式\",{\"1\":{\"375\":1}}],[\"采用的是\",{\"1\":{\"346\":1}}],[\"密码\",{\"1\":{\"374\":1}}],[\"端口\",{\"1\":{\"374\":1}}],[\"授予权限\",{\"1\":{\"374\":1}}],[\"主流的公有链每秒只能处理几笔到几十笔交易\",{\"1\":{\"459\":1}}],[\"主机名上写服务器的ip地址\",{\"1\":{\"374\":1}}],[\"主要用于流量控制\",{\"1\":{\"503\":1}}],[\"主要用于jvm调优和debug\",{\"1\":{\"358\":1}}],[\"主要适合在后台运算而不需要太多交互的任务\",{\"1\":{\"349\":1}}],[\"主要属性\",{\"0\":{\"109\":1}}],[\"添加仓库\",{\"0\":{\"679\":1}}],[\"添加了数据6666666666666\",{\"1\":{\"672\":1}}],[\"添加666的数据\",{\"1\":{\"672\":1}}],[\"添加到暂存区\",{\"1\":{\"665\":1}}],[\"添加测试的controller\",{\"0\":{\"558\":1}}],[\"添加hsdis的运行参数配置\",{\"1\":{\"416\":1}}],[\"添加\",{\"1\":{\"374\":2}}],[\"右击java对象名\",{\"1\":{\"381\":1}}],[\"右击类名\",{\"1\":{\"381\":1}}],[\"右击该主机\",{\"1\":{\"374\":1}}],[\"右击\",{\"1\":{\"374\":1}}],[\"演示部署在阿里云服务器上的tomcat\",{\"1\":{\"374\":1}}],[\"情况2就显得\",{\"1\":{\"464\":1}}],[\"情况1更真实\",{\"1\":{\"464\":1}}],[\"情况\",{\"1\":{\"371\":1,\"464\":4}}],[\"永久区使用\",{\"1\":{\"371\":1}}],[\"永远有一个survivor\",{\"1\":{\"314\":1}}],[\"永远返回是\",{\"1\":{\"138\":2}}],[\"要求是\",{\"1\":{\"466\":1}}],[\"要达到全序\",{\"1\":{\"466\":1}}],[\"要实现绝对理想的严格一致性\",{\"1\":{\"461\":1}}],[\"要实现线性一致还需要在算法之上做出更多的努力如库封装\",{\"1\":{\"467\":1}}],[\"要实现线性一致还需要在算法之上做出更多的努力\",{\"1\":{\"456\":1}}],[\"要宽泛\",{\"1\":{\"456\":1}}],[\"要了解解决的问题\",{\"1\":{\"444\":1}}],[\"要真正宣告一个对\",{\"1\":{\"402\":1}}],[\"要想实现线性一致性读\",{\"1\":{\"467\":1}}],[\"要想分析日志的信息\",{\"1\":{\"390\":1}}],[\"要想让服务器上的tomcat被连接\",{\"1\":{\"374\":1}}],[\"要是在发生堆内存溢出的时候\",{\"1\":{\"369\":1}}],[\"要以线程为单位\",{\"1\":{\"296\":1}}],[\"打开settings的ssh\",{\"1\":{\"678\":1}}],[\"打开你的demo\",{\"1\":{\"657\":1}}],[\"打开工作区\",{\"0\":{\"614\":1}}],[\"打开对年老代的压缩\",{\"1\":{\"363\":1}}],[\"打包插件\",{\"1\":{\"691\":1}}],[\"打包后的jar包中不包括配置文件\",{\"1\":{\"691\":1}}],[\"打包后的启动jar名称\",{\"1\":{\"691\":1}}],[\"打包时跳过测试\",{\"1\":{\"691\":1}}],[\"打包至config目录下\",{\"1\":{\"690\":1}}],[\"打包的类型\",{\"1\":{\"690\":1}}],[\"打包到本地\",{\"1\":{\"538\":1}}],[\"打包安装到本地\",{\"0\":{\"538\":1}}],[\"打印出堆内存相关信息\",{\"1\":{\"369\":1}}],[\"死锁代码\",{\"1\":{\"368\":1}}],[\"日志级别为warn\",{\"1\":{\"589\":1}}],[\"日志的行为在大多数\",{\"1\":{\"467\":1}}],[\"日志文件的输出路径\",{\"1\":{\"363\":1}}],[\"日期形式\",{\"1\":{\"363\":1}}],[\"使之能支持多个平台\",{\"1\":{\"611\":1}}],[\"使程序功能正确完成\",{\"1\":{\"435\":1}}],[\"使得堆内存溢出\",{\"1\":{\"369\":1}}],[\"使得运行效率降低\",{\"1\":{\"363\":1}}],[\"使用maven\",{\"0\":{\"690\":1}}],[\"使用前面讲过的分支策略进行解决\",{\"1\":{\"672\":1}}],[\"使用命令即可从远端clone文件下来\",{\"1\":{\"679\":1}}],[\"使用命令\",{\"1\":{\"665\":1}}],[\"使用命令java\",{\"1\":{\"412\":1}}],[\"使用以下命令进行删除分支\",{\"1\":{\"663\":1}}],[\"使用以下命令\",{\"1\":{\"662\":1,\"663\":1,\"679\":1}}],[\"使用下一个命令+下下个命令\",{\"1\":{\"655\":1}}],[\"使用cat查看内容\",{\"1\":{\"655\":1}}],[\"使用之前所使用的命令进行版本回滚\",{\"0\":{\"641\":1}}],[\"使用nacos作为注册中心和配置中心\",{\"1\":{\"530\":1}}],[\"使用的springcloud版本为2021\",{\"1\":{\"530\":1}}],[\"使用leader\",{\"1\":{\"467\":1}}],[\"使用无状态实现来实现线程安全\",{\"1\":{\"439\":1}}],[\"使用toplist查看资源占用率\",{\"0\":{\"419\":1}}],[\"使用java提供的一组原子类\",{\"1\":{\"444\":1}}],[\"使用java\",{\"1\":{\"416\":1}}],[\"使用jitwatch\",{\"0\":{\"407\":1}}],[\"使用jvisualvm查看\",{\"0\":{\"316\":1}}],[\"使用git\",{\"0\":{\"642\":1},\"1\":{\"642\":1,\"644\":2}}],[\"使用gcviewer分析吞吐量和响应时间\",{\"1\":{\"398\":4}}],[\"使用g1gc垃圾收集器\",{\"1\":{\"398\":1}}],[\"使用g1收集器时\",{\"1\":{\"347\":1}}],[\"使用了\",{\"1\":{\"402\":1,\"456\":1}}],[\"使用了g1垃圾收集器\",{\"1\":{\"393\":1}}],[\"使用了可变数组\",{\"1\":{\"245\":1}}],[\"使用得最多的参数类型\",{\"1\":{\"358\":1}}],[\"使用并发收集器\",{\"1\":{\"350\":1}}],[\"使用串行或jvm自己选\",{\"1\":{\"350\":1}}],[\"使用串行收集器\",{\"1\":{\"350\":1}}],[\"使用多线程和\",{\"1\":{\"345\":1}}],[\"使用双向链表来维护元素的顺序\",{\"1\":{\"249\":1}}],[\"使用参数\",{\"1\":{\"185\":1}}],[\"使用\",{\"0\":{\"381\":1},\"1\":{\"137\":1,\"399\":1,\"589\":1,\"679\":1}}],[\"使用bigdecimal类型进行判断\",{\"1\":{\"81\":1}}],[\"使用boolean\",{\"1\":{\"62\":1}}],[\"使用double\",{\"1\":{\"81\":1}}],[\"使用方法\",{\"1\":{\"76\":1}}],[\"使用建议\",{\"0\":{\"62\":1}}],[\"碎片\",{\"1\":{\"363\":1}}],[\"建议年轻代大小使用\",{\"1\":{\"363\":1}}],[\"建议使用bigdecimal类型\",{\"1\":{\"81\":1}}],[\"配置文件打包\",{\"1\":{\"690\":1}}],[\"配置远程仓库\",{\"0\":{\"677\":1}}],[\"配置nacos注册中心\",{\"0\":{\"567\":1}}],[\"配置logback文件\",{\"0\":{\"552\":1}}],[\"配置application\",{\"0\":{\"548\":1,\"549\":1}}],[\"配置applicatioin\",{\"0\":{\"547\":1}}],[\"配置多环境以及nacos\",{\"0\":{\"546\":1}}],[\"配置从哪个仓库中下载构件\",{\"1\":{\"537\":1}}],[\"配置如下几个参数\",{\"1\":{\"416\":1}}],[\"配置\",{\"1\":{\"416\":1}}],[\"配置运行jitwatch\",{\"0\":{\"416\":1}}],[\"配置hsdis\",{\"0\":{\"411\":1}}],[\"配置了\",{\"1\":{\"363\":1}}],[\"配置年老代垃圾收集方式为并行收集\",{\"1\":{\"363\":1}}],[\"配置并行收集器的线程数\",{\"1\":{\"363\":1}}],[\"配置参数\",{\"1\":{\"363\":4}}],[\"年\",{\"1\":{\"462\":1}}],[\"年轻代使用并发收集\",{\"1\":{\"363\":1}}],[\"年轻代中eden区与两个survivor区的比值\",{\"1\":{\"363\":1}}],[\"年轻代占整个堆栈的1\",{\"1\":{\"363\":1}}],[\"年老代里\",{\"1\":{\"313\":1}}],[\"持久性\",{\"1\":{\"475\":1}}],[\"持久代一般固定大小为64\",{\"1\":{\"363\":1}}],[\"持续占用内存空间\",{\"1\":{\"402\":1}}],[\"持有这个引用是为了支持方法调用过程中的动态连接\",{\"1\":{\"302\":1}}],[\"调高concgcthreads\",{\"1\":{\"399\":1}}],[\"调整最大停顿时间\",{\"1\":{\"398\":1}}],[\"调整内存大小再获取gc日志分析\",{\"1\":{\"398\":1}}],[\"调优\",{\"0\":{\"398\":1}}],[\"调优回收器gc\",{\"1\":{\"363\":1}}],[\"调优堆栈内存\",{\"1\":{\"363\":1}}],[\"调用服务\",{\"0\":{\"571\":1}}],[\"调用openfeign接口\",{\"0\":{\"569\":1}}],[\"调用objectmonitor\",{\"1\":{\"143\":1}}],[\"调用这个对象的行为都可以获取正确的结果\",{\"1\":{\"435\":1}}],[\"调用一个方法\",{\"1\":{\"296\":1}}],[\"调用此方法的常规和方便的方法\",{\"1\":{\"188\":1}}],[\"调用此方法表明虚拟机停止发出每次调用的调试信息\",{\"1\":{\"185\":1}}],[\"调用此方法表明\",{\"1\":{\"169\":1,\"179\":1}}],[\"调用的行为方式完全相同\",{\"1\":{\"173\":1}}],[\"调用\",{\"1\":{\"173\":1,\"176\":1}}],[\"换算\",{\"1\":{\"362\":1}}],[\"换句话说\",{\"1\":{\"296\":1}}],[\"换句话说里面内容怎样才能被执行\",{\"1\":{\"296\":1}}],[\"格式\",{\"1\":{\"358\":2}}],[\"混合模式\",{\"1\":{\"357\":1}}],[\"解决冲突\",{\"1\":{\"672\":1}}],[\"解决的办法也很简单\",{\"1\":{\"672\":1}}],[\"解决分布式事务时有\",{\"1\":{\"475\":1}}],[\"解释的比较清楚\",{\"1\":{\"448\":1}}],[\"解释执行\",{\"1\":{\"357\":1}}],[\"解析\",{\"0\":{\"283\":1}}],[\"解析为int的静态值\",{\"1\":{\"112\":1}}],[\"串行\",{\"1\":{\"351\":1}}],[\"串行收集器\",{\"1\":{\"348\":1}}],[\"高性能的\",{\"1\":{\"579\":1}}],[\"高度可自主化开发的java网关\",{\"1\":{\"482\":1,\"503\":1}}],[\"高度可动态化配置\",{\"1\":{\"482\":1,\"503\":1}}],[\"高精度的石英钟的漂移率为\",{\"1\":{\"461\":1}}],[\"高并发场景分析\",{\"0\":{\"400\":1}}],[\"高吞吐量则可以高效地利用cpu时间\",{\"1\":{\"349\":1}}],[\"高位可以通过通过jvm参数djava\",{\"1\":{\"128\":1}}],[\"高位如果不设置则为127\",{\"1\":{\"128\":1}}],[\"良好的响应速度能提升用户体验\",{\"1\":{\"349\":1}}],[\"停顿时间越短就越适合需要和用户交互的程序\",{\"1\":{\"349\":1}}],[\"停顿时间\",{\"1\":{\"349\":1}}],[\"停顿时间优先\",{\"1\":{\"348\":1,\"392\":1,\"393\":1}}],[\"景\",{\"1\":{\"348\":1}}],[\"多人协作工作模式一般是这样的\",{\"1\":{\"672\":1}}],[\"多人协作时\",{\"1\":{\"672\":1}}],[\"多个相同的uri会导致前缀会执行默认的筛选条件\",{\"1\":{\"495\":1}}],[\"多个线程可以获取不同\",{\"1\":{\"443\":1}}],[\"多个线程可以操作保存在堆或者方法区中的同一个数据\",{\"1\":{\"437\":1}}],[\"多个线程之间是可以共享一部分进程中的数据的\",{\"1\":{\"437\":1}}],[\"多个线程间共享\",{\"1\":{\"436\":1}}],[\"多协议\",{\"1\":{\"482\":1,\"503\":1}}],[\"多播数据报的time\",{\"1\":{\"479\":1}}],[\"多副本同步机制\",{\"1\":{\"474\":1}}],[\"多线程应用中的错误是错误地在多个线程之间共享状态的结果\",{\"1\":{\"439\":1}}],[\"多少个垃圾回收线程\",{\"1\":{\"393\":1}}],[\"多条垃圾收集线程并行工作\",{\"1\":{\"348\":1}}],[\"多数编程语言支持单精确度和双精确度\",{\"1\":{\"69\":1,\"88\":1}}],[\"吞吐量\",{\"1\":{\"349\":1}}],[\"吞吐量优先的gc典型配置参数\",{\"1\":{\"363\":1}}],[\"吞吐量优先\",{\"1\":{\"348\":1,\"351\":1,\"391\":1}}],[\"吞吐量=\",{\"1\":{\"343\":1}}],[\"吞吐量=运行用户代码的时间\",{\"1\":{\"343\":1}}],[\"需暂停用户线程\",{\"1\":{\"347\":1}}],[\"需要先用git\",{\"1\":{\"672\":1}}],[\"需要把自己做完的活推送到中央服务器\",{\"1\":{\"631\":1}}],[\"需要注意的是\",{\"1\":{\"479\":1}}],[\"需要手机验证码\",{\"1\":{\"460\":1}}],[\"需要立即读取到k的最新值\",{\"1\":{\"460\":1}}],[\"需要改一下\",{\"1\":{\"374\":1}}],[\"需要暂停用户线程\",{\"1\":{\"347\":1}}],[\"需要借助类装载\",{\"1\":{\"286\":1}}],[\"需要将其包装成对象类型后\",{\"1\":{\"235\":1}}],[\"需要精确计算时不要使用float和double\",{\"1\":{\"102\":1}}],[\"修复完成后\",{\"1\":{\"666\":1}}],[\"修改后合并分支\",{\"1\":{\"666\":1}}],[\"修改demo\",{\"1\":{\"665\":1,\"666\":1}}],[\"修改之后就已经有了文件修改的信息\",{\"1\":{\"651\":1}}],[\"修改配置参数\",{\"1\":{\"398\":1}}],[\"修改\",{\"1\":{\"366\":1}}],[\"修改并发标记因用户程序变动的内容\",{\"1\":{\"346\":1}}],[\"修正在并发标记阶段因为用户程序的并发执行导致变动的数据\",{\"1\":{\"347\":1}}],[\"大家都会往master分支上推送各自的修改\",{\"1\":{\"672\":1}}],[\"大家熟知的zk\",{\"1\":{\"459\":1}}],[\"大集群\",{\"1\":{\"467\":1}}],[\"大于或等于\",{\"1\":{\"467\":1}}],[\"大\",{\"1\":{\"388\":1}}],[\"大小相等的独立区域\",{\"1\":{\"347\":1}}],[\"大的循环时出现溢出的可能性更大\",{\"1\":{\"327\":1}}],[\"产生大量空间碎片\",{\"1\":{\"346\":1}}],[\"初始状态时集群有\",{\"1\":{\"467\":1}}],[\"初始标记\",{\"1\":{\"346\":1,\"347\":1}}],[\"初始化也会相应的生效\",{\"1\":{\"296\":1}}],[\"初始化\",{\"0\":{\"284\":1}}],[\"整体减少了垃圾碎片的产生\",{\"1\":{\"402\":1}}],[\"整体上属于\",{\"1\":{\"347\":1}}],[\"整个pipeline由一个线程执行\",{\"1\":{\"479\":1}}],[\"整个堆总大小\",{\"1\":{\"391\":1}}],[\"整个堆回收后\",{\"1\":{\"391\":1}}],[\"整个堆回收前\",{\"1\":{\"391\":1}}],[\"整个jvm内存大小=年轻代大小+年老代大小+持久代大小\",{\"1\":{\"363\":1}}],[\"整个过程分为4步\",{\"1\":{\"346\":1}}],[\"整理算法\",{\"1\":{\"345\":1}}],[\"整理算\",{\"1\":{\"344\":1}}],[\"整理\",{\"0\":{\"338\":1},\"1\":{\"347\":1,\"363\":3}}],[\"法\",{\"1\":{\"344\":1}}],[\"法区中这些数据的访问入口\",{\"1\":{\"295\":1}}],[\"看起来的确不方便\",{\"1\":{\"638\":1}}],[\"看起来很容易\",{\"1\":{\"461\":2}}],[\"看到版本号了\",{\"1\":{\"656\":1}}],[\"看到的值也一定为1\",{\"1\":{\"466\":1}}],[\"看到的\",{\"1\":{\"466\":1}}],[\"看到的操作顺序\",{\"1\":{\"466\":1}}],[\"看到\",{\"1\":{\"464\":1,\"466\":1}}],[\"看来\",{\"1\":{\"461\":2}}],[\"看的时候总会混淆\",{\"1\":{\"453\":1}}],[\"看上去和parnew一样\",{\"1\":{\"343\":1}}],[\"看某个对象是否可达\",{\"1\":{\"334\":1}}],[\"器\",{\"1\":{\"343\":1}}],[\"器完成\",{\"1\":{\"286\":1}}],[\"又改如何恢复文件\",{\"1\":{\"644\":1}}],[\"又有哪些变量是存放在栈中的呢\",{\"1\":{\"437\":1}}],[\"又是并行的多线程收集\",{\"1\":{\"343\":1}}],[\"又称iec\",{\"1\":{\"69\":1,\"88\":1}}],[\"应用配置无需配置在配置中心\",{\"1\":{\"555\":1}}],[\"应用也就比较广泛\",{\"1\":{\"470\":1}}],[\"应用\",{\"1\":{\"342\":1}}],[\"应采用如下方式\",{\"1\":{\"102\":1}}],[\"单机部署\",{\"1\":{\"589\":1}}],[\"单线程执行channelpipeline中的事件\",{\"1\":{\"479\":1}}],[\"单调写一致性\",{\"1\":{\"470\":1}}],[\"单调读一致性\",{\"1\":{\"470\":1}}],[\"单个数据对象而说的\",{\"1\":{\"468\":1}}],[\"单cpu时比serial效率差\",{\"1\":{\"342\":1}}],[\"单精确度\",{\"1\":{\"69\":1,\"88\":1}}],[\"重新认知jvm\",{\"0\":{\"386\":1}}],[\"重新标记\",{\"1\":{\"346\":1}}],[\"重新调用get\",{\"1\":{\"137\":1}}],[\"重要的是其在进行垃圾收集的时候需要暂停其他线程\",{\"1\":{\"341\":1}}],[\"清空屏幕\",{\"1\":{\"377\":1}}],[\"清理掉边界意外的内存\",{\"1\":{\"338\":1}}],[\"清除算法\",{\"1\":{\"346\":1}}],[\"清除掉\",{\"1\":{\"337\":1}}],[\"清除掉被标记需要回收的对象\",{\"1\":{\"336\":1}}],[\"清除\",{\"0\":{\"336\":1},\"1\":{\"336\":1,\"338\":1}}],[\"空间整合\",{\"1\":{\"347\":1}}],[\"空间利用率降低\",{\"1\":{\"337\":1}}],[\"空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时\",{\"1\":{\"336\":2}}],[\"效率不高\",{\"1\":{\"336\":1}}],[\"效率高于linkedlist\",{\"1\":{\"245\":1}}],[\"效率高于stack\",{\"1\":{\"245\":1}}],[\"无错误并如下日志表示启动成功\",{\"1\":{\"555\":1}}],[\"无伤大雅\",{\"1\":{\"464\":1}}],[\"无状态实现是实现线程安全的最简单方法\",{\"1\":{\"439\":1}}],[\"无状态实现\",{\"0\":{\"439\":1}}],[\"无用的类\",{\"1\":{\"402\":2}}],[\"无需再设置此值\",{\"1\":{\"363\":1}}],[\"无法返回准确的数据\",{\"1\":{\"467\":1}}],[\"无法购买\",{\"1\":{\"460\":1}}],[\"无法从外部访问该私有实体\",{\"1\":{\"447\":1}}],[\"无法在任何地方通过反射访问该类的方法\",{\"1\":{\"402\":1}}],[\"无法无限生成\",{\"1\":{\"363\":1}}],[\"无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作\",{\"1\":{\"336\":2}}],[\"无论哪一个类加载器要加载这个类\",{\"1\":{\"289\":1}}],[\"缺点\",{\"0\":{\"618\":1,\"625\":1},\"1\":{\"336\":1,\"337\":1,\"342\":1,\"346\":1}}],[\"释放出对应的内存空间\",{\"1\":{\"336\":1}}],[\"比较简单\",{\"1\":{\"402\":1}}],[\"比较耗时\",{\"1\":{\"336\":1}}],[\"比cms更先进的地方在于能让使用者明确指定一个长度为m毫秒的时间片段内\",{\"1\":{\"347\":1}}],[\"比serial效率高\",{\"1\":{\"342\":1}}],[\"比如我现在是在主分支master上来修复的\",{\"1\":{\"666\":1}}],[\"比如我这个分支bug要2天完成\",{\"1\":{\"666\":1}}],[\"比如我在开发中接到一个404\",{\"1\":{\"666\":1}}],[\"比如上要发布\",{\"1\":{\"665\":1}}],[\"比如迷你事务\",{\"1\":{\"475\":1}}],[\"比如日志同步\",{\"1\":{\"475\":1}}],[\"比如银行系统\",{\"1\":{\"471\":1}}],[\"比如断线重连\",{\"1\":{\"467\":1}}],[\"比如工作量证明\",{\"1\":{\"459\":1}}],[\"比如对象进行转移时空间不足\",{\"1\":{\"399\":1}}],[\"比如设置该百分比参数\",{\"1\":{\"398\":1}}],[\"比如设置最大停顿时间\",{\"1\":{\"398\":1}}],[\"比如设置堆内存的大小\",{\"1\":{\"398\":1}}],[\"比如打开cms\",{\"1\":{\"395\":1}}],[\"比如调用system\",{\"1\":{\"388\":1}}],[\"比如31\",{\"1\":{\"374\":1}}],[\"比如监控远端tomcat\",{\"1\":{\"374\":1}}],[\"比如web\",{\"1\":{\"348\":1}}],[\"比如虚拟机总共运行了100分钟\",{\"1\":{\"343\":1}}],[\"比如向方法区中添加class的信息\",{\"1\":{\"320\":1}}],[\"比如一开始只有eden区和from中有对象\",{\"1\":{\"311\":1}}],[\"比如有100m\",{\"1\":{\"310\":1}}],[\"比如有对象a\",{\"1\":{\"310\":1}}],[\"比如object\",{\"1\":{\"304\":1}}],[\"比如官网的\",{\"1\":{\"302\":1}}],[\"比如通过主函数main调\",{\"1\":{\"296\":1}}],[\"比如变量\",{\"1\":{\"290\":1}}],[\"比如\",{\"1\":{\"289\":1,\"358\":2,\"473\":1,\"637\":1}}],[\"比如把它加入到\",{\"1\":{\"141\":1}}],[\"比如getclass\",{\"1\":{\"133\":1}}],[\"比如相关的方法如下\",{\"1\":{\"111\":1}}],[\"比如48\",{\"1\":{\"111\":1}}],[\"比如0除以0或负数平方根\",{\"1\":{\"71\":1,\"91\":1}}],[\"找出存活的对象\",{\"1\":{\"347\":1}}],[\"找出内存中需要回收的对象\",{\"1\":{\"336\":1}}],[\"找到类文件所在的位置\",{\"1\":{\"279\":1}}],[\"栈内存是程序线程独占空间\",{\"1\":{\"437\":1}}],[\"栈的变量等\",{\"1\":{\"334\":1}}],[\"栈帧\",{\"1\":{\"302\":1,\"327\":1}}],[\"能根据接受到的数据自动调节大小\",{\"1\":{\"479\":1}}],[\"能感知它已经不再是集群的\",{\"1\":{\"467\":1}}],[\"能够立马被后续的读操作读到\",{\"1\":{\"468\":1}}],[\"能够将不同数据中心的时间偏差控制在\",{\"1\":{\"461\":1}}],[\"能够让分布式网络中的节点在出现错误时仍然保持一致\",{\"1\":{\"457\":1}}],[\"能够正确地处理多个线程之间的共享变量\",{\"1\":{\"435\":1}}],[\"能自动dump出该文件就好了\",{\"1\":{\"369\":1}}],[\"能作为gc\",{\"1\":{\"334\":1}}],[\"能到到达某个对象\",{\"1\":{\"331\":1}}],[\"导致永远不能被回收\",{\"1\":{\"333\":1}}],[\"弊端\",{\"1\":{\"333\":1}}],[\"引用了很多其他的文章\",{\"1\":{\"453\":1}}],[\"引用\",{\"1\":{\"333\":1,\"613\":1}}],[\"引用计数法\",{\"0\":{\"333\":1}}],[\"特别是在该线程内有递归\",{\"1\":{\"327\":1}}],[\"减小该值可以生成更多的线程\",{\"1\":{\"363\":1}}],[\"减小这个值能生成更多的线程\",{\"1\":{\"327\":1}}],[\"减去127后为3\",{\"1\":{\"89\":1}}],[\"爆出stackoverflow的错误\",{\"1\":{\"327\":1}}],[\"访问的结果总是能获取到正确的结果\",{\"1\":{\"435\":1}}],[\"访问\",{\"1\":{\"319\":1,\"323\":1}}],[\"访问标志\",{\"1\":{\"277\":1}}],[\"记得保存文件\",{\"1\":{\"651\":1}}],[\"记得以后写一定要使用注释\",{\"1\":{\"650\":1}}],[\"记得设置参数比如\",{\"1\":{\"318\":1}}],[\"记录下当前的commitindex为readindex\",{\"1\":{\"467\":1}}],[\"记录线程执行到\",{\"1\":{\"297\":1}}],[\"记录一个程序员的成长历程\",{\"1\":{\"15\":1}}],[\"体验与验证\",{\"0\":{\"315\":1}}],[\"另一种情况就是你已经使用git\",{\"1\":{\"642\":1}}],[\"另一个非空的survivor\",{\"1\":{\"314\":1}}],[\"另建一个社区\",{\"1\":{\"459\":1}}],[\"另外一种说法是\",{\"1\":{\"465\":1}}],[\"另外一个是\",{\"1\":{\"467\":1}}],[\"另外一个是空的\",{\"1\":{\"311\":1}}],[\"另外一个客户端进程不能保证马上就能读到这个值\",{\"1\":{\"465\":1}}],[\"另外\",{\"1\":{\"143\":1}}],[\"很多分布式系统都是基于\",{\"1\":{\"473\":1}}],[\"很多系统包括\",{\"1\":{\"472\":1}}],[\"很多时候我们会用\",{\"1\":{\"472\":1}}],[\"很多时候拆包装和解包装能够自动完成\",{\"1\":{\"235\":1}}],[\"很可能会读到过期数据\",{\"1\":{\"467\":1}}],[\"很明显这两部分对象所占有的内存是不连续的\",{\"1\":{\"314\":1}}],[\"触发channelinboundhandler的usereventtriggered\",{\"1\":{\"479\":1}}],[\"触发器等\",{\"1\":{\"471\":1}}],[\"触发\",{\"1\":{\"467\":1}}],[\"触发一次minor\",{\"1\":{\"314\":1}}],[\"触发major\",{\"1\":{\"314\":1}}],[\"刚刚新建的对象在eden中\",{\"1\":{\"314\":1}}],[\"假设我们有个分布式\",{\"1\":{\"464\":1}}],[\"假设该方法现在执行了一些不需要同步的附加操作\",{\"1\":{\"446\":1}}],[\"假设现在只有一个survivor区\",{\"1\":{\"314\":1}}],[\"假如你已经使用rm\",{\"1\":{\"644\":1}}],[\"假如有人提交了tesxt02\",{\"1\":{\"644\":1}}],[\"假如减少老年代空间\",{\"1\":{\"314\":1}}],[\"假如增加老年代空间\",{\"1\":{\"314\":1}}],[\"假如已经使用了\",{\"1\":{\"310\":1}}],[\"假如线程a正在执行到某个地方\",{\"1\":{\"297\":1}}],[\"假如目前的阶段是初始化完成了\",{\"1\":{\"296\":1}}],[\"虽然\",{\"1\":{\"467\":1}}],[\"虽然共识和一致性的关系很微妙\",{\"1\":{\"467\":1}}],[\"虽然强度上\",{\"1\":{\"462\":1}}],[\"虽然还保留有新生代和老年代的概念\",{\"1\":{\"347\":1}}],[\"虽然full\",{\"1\":{\"314\":1}}],[\"虽然降低full\",{\"1\":{\"314\":1}}],[\"虽然java虚拟机规范把方法区描述为堆的一个逻辑部分\",{\"1\":{\"294\":1}}],[\"更确切地说\",{\"1\":{\"472\":1}}],[\"更新数据对象o\",{\"1\":{\"468\":1}}],[\"更无法感知服务端有网络隔离的事件发生\",{\"1\":{\"467\":1}}],[\"更多资料\",{\"0\":{\"420\":1}}],[\"更多存活对象才能填满老年代\",{\"1\":{\"314\":1}}],[\"更\",{\"1\":{\"341\":1}}],[\"更准确地说\",{\"1\":{\"173\":1}}],[\"频发的full\",{\"1\":{\"314\":1}}],[\"老年代空间不够用了\",{\"1\":{\"388\":1}}],[\"老年代的内存空间远大于新生代\",{\"1\":{\"314\":1}}],[\"老年代很快被填满\",{\"1\":{\"314\":1}}],[\"老年代\",{\"1\":{\"314\":1}}],[\"人们可能选择不同强度的一致性\",{\"1\":{\"461\":1}}],[\"人很多\",{\"1\":{\"313\":1}}],[\"人工智能算法\",{\"1\":{\"15\":1}}],[\"爸爸说我成人了\",{\"1\":{\"313\":1}}],[\"居无定所\",{\"1\":{\"313\":1}}],[\"之后你就可以放心的提交你的版本了\",{\"1\":{\"652\":1}}],[\"之后的读流程与leader\",{\"1\":{\"467\":1}}],[\"之后\",{\"1\":{\"464\":2,\"644\":1}}],[\"之后运行\",{\"1\":{\"463\":1}}],[\"之后看到\",{\"1\":{\"463\":1}}],[\"之前\",{\"1\":{\"463\":1,\"464\":1}}],[\"之前或之后运行\",{\"1\":{\"463\":1}}],[\"之前也看过这些参数\",{\"1\":{\"390\":1}}],[\"之前的to变成了from\",{\"1\":{\"311\":1}}],[\"之前的from变成了to\",{\"1\":{\"311\":1}}],[\"之间怎么转换\",{\"1\":{\"471\":1}}],[\"之间时\",{\"1\":{\"112\":1}}],[\"之间的范围内\",{\"1\":{\"101\":1}}],[\"之间的范围内或在\",{\"1\":{\"101\":1}}],[\"被人抢走了\",{\"1\":{\"460\":1}}],[\"被回收\",{\"1\":{\"402\":1}}],[\"被判定为需要执行的对象将会被放在一个队列中进行第二次标记\",{\"1\":{\"402\":1}}],[\"被gc的对象肯定没了\",{\"1\":{\"311\":1}}],[\"被所有线程共享\",{\"1\":{\"295\":1}}],[\"区块链中的共识算法如果达不到一致性\",{\"1\":{\"459\":1}}],[\"区块链中不存在中央控制方\",{\"1\":{\"459\":1}}],[\"区块链需要解决的是拜占庭将军问题\",{\"1\":{\"459\":1}}],[\"区块链\",{\"0\":{\"459\":1}}],[\"区\",{\"1\":{\"310\":1,\"313\":3}}],[\"新建文件\",{\"1\":{\"679\":1}}],[\"新建一个分支\",{\"1\":{\"664\":1}}],[\"新建一个demo\",{\"1\":{\"649\":1}}],[\"新建一个目录testgit\",{\"1\":{\"679\":1}}],[\"新建一个目录名字叫testgit3\",{\"1\":{\"672\":1}}],[\"新建一个目录\",{\"1\":{\"647\":2}}],[\"新建一个test02\",{\"1\":{\"644\":1}}],[\"新建moremind\",{\"0\":{\"539\":1,\"543\":1,\"559\":1}}],[\"新型分布式系统\",{\"1\":{\"459\":1}}],[\"新生代中的可用内存\",{\"1\":{\"314\":1}}],[\"新生代中eden\",{\"1\":{\"314\":1}}],[\"新生代+老年代\",{\"1\":{\"314\":1}}],[\"新生代\",{\"1\":{\"314\":1,\"342\":1}}],[\"新创建的对象都会被分配到eden区\",{\"1\":{\"310\":1}}],[\"新对象为new\",{\"1\":{\"139\":1}}],[\"域\",{\"1\":{\"309\":1}}],[\"关闭socket的延迟时间\",{\"1\":{\"479\":1}}],[\"关系\",{\"0\":{\"475\":1}}],[\"关键字\",{\"1\":{\"445\":1}}],[\"关键是堆中有这么多区\",{\"1\":{\"309\":1}}],[\"关于gridea\",{\"0\":{\"621\":1}}],[\"关于zettlr\",{\"0\":{\"611\":1}}],[\"关于\",{\"1\":{\"467\":1,\"472\":1}}],[\"关于这个说法\",{\"1\":{\"465\":1}}],[\"关于强和弱的定义\",{\"1\":{\"460\":1}}],[\"关于顺序一致性的理论即可参看维基百科\",{\"1\":{\"460\":1}}],[\"关于线性一致性的理论基础可以参看维基百科\",{\"1\":{\"460\":1}}],[\"关于dump下来的文件\",{\"1\":{\"369\":1}}],[\"关于我\",{\"0\":{\"2\":1}}],[\"思考\",{\"1\":{\"306\":1,\"398\":1}}],[\"折腾一下\",{\"0\":{\"303\":1}}],[\"指的是分布式一致性中的一种\",{\"1\":{\"472\":1}}],[\"指的是多个线程都可以操作的变量\",{\"1\":{\"437\":1}}],[\"指某个函数\",{\"1\":{\"435\":1}}],[\"指向运行时常量池的引用\",{\"1\":{\"302\":2}}],[\"指数为\",{\"1\":{\"89\":1}}],[\"指数e和尾数f\",{\"1\":{\"89\":1}}],[\"指数值为11111111111\",{\"1\":{\"70\":1}}],[\"指数值为00000000000\",{\"1\":{\"70\":1}}],[\"指数部分\",{\"1\":{\"70\":1}}],[\"间的方式来实现的\",{\"1\":{\"297\":1}}],[\"间接调用了objectsynchronizer\",{\"1\":{\"143\":1}}],[\"怎么办呢\",{\"1\":{\"666\":1}}],[\"怎么能达成对结果的共识呢\",{\"1\":{\"461\":2}}],[\"怎么能继续执行呢\",{\"1\":{\"297\":1}}],[\"怎么使用要看具体情况和系统的容忍度\",{\"1\":{\"460\":1}}],[\"怎么使用arraylist\",{\"0\":{\"200\":1}}],[\"怎么记录\",{\"1\":{\"306\":1}}],[\"突然失去了cpu的执行权\",{\"1\":{\"297\":1}}],[\"随着线程的创建而创建\",{\"1\":{\"296\":1}}],[\"随遇而安\",{\"1\":{\"15\":2}}],[\"独有的\",{\"1\":{\"296\":1}}],[\"状态机\",{\"1\":{\"467\":1}}],[\"状态机会按顺序执行这些命令\",{\"1\":{\"458\":1}}],[\"状态\",{\"1\":{\"296\":1}}],[\"执行命令mvn\",{\"1\":{\"538\":1}}],[\"执行所需要的时间更长\",{\"1\":{\"314\":1}}],[\"执行时间长有什么坏处\",{\"1\":{\"314\":1}}],[\"执行int类型的加法\",{\"1\":{\"302\":1}}],[\"执行相应的方法才行\",{\"1\":{\"296\":1}}],[\"执行引擎执行到hashcode方法时就可以通过关系表来查找到jvm的jvm\",{\"1\":{\"135\":1}}],[\"得先拿到gc日志文件才行\",{\"1\":{\"390\":1}}],[\"得到pid\",{\"1\":{\"374\":1}}],[\"得到余数后通过digits数组获取到对应的字符\",{\"1\":{\"116\":1}}],[\"得cpu执行权的时候\",{\"1\":{\"297\":1}}],[\"得\",{\"1\":{\"296\":1}}],[\"肯定是use使用咯\",{\"1\":{\"296\":1}}],[\"经常一起讨论\",{\"1\":{\"467\":1}}],[\"经验值在3000~5000左右\",{\"1\":{\"327\":1}}],[\"经过gc之后\",{\"1\":{\"310\":1}}],[\"经过上面的分析\",{\"1\":{\"296\":1}}],[\"经典面试题\",{\"0\":{\"126\":1}}],[\"经典编程书籍大全\",{\"1\":{\"16\":3}}],[\"操作日志\",{\"1\":{\"467\":1}}],[\"操作\",{\"1\":{\"465\":2}}],[\"操作数栈\",{\"1\":{\"302\":4}}],[\"操作数\",{\"0\":{\"296\":1}}],[\"操作系统\",{\"0\":{\"27\":1}}],[\"入方法区的运行时常量池中存放\",{\"1\":{\"294\":1}}],[\"目前只能作为一款博客笔记系统\",{\"1\":{\"625\":1}}],[\"目前主要写些c++和go语言方面的博客\",{\"1\":{\"15\":1}}],[\"目录以及目录的文件呈树形结构\",{\"1\":{\"615\":1}}],[\"目录和目录内的文件在工作区的左右两栏\",{\"1\":{\"615\":1}}],[\"目\",{\"1\":{\"294\":1}}],[\"垃圾收集发生的时机\",{\"0\":{\"388\":1}}],[\"垃圾收集线程在执行的\",{\"1\":{\"348\":1}}],[\"垃圾收集时间用了1分钟\",{\"1\":{\"343\":1}}],[\"垃圾收集算法\",{\"0\":{\"335\":1}}],[\"垃圾收集器分类\",{\"0\":{\"348\":1}}],[\"垃圾收集器\",{\"0\":{\"340\":1},\"1\":{\"179\":1}}],[\"垃圾回收终端应用执行响应的时间\",{\"1\":{\"349\":1}}],[\"垃圾回收时间比较长\",{\"1\":{\"347\":1,\"398\":1}}],[\"垃圾回收\",{\"0\":{\"331\":1}}],[\"垃圾回收不太会讨论方法区的垃圾回收\",{\"1\":{\"294\":1}}],[\"存在冲突节点\",{\"1\":{\"493\":1}}],[\"存活的对象就会被送到老年代\",{\"1\":{\"314\":1}}],[\"存放如下数据\",{\"1\":{\"294\":1}}],[\"存储了git为我们创建的各种信息\",{\"1\":{\"638\":1}}],[\"存储的数据rule或者selector为只有pluginname字段\",{\"1\":{\"486\":1}}],[\"存储的位置肯定是在jvm中有对应的空间\",{\"1\":{\"290\":1}}],[\"存储的位置在堆区\",{\"1\":{\"127\":1}}],[\"存储着一份包含命令序列的日志文件\",{\"1\":{\"458\":1}}],[\"存储数据包括\",{\"1\":{\"295\":1}}],[\"存储形式存在\",{\"1\":{\"248\":1}}],[\"存储在jvm堆区\",{\"1\":{\"127\":1}}],[\"存储在方法区中的静态区\",{\"1\":{\"112\":1}}],[\"存储为64bit\",{\"1\":{\"70\":1}}],[\"存储位置\",{\"0\":{\"49\":1,\"67\":1,\"86\":1,\"107\":1}}],[\"常用工具\",{\"0\":{\"370\":1}}],[\"常用命令\",{\"0\":{\"364\":1,\"377\":1}}],[\"常用参数含义\",{\"0\":{\"363\":1}}],[\"常见问题思考\",{\"0\":{\"402\":1}}],[\"常见问题\",{\"0\":{\"314\":1}}],[\"常规理解\",{\"0\":{\"293\":1}}],[\"常量引用\",{\"1\":{\"331\":1,\"334\":1}}],[\"常量等数据\",{\"1\":{\"305\":1}}],[\"常量\",{\"0\":{\"294\":1},\"1\":{\"290\":1,\"294\":2}}],[\"常量池\",{\"1\":{\"277\":1}}],[\"常量参数\",{\"0\":{\"110\":1}}],[\"每1000毫秒输出一次\",{\"1\":{\"367\":1}}],[\"每次测试时长\",{\"1\":{\"589\":1}}],[\"每次调用channl\",{\"1\":{\"479\":1}}],[\"每次读操作的时候记录此时集群的\",{\"1\":{\"467\":1}}],[\"每次只使用其中一块\",{\"1\":{\"337\":1}}],[\"每次gc加一岁\",{\"1\":{\"313\":1}}],[\"每条线程需要有一个独立的程序计数器\",{\"1\":{\"297\":1}}],[\"每一个被线程执行的方法\",{\"1\":{\"296\":1}}],[\"每个bug都可以通过一个临时分支来修复\",{\"1\":{\"666\":1}}],[\"每个人的电脑就是一个版本库\",{\"1\":{\"632\":1}}],[\"每个项目都是一个git仓库\",{\"1\":{\"572\":1}}],[\"每个读操作都读到了该变量的最新写的结果\",{\"1\":{\"464\":1}}],[\"每个\",{\"1\":{\"458\":1}}],[\"每个通过setter\",{\"1\":{\"441\":1}}],[\"每个线程都有自己的工作内存\",{\"1\":{\"436\":1}}],[\"每个线程独有的线程栈\",{\"1\":{\"296\":1}}],[\"每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用\",{\"1\":{\"302\":1}}],[\"每个栈帧中包括局部变量表\",{\"1\":{\"302\":2}}],[\"每个栈帧对应一个被调用的方法\",{\"1\":{\"302\":1}}],[\"每个方法被当前线程调用了\",{\"1\":{\"296\":1}}],[\"每个运行时常量池都是从\",{\"1\":{\"294\":1}}],[\"每线程数据区在创建线程时创建\",{\"1\":{\"291\":1}}],[\"每当重写hashcode方法时\",{\"1\":{\"138\":1}}],[\"据得要有个去处\",{\"1\":{\"290\":1}}],[\"说\",{\"1\":{\"346\":1}}],[\"说白了就是类文件被类装载器装载进来之后\",{\"1\":{\"290\":1}}],[\"说明已经删除了文件并且已经commit了\",{\"1\":{\"644\":1}}],[\"说明这部分空间是old区释放出来的\",{\"1\":{\"391\":1}}],[\"说明\",{\"0\":{\"80\":1,\"102\":1,\"154\":1,\"157\":1,\"161\":1,\"165\":1,\"169\":1,\"170\":1,\"173\":1,\"182\":1,\"185\":1,\"188\":1,\"192\":1,\"452\":1,\"589\":1},\"1\":{\"363\":9,\"467\":1}}],[\"运行\",{\"1\":{\"416\":1}}],[\"运行目录为你本地的配置使用的jdk路径\",{\"1\":{\"416\":1}}],[\"运行主类\",{\"1\":{\"368\":1}}],[\"运行jar包的时候\",{\"1\":{\"361\":1}}],[\"运行用户代码时间+垃圾收集时间\",{\"1\":{\"349\":1}}],[\"运行用户代码的时间+垃圾收集时间\",{\"1\":{\"343\":1}}],[\"运行过程和serial收集器一样\",{\"1\":{\"344\":1}}],[\"运行在server模式下的虚拟机中首选的新生代收集器\",{\"1\":{\"342\":1}}],[\"运行结果\",{\"0\":{\"319\":1,\"323\":1,\"326\":1}}],[\"运行时数据区\",{\"0\":{\"290\":1}}],[\"运算由于精度问题\",{\"1\":{\"81\":1}}],[\"拓展一下\",{\"1\":{\"289\":1}}],[\"破坏\",{\"1\":{\"289\":1}}],[\"才会被送到老年代\",{\"1\":{\"314\":1}}],[\"才自己去加载\",{\"1\":{\"289\":1}}],[\"才能放到容器里\",{\"1\":{\"235\":1}}],[\"定理本身的局限性\",{\"1\":{\"472\":1}}],[\"定义锁对象\",{\"1\":{\"368\":1}}],[\"定义\",{\"1\":{\"289\":1}}],[\"定位到\",{\"1\":{\"273\":1}}],[\"查找并分析内存泄漏的可能原因\",{\"1\":{\"381\":1}}],[\"查找和导入class文件\",{\"1\":{\"279\":1}}],[\"查看远程仓库信息\",{\"0\":{\"670\":1}}],[\"查看历史记录\",{\"1\":{\"665\":1}}],[\"查看master坟之中是否存在2222222222222\",{\"1\":{\"664\":1}}],[\"查看分支\",{\"1\":{\"663\":1}}],[\"查看分支信息\",{\"1\":{\"662\":1}}],[\"查看文件新添加的内容是否存在\",{\"1\":{\"662\":1}}],[\"查看一下存在的版本\",{\"1\":{\"655\":1}}],[\"查看状态\",{\"0\":{\"651\":1}}],[\"查看当前jvm的信息\",{\"1\":{\"377\":1}}],[\"查看当前会话信息\",{\"1\":{\"377\":1}}],[\"查看命名帮助信息\",{\"1\":{\"377\":1}}],[\"查看arthas版本号\",{\"1\":{\"377\":1}}],[\"查看8998监听情况\",{\"1\":{\"374\":1}}],[\"查看tomcat启动日志以及端口监听\",{\"1\":{\"374\":1}}],[\"查看输出情况\",{\"1\":{\"374\":1}}],[\"查看jvm已经加载的类信息\",{\"1\":{\"377\":1}}],[\"查看jvm的系统属性\",{\"1\":{\"377\":1}}],[\"查看java应用程序的运行概况\",{\"1\":{\"371\":1}}],[\"查看java进程\",{\"1\":{\"365\":1}}],[\"查看jmap\",{\"1\":{\"369\":1}}],[\"查看线程堆栈信息\",{\"1\":{\"368\":1}}],[\"查看垃圾收集信息\",{\"1\":{\"367\":1}}],[\"查看某个java进程的类装载信息\",{\"1\":{\"367\":1}}],[\"查看某个java进程的name属性的值\",{\"1\":{\"366\":1}}],[\"查看类装载信息\",{\"1\":{\"367\":1}}],[\"查看虚拟机性能统计信息\",{\"1\":{\"367\":1}}],[\"查看曾经赋过值的一些参数\",{\"1\":{\"366\":1}}],[\"查看\",{\"1\":{\"366\":1}}],[\"查看参数\",{\"0\":{\"360\":1}}],[\"查询堆内存大小maxheapsize\",{\"1\":{\"362\":1}}],[\"查询+printflagsfinal的值\",{\"1\":{\"362\":1}}],[\"查\",{\"1\":{\"289\":1}}],[\"加上了\",{\"1\":{\"679\":1}}],[\"加入你要回滚到添加了的版本该怎么办呢\",{\"1\":{\"655\":1}}],[\"加载降级规则\",{\"1\":{\"506\":1}}],[\"加载流控规则\",{\"1\":{\"506\":1}}],[\"加载该类的\",{\"1\":{\"402\":1}}],[\"加载的顺序是自顶向下\",{\"1\":{\"289\":1}}],[\"加载的顺序\",{\"1\":{\"289\":1}}],[\"加载原则\",{\"0\":{\"289\":1}}],[\"加重量锁用来生成hash值\",{\"1\":{\"137\":1}}],[\"图解\",{\"0\":{\"288\":1,\"292\":1,\"309\":1},\"1\":{\"448\":1}}],[\"自然linearizability和serializability会经常一起出现\",{\"1\":{\"468\":1}}],[\"自然语言处理\",{\"1\":{\"16\":3}}],[\"自己一方的乘客都是先到的\",{\"1\":{\"461\":2}}],[\"自行构建hsdis\",{\"0\":{\"413\":1}}],[\"自动\",{\"1\":{\"380\":1}}],[\"自从去了survivor区\",{\"1\":{\"313\":1}}],[\"自的去处\",{\"1\":{\"311\":1}}],[\"自身需要自定义的classloader\",{\"1\":{\"287\":1}}],[\"属于弱一致性\",{\"1\":{\"469\":1}}],[\"属于cap中c这个范畴\",{\"1\":{\"468\":1}}],[\"属于应用程序根据\",{\"1\":{\"287\":1}}],[\"属性表集合\",{\"1\":{\"277\":1}}],[\"属性值字符串将被解释成一个整数\",{\"1\":{\"115\":1}}],[\"属性说明\",{\"0\":{\"71\":1,\"91\":1}}],[\"负责加载classpath中指定的jar包及\",{\"1\":{\"287\":1}}],[\"负责加载java平台中扩展功能的一些jar包\",{\"1\":{\"287\":1}}],[\"负责加载$java\",{\"1\":{\"287\":1}}],[\"负无穷的值为0xff800000\",{\"1\":{\"91\":1}}],[\"负无穷的值为\",{\"1\":{\"71\":1}}],[\"负无穷\",{\"1\":{\"70\":1}}],[\"顾名思义\",{\"1\":{\"286\":1}}],[\"步合并起来理解的话\",{\"1\":{\"294\":1}}],[\"步可以发现有运行时数据\",{\"1\":{\"290\":1}}],[\"步\",{\"1\":{\"286\":1}}],[\"阶段\",{\"1\":{\"286\":1}}],[\"静态方法和语句\",{\"1\":{\"445\":1}}],[\"静态变量\",{\"0\":{\"294\":1},\"1\":{\"294\":2}}],[\"静态变量且不可变\",{\"1\":{\"91\":1,\"110\":1}}],[\"静态代码块执行初始化操作\",{\"1\":{\"284\":1}}],[\"地址\",{\"1\":{\"283\":1}}],[\"元数据验证\",{\"1\":{\"281\":1}}],[\"验证\",{\"0\":{\"281\":1}}],[\"堆内存和栈内存中\",{\"1\":{\"437\":1}}],[\"堆内存溢出\",{\"0\":{\"317\":1}}],[\"堆中不存在该类的任何实例\",{\"1\":{\"402\":1}}],[\"堆中会有对象\",{\"1\":{\"306\":1}}],[\"堆区分为两大块\",{\"1\":{\"309\":1}}],[\"堆指向方法区\",{\"0\":{\"306\":1}}],[\"堆栈大小典型配置参数\",{\"1\":{\"363\":1}}],[\"堆栈\",{\"1\":{\"298\":1}}],[\"堆只有一个\",{\"1\":{\"295\":1}}],[\"堆\",{\"0\":{\"295\":1},\"1\":{\"279\":1,\"290\":1}}],[\"寻找类\",{\"1\":{\"279\":1}}],[\"磁盘\",{\"1\":{\"279\":1}}],[\"装载\",{\"0\":{\"279\":1}}],[\"字节\",{\"1\":{\"362\":2}}],[\"字节码反编译成汇编\",{\"0\":{\"407\":1}}],[\"字节码验证\",{\"1\":{\"281\":1}}],[\"字节码生成器\",{\"1\":{\"276\":1}}],[\"字段的最终值为2\",{\"1\":{\"444\":1}}],[\"字段\",{\"0\":{\"441\":1},\"1\":{\"294\":1}}],[\"字段表集合\",{\"1\":{\"277\":1}}],[\"接下来在demo\",{\"1\":{\"672\":1}}],[\"接下来在repository目录下新建一个test\",{\"1\":{\"638\":1}}],[\"接下来我们继续合并分支\",{\"1\":{\"664\":1}}],[\"接下来可以在demo\",{\"1\":{\"662\":1}}],[\"接下来就可以使用这个版本号进行回滚到添加的那个版本了\",{\"1\":{\"656\":1}}],[\"接下来使用git\",{\"1\":{\"653\":1}}],[\"接下来使用git进行操作查看\",{\"1\":{\"642\":1}}],[\"接下来使用下一个命令你就可以在本地仓库看到了\",{\"1\":{\"649\":1}}],[\"接下来\",{\"1\":{\"638\":1,\"657\":1}}],[\"接入\",{\"1\":{\"623\":1}}],[\"接口等描述信息外\",{\"1\":{\"294\":1}}],[\"接口索引\",{\"1\":{\"277\":1}}],[\"接着\",{\"1\":{\"662\":1,\"666\":1}}],[\"接着再在test\",{\"1\":{\"642\":1}}],[\"接着t2开始\",{\"1\":{\"468\":1}}],[\"接着上面的gc来说\",{\"1\":{\"311\":1}}],[\"接着获取\",{\"1\":{\"143\":1}}],[\"接着对new\",{\"1\":{\"139\":1}}],[\"父类索引\",{\"1\":{\"277\":1}}],[\"魔数与class文件版本\",{\"1\":{\"277\":1}}],[\"语义分析器\",{\"1\":{\"276\":1}}],[\"语法\",{\"1\":{\"623\":1}}],[\"语法树\",{\"1\":{\"276\":1}}],[\"语法分析器\",{\"1\":{\"276\":1}}],[\"抽象语法树\",{\"1\":{\"276\":1}}],[\"词法分析器\",{\"1\":{\"276\":1}}],[\"编写shell\",{\"1\":{\"692\":1}}],[\"编写shell脚本或者bat脚本\",{\"0\":{\"692\":1}}],[\"编译命令如下\",{\"1\":{\"415\":1}}],[\"编译过程\",{\"0\":{\"276\":1}}],[\"编程语言以外的语言编写的方法\",{\"1\":{\"298\":1}}],[\"编程痴\",{\"1\":{\"15\":1}}],[\"官网下载\",{\"1\":{\"622\":1}}],[\"官网下载地址\",{\"1\":{\"612\":1}}],[\"官网建议\",{\"1\":{\"399\":1}}],[\"官网概括\",{\"0\":{\"291\":1}}],[\"官网the\",{\"1\":{\"277\":1}}],[\"官网\",{\"0\":{\"271\":1},\"1\":{\"302\":1,\"395\":1}}],[\"顺序一致是不满足要求的\",{\"1\":{\"464\":1}}],[\"顺序一致性中进程只关心大家认同的顺序一样就行\",{\"1\":{\"466\":1}}],[\"顺序一致性解释说明\",{\"0\":{\"464\":1}}],[\"顺序一致性理论基础\",{\"0\":{\"463\":1}}],[\"顺序一致性也算强一致性的一种\",{\"1\":{\"462\":1}}],[\"顺序一致性\",{\"0\":{\"462\":1},\"1\":{\"460\":1,\"462\":1,\"463\":1}}],[\"顺序没错就行\",{\"1\":{\"464\":1}}],[\"顺序应该是这样的\",{\"1\":{\"464\":1}}],[\"顺序是自底向上\",{\"1\":{\"289\":1}}],[\"顺序\",{\"1\":{\"249\":1}}],[\"顺序为插入顺序或者最近最少使用\",{\"1\":{\"249\":1}}],[\"两家售票处几乎同时分别来了一个乘客要买这张票\",{\"1\":{\"461\":2}}],[\"两倍增长扩容\",{\"1\":{\"246\":1}}],[\"两个账户的余额总和为\",{\"1\":{\"471\":1}}],[\"两个事务t1\",{\"1\":{\"468\":1}}],[\"两个请求之间不会乱序\",{\"1\":{\"465\":1}}],[\"两个进程的读取顺序不同了\",{\"1\":{\"464\":1}}],[\"两个售票处分别通过某种方式确认过这张票的存在\",{\"1\":{\"461\":2}}],[\"两个线程同时访问\",{\"1\":{\"444\":1}}],[\"两个对象是不相等的\",{\"1\":{\"137\":1}}],[\"两个对象相等\",{\"1\":{\"137\":1}}],[\"两个静态方法一个是非静态方法\",{\"1\":{\"116\":1}}],[\"两个值进行比较时\",{\"1\":{\"62\":1}}],[\"默认缓存\",{\"1\":{\"486\":1}}],[\"默认的心跳间隔是7200s即2小时\",{\"1\":{\"479\":1}}],[\"默认为defaultmessagesizeestimator\",{\"1\":{\"479\":1}}],[\"默认值32kb\",{\"1\":{\"479\":1}}],[\"默认值64kb\",{\"1\":{\"479\":1}}],[\"默认值这样设置\",{\"1\":{\"479\":1}}],[\"默认值为false\",{\"1\":{\"479\":2}}],[\"默认值为ture\",{\"1\":{\"479\":1}}],[\"默认值为true\",{\"1\":{\"479\":1}}],[\"默认值为adaptiverecvbytebufallocator\",{\"1\":{\"479\":1}}],[\"默认值为16\",{\"1\":{\"479\":1}}],[\"默认值为\",{\"1\":{\"398\":1,\"479\":1}}],[\"默认地\",{\"1\":{\"467\":1}}],[\"默认容量为11\",{\"1\":{\"246\":1}}],[\"默认范围是\",{\"1\":{\"112\":1}}],[\"底层维护的是红黑树结构\",{\"1\":{\"243\":1}}],[\"底层其实是一个linkedhashmap\",{\"1\":{\"242\":1}}],[\"底层是一个hashmap\",{\"1\":{\"241\":1}}],[\"底层基于动态数组实现容量大小动态变化\",{\"1\":{\"238\":1}}],[\"支持mac\",{\"1\":{\"621\":1}}],[\"支持导入字典\",{\"1\":{\"617\":1}}],[\"支持多种文件格式导出\",{\"1\":{\"617\":1}}],[\"支持多级目录的工作区\",{\"1\":{\"617\":1}}],[\"支持latex\",{\"1\":{\"617\":1}}],[\"支持主题选择\",{\"1\":{\"613\":1}}],[\"支持集群部署\",{\"1\":{\"482\":1,\"503\":1}}],[\"支持并发的集合\",{\"0\":{\"443\":1}}],[\"支持双向迭代器遍历\",{\"1\":{\"245\":1}}],[\"支持\",{\"1\":{\"238\":1,\"482\":1,\"503\":1}}],[\"基准测试的环境\",{\"0\":{\"580\":1}}],[\"基于以上这个原因\",{\"1\":{\"467\":1}}],[\"基于\",{\"1\":{\"467\":1}}],[\"基于复制日志来实现\",{\"1\":{\"458\":1}}],[\"基于整个堆的使用率\",{\"1\":{\"398\":1}}],[\"基于哈希表的map接口实现\",{\"1\":{\"248\":1}}],[\"基于动态数组实现\",{\"1\":{\"238\":1}}],[\"基本操作命令\",{\"0\":{\"647\":1}}],[\"基本命令请点击链接去查看\",{\"1\":{\"638\":1}}],[\"基本可用\",{\"1\":{\"473\":1}}],[\"基本源码\",{\"0\":{\"202\":1}}],[\"基本api\",{\"0\":{\"201\":1}}],[\"序列化的\",{\"1\":{\"238\":1}}],[\"复制状态机是一种很有效的容错技术\",{\"1\":{\"458\":1}}],[\"复制状态机\",{\"0\":{\"458\":1}}],[\"复制来复制去没必要\",{\"1\":{\"339\":1}}],[\"复制算法\",{\"1\":{\"339\":1,\"342\":1}}],[\"复制算法用来担保的内存为9\",{\"1\":{\"314\":1}}],[\"复制\",{\"0\":{\"337\":1},\"1\":{\"238\":1}}],[\"允许null的存在\",{\"1\":{\"238\":1}}],[\"允许加载任何本机代码文件\",{\"1\":{\"188\":1}}],[\"容错等\",{\"1\":{\"472\":1}}],[\"容量可自动增长\",{\"1\":{\"238\":1}}],[\"容器启动失败\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"容器\",{\"1\":{\"235\":1}}],[\"本地都使用nacos单机模式启动\",{\"1\":{\"554\":1}}],[\"本地方法\",{\"1\":{\"334\":1}}],[\"本地方法栈\",{\"0\":{\"298\":1},\"1\":{\"331\":1}}],[\"本地方法的必要本地代码实现也将被加载\",{\"1\":{\"192\":1}}],[\"本文将介绍如何在apache\",{\"1\":{\"503\":1}}],[\"本文将会根据该文章适当增减内容\",{\"1\":{\"452\":1}}],[\"本文部分内容来自于\",{\"1\":{\"452\":1}}],[\"本位以windows环境为前提\",{\"1\":{\"407\":1}}],[\"本来的编号是iec\",{\"1\":{\"69\":1,\"88\":1}}],[\"称为堆转储文件\",{\"1\":{\"378\":1}}],[\"称为\",{\"1\":{\"192\":1,\"455\":1}}],[\"首先现在远端创建一个仓库\",{\"1\":{\"679\":1}}],[\"首先我们要确定在那个分支上修复bug\",{\"1\":{\"666\":1}}],[\"首先我们在demo\",{\"1\":{\"653\":1}}],[\"首先master主分支应该是非常稳定的\",{\"1\":{\"665\":1}}],[\"首先在test\",{\"1\":{\"642\":1}}],[\"首先会将当前rule相关的缓存删除\",{\"1\":{\"488\":1}}],[\"首先会将当前selector相关的缓存删除\",{\"1\":{\"488\":1}}],[\"首先\",{\"1\":{\"188\":1,\"192\":1,\"672\":1}}],[\"例如约束\",{\"1\":{\"471\":1}}],[\"例如微信的朋友圈就采用了因果一致性\",{\"1\":{\"469\":1}}],[\"例如paxos\",{\"1\":{\"456\":1}}],[\"例如\",{\"1\":{\"188\":1,\"398\":1,\"441\":2,\"442\":1,\"443\":2,\"460\":1,\"466\":1,\"505\":1}}],[\"禁用方法调用的跟踪\",{\"1\":{\"185\":1}}],[\"禁用指令跟踪\",{\"1\":{\"182\":1}}],[\"还会把本地的master分支和远程的master分支关联起来\",{\"1\":{\"679\":1}}],[\"还会根据运行的机器自动去做选择\",{\"1\":{\"179\":1}}],[\"还好\",{\"1\":{\"666\":1}}],[\"还能收到集群大多数节点的响应\",{\"1\":{\"467\":1}}],[\"还是当前集群的有效\",{\"1\":{\"467\":1}}],[\"还是\",{\"1\":{\"454\":1,\"467\":1}}],[\"还可以使用外部实体来强制对资源进行独占访问\",{\"1\":{\"447\":1}}],[\"还有一些配置信息等\",{\"1\":{\"638\":1}}],[\"还有一项信息就是常量池\",{\"1\":{\"294\":1}}],[\"还有分支信息\",{\"1\":{\"638\":1}}],[\"还有可能完全被拒绝\",{\"1\":{\"179\":1}}],[\"代价很大\",{\"1\":{\"461\":1}}],[\"代码实现等\",{\"1\":{\"467\":1}}],[\"代码演示stackoverflow\",{\"0\":{\"325\":1}}],[\"代码\",{\"0\":{\"318\":1,\"322\":1}}],[\"代码日志\",{\"1\":{\"16\":3}}],[\"代表写入\",{\"1\":{\"464\":1}}],[\"代表常量池中27个常量\",{\"1\":{\"277\":1}}],[\"代表\",{\"1\":{\"179\":1}}],[\"中了\",{\"1\":{\"638\":1}}],[\"中也有事务的操作\",{\"1\":{\"475\":1}}],[\"中也有提到这个观点\",{\"1\":{\"465\":1}}],[\"中线性一致性读的具体实现\",{\"1\":{\"467\":1}}],[\"中采用基于原子时钟和\",{\"1\":{\"461\":1}}],[\"中包含\",{\"1\":{\"457\":1}}],[\"中包含的一组同步包装器\",{\"1\":{\"442\":1}}],[\"中实现同步\",{\"1\":{\"445\":1}}],[\"中的一致性和可用性是强一致性和高可用\",{\"1\":{\"473\":1}}],[\"中的\",{\"1\":{\"454\":2,\"466\":1,\"467\":1,\"471\":1,\"473\":2}}],[\"中的变量\",{\"1\":{\"331\":1}}],[\"中的映射不是有序的\",{\"1\":{\"248\":1}}],[\"中装载int类型值入栈\",{\"1\":{\"302\":3}}],[\"中\",{\"1\":{\"173\":1,\"192\":1,\"302\":1,\"441\":1,\"443\":1}}],[\"中国经济的问题与对策\",{\"1\":{\"13\":1}}],[\"标记一下gc\",{\"1\":{\"347\":1}}],[\"标记gc\",{\"1\":{\"346\":1}}],[\"标记清除或标记整理\",{\"1\":{\"339\":1}}],[\"标记清除之后会产生大量不连续的内存碎片\",{\"1\":{\"336\":1}}],[\"标记过程仍然与\",{\"1\":{\"338\":1}}],[\"标记和清除两个过程都比较耗时\",{\"1\":{\"336\":1}}],[\"标记\",{\"0\":{\"336\":1,\"338\":1},\"1\":{\"336\":1,\"338\":1,\"344\":1,\"345\":1,\"346\":1,\"347\":1}}],[\"标记器生成的标记然后以相同的顺序放置在新的字符串数组\",{\"1\":{\"173\":1}}],[\"标准的构造函数和\",{\"1\":{\"441\":1}}],[\"标准\",{\"1\":{\"440\":1,\"447\":1}}],[\"标准参数\",{\"0\":{\"356\":1}}],[\"标准策略是将本地代码放入库文件\",{\"1\":{\"192\":1}}],[\"标准规定\",{\"1\":{\"71\":1,\"91\":1}}],[\"形式的调用与\",{\"1\":{\"173\":1}}],[\"形式的调用与调用\",{\"1\":{\"173\":3}}],[\"形式的行为与调用\",{\"1\":{\"173\":1}}],[\"完全相同\",{\"1\":{\"173\":1}}],[\"优先调整堆的大小让服务器自己来选择\",{\"1\":{\"350\":1}}],[\"优点\",{\"0\":{\"617\":1,\"624\":1},\"1\":{\"342\":1,\"346\":1}}],[\"优点是\",{\"1\":{\"235\":1}}],[\"优势\",{\"1\":{\"289\":1}}],[\"优雅的关闭\",{\"1\":{\"158\":1}}],[\"优秀技术博客\",{\"0\":{\"16\":1}}],[\"示例如下\",{\"1\":{\"363\":2}}],[\"示例\",{\"0\":{\"158\":1,\"162\":1,\"166\":1,\"174\":1,\"189\":1,\"193\":1},\"1\":{\"363\":3}}],[\"会经常碰到bug问题\",{\"1\":{\"666\":1}}],[\"会导致\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"会从rule中获取rule\",{\"1\":{\"498\":1}}],[\"会使用默认缓存进行匹配\",{\"1\":{\"498\":2}}],[\"会将前缀树的缓存的selector或者rule进行删除\",{\"1\":{\"494\":1}}],[\"会将前缀树的缓存的selector或者rule根据uri进行删除\",{\"1\":{\"494\":1}}],[\"会将当前插件相关的selector缓存或者rule缓存删除\",{\"1\":{\"488\":1}}],[\"会将<pluginname\",{\"1\":{\"486\":1}}],[\"会话一致性\",{\"1\":{\"470\":1}}],[\"会持续向其他几个节点发送\",{\"1\":{\"467\":1}}],[\"会发起一次广播请求\",{\"1\":{\"467\":1}}],[\"会自己调整新生代和老年代的大小其实是通过adapt代的大小来调整对象晋升的速度和年龄\",{\"1\":{\"399\":1}}],[\"会自动dump出该文件\",{\"1\":{\"369\":1}}],[\"会产生大量不连续的内存碎片\",{\"1\":{\"336\":1}}],[\"会影响大型程序的执行和响应速度\",{\"1\":{\"314\":1}}],[\"会执行系统中已经设置的所有通过方法addshutdownhook添加的钩子\",{\"1\":{\"157\":1}}],[\"会让对象不能使用偏向锁\",{\"1\":{\"137\":1}}],[\"虚拟机可以对满足上述\",{\"1\":{\"402\":1}}],[\"虚拟机可用的处理器数量\",{\"1\":{\"175\":1}}],[\"虚拟机\",{\"1\":{\"402\":1}}],[\"虚拟机的实现可以使用传统的堆栈\",{\"1\":{\"298\":1}}],[\"虚拟机的方法中分配的区域\",{\"1\":{\"294\":1}}],[\"虚拟机栈的本地变量表\",{\"1\":{\"334\":1}}],[\"虚拟机栈中的本地变量\",{\"1\":{\"331\":1}}],[\"虚拟机栈是一个线程执行的区域\",{\"1\":{\"296\":1}}],[\"虚拟机栈\",{\"0\":{\"296\":1,\"324\":1}}],[\"虚拟机退出时才会被销毁\",{\"1\":{\"291\":1}}],[\"虚拟机启动时创建的\",{\"1\":{\"291\":1}}],[\"虚拟机定义了在程序执行期间使用的各种运行时数据区域\",{\"1\":{\"291\":1}}],[\"虚拟机在调用虚拟机时为虚拟机中的每个方法发出调试信息\",{\"1\":{\"185\":1}}],[\"虚拟机在执行时为虚拟机中的每条指令发出调试信息\",{\"1\":{\"182\":1}}],[\"虚拟机根据需要在单独的线程中自动执行此回收过程\",{\"1\":{\"179\":1}}],[\"虚拟机花费精力回收未使用的对象\",{\"1\":{\"179\":1}}],[\"虚拟机花费精力运行已发现已丢弃但尚未运行其\",{\"1\":{\"169\":1}}],[\"虚拟机中的内存总量\",{\"1\":{\"178\":1}}],[\"虚拟机中的可用内存量\",{\"1\":{\"176\":1}}],[\"虚拟机将尝试使用的最大内存量\",{\"1\":{\"177\":1}}],[\"虚拟机会根据需要在单独的线程中自动执行终结过程\",{\"1\":{\"169\":1}}],[\"虚拟机已尽最大努力回收所有丢弃的对象\",{\"1\":{\"179\":1}}],[\"虚拟机已尽最大努力完成所有未完成的终结\",{\"1\":{\"169\":1}}],[\"虚拟机已开始关闭序列如果关闭钩子正在运行\",{\"1\":{\"154\":1}}],[\"虚拟机停止\",{\"1\":{\"154\":1}}],[\"都必须遵守这些不变量\",{\"1\":{\"471\":1}}],[\"都与全局时钟下的顺序一致\",{\"1\":{\"466\":1}}],[\"都是工作区\",{\"1\":{\"637\":1}}],[\"都是write\",{\"1\":{\"464\":1}}],[\"都是多节点共同工作\",{\"1\":{\"459\":1}}],[\"都是共识算法\",{\"1\":{\"459\":1}}],[\"都是这种机制\",{\"1\":{\"458\":1}}],[\"都是通过new\",{\"1\":{\"107\":1,\"127\":1}}],[\"都会有\",{\"1\":{\"402\":1}}],[\"都不会执行关闭钩子或终结器\",{\"1\":{\"165\":1}}],[\"都退出\",{\"1\":{\"154\":1}}],[\"是不是少了最后添加的一行数据\",{\"1\":{\"654\":1}}],[\"是不同的\",{\"1\":{\"471\":1}}],[\"是netty4的推荐做法\",{\"1\":{\"479\":1}}],[\"是处理事务的原则\",{\"1\":{\"471\":1,\"475\":1}}],[\"是一个支持markdown的静态博客写作客户端\",{\"1\":{\"621\":1}}],[\"是一个自适应的接受缓冲区分配器\",{\"1\":{\"479\":1}}],[\"是一个必须收到\",{\"1\":{\"467\":1}}],[\"是一种共识理论\",{\"1\":{\"456\":1}}],[\"是标准的强一致性保证\",{\"1\":{\"467\":1}}],[\"是程序能实现的最高的一致性模型\",{\"1\":{\"466\":1}}],[\"是线性一致性读\",{\"1\":{\"453\":1}}],[\"是指对关联对象执行锁的角色\",{\"1\":{\"445\":1}}],[\"是原子的\",{\"1\":{\"444\":1}}],[\"是否选用g1垃圾收集器的判断依据\",{\"1\":{\"398\":1}}],[\"是shallow\",{\"1\":{\"381\":1}}],[\"是java进程在某个时间内的快照\",{\"1\":{\"378\":1}}],[\"是排查jvm相关问题的利器\",{\"1\":{\"375\":1}}],[\"是alibaba开源的java诊断工具\",{\"1\":{\"375\":1}}],[\"是物理隔离的了\",{\"1\":{\"347\":1}}],[\"是虚拟机新生代收集的唯\",{\"1\":{\"341\":1}}],[\"是根据\",{\"1\":{\"297\":1}}],[\"是以key\",{\"1\":{\"251\":1}}],[\"是以\",{\"1\":{\"248\":1}}],[\"是\",{\"1\":{\"188\":1,\"467\":1}}],[\"是命令中所有标记的数组\",{\"1\":{\"173\":1}}],[\"是非正常退出\",{\"1\":{\"154\":1}}],[\"是因为stash隐藏了\",{\"1\":{\"666\":1}}],[\"是因为\",{\"1\":{\"479\":1}}],[\"是因为本身就是两个不同的地址\",{\"1\":{\"107\":1}}],[\"是因为对应同一个integercache游标的地址\",{\"1\":{\"107\":1}}],[\"是因为integer内部有一个静态内部类integercache\",{\"1\":{\"107\":1,\"127\":1}}],[\"直到第一个线程完成或该方法引发异常\",{\"1\":{\"445\":1}}],[\"直到该方法被第一个线程解锁\",{\"1\":{\"442\":1}}],[\"直到我18岁的时候\",{\"1\":{\"313\":1}}],[\"直到to区被填满\",{\"1\":{\"311\":1}}],[\"直到java虚拟机再次确定没有任何方法可以让任何尚未死亡的线程访问该对象\",{\"1\":{\"144\":1}}],[\"直接运行\",{\"1\":{\"692\":1}}],[\"直接手动撤销那些你不要的东西即可\",{\"1\":{\"640\":1}}],[\"直接访问后端\",{\"0\":{\"602\":1}}],[\"直接启动module1\",{\"1\":{\"555\":1}}],[\"直接向系统申请的内存空间\",{\"1\":{\"402\":1}}],[\"直接内存是在java堆外的\",{\"1\":{\"402\":1}}],[\"直接进入年老代\",{\"1\":{\"363\":1}}],[\"直接对应到内存中某个地址指向\",{\"1\":{\"283\":1}}],[\"直接退出\",{\"1\":{\"154\":1}}],[\"程序计数器占用的内存空间很小\",{\"1\":{\"297\":1}}],[\"程序计数器\",{\"0\":{\"297\":1}}],[\"程序正常执行结束退出\",{\"1\":{\"154\":1}}],[\"程序员应该意识到\",{\"1\":{\"137\":1}}],[\"正则表达式与导出等功能\",{\"1\":{\"613\":1}}],[\"正因为\",{\"1\":{\"473\":1}}],[\"正常退出\",{\"1\":{\"154\":1}}],[\"正无穷的值为0x7f800000\",{\"1\":{\"91\":1}}],[\"正无穷的值为0x7ff0000000000000l\",{\"1\":{\"71\":1}}],[\"正无穷\",{\"1\":{\"70\":1}}],[\"包\",{\"1\":{\"443\":1}}],[\"包括版本信息\",{\"1\":{\"638\":1}}],[\"包括支持\",{\"1\":{\"491\":1}}],[\"包括约束\",{\"1\":{\"471\":1}}],[\"包括redis主备\",{\"1\":{\"470\":1}}],[\"包括顺序一致性\",{\"1\":{\"456\":1}}],[\"包括\",{\"1\":{\"444\":1}}],[\"包括eden和两个survivor区\",{\"1\":{\"363\":1}}],[\"包括类中的实例化方法和接口初始化方法\",{\"1\":{\"294\":1}}],[\"包括$java\",{\"1\":{\"287\":1}}],[\"包括其他对象或准备完成的类可能的操作\",{\"1\":{\"144\":1}}],[\"包含本地代码的文件是从本地文件系统从通常获取库文件的地方加载的\",{\"1\":{\"192\":1}}],[\"包含了int可能值的integer数组\",{\"1\":{\"112\":1}}],[\"子类重写finalize方法以处理系统资源或执行其他清理\",{\"1\":{\"144\":1}}],[\"只在工作区显示目录\",{\"1\":{\"615\":1}}],[\"只对有因果关系的事件有顺序要求\",{\"1\":{\"469\":1}}],[\"只考虑共识机制\",{\"1\":{\"461\":1}}],[\"只出现在cache\",{\"1\":{\"455\":1}}],[\"只是在实现时的目标或者折中\",{\"1\":{\"475\":1}}],[\"只是在取\",{\"1\":{\"142\":1}}],[\"只是一个朋友已经看到了第二条\",{\"1\":{\"464\":1}}],[\"只是从全局看来\",{\"1\":{\"464\":1}}],[\"只是这个顺序与全局时钟下看到的顺序并不一样\",{\"1\":{\"464\":1}}],[\"只是区块链有几点特殊\",{\"1\":{\"459\":1}}],[\"只是发生时间的长短\",{\"1\":{\"402\":1}}],[\"只是通知要回收\",{\"1\":{\"388\":1}}],[\"只有一行数据了\",{\"1\":{\"654\":1}}],[\"只有通过shenyu\",{\"1\":{\"492\":1}}],[\"只有继承了org\",{\"1\":{\"487\":1,\"493\":1}}],[\"只有经历16次minor\",{\"1\":{\"314\":1}}],[\"只有eden不行吗\",{\"1\":{\"314\":1}}],[\"只有两种方式可以退出\",{\"1\":{\"302\":1}}],[\"只有在\",{\"1\":{\"291\":1}}],[\"只有父类加载器无法完成此加载任务时\",{\"1\":{\"289\":1}}],[\"只能有一个垃圾回收线程执行\",{\"1\":{\"348\":1}}],[\"只能通过增强for循环或者迭代器取出元素\",{\"1\":{\"241\":1}}],[\"只能顺序访问\",{\"1\":{\"239\":1}}],[\"只要简单配置就可以使用\",{\"1\":{\"617\":1}}],[\"只要cd\",{\"1\":{\"464\":1}}],[\"只要设置整个堆的大小\",{\"1\":{\"399\":1}}],[\"只要应用程序中持有该对象的引用\",{\"1\":{\"333\":1}}],[\"只要某个classloader已加载\",{\"1\":{\"289\":1}}],[\"只要a\",{\"1\":{\"138\":1}}],[\"只要在同一个对象上多次调用hashcode方法\",{\"1\":{\"137\":1}}],[\"此处以ruletrie说明\",{\"1\":{\"493\":1}}],[\"此处为网络超时\",{\"1\":{\"467\":1}}],[\"此处可有额外不需同步的操作\",{\"1\":{\"446\":1}}],[\"此实现稍好一些\",{\"1\":{\"447\":1}}],[\"此外\",{\"1\":{\"440\":1}}],[\"此值设置运行多少次gc以后对内存空间进行压缩\",{\"1\":{\"363\":1}}],[\"此值建议配置与处理器数目相等\",{\"1\":{\"363\":1}}],[\"此值建议与\",{\"1\":{\"363\":1}}],[\"此值对系统性能影响较大\",{\"1\":{\"363\":1}}],[\"此时客户端将读到过期数据\",{\"1\":{\"467\":1}}],[\"此时有客户端进行读写操作\",{\"1\":{\"467\":1}}],[\"此时整个系统其实就等价于一台机器了\",{\"1\":{\"461\":1}}],[\"此时堆中所有的对象都会被扫描一遍\",{\"1\":{\"336\":1}}],[\"此时进行minor\",{\"1\":{\"314\":1}}],[\"此时进行一次gc操作\",{\"1\":{\"311\":1}}],[\"此时eden区和from区已经被清空\",{\"1\":{\"311\":1}}],[\"此时对象会被移动到old区\",{\"1\":{\"311\":1}}],[\"此时对象可能会被丢弃\",{\"1\":{\"144\":1}}],[\"此时你需要一个能够看懂反编译指令的宝典\",{\"1\":{\"302\":1}}],[\"此时装载\",{\"1\":{\"295\":1}}],[\"此时回看装载阶段的第3步\",{\"1\":{\"295\":1}}],[\"此时回看装载阶段的第2步\",{\"1\":{\"294\":1}}],[\"此时\",{\"1\":{\"284\":1,\"467\":2,\"648\":1,\"662\":1}}],[\"此过程的细节取决于实现\",{\"1\":{\"192\":1}}],[\"此信息的格式以及将其发送到的文件或其他输出流取决于主机环境\",{\"1\":{\"182\":1,\"185\":1}}],[\"此对象保存着所有处于wait状态的线程\",{\"1\":{\"141\":1}}],[\"此方法会导致虚拟机停止执行它正在执行的详细指令跟踪\",{\"1\":{\"182\":1}}],[\"此方法返回的值可能会随时间变化\",{\"1\":{\"178\":1}}],[\"此方法返回\",{\"1\":{\"175\":1}}],[\"此方法返回具有相同位模式的浮点值\",{\"1\":{\"101\":1}}],[\"此方法不会触发jvm关闭序列\",{\"1\":{\"165\":1}}],[\"此方法将无限期阻塞\",{\"1\":{\"154\":1}}],[\"此方法主要是用来唤醒线程\",{\"1\":{\"141\":1}}],[\"再用git\",{\"1\":{\"672\":1}}],[\"再用getchars获取数字对应的char数组\",{\"1\":{\"116\":1}}],[\"再推送\",{\"1\":{\"672\":1}}],[\"再次点击才会进入目录内的文件\",{\"1\":{\"615\":1}}],[\"再加一种情况\",{\"1\":{\"464\":1}}],[\"再加上各种共识\",{\"1\":{\"453\":1}}],[\"再加上十六进制的hashcode\",{\"1\":{\"140\":1}}],[\"再点击configure\",{\"1\":{\"416\":1}}],[\"再释放队列锁\",{\"1\":{\"143\":1}}],[\"再根据不同策略处理该对象\",{\"1\":{\"141\":1}}],[\"再取出\",{\"1\":{\"141\":1}}],[\"实例来强制相互排斥\",{\"1\":{\"447\":1}}],[\"实例分配给一个字段来创建线程私有字段\",{\"1\":{\"441\":1}}],[\"实例数据和对齐填充\",{\"1\":{\"307\":1}}],[\"实际上是可变的\",{\"1\":{\"440\":1}}],[\"实际上不非是一个\",{\"1\":{\"71\":1,\"91\":1}}],[\"实验环境准备\",{\"0\":{\"389\":1}}],[\"实时查看和调整jvm配置参数\",{\"1\":{\"366\":1}}],[\"实践和单位换算\",{\"0\":{\"362\":1}}],[\"实现上zookeeper\",{\"1\":{\"465\":1}}],[\"实现排序往往更为简单\",{\"1\":{\"461\":1}}],[\"实现结构是数组+单向链表\",{\"1\":{\"251\":1}}],[\"实现map\",{\"1\":{\"248\":1}}],[\"实现了一种更容易让人理解和工程实现的共识算法\",{\"1\":{\"457\":1}}],[\"实现了navigablemap\",{\"1\":{\"250\":1}}],[\"实现了navigableset\",{\"1\":{\"243\":1}}],[\"实现了map接口\",{\"1\":{\"249\":1}}],[\"实现了serializable接口\",{\"1\":{\"246\":1}}],[\"实现了set\",{\"1\":{\"241\":1,\"242\":1}}],[\"实现了list\",{\"1\":{\"238\":1,\"239\":1}}],[\"实现\",{\"1\":{\"140\":1,\"250\":1}}],[\"但os底层会将发送缓冲区全部发送到对端\",{\"1\":{\"479\":1}}],[\"但目的上是不同的\",{\"1\":{\"475\":1}}],[\"但每个应用都可以根据自身的业务特点\",{\"1\":{\"473\":1}}],[\"但每个朋友都会以相同顺序看到了你的2条推文\",{\"1\":{\"464\":1}}],[\"但这并不意味着它们不是优秀的系统\",{\"1\":{\"472\":1}}],[\"但这篇文章会告诉你\",{\"1\":{\"472\":1}}],[\"但这两种说法都不准确\",{\"1\":{\"465\":1}}],[\"但无法保障\",{\"1\":{\"467\":1}}],[\"但由于网络隔离\",{\"1\":{\"467\":1}}],[\"但共识算法只是提供基础\",{\"1\":{\"467\":1}}],[\"但经过自身与leader之间的同步后\",{\"1\":{\"465\":1}}],[\"但有些时候\",{\"1\":{\"464\":1}}],[\"但有时我们需要的控制权要强于此\",{\"1\":{\"445\":1}}],[\"但其实这种模式在现实中的用的挺广泛的\",{\"1\":{\"464\":1}}],[\"但不满足线性一致\",{\"1\":{\"464\":1}}],[\"但不会把钱搞错\",{\"1\":{\"460\":1}}],[\"但\",{\"1\":{\"463\":1}}],[\"但因为顺序一致性出现的时间比较早\",{\"1\":{\"462\":1}}],[\"但可能会回复过期的数据\",{\"1\":{\"460\":1}}],[\"但将产生相对高的延迟\",{\"1\":{\"460\":1}}],[\"但你相信\",{\"1\":{\"460\":1}}],[\"但区块链是以相对的低效率来换取公正\",{\"1\":{\"459\":1}}],[\"但注意\",{\"1\":{\"456\":1}}],[\"但如果设置成50ms就不太合理\",{\"1\":{\"399\":1}}],[\"但如果是对象则会克隆对象的地址\",{\"1\":{\"139\":1}}],[\"但并不一定是并行的\",{\"1\":{\"348\":1}}],[\"但此时用户线程仍然处于等待状态\",{\"1\":{\"348\":1}}],[\"但新生代和老年代不再\",{\"1\":{\"347\":1}}],[\"但简化了设计和编程\",{\"1\":{\"235\":1}}],[\"但它接受一个通用文件名作为参数\",{\"1\":{\"188\":1}}],[\"但是我issue\",{\"1\":{\"666\":1}}],[\"但是我们不确定结果如何\",{\"1\":{\"444\":1}}],[\"但是却没有使用git\",{\"1\":{\"644\":1}}],[\"但是这个文件缺失不需要的\",{\"1\":{\"644\":1}}],[\"但是随着时间的迁移\",{\"1\":{\"470\":1}}],[\"但是随着老年代空间加大\",{\"1\":{\"314\":1}}],[\"但是在社区的邮件组有详细的讨论\",{\"1\":{\"465\":1}}],[\"但是在并发周期时间过长时\",{\"1\":{\"399\":1}}],[\"但是能保证最终能读取到这个值\",{\"1\":{\"465\":1}}],[\"但是被提示\",{\"1\":{\"460\":1}}],[\"但是它显示了如何创建同步语句\",{\"1\":{\"446\":1}}],[\"但是它却又一个别名叫做non\",{\"1\":{\"294\":1}}],[\"但是不与其他线程共享\",{\"1\":{\"441\":1}}],[\"但是不建议手动调用该方法\",{\"1\":{\"388\":1}}],[\"但是多个线程仅对其具有只读访问权限\",{\"1\":{\"440\":1}}],[\"但是线程不能直接读写主内存的共享变量\",{\"1\":{\"436\":1}}],[\"但是内存溢出也有可能是大对象导致的\",{\"1\":{\"402\":1}}],[\"但是具体什么时刻运行也无法控制\",{\"1\":{\"388\":1}}],[\"但是可以消除碎片\",{\"1\":{\"363\":1}}],[\"但是操作系统对一个进程内的线程个数有一定的限制\",{\"1\":{\"363\":1}}],[\"但是操作系统对一个进程内的线程数还是有限制的\",{\"1\":{\"327\":1}}],[\"但是parallel\",{\"1\":{\"343\":1}}],[\"但是后续步骤不是直接对可回收对象进行清理\",{\"1\":{\"338\":1}}],[\"但是老年代很快被存活对象填满\",{\"1\":{\"314\":1}}],[\"但是eden区的内存空间肯定有限\",{\"1\":{\"310\":1}}],[\"但是java™编程语言并不需要这种实现技术\",{\"1\":{\"137\":1}}],[\"但是\",{\"1\":{\"101\":1,\"144\":1,\"463\":1,\"464\":1,\"666\":1}}],[\"以后你修改了bug\",{\"1\":{\"679\":1}}],[\"以gnu\",{\"1\":{\"611\":1}}],[\"以prod环境进行启动\",{\"1\":{\"557\":1}}],[\"以test环境进行启动\",{\"1\":{\"556\":1}}],[\"以下介绍zettlr的简单使用\",{\"1\":{\"613\":1}}],[\"以下都是他的变种\",{\"1\":{\"470\":1}}],[\"以下两种调度\",{\"1\":{\"468\":1}}],[\"以下是四个进程\",{\"1\":{\"464\":1}}],[\"以下是特殊情况\",{\"1\":{\"99\":1}}],[\"以日志复制的形式提交\",{\"1\":{\"467\":1}}],[\"以网络分区为例\",{\"1\":{\"467\":1}}],[\"以上面的例\",{\"1\":{\"466\":1}}],[\"以上的堆被存活对象占用\",{\"1\":{\"347\":1,\"398\":1}}],[\"以及保证大多数成功的zab协议\",{\"1\":{\"465\":1}}],[\"以另一种方式创建线程安全版本的\",{\"1\":{\"445\":1}}],[\"以便每个线程都有自己的状态\",{\"1\":{\"441\":1}}],[\"以便维护hashcode方法的一般契约\",{\"1\":{\"138\":1}}],[\"以达到目标系统规定的最低响应时该间或者收集频率\",{\"1\":{\"363\":1}}],[\"以满足此值\",{\"1\":{\"363\":1}}],[\"以前每个线程堆栈大小为256k\",{\"1\":{\"327\":1}}],[\"以压栈和出栈的方式存储操作数的\",{\"1\":{\"302\":1}}],[\"以\",{\"1\":{\"298\":1}}],[\"以支持本地方法\",{\"1\":{\"298\":1}}],[\"以使它们当前占用的内存可用于快速重用\",{\"1\":{\"179\":1}}],[\"通用工具类\",{\"1\":{\"537\":1}}],[\"通知进程\",{\"1\":{\"470\":1}}],[\"通常是指classpath下目录下的文件\",{\"1\":{\"691\":1}}],[\"通常是this引用\",{\"1\":{\"446\":1}}],[\"通常分为以下集中管理方式\",{\"1\":{\"572\":1}}],[\"通常使用git进行项目的版本管理\",{\"1\":{\"572\":1}}],[\"通常访问直接内存的速度会优于java堆\",{\"1\":{\"402\":1}}],[\"通常都需要重写equals方法\",{\"1\":{\"138\":1}}],[\"通俗地称为\",{\"1\":{\"298\":1}}],[\"通过时间顺序进行更新或者回滚\",{\"1\":{\"661\":1}}],[\"通过数据同步或者本地模式添加数据将所有的选择器和规则都存入缓存中\",{\"1\":{\"497\":1}}],[\"通过path以\",{\"1\":{\"493\":1}}],[\"通过增加协调者来进行协商\",{\"1\":{\"475\":1}}],[\"通过简化\",{\"1\":{\"457\":1}}],[\"通过简单地在\",{\"1\":{\"441\":1}}],[\"通过使用collections框架\",{\"1\":{\"442\":1}}],[\"通过gc\",{\"1\":{\"334\":1}}],[\"通过jinfo实时调整某个java进程的参数\",{\"1\":{\"361\":1}}],[\"通过java\",{\"1\":{\"287\":1}}],[\"通过jvm参数djava\",{\"1\":{\"112\":1}}],[\"通过类的全限定名获取其定义的二进制字节流\",{\"1\":{\"286\":1}}],[\"通过一个类的全限定名获取定义此类的二进制字节流\",{\"1\":{\"279\":1,\"286\":1}}],[\"通过treemap实现的一个有序的\",{\"1\":{\"243\":1}}],[\"通过digittens数组直接取出来十位为4\",{\"1\":{\"111\":1}}],[\"通过new\",{\"1\":{\"49\":1,\"67\":1,\"86\":1}}],[\"也试图推送到远程库\",{\"1\":{\"672\":1}}],[\"也会将数据存入一级缓存中\",{\"1\":{\"486\":1}}],[\"也会发生oom\",{\"1\":{\"295\":1}}],[\"也叫做原子一致性\",{\"1\":{\"472\":1}}],[\"也算是符合最终一致性的定义\",{\"1\":{\"470\":1}}],[\"也满足linearizability\",{\"1\":{\"468\":1}}],[\"也是弱一致性\",{\"1\":{\"470\":1}}],[\"也是分布式系统用户最期望的一致性\",{\"1\":{\"466\":1}}],[\"也是一个单线程收集器\",{\"1\":{\"344\":1}}],[\"也可能读取到新的值1\",{\"1\":{\"464\":1}}],[\"也可以推送到其他分支\",{\"1\":{\"671\":1}}],[\"也可以实现线程安全\",{\"1\":{\"444\":1}}],[\"也可以看做触发了full\",{\"1\":{\"314\":1}}],[\"也可以叫做from和to\",{\"1\":{\"311\":1}}],[\"也可以叫from和to\",{\"1\":{\"309\":1}}],[\"也可以作为队列来使用\",{\"1\":{\"245\":1}}],[\"也称原子一致性或严格一致性指的是程序在执行的历史中在存在可线性化点p的执行模型\",{\"1\":{\"460\":1}}],[\"也不满足可用性\",{\"1\":{\"472\":1}}],[\"也不会更改该方法为其他线程生成的输出\",{\"1\":{\"439\":1}}],[\"也不维护自身的状态\",{\"1\":{\"439\":1}}],[\"也不需要进行额外的同步\",{\"1\":{\"435\":1}}],[\"也不能称为垃圾\",{\"1\":{\"331\":1}}],[\"也并非是\",{\"1\":{\"402\":1}}],[\"也就导致了内存碎片化\",{\"1\":{\"314\":1}}],[\"也就是用来发布新版本\",{\"1\":{\"665\":1}}],[\"也就是两阶段提交\",{\"1\":{\"474\":1}}],[\"也就是前面讲的线性一致性\",{\"1\":{\"472\":1}}],[\"也就是我们常说的分布式系统中的一致性\",{\"1\":{\"472\":1}}],[\"也就是我们平时说的最多的\",{\"1\":{\"460\":1}}],[\"也就是强一致性\",{\"1\":{\"465\":1}}],[\"也就是拜占庭将军问题\",{\"1\":{\"457\":1}}],[\"也就是\",{\"1\":{\"402\":1,\"471\":1}}],[\"也就是通过jmx技术具体监控远端服务器哪个java进程\",{\"1\":{\"374\":1}}],[\"也就是说此变量只此一份\",{\"1\":{\"436\":1}}],[\"也就是说\",{\"1\":{\"388\":1,\"437\":1}}],[\"也就是说为什么一个survivor区不行\",{\"1\":{\"314\":1}}],[\"也就是说无论如何都要保证名为to的survivor区域是空的\",{\"1\":{\"311\":1}}],[\"也就是要存储起来\",{\"1\":{\"290\":1}}],[\"也就是由上层来逐层尝试加载此类\",{\"1\":{\"289\":1}}],[\"也应该去对gc的运行机制进行微调\",{\"1\":{\"179\":1}}],[\"也有可能不等\",{\"1\":{\"138\":1}}],[\"也必须返回\",{\"1\":{\"138\":1}}],[\"必须通过add提交到文件暂存区\",{\"1\":{\"652\":1}}],[\"必须相等\",{\"1\":{\"138\":1}}],[\"必须返回\",{\"1\":{\"138\":2}}],[\"必返回\",{\"1\":{\"138\":1}}],[\"且有重叠\",{\"1\":{\"464\":1}}],[\"且不提供\",{\"1\":{\"440\":1}}],[\"且基于标记整理算法实现\",{\"1\":{\"402\":1}}],[\"且key值不允许重复\",{\"1\":{\"248\":1}}],[\"且\",{\"1\":{\"138\":1}}],[\"且尾数域不等于零的浮点数\",{\"1\":{\"71\":1,\"91\":1}}],[\"若超时\",{\"1\":{\"479\":1}}],[\"若吞吐量越大\",{\"1\":{\"343\":1}}],[\"若对象年龄达到之前设置好的年龄阈值\",{\"1\":{\"311\":1}}],[\"若a\",{\"1\":{\"138\":2}}],[\"若\",{\"1\":{\"138\":1}}],[\"若符号位是1\",{\"1\":{\"70\":1}}],[\"若符号位是0\",{\"1\":{\"70\":1}}],[\"总不能输入50个^号\",{\"1\":{\"654\":1}}],[\"总体思路\",{\"0\":{\"483\":1}}],[\"总共花费的时间\",{\"1\":{\"393\":1}}],[\"总结一下\",{\"1\":{\"465\":1}}],[\"总结\",{\"1\":{\"137\":1}}],[\"总是1\",{\"1\":{\"89\":1}}],[\"晋升为轻量级锁\",{\"1\":{\"137\":1}}],[\"偏向锁将会失效\",{\"1\":{\"137\":1}}],[\"就可以使用git\",{\"1\":{\"679\":1}}],[\"就必须把远程的origin的dev分支到本地来\",{\"1\":{\"672\":1}}],[\"就作为此次读请求的\",{\"1\":{\"467\":1}}],[\"就不属于顺序一致了\",{\"1\":{\"464\":1}}],[\"就需要对内存空间进行垃圾回收\",{\"1\":{\"387\":1}}],[\"就将还存活的对象复制到另外一块上面\",{\"1\":{\"337\":1}}],[\"就说明该对象不是垃圾\",{\"1\":{\"333\":1}}],[\"就有影响到创建栈的数量\",{\"1\":{\"327\":1}}],[\"就有可能耗尽stackspace\",{\"1\":{\"327\":1}}],[\"就会保存已经在暂存区的内容\",{\"1\":{\"642\":1}}],[\"就会使标记周期运行过于频繁\",{\"1\":{\"399\":1}}],[\"就会导致出现g1跟不上垃圾产生的速度\",{\"1\":{\"399\":1}}],[\"就会出现内存溢出的错误\",{\"1\":{\"327\":1}}],[\"就会把该栈帧从栈中弹出\",{\"1\":{\"296\":1}}],[\"就会向栈中压入一个栈帧\",{\"1\":{\"296\":1}}],[\"就会占用偏向锁对象使用的位置\",{\"1\":{\"137\":1}}],[\"就代表一个栈帧\",{\"1\":{\"296\":1}}],[\"就\",{\"1\":{\"289\":1}}],[\"就视为已加载此类\",{\"1\":{\"289\":1}}],[\"就算真的有性能上的需求\",{\"1\":{\"179\":1}}],[\"就是刚刚注册邮箱\",{\"1\":{\"647\":1}}],[\"就是eventual\",{\"1\":{\"470\":1}}],[\"就是在一段时间后\",{\"1\":{\"470\":1}}],[\"就是满足顺序一致性\",{\"1\":{\"464\":1}}],[\"就是相对于区块链这种\",{\"1\":{\"459\":1}}],[\"就是比较火的区块链\",{\"1\":{\"459\":1}}],[\"就是\",{\"1\":{\"457\":1}}],[\"就是共识算法\",{\"1\":{\"456\":1}}],[\"就是减少被送到老年代的对象\",{\"1\":{\"314\":1}}],[\"就是典型的方法区中元素指向堆中的对象\",{\"1\":{\"305\":1}}],[\"就是用来装载class文件的\",{\"1\":{\"286\":1}}],[\"就是可以容纳其他java对象的对象\",{\"1\":{\"235\":1}}],[\"就是说无论程序正在执行与否\",{\"1\":{\"154\":1}}],[\"就是==的比较\",{\"1\":{\"138\":1}}],[\"就是先用stringsize得到数字是多少位\",{\"1\":{\"116\":1}}],[\"因网络隔离无法收到大多数节点的写入响应\",{\"1\":{\"467\":1}}],[\"因果一致性\",{\"0\":{\"469\":1},\"1\":{\"460\":1,\"469\":1,\"470\":1}}],[\"因为我的小伙伴最新提交的和我试图推送的有冲突\",{\"1\":{\"672\":1}}],[\"因为光速限制\",{\"1\":{\"474\":1}}],[\"因为按照\",{\"1\":{\"472\":1}}],[\"因为没人可以知道什么时候算是最终\",{\"1\":{\"470\":1}}],[\"因为在causal\",{\"1\":{\"469\":1}}],[\"因为在++增量执行多个操作的同时\",{\"1\":{\"444\":1}}],[\"因为t1之前更新的数据t2读不到\",{\"1\":{\"468\":1}}],[\"因为\",{\"1\":{\"467\":1}}],[\"因为由于多副本\",{\"1\":{\"465\":1}}],[\"因为c\",{\"1\":{\"464\":1}}],[\"因为情况2是这样的顺序\",{\"1\":{\"464\":1}}],[\"因为一次写入或者读取\",{\"1\":{\"464\":1}}],[\"因为从这两个进程的角度来看\",{\"1\":{\"464\":1}}],[\"因为日志中的命令和顺序都相同\",{\"1\":{\"458\":1}}],[\"因为不论是分布式数据库\",{\"1\":{\"457\":1}}],[\"因为分布式系统引入了多个节点\",{\"1\":{\"456\":1}}],[\"因为它可以提高锁定级别的安全性\",{\"1\":{\"447\":1}}],[\"因为它强制对一组指定的方法或语句进行排他访问\",{\"1\":{\"445\":1}}],[\"因为它的状态在构造之后不能更改\",{\"1\":{\"440\":1}}],[\"因为线程在同一时间执行同一代码块\",{\"1\":{\"444\":1}}],[\"因为消耗的资源比较\",{\"1\":{\"388\":1}}],[\"因为major\",{\"1\":{\"314\":1}}],[\"因为这个命令只是建议jvm安排gc运行\",{\"1\":{\"179\":1}}],[\"因为int支持从2进制到36进制\",{\"1\":{\"111\":1}}],[\"因此要时刻与远程同步\",{\"1\":{\"671\":1}}],[\"因此他们可能读取到旧的值0\",{\"1\":{\"464\":1}}],[\"因此先介绍下顺序一致性\",{\"1\":{\"462\":1}}],[\"因此根据实际需求的不用\",{\"1\":{\"461\":1}}],[\"因此保证系统一致性就简化为保证操作日志的一致\",{\"1\":{\"458\":1}}],[\"因此所有节点会得到相同的数据\",{\"1\":{\"458\":1}}],[\"因此paxos\",{\"1\":{\"456\":1}}],[\"因此在谈一致性之前\",{\"1\":{\"454\":1}}],[\"因此使用此选项\",{\"1\":{\"446\":1}}],[\"因此一个线程将执行\",{\"1\":{\"445\":1}}],[\"因此多个线程可以同时访问\",{\"1\":{\"443\":1}}],[\"因此出于性能的考\",{\"1\":{\"402\":1}}],[\"因此object在各种类加载环境中都是同一个类\",{\"1\":{\"289\":1}}],[\"因此具有良好的存取和查找性能\",{\"1\":{\"241\":1}}],[\"因此\",{\"1\":{\"165\":1,\"297\":1,\"439\":3,\"440\":2,\"441\":1,\"442\":1,\"445\":1,\"467\":1,\"471\":2}}],[\"因此也就是说如果调用了本地方法hashcode\",{\"1\":{\"137\":1}}],[\"和进程\",{\"1\":{\"470\":1}}],[\"和serializable\",{\"1\":{\"468\":1}}],[\"和全局时钟一致\",{\"1\":{\"464\":1}}],[\"和单机没有任何区别\",{\"1\":{\"461\":1}}],[\"和委托权益证明\",{\"1\":{\"459\":1}}],[\"和其他的变种\",{\"1\":{\"457\":1}}],[\"和线程\",{\"1\":{\"436\":1}}],[\"和对象本身具体是做什么的无关\",{\"1\":{\"435\":1}}],[\"和附加信息\",{\"1\":{\"302\":2}}],[\"和\",{\"0\":{\"468\":1},\"1\":{\"294\":1,\"440\":1,\"444\":1,\"456\":1,\"463\":1,\"464\":4,\"466\":1,\"467\":10,\"471\":1,\"473\":1,\"475\":1,\"531\":1,\"589\":1,\"677\":1}}],[\"和a不同类型的对象\",{\"1\":{\"138\":1}}],[\"和openjdk6都是使用第一种方法\",{\"1\":{\"137\":1}}],[\"和无穷大参数的情况下\",{\"1\":{\"98\":1}}],[\"可自定义\",{\"1\":{\"690\":1}}],[\"可在nacos配置的文件\",{\"1\":{\"547\":1}}],[\"可选值为fixedrecvbytebufallocator\",{\"1\":{\"479\":1}}],[\"可与cms收集同时使用\",{\"1\":{\"363\":1}}],[\"可预测的停顿\",{\"1\":{\"347\":1}}],[\"可达性分析法中不可达的对象被第一次标记并且进行一次筛选\",{\"1\":{\"402\":1}}],[\"可达性分析\",{\"0\":{\"334\":1}}],[\"可用于实现线程安全的另一种常见方法是实现同步方法\",{\"1\":{\"445\":1}}],[\"可用于强制终止正在运行的jvm\",{\"1\":{\"165\":1}}],[\"可用内存中eden\",{\"1\":{\"314\":1}}],[\"可以试图用git\",{\"1\":{\"672\":1}}],[\"可以先合并到主分支上\",{\"1\":{\"671\":1}}],[\"可以把当前工作现场\",{\"1\":{\"666\":1}}],[\"可以在你的本地查看一下\",{\"1\":{\"648\":1}}],[\"可以在脚本中的进行设置\",{\"1\":{\"361\":1}}],[\"可以使用git\",{\"1\":{\"638\":1}}],[\"可以使用`\",{\"1\":{\"137\":1}}],[\"可以将此功能视为tcp的心跳机制\",{\"1\":{\"479\":1}}],[\"可以利用paxos协议解决\",{\"1\":{\"475\":1}}],[\"可以翻译为酸\",{\"1\":{\"471\":1}}],[\"可以看出serializability是与数据库事务相关的一个概念\",{\"1\":{\"468\":1}}],[\"可以看这篇文章\",{\"1\":{\"467\":1}}],[\"可以看到默认使用的是parallelgc\",{\"1\":{\"390\":1}}],[\"可以这么理解\",{\"1\":{\"465\":1}}],[\"可以划分为\",{\"1\":{\"460\":1}}],[\"可以参考\",{\"1\":{\"469\":1}}],[\"可以参考剑桥大学的slide\",{\"1\":{\"460\":1}}],[\"可以参考这篇文章https\",{\"1\":{\"455\":1}}],[\"可以参考如下的几个链接\",{\"1\":{\"413\":1}}],[\"可以\",{\"1\":{\"402\":1}}],[\"可以尝试增加并发线程数\",{\"1\":{\"399\":1}}],[\"可以比较不同的垃圾收集器的吞吐量和停顿时间\",{\"1\":{\"395\":1}}],[\"可以发现多开了几个端口\",{\"1\":{\"374\":1}}],[\"可以理解为一个方法的运行空间\",{\"1\":{\"302\":1}}],[\"可以画个图\",{\"1\":{\"294\":1}}],[\"可以继承classloader类\",{\"1\":{\"289\":1}}],[\"可以作为栈来使用\",{\"1\":{\"245\":1}}],[\"可以插入null\",{\"1\":{\"242\":1}}],[\"可以保证调用finalize的线程在调用finalize时不会持有任何用户可见的同步锁\",{\"1\":{\"144\":1}}],[\"可以禁用偏向锁\",{\"1\":{\"137\":1}}],[\"可能的卡顿\",{\"1\":{\"618\":1}}],[\"可能在物理上运行在\",{\"1\":{\"463\":1}}],[\"可能在\",{\"1\":{\"463\":1}}],[\"可能是交替执行的\",{\"1\":{\"348\":1}}],[\"可能生命周期比较短\",{\"1\":{\"339\":1}}],[\"可能会遇到转移失败的风险\",{\"1\":{\"399\":1}}],[\"可能会出现栈溢出\",{\"1\":{\"327\":1}}],[\"可能会有误差\",{\"1\":{\"81\":1}}],[\"可能你会说\",{\"1\":{\"314\":1}}],[\"可能出现的数字格式的详细说明可以在\",{\"1\":{\"115\":1}}],[\"然年使用命令创建一个一个本地仓库\",{\"1\":{\"679\":1}}],[\"然后此时会出现冲突\",{\"1\":{\"672\":1}}],[\"然后提交到分支即可\",{\"1\":{\"672\":1}}],[\"然后删除bug分支即可\",{\"1\":{\"666\":1}}],[\"然后将id\",{\"1\":{\"678\":1}}],[\"然后将临时的分支删除掉\",{\"1\":{\"666\":1}}],[\"然后将shenyu配置的规则添加到sentinel中\",{\"1\":{\"506\":1}}],[\"然后我们就可以git\",{\"1\":{\"664\":1}}],[\"然后我们不使用git\",{\"1\":{\"642\":1,\"644\":1}}],[\"然后commit\",{\"1\":{\"662\":1}}],[\"然后你可以使用git\",{\"1\":{\"655\":1}}],[\"然后你快速下单\",{\"1\":{\"460\":1}}],[\"然后git\",{\"1\":{\"653\":1}}],[\"然后右键选择git\",{\"1\":{\"647\":1}}],[\"然后使用git\",{\"1\":{\"638\":1,\"642\":1}}],[\"然后进行下面的这些操作\",{\"1\":{\"638\":1}}],[\"然后干活\",{\"1\":{\"631\":1}}],[\"然后通过org\",{\"1\":{\"506\":1}}],[\"然后根据condition的type进行匹配\",{\"1\":{\"498\":1}}],[\"然后在执行\",{\"1\":{\"672\":1}}],[\"然后在本地合并\",{\"1\":{\"672\":1}}],[\"然后在git\",{\"1\":{\"644\":1}}],[\"然后在副本故障了100天之后手动在副本上执行日志以达成一致\",{\"1\":{\"470\":1}}],[\"然后在自己的工作内存中对该变量进行所有操作\",{\"1\":{\"436\":1}}],[\"然后返回当前的commitindex作为readindex\",{\"1\":{\"467\":1}}],[\"然后因客户端某些原因\",{\"1\":{\"467\":1}}],[\"然后启动项目\",{\"1\":{\"390\":1}}],[\"然后可以选择一个java进程\",{\"1\":{\"376\":1}}],[\"然后点击add\",{\"1\":{\"678\":1}}],[\"然后点击\",{\"1\":{\"374\":1}}],[\"然后访问localhost\",{\"1\":{\"369\":1}}],[\"然后直接清理掉端边界以外的内存\",{\"1\":{\"338\":1}}],[\"然后把主分支master推送到远程去\",{\"1\":{\"671\":1}}],[\"然后把编译好的文件放在jdk的jre目录下的如上所3述路径\",{\"1\":{\"413\":1}}],[\"然后把已经使用过的内存空间一次\",{\"1\":{\"337\":1}}],[\"然后把余数反过来串起来就是最后结果\",{\"1\":{\"116\":1}}],[\"然后被回收\",{\"1\":{\"313\":1}}],[\"然后会将所有对象复制到老年代中\",{\"1\":{\"311\":1}}],[\"然后再看到request2\",{\"1\":{\"465\":1}}],[\"然后再清空eden区中的这些对象\",{\"1\":{\"310\":1}}],[\"然后再释放\",{\"1\":{\"141\":1}}],[\"然后当线程a再获\",{\"1\":{\"297\":1}}],[\"然后重写其中的loadclass方法\",{\"1\":{\"289\":1}}],[\"然后放入静态初始化程序static\",{\"1\":{\"192\":1}}],[\"然后\",{\"1\":{\"154\":1,\"662\":1}}],[\"然后判断是否是数组分两种情况分配内存空间\",{\"1\":{\"139\":1}}],[\"然而p2读出来的却是旧的数据0\",{\"1\":{\"464\":1}}],[\"然而\",{\"1\":{\"137\":1,\"461\":1}}],[\"那些分支要推送呢\",{\"1\":{\"671\":1}}],[\"那是原来的\",{\"1\":{\"652\":1}}],[\"那这样使用git\",{\"1\":{\"642\":1}}],[\"那这个对象是线程安全的\",{\"1\":{\"435\":1}}],[\"那多人之间是如何合作的呢\",{\"1\":{\"632\":1}}],[\"那如何准确获取集群的\",{\"1\":{\"467\":1}}],[\"那也叫一致性\",{\"1\":{\"460\":1}}],[\"那一个对象的创建到底在哪个区域呢\",{\"1\":{\"309\":1}}],[\"那一个线程执行的状态如何维护\",{\"1\":{\"296\":1}}],[\"那怎么知道对象是哪个类创建的呢\",{\"1\":{\"306\":1}}],[\"那怎样才能被使用到\",{\"1\":{\"296\":1}}],[\"那就对老年代的空间进行增加或者较少咯\",{\"1\":{\"314\":1}}],[\"那就最好重写hashcode方法\",{\"1\":{\"137\":1}}],[\"那就从integercache\",{\"1\":{\"112\":1}}],[\"那么一般情况下\",{\"1\":{\"671\":1}}],[\"那么一致性系统将解决所有操作中导致这个字段值非唯一性的情况\",{\"1\":{\"474\":1}}],[\"那么有了bug就需要修复\",{\"1\":{\"666\":1}}],[\"那么就不要开启一级缓存\",{\"1\":{\"489\":1}}],[\"那么就将有可能读到过去的数据\",{\"1\":{\"467\":1}}],[\"那么将空数据存入缓存中\",{\"1\":{\"486\":1}}],[\"那么将数据存入缓存中\",{\"1\":{\"486\":1}}],[\"那么会将当前插件相关的selector缓存和rule缓存删除\",{\"1\":{\"488\":1}}],[\"那么会默认的缓存中进行匹配\",{\"1\":{\"483\":1}}],[\"那么会从前缀树缓存进行匹配\",{\"1\":{\"483\":1}}],[\"那么其外键相关记录也应该被删除\",{\"1\":{\"474\":1}}],[\"那么无论\",{\"1\":{\"471\":1}}],[\"那么进程\",{\"1\":{\"470\":1}}],[\"那么节点\",{\"1\":{\"467\":1}}],[\"那么写操作将失败\",{\"1\":{\"467\":1}}],[\"那么以不准确的\",{\"1\":{\"467\":1}}],[\"那么同步整个方法可能就显得过分了\",{\"1\":{\"446\":1}}],[\"那么它也是线程安全的\",{\"1\":{\"440\":1}}],[\"那么\",{\"1\":{\"437\":2}}],[\"那么如何判断一个类是无用的类的呢\",{\"1\":{\"402\":1}}],[\"那么年轻代对象会在survivor区进行多次复制\",{\"1\":{\"363\":1}}],[\"那么年轻代对象不经过survivor区\",{\"1\":{\"363\":1}}],[\"那么年轻代与年老代所占比值为1\",{\"1\":{\"363\":1}}],[\"那么两个survivor区与一个eden区的比值为2\",{\"1\":{\"363\":1}}],[\"那么系统中会存在多种不同的object\",{\"1\":{\"289\":1}}],[\"那么由各个类加载器自己取加载的话\",{\"1\":{\"289\":1}}],[\"那么a和b的hashcode\",{\"1\":{\"138\":2}}],[\"那么对每个对象调用hashcode方法必须产生不同的整数结果\",{\"1\":{\"137\":1}}],[\"那么在这两个对象上调用hashcode方法必须产生相同的整数结果\",{\"1\":{\"137\":1}}],[\"前缀树缓存\",{\"1\":{\"493\":1}}],[\"前言\",{\"0\":{\"482\":1,\"503\":1}}],[\"前后一致的\",{\"1\":{\"471\":1}}],[\"前\",{\"1\":{\"466\":1}}],[\"前提是该对象上的等号比较中使用的信息没有被修改\",{\"1\":{\"137\":1}}],[\"前端资源汇总仓库\",{\"1\":{\"16\":3}}],[\"前端精读周刊\",{\"1\":{\"16\":3}}],[\"前端\",{\"1\":{\"15\":1}}],[\"否则\",{\"1\":{\"467\":1}}],[\"否则很容易让人迷惑\",{\"1\":{\"454\":1}}],[\"否则就会被真的回收\",{\"1\":{\"402\":1}}],[\"否则就就调用getobjectclass方法\",{\"1\":{\"136\":1}}],[\"否则获得obj1锁\",{\"1\":{\"368\":1}}],[\"否则获得obj2锁\",{\"1\":{\"368\":1}}],[\"否则增长50\",{\"1\":{\"246\":1}}],[\"否则返回\",{\"1\":{\"98\":1}}],[\"否则返回false\",{\"1\":{\"59\":1,\"60\":1,\"76\":1}}],[\"方便快捷高效\",{\"1\":{\"624\":1}}],[\"方便执行引擎在执行字节码时根据这些对应关系表来调用c\",{\"1\":{\"135\":1}}],[\"方案\",{\"1\":{\"461\":1}}],[\"方式对堆内存进行了划分\",{\"1\":{\"402\":1}}],[\"方法立即返回\",{\"1\":{\"479\":2}}],[\"方法首先调用channel\",{\"1\":{\"479\":1}}],[\"方法已经被虚拟机调用过时\",{\"1\":{\"402\":1}}],[\"方法通知jvm进行一次垃圾回收\",{\"1\":{\"388\":1}}],[\"方法内部调用路径\",{\"1\":{\"377\":1}}],[\"方法执行数据观测\",{\"1\":{\"377\":1}}],[\"方法执行监控\",{\"1\":{\"377\":1}}],[\"方法的线程被阻塞直到延迟时间到或发送缓冲区中的数据发送完毕\",{\"1\":{\"479\":1}}],[\"方法的代码和构造方法\",{\"1\":{\"294\":1}}],[\"方法的对象的\",{\"1\":{\"169\":1}}],[\"方法数据\",{\"1\":{\"294\":1}}],[\"方法区主要回收的是无用的类\",{\"1\":{\"402\":1}}],[\"方法区中的无用类回收\",{\"1\":{\"402\":1}}],[\"方法区中会包含类的信息\",{\"1\":{\"306\":1}}],[\"方法区中会存放静态变量\",{\"1\":{\"305\":1}}],[\"方法区空间不够用了\",{\"1\":{\"388\":1}}],[\"方法区内存溢出\",{\"0\":{\"320\":1}}],[\"方法区指向堆\",{\"0\":{\"305\":1},\"1\":{\"305\":1}}],[\"方法区在jdk\",{\"1\":{\"294\":1}}],[\"方法区是各个线程共享的内存区域\",{\"1\":{\"294\":1}}],[\"方法区只有一个\",{\"1\":{\"294\":1}}],[\"方法区存放方法以及方法的代码\",{\"1\":{\"294\":1}}],[\"方法区存放运行时常量池\",{\"1\":{\"294\":1}}],[\"方法区\",{\"0\":{\"294\":1}}],[\"方法区等名词\",{\"1\":{\"290\":1}}],[\"方法表集合\",{\"1\":{\"277\":1}}],[\"方法会以\",{\"1\":{\"192\":1}}],[\"方法加载具有指定库名的动态库\",{\"1\":{\"192\":1}}],[\"方法将指定的文件名加载为动态库\",{\"1\":{\"188\":1}}],[\"方法启用\",{\"1\":{\"182\":1,\"185\":1}}],[\"方法运行垃圾收集器\",{\"1\":{\"179\":1}}],[\"方法运行任何等待终结的对象的终结方法\",{\"1\":{\"169\":1}}],[\"方法可能会导致\",{\"1\":{\"176\":1}}],[\"方法返回地址\",{\"1\":{\"302\":3}}],[\"方法返回\",{\"1\":{\"176\":1,\"177\":1,\"178\":1}}],[\"方法返回与给定位表示相关的浮点值\",{\"1\":{\"101\":1}}],[\"方法在具有指定环境和工作目录的单独进程中执行指定的字符串命令\",{\"1\":{\"173\":1}}],[\"方法在具有指定环境的单独进程中执行指定的字符串命令\",{\"1\":{\"173\":1}}],[\"方法在具有指定环境的单独进程中执行指定的命令和参数\",{\"1\":{\"173\":1}}],[\"方法在单独的进程中执行指定的命令和参数\",{\"1\":{\"173\":1}}],[\"方法在单独的进程中执行指定的字符串命令\",{\"1\":{\"173\":1}}],[\"方法是调用此方法的常规且方便的方法\",{\"1\":{\"169\":1,\"179\":1,\"192\":1}}],[\"方法是java中的内置函数\",{\"1\":{\"99\":1,\"101\":1}}],[\"方法\",{\"1\":{\"137\":2,\"169\":2,\"179\":1,\"188\":2,\"290\":1,\"294\":1,\"402\":2,\"439\":1,\"444\":1,\"445\":1,\"446\":1,\"479\":1}}],[\"方法访问得到\",{\"1\":{\"115\":1}}],[\"方法如果传递的参数是有限浮点数\",{\"1\":{\"98\":1}}],[\"方法用于检查此float对象的无穷大\",{\"1\":{\"98\":1}}],[\"方法说明\",{\"0\":{\"72\":1,\"92\":1}}],[\"方法创建出来的对象存储在堆区\",{\"1\":{\"67\":1,\"86\":1}}],[\"核心的代码如下\",{\"1\":{\"488\":1}}],[\"核心代码\",{\"0\":{\"134\":1}}],[\"核心方法\",{\"0\":{\"51\":1,\"113\":1,\"151\":1}}],[\"从0到1搭建spring\",{\"0\":{\"530\":1}}],[\"从第一个节点在trienode的children中进行访问\",{\"1\":{\"493\":1}}],[\"从follower节点读\",{\"1\":{\"467\":1}}],[\"从这种偏序\",{\"1\":{\"466\":1}}],[\"从整体\",{\"1\":{\"465\":1}}],[\"从时间轴上可以看到\",{\"1\":{\"464\":1}}],[\"从图上看\",{\"1\":{\"464\":1}}],[\"从各自\",{\"1\":{\"461\":2}}],[\"从理论上讲\",{\"1\":{\"444\":1}}],[\"从而最小化报文传输延时\",{\"1\":{\"479\":1}}],[\"从而实现流量控制\",{\"1\":{\"479\":1}}],[\"从而不符合\",{\"1\":{\"467\":1}}],[\"从而允许其他线程获取锁并获得对方法的访问\",{\"1\":{\"445\":1}}],[\"从而造成内存空间的浪费\",{\"1\":{\"402\":1}}],[\"从而达到为收集器设置的暂停时间目标\",{\"1\":{\"399\":1}}],[\"从而才能确定需要回收的对象\",{\"1\":{\"336\":1}}],[\"从gc\",{\"1\":{\"347\":1}}],[\"从上面的分析可以看出\",{\"1\":{\"311\":1,\"312\":1}}],[\"从方法中返回int类型的数据\",{\"1\":{\"302\":1}}],[\"从\",{\"1\":{\"302\":3}}],[\"从custom\",{\"1\":{\"289\":1}}],[\"从库名到特定文件名的映射是以系统特定的方式完成的\",{\"1\":{\"192\":1}}],[\"从继承的层次来看它就是最顶层根\",{\"1\":{\"133\":1}}],[\"从java9开始弃用\",{\"1\":{\"52\":1}}],[\"文本基于spring\",{\"1\":{\"530\":1}}],[\"文章参看\",{\"1\":{\"463\":1}}],[\"文章参考\",{\"0\":{\"129\":1}}],[\"文件又恢复了\",{\"1\":{\"644\":1}}],[\"文件目录\",{\"0\":{\"616\":1}}],[\"文件\",{\"1\":{\"374\":2,\"644\":1}}],[\"文件中添加两个文件jmxremote\",{\"1\":{\"374\":1}}],[\"文件格式验证\",{\"1\":{\"281\":1}}],[\"文件名参数必须是完整的路径名\",{\"1\":{\"188\":1}}],[\"文艺青年的博客\",{\"1\":{\"15\":1}}],[\"所有命令总结\",{\"1\":{\"663\":1}}],[\"所有推荐使用\",{\"1\":{\"638\":1}}],[\"所有线程都可以安全地调用\",{\"1\":{\"439\":1}}],[\"所见即所得\",{\"1\":{\"624\":1}}],[\"所谓共享变量\",{\"1\":{\"437\":1}}],[\"所指定目录下的类和\",{\"1\":{\"287\":1}}],[\"所存储的对象在方法区的静态区\",{\"1\":{\"127\":1}}],[\"所以需要解决冲突\",{\"1\":{\"672\":1}}],[\"所以需要先在当前新的term提交一条空操作的日志\",{\"1\":{\"467\":1}}],[\"所以我们需要从stash恢复\",{\"1\":{\"666\":1}}],[\"所以我们需要合并两个分支\",{\"1\":{\"662\":1}}],[\"所以有下面这种更简单的办法\",{\"1\":{\"654\":1}}],[\"所以你需要使用上面的git\",{\"1\":{\"651\":1}}],[\"所以首先要从中央服务器哪里得到最新的版本\",{\"1\":{\"631\":1}}],[\"所以存在以下三个对应关系\",{\"1\":{\"531\":1}}],[\"所以netty加上后缀\",{\"1\":{\"479\":1}}],[\"所以两者可以是互补的关系\",{\"1\":{\"475\":1}}],[\"所以很多系统采用因果一致性系统来避免这种问题\",{\"1\":{\"469\":1}}],[\"所以很多文章也就简称\",{\"1\":{\"456\":1}}],[\"所以节点\",{\"1\":{\"467\":1}}],[\"所以此时状态机的状态就可以反应读请求发起时的状态\",{\"1\":{\"467\":1}}],[\"所以此时读取状态机并不能准确反应数据的状态\",{\"1\":{\"467\":1}}],[\"所以任何操作都需要互相比较决定\",{\"1\":{\"466\":1}}],[\"所以它们在这种前提下\",{\"1\":{\"457\":1}}],[\"所以它也是唯一一个没有父类的类\",{\"1\":{\"133\":1}}],[\"所以如果遇到多线程场景\",{\"1\":{\"437\":1}}],[\"所以如果想使用偏向锁\",{\"1\":{\"137\":1}}],[\"所以对这个参数的调优是一个持续的过程\",{\"1\":{\"399\":1}}],[\"所以得先配置一下\",{\"1\":{\"390\":1}}],[\"所以时机是不确定的\",{\"1\":{\"388\":1}}],[\"所以运行一段时间以后会产生\",{\"1\":{\"363\":1}}],[\"所以增大年轻代后\",{\"1\":{\"363\":1}}],[\"所以总体上来\",{\"1\":{\"346\":1}}],[\"所以当递归调用太深的时候\",{\"1\":{\"327\":1}}],[\"所以survivor的存在意义\",{\"1\":{\"314\":1}}],[\"所以虚拟机栈肯定是线程私有的\",{\"1\":{\"296\":1}}],[\"所以没有容量上的限制\",{\"1\":{\"245\":1}}],[\"所以这有一个2222222222222222222\",{\"1\":{\"664\":1}}],[\"所以这仍然是一个顺序一致\",{\"1\":{\"464\":1}}],[\"所以这些钩子可以在jvm关闭的时候进行内存清理\",{\"1\":{\"157\":1}}],[\"所以这里其实也是这样子做的\",{\"1\":{\"116\":1}}],[\"所以这里需要有36个字符才能表示所有不同进制的数字\",{\"1\":{\"111\":1}}],[\"所以锁没有等到synchronized同步块结束时才释放\",{\"1\":{\"143\":1}}],[\"所以锁只能等到synchronized同步块结束时才释放\",{\"1\":{\"141\":1}}],[\"所以关于类的元数据和方法信息可以通过它获得\",{\"1\":{\"136\":1}}],[\"所以真正获取对象的方法为\",{\"1\":{\"136\":1}}],[\"所以在加载object类时就会执行该方法\",{\"1\":{\"135\":1}}],[\"所以其他类继承了object后就可以不用重复实现这些方法\",{\"1\":{\"133\":1}}],[\"所以jvm层面会通过jvm\",{\"1\":{\"110\":1}}],[\"所以最后最大值为3\",{\"1\":{\"91\":1}}],[\"所以\",{\"1\":{\"71\":1,\"91\":1,\"437\":2}}],[\"含义相同\",{\"1\":{\"127\":1}}],[\"低停顿\",{\"1\":{\"346\":1}}],[\"低\",{\"1\":{\"123\":1}}],[\"凡是不在2到36进制范围之间的都会被处理成10进制\",{\"1\":{\"116\":1}}],[\"一点要带文件名\",{\"0\":{\"642\":1}}],[\"一级使用concurrenthashmap实现\",{\"1\":{\"485\":1}}],[\"一级缓存的设计\",{\"0\":{\"485\":1}}],[\"一级缓存\",{\"0\":{\"484\":1}}],[\"一次loop读取的最大消息数\",{\"1\":{\"479\":1}}],[\"一次磁盘写\",{\"1\":{\"467\":1}}],[\"一次rtt\",{\"1\":{\"467\":2}}],[\"一次只能有一个线程可以访问同步方法\",{\"1\":{\"445\":1}}],[\"一定是先看到request1\",{\"1\":{\"465\":1}}],[\"一直没有响应\",{\"1\":{\"460\":1}}],[\"一直执行gc循环\",{\"1\":{\"398\":1}}],[\"一条链\",{\"1\":{\"459\":1}}],[\"一些修复bug分支不需要推送到远程去\",{\"1\":{\"671\":1}}],[\"一些情况下他是做不到的\",{\"1\":{\"456\":1}}],[\"一些常见的误解\",{\"1\":{\"456\":1}}],[\"一些特殊的大的对象会直接分配到old区\",{\"1\":{\"310\":1}}],[\"一词中\",{\"1\":{\"455\":1}}],[\"一\",{\"1\":{\"448\":1}}],[\"一书中给出如下定义\",{\"1\":{\"435\":2}}],[\"一选择\",{\"1\":{\"341\":1}}],[\"一旦eden满了\",{\"1\":{\"314\":1}}],[\"一旦发生full\",{\"1\":{\"314\":1}}],[\"一般公司用svn的比较多\",{\"1\":{\"631\":1}}],[\"一般特指数据库的一致性约束\",{\"1\":{\"471\":1}}],[\"一般是从集群的节点中随机挑选一个进行访问\",{\"1\":{\"467\":1}}],[\"一般是单机维度的\",{\"1\":{\"455\":1}}],[\"一般就指它\",{\"1\":{\"466\":1}}],[\"一般以下几种情况会发生垃圾回收\",{\"1\":{\"388\":1}}],[\"一般dump下来的文件可以结合工具来分析\",{\"1\":{\"369\":1}}],[\"一般在开发中\",{\"1\":{\"369\":1}}],[\"一般在3000个~5000个\",{\"1\":{\"363\":1}}],[\"一般old区都是年龄比较大的对象\",{\"1\":{\"311\":1,\"312\":1}}],[\"一般情况下不允许在上面干活\",{\"1\":{\"665\":1}}],[\"一般情况下这个值设置到100ms或者200ms都是可以的\",{\"1\":{\"399\":1}}],[\"一般情况下\",{\"1\":{\"310\":1}}],[\"一般对象和数组的创建会在堆中分配内存空间\",{\"1\":{\"309\":1}}],[\"一块是eden区\",{\"1\":{\"309\":1}}],[\"一块是堆区\",{\"1\":{\"309\":1}}],[\"一块是非堆区\",{\"1\":{\"309\":1}}],[\"一种是pathpattern\",{\"1\":{\"491\":1}}],[\"一种是antpathmatch\",{\"1\":{\"491\":1}}],[\"一种是遇见异常\",{\"1\":{\"302\":1}}],[\"一种是遇到方法返回的字节码指令\",{\"1\":{\"302\":1}}],[\"一种说法是zookeeper是最终一致性\",{\"1\":{\"465\":1}}],[\"一种基于treemap的navigableset实现\",{\"1\":{\"243\":1}}],[\"一致性完全与数据库规则相关\",{\"1\":{\"471\":1}}],[\"一致性也是分等级的\",{\"1\":{\"460\":1}}],[\"一致性要求的是一致\",{\"1\":{\"460\":1}}],[\"一致性指的是多个副本对外呈现的状态\",{\"1\":{\"456\":1}}],[\"一致性是他的目标\",{\"1\":{\"456\":1}}],[\"一致性这个词在不同的领域具有不同的含义\",{\"1\":{\"454\":1}}],[\"一致性名词\",{\"1\":{\"453\":1}}],[\"一致性\",{\"1\":{\"138\":1,\"454\":1,\"456\":1,\"471\":1,\"475\":1}}],[\"一位的位置\",{\"1\":{\"122\":2}}],[\"一共有3个tostring方法\",{\"1\":{\"116\":1}}],[\"一个连接的远端关闭时本地端是否关闭\",{\"1\":{\"479\":1}}],[\"一个数据被更新后\",{\"1\":{\"468\":1}}],[\"一个事务包含多个读\",{\"1\":{\"468\":1}}],[\"一个个的执行\",{\"1\":{\"468\":1}}],[\"一个较为简单通用的策略就是\",{\"1\":{\"467\":1}}],[\"一个朋友才刚看到第一条\",{\"1\":{\"464\":1}}],[\"一个一个处理就行了\",{\"1\":{\"461\":1}}],[\"一个对象是否需要是线程安全的\",{\"1\":{\"435\":1}}],[\"一个对象内存的消耗大小\",{\"1\":{\"381\":1}}],[\"一个对象怎么知道它是由哪个类创建出来的\",{\"1\":{\"306\":1}}],[\"一个survivor区占整个年轻代的1\",{\"1\":{\"363\":1}}],[\"一个是survivor区\",{\"1\":{\"309\":1}}],[\"一个是young区\",{\"1\":{\"309\":1}}],[\"一个是old区\",{\"1\":{\"309\":1}}],[\"一个是将float值转化为float对象\",{\"1\":{\"95\":1}}],[\"一个是将字符串转为单精度浮点数\",{\"1\":{\"95\":1}}],[\"一个java对象在内存中包括3个部分\",{\"1\":{\"307\":1}}],[\"一个java线程的运行\",{\"1\":{\"296\":1}}],[\"一个处理器只会执行一条线程中的指令\",{\"1\":{\"297\":1}}],[\"一个方法调用完成\",{\"1\":{\"296\":1}}],[\"一个线程可以执行多少个方法\",{\"1\":{\"296\":1}}],[\"一个线程的创建代表一个栈\",{\"1\":{\"296\":1}}],[\"一个规格化的32位浮点数x的真值表示为\",{\"1\":{\"89\":1}}],[\"一个将string类型的数字转为double类型的数字和将double数字装箱为double类型\",{\"1\":{\"74\":1}}],[\"一个程序员\",{\"1\":{\"15\":1}}],[\"一个\",{\"1\":{\"15\":1,\"440\":1,\"467\":1}}],[\"系统负载保护等\",{\"1\":{\"503\":1}}],[\"系统中的所有进程\",{\"1\":{\"466\":1}}],[\"系统\",{\"1\":{\"464\":1}}],[\"系统属性可以通过\",{\"1\":{\"115\":1}}],[\"系统迷\",{\"1\":{\"15\":1}}],[\"生命周期跟虚拟机一样\",{\"1\":{\"295\":1}}],[\"生命周期是跟虚拟机一样的\",{\"1\":{\"294\":1}}],[\"生成堆转储快照\",{\"1\":{\"369\":1}}],[\"生成针对该对象的标记\",{\"1\":{\"137\":1}}],[\"生成cache值的缓存空间\",{\"1\":{\"112\":1}}],[\"生活吐槽\",{\"1\":{\"15\":1}}],[\"取决于它是否被多个线程访问\",{\"1\":{\"435\":1}}],[\"取两者之间的和\",{\"1\":{\"114\":1}}],[\"取两者之间的最小值\",{\"1\":{\"114\":1}}],[\"取两者之间的最大值\",{\"1\":{\"114\":1}}],[\"取值是直接从integercache的cache中取值\",{\"1\":{\"112\":1}}],[\"取值可分为3种情况\",{\"1\":{\"70\":1}}],[\"取最大值\",{\"1\":{\"112\":1}}],[\"避免每次垃圾回收完成后jvm重新分配内存\",{\"1\":{\"363\":1}}],[\"避免重复的实例化和回收\",{\"1\":{\"112\":1}}],[\"避免重复创建对象\",{\"1\":{\"62\":1}}],[\"避免了使用除法或求余等操作\",{\"1\":{\"111\":1}}],[\"zettir是hendrik\",{\"1\":{\"611\":1}}],[\"zettlr与typora配置简单\",{\"1\":{\"617\":1}}],[\"zettlr可以打开多个文件夹作为工作区\",{\"1\":{\"614\":1}}],[\"zettlr的设置基本与typora一样\",{\"1\":{\"613\":1}}],[\"zettlr的使用\",{\"0\":{\"613\":1}}],[\"zettlr下载地址\",{\"0\":{\"612\":1}}],[\"zettlr\",{\"0\":{\"610\":1},\"1\":{\"612\":3,\"619\":1}}],[\"zerodatetimebehavior=converttonull\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"zxvf\",{\"1\":{\"595\":1,\"596\":1}}],[\"zaxxer\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"zip<\",{\"1\":{\"552\":2}}],[\"zing的hashcode是基于地址的\",{\"1\":{\"137\":1}}],[\"zookeeperprogrammers\",{\"1\":{\"476\":1}}],[\"zookeeper中针对同一个follower\",{\"1\":{\"465\":1}}],[\"zookeeper的zab协议类似于paxos协议\",{\"1\":{\"465\":1}}],[\"zookeeper\",{\"0\":{\"465\":1},\"1\":{\"465\":6,\"472\":1,\"476\":1}}],[\"zookeeper和\",{\"1\":{\"458\":1}}],[\"zhihu\",{\"1\":{\"476\":1}}],[\"zhuanlan\",{\"1\":{\"476\":1}}],[\"zh\",{\"1\":{\"460\":1}}],[\"zkguarantees\",{\"1\":{\"476\":1}}],[\"zk\",{\"1\":{\"453\":1}}],[\"z\",{\"1\":{\"111\":1}}],[\"qps\",{\"1\":{\"602\":1,\"603\":1,\"604\":1}}],[\"qos\",{\"1\":{\"552\":10}}],[\"quorum\",{\"1\":{\"467\":1}}],[\"queried\",{\"1\":{\"460\":3}}],[\"queuesize>\",{\"1\":{\"552\":3}}],[\"queues\",{\"1\":{\"143\":1}}],[\"queue\",{\"0\":{\"214\":1,\"228\":1,\"244\":1,\"263\":1},\"1\":{\"141\":1,\"143\":8,\"552\":5}}],[\"quit\",{\"1\":{\"377\":1}}],[\"q\",{\"1\":{\"111\":1}}],[\"93\",{\"1\":{\"604\":1}}],[\"91\",{\"1\":{\"603\":2}}],[\"9195\",{\"1\":{\"600\":4}}],[\"95\",{\"1\":{\"603\":1,\"604\":1}}],[\"92\",{\"1\":{\"602\":1,\"603\":1}}],[\"90\",{\"1\":{\"602\":2,\"603\":1,\"604\":1}}],[\"9090\",{\"1\":{\"369\":1}}],[\"96\",{\"1\":{\"119\":1,\"603\":1,\"604\":1}}],[\"98\",{\"1\":{\"114\":4}}],[\"97\",{\"1\":{\"114\":4}}],[\"999999999\",{\"1\":{\"111\":1}}],[\"99999999\",{\"1\":{\"111\":1}}],[\"9999999\",{\"1\":{\"111\":1}}],[\"999999\",{\"1\":{\"111\":1,\"134\":1}}],[\"99999\",{\"1\":{\"111\":1}}],[\"9999\",{\"1\":{\"111\":1}}],[\"999\",{\"1\":{\"111\":1}}],[\"99\",{\"1\":{\"111\":1,\"118\":2,\"602\":1,\"603\":1,\"604\":3}}],[\"9\",{\"0\":{\"143\":1,\"177\":1,\"349\":1,\"474\":1},\"1\":{\"111\":22,\"294\":1,\"302\":2,\"374\":1,\"442\":1,\"476\":1,\"534\":1}}],[\"9e\",{\"1\":{\"71\":1}}],[\"url\",{\"1\":{\"547\":1,\"550\":1,\"551\":1,\"679\":1}}],[\"url>\",{\"1\":{\"537\":6}}],[\"uriutils\",{\"1\":{\"509\":1}}],[\"uripaths\",{\"1\":{\"492\":4}}],[\"uri\",{\"1\":{\"486\":3,\"493\":1}}],[\"utf\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"552\":1,\"561\":1,\"566\":1,\"690\":1}}],[\"util\",{\"1\":{\"443\":1,\"555\":2,\"556\":2,\"557\":2}}],[\"uk\",{\"1\":{\"460\":1}}],[\"ui\",{\"1\":{\"416\":1}}],[\"u2\",{\"1\":{\"277\":11}}],[\"u4\",{\"1\":{\"277\":1}}],[\"upstream\",{\"1\":{\"672\":1}}],[\"updating\",{\"1\":{\"393\":1}}],[\"updatetrienode\",{\"1\":{\"492\":1}}],[\"updateruletriecache\",{\"1\":{\"488\":1,\"492\":1}}],[\"updatecachedata\",{\"1\":{\"488\":1,\"494\":1,\"497\":1}}],[\"updateselectortriecache\",{\"1\":{\"488\":1,\"492\":1}}],[\"updates\",{\"1\":{\"460\":1}}],[\"updated\",{\"1\":{\"460\":1}}],[\"update\",{\"1\":{\"137\":2,\"393\":2,\"460\":1,\"492\":5,\"494\":2}}],[\"upcall\",{\"1\":{\"139\":1}}],[\"up\",{\"1\":{\"139\":1,\"143\":1,\"291\":1,\"294\":1,\"295\":1,\"460\":1}}],[\"usr\",{\"1\":{\"586\":1}}],[\"us\",{\"1\":{\"393\":2,\"462\":1}}],[\"using\",{\"1\":{\"139\":1,\"141\":1,\"420\":1,\"555\":1,\"556\":1,\"557\":1}}],[\"usage\",{\"1\":{\"137\":2,\"376\":1,\"398\":1}}],[\"usdt2\",{\"1\":{\"136\":6}}],[\"user\",{\"1\":{\"547\":1,\"549\":1,\"562\":1,\"591\":1,\"647\":2}}],[\"username\",{\"1\":{\"547\":2,\"548\":1,\"549\":1,\"550\":2,\"551\":2,\"567\":1,\"647\":1}}],[\"user=0\",{\"1\":{\"363\":1,\"391\":1}}],[\"useunicode=true\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"useful\",{\"1\":{\"137\":1,\"141\":1,\"555\":1,\"556\":1,\"557\":1}}],[\"usessl=false\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"uses\",{\"1\":{\"137\":1}}],[\"useless\",{\"1\":{\"137\":1}}],[\"usebiasedlocking\",{\"1\":{\"137\":1,\"141\":1,\"143\":1}}],[\"used\",{\"1\":{\"110\":2,\"137\":1,\"291\":1,\"294\":1,\"491\":1}}],[\"use\",{\"1\":{\"79\":1,\"116\":1,\"124\":1,\"125\":1,\"137\":1,\"143\":3,\"298\":1,\"398\":1,\"555\":1,\"556\":1,\"557\":1}}],[\"undertowwebserver\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"undertow\",{\"1\":{\"555\":5,\"556\":5,\"557\":5}}],[\"undertow<\",{\"1\":{\"545\":1,\"566\":1}}],[\"understanding\",{\"1\":{\"393\":1}}],[\"undefined\",{\"1\":{\"297\":1}}],[\"unlocked\",{\"1\":{\"143\":1}}],[\"unlink\",{\"1\":{\"143\":2}}],[\"unlikely\",{\"1\":{\"143\":1}}],[\"uncommitted\",{\"1\":{\"468\":1}}],[\"uncomment\",{\"1\":{\"143\":1}}],[\"unchecked\",{\"1\":{\"110\":1}}],[\"unpark\",{\"1\":{\"141\":1,\"143\":5}}],[\"until\",{\"1\":{\"139\":1,\"143\":1}}],[\"unresolved\",{\"1\":{\"139\":1}}],[\"unguarded\",{\"1\":{\"137\":1}}],[\"unsatisfiedlinkerror\",{\"1\":{\"187\":1,\"191\":1}}],[\"unsafe\",{\"1\":{\"143\":1}}],[\"unstable\",{\"1\":{\"137\":1}}],[\"unsigned\",{\"1\":{\"123\":1,\"137\":2}}],[\"unexpected\",{\"1\":{\"137\":1,\"492\":1}}],[\"universe\",{\"1\":{\"137\":4,\"139\":1}}],[\"unbox\",{\"1\":{\"137\":1}}],[\"u\",{\"1\":{\"111\":1,\"679\":1}}],[\"为基准的\",{\"1\":{\"467\":1}}],[\"为读取\",{\"1\":{\"464\":1}}],[\"为了方便测试\",{\"1\":{\"565\":1}}],[\"为了测试\",{\"1\":{\"554\":1}}],[\"为了确保\",{\"1\":{\"467\":1}}],[\"为了说明这个用例\",{\"1\":{\"446\":1}}],[\"为了更好地理解这种方法\",{\"1\":{\"439\":1}}],[\"为了线程切换后能够\",{\"1\":{\"297\":1}}],[\"为目标的收集器\",{\"1\":{\"346\":1}}],[\"为什么需要两个survivor区\",{\"1\":{\"314\":1}}],[\"为什么需要survivor区\",{\"1\":{\"314\":1}}],[\"为什么要使用arraylist\",{\"0\":{\"198\":1}}],[\"为该栈中的栈帧\",{\"1\":{\"296\":1}}],[\"为类的静态变量分配内存\",{\"1\":{\"282\":1}}],[\"为java开发者提供了通用的容器\",{\"1\":{\"235\":1}}],[\"为不相等的对象生成不同的整数结果可能会提高哈希表的性能\",{\"1\":{\"137\":1}}],[\"为2^31\",{\"1\":{\"110\":1}}],[\"为\",{\"1\":{\"110\":1,\"467\":2}}],[\"为false\",{\"1\":{\"107\":1}}],[\"为true时\",{\"1\":{\"479\":1}}],[\"为true\",{\"1\":{\"107\":1}}],[\"创建ssh\",{\"0\":{\"677\":1}}],[\"创建一个dev分支\",{\"1\":{\"665\":1}}],[\"创建+切换分支\",{\"1\":{\"663\":1}}],[\"创建分支\",{\"0\":{\"662\":1},\"1\":{\"663\":1}}],[\"创建与合并分支\",{\"0\":{\"661\":1}}],[\"创建的\",{\"1\":{\"173\":1}}],[\"创建的对象都存储在堆区\",{\"1\":{\"49\":1}}],[\"创建objectwaiter对象\",{\"1\":{\"143\":1}}],[\"创建出来\",{\"1\":{\"107\":1,\"127\":1}}],[\"其主要的数据结构如下\",{\"1\":{\"496\":1}}],[\"其包含acid+cap设计\",{\"1\":{\"474\":1}}],[\"其实有更简单的办法\",{\"1\":{\"654\":1}}],[\"其实节点\",{\"1\":{\"467\":1}}],[\"其实\",{\"1\":{\"465\":1}}],[\"其实是一类协议\",{\"1\":{\"457\":1}}],[\"其实不然\",{\"1\":{\"456\":1}}],[\"其实基本没什么机会用得到这个命令\",{\"1\":{\"179\":1}}],[\"其他的情况都不会将数据缓存到一级缓存\",{\"1\":{\"489\":1}}],[\"其他的如最终一致都是弱一致性\",{\"1\":{\"460\":1}}],[\"其他channel默认值为1\",{\"1\":{\"479\":1}}],[\"其他对象作为锁\",{\"0\":{\"447\":1}}],[\"其他线程将保持阻塞状态\",{\"1\":{\"445\":1}}],[\"其他参数\",{\"0\":{\"359\":1}}],[\"其他数据区域是每个线程\",{\"1\":{\"291\":1}}],[\"其他方式大家可以自己了解\",{\"1\":{\"289\":1}}],[\"其始于jdk\",{\"1\":{\"235\":1}}],[\"其中new\",{\"1\":{\"509\":1}}],[\"其中的transform方法就是shenyu将应用资源交予sentinel的实现\",{\"1\":{\"509\":1}}],[\"其中selector\",{\"1\":{\"496\":1}}],[\"其中lfumap的key是path\",{\"1\":{\"485\":2}}],[\"其中一级缓存和二级缓存都是需要配置开启的\",{\"1\":{\"482\":1}}],[\"其中一些数据区是在\",{\"1\":{\"291\":1}}],[\"其中bytebuf和bytebufholder为实际大小\",{\"1\":{\"479\":1}}],[\"其中包含多个并发集合\",{\"1\":{\"443\":1}}],[\"其中主内存中的变量为共享变量\",{\"1\":{\"436\":1}}],[\"其中第\",{\"1\":{\"286\":1}}],[\"其中\",{\"1\":{\"135\":1,\"173\":1,\"467\":1}}],[\"其中低位为\",{\"1\":{\"128\":1}}],[\"其中每个参数和结果都被解释为无符号值\",{\"1\":{\"125\":1}}],[\"其中每个参数和结果都被解释为一个无符号值\",{\"1\":{\"124\":1}}],[\"其中尾数域所表示的值是1\",{\"1\":{\"89\":1}}],[\"其余的存储在jvm堆区\",{\"1\":{\"107\":1}}],[\"精度问题会导致\",{\"1\":{\"102\":1}}],[\"不然会创建分支\",{\"0\":{\"642\":1}}],[\"不开启动态刷新\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"不是替代关系\",{\"1\":{\"475\":1}}],[\"不是classloader子类\",{\"1\":{\"287\":1}}],[\"不保证在任意时刻任意节点上的同一份数据都是相同的\",{\"1\":{\"470\":1}}],[\"不满足linearizability\",{\"1\":{\"468\":1}}],[\"不使用leader\",{\"1\":{\"467\":1}}],[\"不处理向\",{\"1\":{\"467\":1}}],[\"不准确\",{\"1\":{\"467\":1}}],[\"不需要与全局时钟一致\",{\"1\":{\"466\":1}}],[\"不需要连续\",{\"1\":{\"347\":1}}],[\"不一定拿到数据就早\",{\"1\":{\"464\":1}}],[\"不考虑突然故障情况\",{\"1\":{\"461\":1}}],[\"不注册也就罢了\",{\"1\":{\"460\":1}}],[\"不过这样的错误信息也不影响分支是错误\",{\"1\":{\"664\":1}}],[\"不过提base之前要先说下\",{\"1\":{\"471\":1}}],[\"不过最终一致性的要求非常低\",{\"1\":{\"470\":1}}],[\"不过因为大多数场景下用户可以接受\",{\"1\":{\"470\":1}}],[\"不过相应地\",{\"1\":{\"467\":1}}],[\"不过没关系\",{\"1\":{\"464\":1}}],[\"不过一致性不保证正确性\",{\"1\":{\"464\":1}}],[\"不过小站而已\",{\"1\":{\"460\":1}}],[\"不过会多出一些例子来帮助理解\",{\"1\":{\"453\":1}}],[\"不太关心库存为啥显示\",{\"1\":{\"460\":1}}],[\"不算分布式领域\",{\"1\":{\"455\":1}}],[\"不变性是实现线程安全的另一种方法\",{\"1\":{\"440\":1}}],[\"不变性是一个功能强大\",{\"1\":{\"440\":1}}],[\"不管什么\",{\"1\":{\"402\":1}}],[\"不管重复多少次a\",{\"1\":{\"138\":1}}],[\"不断调优暂停时间目标\",{\"1\":{\"399\":1}}],[\"不要手动设置新生代和老年代的大小\",{\"1\":{\"399\":1}}],[\"不包含对其他对象的引用\",{\"1\":{\"381\":1}}],[\"不会反向回跳\",{\"1\":{\"466\":1}}],[\"不会是乱序\",{\"1\":{\"464\":1}}],[\"不会导致空间碎片\",{\"1\":{\"347\":1}}],[\"不会采取进一步的操作\",{\"1\":{\"144\":1}}],[\"不同版本需要制定具体的版本进行编译\",{\"1\":{\"691\":1}}],[\"不同节点上的同一份数据总是在向趋同的方向变化\",{\"1\":{\"470\":1}}],[\"不同之处在于\",{\"1\":{\"441\":1}}],[\"不同的朋友将在不同的时间看到你的信息\",{\"1\":{\"464\":1}}],[\"不同的引用\",{\"1\":{\"402\":1}}],[\"不同的是采用\",{\"1\":{\"344\":1}}],[\"不同情况下会不一样\",{\"1\":{\"399\":1}}],[\"不同机器的值可能不一样\",{\"1\":{\"110\":1}}],[\"不仅仅意味着它只会使用一个cpu或者一条收集线程去完成垃圾收集工作\",{\"1\":{\"341\":1}}],[\"不如做个标记再清理\",{\"1\":{\"339\":1}}],[\"不用再频繁切换工作区\",{\"1\":{\"617\":1}}],[\"不用再重新创建对象\",{\"1\":{\"128\":1}}],[\"不用的话这样折腾来折腾去\",{\"1\":{\"296\":1}}],[\"不可能被访问\",{\"1\":{\"486\":3}}],[\"不可变的实现\",{\"0\":{\"440\":1}}],[\"不可达的对象一定要被回收吗\",{\"1\":{\"402\":1}}],[\"不可重复的集合\",{\"1\":{\"243\":1}}],[\"不可改变\",{\"1\":{\"128\":1}}],[\"不允许重复的元素插入\",{\"1\":{\"242\":1}}],[\"不能与在线图床整合\",{\"1\":{\"618\":1}}],[\"不能无限生成\",{\"1\":{\"327\":1}}],[\"不能再多线程环境下使用\",{\"1\":{\"245\":1}}],[\"不能保证插入和输出的顺序一致\",{\"1\":{\"242\":1}}],[\"不能用浮点数作为循环变量\",{\"1\":{\"102\":1}}],[\"不成功则尝试从全局中获取\",{\"1\":{\"141\":1}}],[\"不必重新实例化\",{\"1\":{\"112\":1}}],[\"不正常或正常\",{\"1\":{\"76\":1}}],[\"请继续浏览\",{\"1\":{\"644\":1,\"657\":1,\"679\":1}}],[\"请求端分别使用\",{\"1\":{\"589\":1}}],[\"请依据应用的线程所需内存大小进行调整\",{\"1\":{\"363\":1}}],[\"请注意\",{\"1\":{\"178\":1}}],[\"请使用bigdecimal\",{\"1\":{\"102\":1}}],[\"请联系我\",{\"1\":{\"16\":1}}],[\"到底在说什么\",{\"1\":{\"448\":1}}],[\"到底什么是线程安全\",{\"1\":{\"448\":1}}],[\"到底什么是线程安全和线程不安全\",{\"0\":{\"434\":1}}],[\"到\",{\"1\":{\"101\":2}}],[\"传统分布式\",{\"1\":{\"459\":1}}],[\"传递性\",{\"1\":{\"138\":1}}],[\"传递的参数被视为浮点值的表示\",{\"1\":{\"101\":1}}],[\"传入的两个boolean值只要有一个为true则返回true\",{\"1\":{\"60\":1}}],[\"浮点型数据判断相等不能直接使用\",{\"1\":{\"102\":1}}],[\"浮点数不能为循环因子\",{\"1\":{\"102\":1}}],[\"浮点数由三部分组成\",{\"1\":{\"89\":1}}],[\"浮点\",{\"1\":{\"101\":1}}],[\"类型的一致性算法\",{\"1\":{\"467\":1}}],[\"类型为引用类型\",{\"1\":{\"304\":1}}],[\"类中定义私有字段\",{\"1\":{\"441\":1}}],[\"类中的内容\",{\"1\":{\"290\":1}}],[\"类变量\",{\"1\":{\"437\":1}}],[\"类需要同时满\",{\"1\":{\"402\":1}}],[\"类名称\",{\"1\":{\"381\":1}}],[\"类加载情况等\",{\"1\":{\"371\":1}}],[\"类加载器\",{\"1\":{\"331\":1,\"334\":1}}],[\"类加载后进\",{\"1\":{\"294\":1}}],[\"类加载机制的装载过程已经完成\",{\"1\":{\"296\":1}}],[\"类加载机制图解\",{\"0\":{\"285\":1}}],[\"类加载机制\",{\"0\":{\"278\":1}}],[\"类信息\",{\"0\":{\"294\":1},\"1\":{\"294\":1}}],[\"类\",{\"1\":{\"289\":1,\"441\":2,\"444\":1,\"447\":1}}],[\"类装载器classloader\",{\"0\":{\"286\":1}}],[\"类索引\",{\"1\":{\"277\":1}}],[\"类文件所对应的对象class\",{\"1\":{\"279\":1}}],[\"类文件字节码流静态存储结构\",{\"1\":{\"279\":1}}],[\"类文件的信息交给jvm\",{\"1\":{\"279\":1}}],[\"类文件到虚拟机\",{\"0\":{\"278\":1}}],[\"类文件\",{\"0\":{\"277\":1}}],[\"类object定义的hashcode方法确实为不同的对象返回不同的整数\",{\"1\":{\"137\":1}}],[\"类的线程安全实现\",{\"1\":{\"444\":1}}],[\"类的对象的数量\",{\"1\":{\"381\":1}}],[\"类的\",{\"1\":{\"101\":1}}],[\"类图\",{\"0\":{\"48\":1,\"66\":1,\"85\":1,\"106\":1,\"133\":1,\"150\":1}}],[\"即jar包\",{\"1\":{\"537\":1}}],[\"即基本可用\",{\"1\":{\"473\":1}}],[\"即可\",{\"1\":{\"672\":1}}],[\"即可读取状态机中的数据返回\",{\"1\":{\"467\":1}}],[\"即可查看资源占用率\",{\"1\":{\"419\":1}}],[\"即etcd\",{\"1\":{\"467\":1}}],[\"即\",{\"1\":{\"467\":1}}],[\"即顺序一致性\",{\"1\":{\"465\":1}}],[\"即要求任何一次读都能读到最新数据\",{\"1\":{\"464\":1}}],[\"即要想使用里面的各种内容\",{\"1\":{\"296\":1}}],[\"即对用户来说\",{\"1\":{\"464\":1,\"466\":1}}],[\"即a1在b1之前运行\",{\"1\":{\"463\":1}}],[\"即程序在同一处理器\",{\"1\":{\"463\":1}}],[\"即数个线性一致单对象历史的组合也是线性一致的\",{\"1\":{\"460\":1}}],[\"即强一致\",{\"1\":{\"456\":1}}],[\"即多个提议者达成共识的过程\",{\"1\":{\"456\":1}}],[\"即怎么保证多个核上的cpu\",{\"1\":{\"455\":1}}],[\"即该对象被gc之后所能回收到内存的总和\",{\"1\":{\"381\":1}}],[\"即同时多少个线程一起进行垃圾回收\",{\"1\":{\"363\":1}}],[\"即在示例配置下\",{\"1\":{\"363\":1}}],[\"即在00000000001\",{\"1\":{\"70\":1}}],[\"即新生代中eden\",{\"1\":{\"314\":1}}],[\"即垃圾收集\",{\"1\":{\"310\":1}}],[\"即每个方法对应一个栈帧\",{\"1\":{\"296\":1}}],[\"即时编译器编译后的代码等数据\",{\"1\":{\"294\":1}}],[\"即使在可达性分析法中不可达的对象\",{\"1\":{\"402\":1}}],[\"即使编译器编译之后的代码\",{\"0\":{\"294\":1},\"1\":{\"294\":1}}],[\"即使没有显式调用\",{\"1\":{\"179\":1}}],[\"即主要用来存放键值对\",{\"1\":{\"248\":1,\"251\":1}}],[\"即存取顺序不一致\",{\"1\":{\"241\":1,\"248\":1}}],[\"即随机数生成器\",{\"1\":{\"137\":1}}],[\"即等于零\",{\"1\":{\"122\":2}}],[\"即低位\",{\"1\":{\"120\":1}}],[\"即正无穷大或负无穷大\",{\"1\":{\"98\":1}}],[\"wg\",{\"1\":{\"585\":1,\"586\":1}}],[\"w3\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"wrk\",{\"1\":{\"584\":1,\"585\":1,\"586\":4,\"599\":1,\"600\":4}}],[\"written\",{\"1\":{\"143\":1,\"273\":1,\"298\":1}}],[\"writetimeout\",{\"1\":{\"592\":1,\"593\":1}}],[\"writeridletime\",{\"1\":{\"592\":1,\"593\":1}}],[\"writebufferlowwatermark\",{\"1\":{\"591\":2}}],[\"writebufferhighwatermark\",{\"1\":{\"591\":2}}],[\"writespincount\",{\"1\":{\"591\":2}}],[\"writes\",{\"1\":{\"470\":1}}],[\"write\",{\"1\":{\"139\":2,\"464\":4,\"470\":1,\"479\":3}}],[\"wrappers\",{\"1\":{\"143\":1}}],[\"what\",{\"1\":{\"448\":1}}],[\"when\",{\"1\":{\"143\":1,\"189\":1,\"193\":1,\"291\":3,\"460\":3,\"491\":2}}],[\"where\",{\"1\":{\"143\":1}}],[\"which\",{\"1\":{\"143\":2,\"295\":1}}],[\"while\",{\"1\":{\"116\":1,\"120\":2,\"141\":1,\"143\":3,\"318\":1,\"322\":1,\"368\":2,\"555\":1,\"556\":1,\"557\":1}}],[\"wouldn\",{\"1\":{\"143\":1}}],[\"won\",{\"1\":{\"139\":1}}],[\"working\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"workercount\",{\"1\":{\"591\":1}}],[\"worker\",{\"1\":{\"393\":2}}],[\"workers\",{\"1\":{\"393\":1}}],[\"world\",{\"1\":{\"162\":1,\"166\":1,\"346\":2,\"393\":1,\"402\":1,\"558\":1,\"571\":1}}],[\"worst\",{\"1\":{\"143\":1}}],[\"worth\",{\"1\":{\"137\":1}}],[\"words\",{\"1\":{\"491\":3}}],[\"word\",{\"1\":{\"137\":1}}],[\"warn\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"warning\",{\"1\":{\"137\":1}}],[\"water\",{\"1\":{\"479\":2}}],[\"watcher\",{\"1\":{\"508\":1,\"509\":1}}],[\"watch\",{\"1\":{\"377\":1}}],[\"wake\",{\"1\":{\"143\":1}}],[\"want\",{\"1\":{\"143\":2,\"174\":2}}],[\"wasnotified\",{\"1\":{\"143\":3}}],[\"was\",{\"1\":{\"143\":4}}],[\"walk\",{\"1\":{\"141\":1}}],[\"waiters\",{\"1\":{\"143\":3}}],[\"waiters++\",{\"1\":{\"143\":1}}],[\"waited\",{\"1\":{\"143\":10}}],[\"waiting\",{\"1\":{\"143\":6}}],[\"wait源码如下\",{\"1\":{\"143\":1}}],[\"wait方法是让线程等待\",{\"1\":{\"143\":1}}],[\"wait方法\",{\"0\":{\"143\":1},\"1\":{\"143\":2}}],[\"waitsetlock\",{\"1\":{\"141\":6,\"143\":6}}],[\"waitset\",{\"1\":{\"141\":4,\"143\":7}}],[\"waitset队列时不是取第一个而是取所有\",{\"1\":{\"142\":1}}],[\"waitset队列中第一个objectwaiter对象\",{\"1\":{\"141\":1}}],[\"waitset队列锁将objectwaiter对象添加到该队列中\",{\"1\":{\"143\":1}}],[\"waitset队列锁\",{\"1\":{\"141\":2}}],[\"waitset队列对象\",{\"1\":{\"141\":1}}],[\"wait\",{\"1\":{\"134\":5,\"135\":1,\"141\":3,\"143\":33}}],[\"wait等常用方法\",{\"1\":{\"133\":1}}],[\"webserverfactoryenabled\",{\"1\":{\"591\":1}}],[\"webclient配置\",{\"0\":{\"592\":1}}],[\"webclient\",{\"0\":{\"604\":1},\"1\":{\"589\":1,\"592\":1}}],[\"web<\",{\"1\":{\"545\":1,\"566\":1}}],[\"web\",{\"1\":{\"491\":1,\"547\":1,\"550\":1,\"551\":1,\"555\":4,\"556\":4,\"557\":4,\"558\":3,\"562\":1,\"569\":3}}],[\"web容器比如tomcat\",{\"1\":{\"361\":1}}],[\"weak\",{\"1\":{\"460\":1}}],[\"were\",{\"1\":{\"143\":3}}],[\"weight\",{\"1\":{\"137\":1,\"143\":2}}],[\"we\",{\"1\":{\"137\":8,\"139\":3,\"141\":4,\"143\":18,\"174\":2}}],[\"wecaht\",{\"1\":{\"3\":1}}],[\"www\",{\"1\":{\"129\":1,\"363\":1,\"378\":1,\"413\":1,\"420\":1,\"448\":5,\"455\":1,\"460\":1,\"462\":1,\"467\":2,\"476\":3,\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1,\"612\":1}}],[\"w\",{\"1\":{\"111\":1,\"302\":1,\"464\":8}}],[\"wiretap\",{\"1\":{\"592\":1,\"593\":1}}],[\"windowtinylfumap<>\",{\"1\":{\"491\":1}}],[\"windows\",{\"1\":{\"189\":2,\"193\":2,\"611\":1,\"621\":1,\"623\":1,\"692\":1}}],[\"win\",{\"1\":{\"416\":1}}],[\"wide\",{\"1\":{\"297\":1}}],[\"wiki\",{\"1\":{\"137\":1,\"420\":1,\"421\":2,\"460\":2,\"463\":1,\"476\":3,\"534\":1}}],[\"wikipedia\",{\"1\":{\"137\":1,\"460\":2,\"463\":1,\"476\":3}}],[\"will\",{\"1\":{\"94\":1,\"120\":2,\"137\":1,\"139\":1,\"143\":2}}],[\"with\",{\"1\":{\"94\":1,\"137\":2,\"139\":2,\"141\":1,\"143\":4,\"174\":1,\"398\":1,\"460\":1,\"555\":1,\"556\":1,\"557\":1,\"665\":1}}],[\"第三级缓存是由concurrenthashmap构成的全局缓存\",{\"1\":{\"482\":1}}],[\"第三个tostring方法是带了进制信息的\",{\"1\":{\"116\":1}}],[\"第三个构造方法是将字符串转为单精度浮点数\",{\"1\":{\"93\":1}}],[\"第二级缓存是由caffeine与concurrenthashmap实现的前缀树缓存\",{\"1\":{\"482\":1}}],[\"第二个tostring调用第一个tostring\",{\"1\":{\"116\":1}}],[\"第二个是将double值的双精度浮点数转为单精度浮点数\",{\"1\":{\"93\":1}}],[\"第二部分\",{\"0\":{\"111\":1}}],[\"第一级缓存是由caffeine实现的本地缓存\",{\"1\":{\"482\":1}}],[\"第一次使用就编译成本地代码\",{\"1\":{\"357\":1}}],[\"第一个tostring方法很简单\",{\"1\":{\"116\":1}}],[\"第一个参数将被认为是系统属性的名称\",{\"1\":{\"115\":1}}],[\"第一个是将float但精度浮点数转为float值\",{\"1\":{\"93\":1}}],[\"第一部分中\",{\"1\":{\"314\":1}}],[\"第一部分\",{\"0\":{\"110\":1}}],[\"结论\",{\"1\":{\"362\":1}}],[\"结果入栈\",{\"1\":{\"302\":1}}],[\"结果为4字节\",{\"1\":{\"91\":1}}],[\"结合字节码指令理解java虚拟机栈和栈帧\",{\"0\":{\"302\":1}}],[\"结构\",{\"1\":{\"294\":1}}],[\"结构性改革\",{\"1\":{\"13\":1}}],[\"转成十进制为\",{\"1\":{\"89\":1}}],[\"于是可以使用命令创建本地dev分支\",{\"1\":{\"672\":1}}],[\"于是\",{\"1\":{\"467\":1}}],[\"于是我就去了年老代那边\",{\"1\":{\"313\":1}}],[\"于是最终得到浮点数为\",{\"1\":{\"89\":1}}],[\"于是用23位字段可以存储24位有效数\",{\"1\":{\"89\":1}}],[\"尾数对应的值为\",{\"1\":{\"89\":1}}],[\"表示匹配restful风格的数据\",{\"1\":{\"489\":1}}],[\"表示当前数据不可能命中\",{\"1\":{\"486\":3}}],[\"表示禁用该功能\",{\"1\":{\"479\":1}}],[\"表示数据库执行事务前后状态的一致性\",{\"1\":{\"471\":1}}],[\"表示持续的时间\",{\"1\":{\"464\":1}}],[\"表示运行gc5次后对内存空间进行压缩\",{\"1\":{\"363\":1}}],[\"表示启用g1类型的垃圾回收器\",{\"1\":{\"358\":1}}],[\"表示启用cms类型的垃圾回收器\",{\"1\":{\"358\":1}}],[\"表示启用或者禁用name属性\",{\"1\":{\"358\":1}}],[\"表示存储一个float类型的变量占用4字节\",{\"1\":{\"91\":1}}],[\"表示正数\",{\"1\":{\"89\":1}}],[\"表示的浮点数是啥\",{\"1\":{\"89\":1}}],[\"表示nan\",{\"1\":{\"70\":1}}],[\"故这一位经常不予存储\",{\"1\":{\"89\":1}}],[\"由上面可知\",{\"1\":{\"672\":1}}],[\"由上述代码可知\",{\"1\":{\"112\":1}}],[\"由弱到强分别是read\",{\"1\":{\"468\":1}}],[\"由图解可以看出\",{\"1\":{\"311\":1}}],[\"由一个虚拟机栈来保存\",{\"1\":{\"296\":1}}],[\"由c++实现\",{\"1\":{\"287\":1}}],[\"由jvm决定运行的时机\",{\"1\":{\"179\":1}}],[\"由垃圾回收器在对象上调用\",{\"1\":{\"144\":1}}],[\"由元数据数据方法可知\",{\"1\":{\"139\":1}}],[\"由于远程库是空的\",{\"1\":{\"679\":1}}],[\"由于我之前在master分支写了一个2222222的信息\",{\"1\":{\"664\":1}}],[\"由于整体功能比较多\",{\"1\":{\"618\":1}}],[\"由于整个过程中\",{\"1\":{\"346\":1}}],[\"由于以electron开发\",{\"1\":{\"611\":1}}],[\"由于spring\",{\"1\":{\"531\":1}}],[\"由于ip\",{\"1\":{\"479\":1}}],[\"由于新选出的leader可能不知道上一个term的commitindex\",{\"1\":{\"467\":1}}],[\"由于\",{\"1\":{\"467\":1}}],[\"由于此时状态机已经把读请求发起时的已提交日志进行了\",{\"1\":{\"467\":1}}],[\"由于在\",{\"1\":{\"467\":1}}],[\"由于处理器之间的执行顺序未定义\",{\"1\":{\"463\":1}}],[\"由于一次一个线程可以访问一个同步方法\",{\"1\":{\"445\":1}}],[\"由于并发线程访问的先天优势\",{\"1\":{\"443\":1}}],[\"由于并发收集器不对内存空间进行压缩\",{\"1\":{\"363\":1}}],[\"由于同步访问的基本逻辑\",{\"1\":{\"442\":1}}],[\"由于java虚拟机的多线程是通过线程轮流切换\",{\"1\":{\"297\":1}}],[\"由于registernatives方法被static块修饰\",{\"1\":{\"135\":1}}],[\"由于规格化的浮点数的尾数域最左位\",{\"1\":{\"89\":1}}],[\"由符号位\",{\"1\":{\"70\":1}}],[\"∗2\",{\"1\":{\"89\":1}}],[\"−1\",{\"1\":{\"89\":1}}],[\"在bin目录下编写脚本文件如下\",{\"1\":{\"692\":1}}],[\"在以后的推送或者拉取时就可以简化命令\",{\"1\":{\"679\":1}}],[\"在github中设置ssh\",{\"0\":{\"678\":1}}],[\"在git中\",{\"1\":{\"666\":1}}],[\"在dev下重置起点\",{\"1\":{\"672\":1}}],[\"在demo\",{\"1\":{\"665\":1}}],[\"在开发中\",{\"1\":{\"666\":1}}],[\"在开启二级缓存\",{\"1\":{\"493\":1}}],[\"在此我就截图了哈\",{\"1\":{\"664\":1}}],[\"在增加之前使用cat命令\",{\"1\":{\"664\":1}}],[\"在master分之下合并分dev分支\",{\"1\":{\"663\":1}}],[\"在moremind\",{\"1\":{\"565\":1}}],[\"在使用git的时候一定要会使用日志功能\",{\"1\":{\"653\":1}}],[\"在使用其他对象时\",{\"1\":{\"447\":1}}],[\"在目录下输入以下命令\",{\"1\":{\"647\":1}}],[\"在你磁盘空闲较多的地方\",{\"1\":{\"647\":1}}],[\"在你记得你修改了那些地方的情况下\",{\"1\":{\"640\":1}}],[\"在查看文件\",{\"1\":{\"642\":1}}],[\"在里面写入123456\",{\"1\":{\"638\":1}}],[\"在post目录内无法新建目录或者模块\",{\"1\":{\"625\":1}}],[\"在设置或者打开文件可能略有卡顿感\",{\"1\":{\"618\":1}}],[\"在api\",{\"0\":{\"562\":1}}],[\"在拉取nacos配置异常时会快速失败\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"在exchange注册http状态码消费者\",{\"0\":{\"508\":1}}],[\"在eden区我还看到和我长的很像的小兄弟\",{\"1\":{\"313\":1}}],[\"在一级\",{\"1\":{\"498\":1}}],[\"在一级缓存以及二级未匹配到数据的时候\",{\"1\":{\"498\":1}}],[\"在一级缓存开启的前提下\",{\"1\":{\"487\":1}}],[\"在前缀树缓存开启的前提下\",{\"1\":{\"492\":1}}],[\"在更新selector的同时\",{\"1\":{\"488\":1}}],[\"在所有缓存都开启的前提下\",{\"1\":{\"483\":1}}],[\"在不同服务器上这种复制是需要时间的\",{\"1\":{\"474\":1}}],[\"在不考虑成本的前提下\",{\"1\":{\"461\":1}}],[\"在事务开始之前和事务结束以后\",{\"1\":{\"471\":1}}],[\"在这个分布式sql时代\",{\"1\":{\"468\":1}}],[\"在这两种实现中\",{\"1\":{\"441\":1}}],[\"在每个term开始时\",{\"1\":{\"467\":1}}],[\"在时间轴上有重叠\",{\"1\":{\"464\":1}}],[\"在全局时钟的观点来看\",{\"1\":{\"464\":1}}],[\"在实际业务中\",{\"1\":{\"460\":1}}],[\"在传统的分布式系统领域是不需要担心这种问题的\",{\"1\":{\"457\":1}}],[\"在谈到一致性这个词时\",{\"1\":{\"454\":1}}],[\"在面向对象编程\",{\"1\":{\"441\":1}}],[\"在大多数情况下\",{\"1\":{\"439\":1}}],[\"在多线程上下文中\",{\"1\":{\"445\":1}}],[\"在多线程同时访问一个资源时\",{\"1\":{\"435\":1}}],[\"在多cpu时\",{\"1\":{\"342\":1}}],[\"在线性一致的系统中\",{\"1\":{\"466\":1}}],[\"在线\",{\"1\":{\"382\":1}}],[\"在线程退出时销毁\",{\"1\":{\"291\":1}}],[\"在刚才的jmx中输入8998端口\",{\"1\":{\"374\":1}}],[\"在visualvm中选中\",{\"1\":{\"374\":1}}],[\"在进行gc前后打印出堆的信息\",{\"1\":{\"363\":1}}],[\"在相同物理内存下\",{\"1\":{\"327\":1,\"363\":1}}],[\"在年老代里\",{\"1\":{\"313\":1}}],[\"在old区也会有gc的操作\",{\"1\":{\"311\":1,\"312\":1}}],[\"在同一个时间点上\",{\"1\":{\"311\":1}}],[\"在任意时刻\",{\"1\":{\"297\":1}}],[\"在虚拟机启动时创建\",{\"1\":{\"294\":1,\"295\":1}}],[\"在jvm中\",{\"1\":{\"437\":1}}],[\"在jitwatch窗口点击toplist按钮\",{\"1\":{\"419\":1}}],[\"在jdk6或7中就是perm\",{\"1\":{\"294\":1}}],[\"在jdk1\",{\"1\":{\"294\":1,\"341\":1}}],[\"在java中创建不可变类的最简单方法是声明所有字段为\",{\"1\":{\"440\":1}}],[\"在java中相当容易实现\",{\"1\":{\"440\":1}}],[\"在java堆中生成一个代表这个类的java\",{\"1\":{\"279\":1,\"290\":1,\"295\":1}}],[\"在java应用程序的执行过程中\",{\"1\":{\"137\":1}}],[\"在装载阶段的第\",{\"1\":{\"290\":1}}],[\"在装载\",{\"1\":{\"286\":1}}],[\"在准备阶段为num分配内存空间\",{\"1\":{\"282\":1}}],[\"在没有外部同步的情况下\",{\"1\":{\"245\":1}}],[\"在什么环境下使用arraylist\",{\"0\":{\"199\":1}}],[\"在类声明中\",{\"1\":{\"192\":1}}],[\"在finalization\",{\"1\":{\"154\":1}}],[\"在为对象调用finalize方法之后\",{\"1\":{\"144\":1}}],[\"在hotspot中\",{\"1\":{\"137\":1}}],[\"在版本回滚与更新中\",{\"1\":{\"661\":1}}],[\"在版本8中\",{\"1\":{\"137\":1}}],[\"在版本6和7中\",{\"1\":{\"137\":1}}],[\"在合理实用的情况下\",{\"1\":{\"137\":1}}],[\"在对\",{\"1\":{\"123\":1}}],[\"在启动时\",{\"1\":{\"112\":1}}],[\"在class\",{\"1\":{\"110\":1}}],[\"在32位机和64位机中为4字节\",{\"1\":{\"110\":1}}],[\"在16位机中为2字节\",{\"1\":{\"110\":1}}],[\"在\",{\"1\":{\"98\":1,\"374\":1,\"435\":2,\"443\":1,\"463\":1,\"467\":1}}],[\"在ieee754标准中\",{\"1\":{\"89\":1}}],[\"在看float前需要先了解ieee\",{\"1\":{\"88\":1}}],[\"在数字上小于\",{\"1\":{\"81\":1}}],[\"或线程\",{\"1\":{\"463\":2}}],[\"或可组合性\",{\"1\":{\"460\":1}}],[\"或者说dev分支代码稳定后可以合并到主分支master上来\",{\"1\":{\"665\":1}}],[\"或者说基本不可能\",{\"1\":{\"461\":1}}],[\"或者git\",{\"1\":{\"665\":1}}],[\"或者你可以使用以下命令\",{\"1\":{\"657\":1}}],[\"或者你新建的任何一个目录\",{\"1\":{\"637\":1}}],[\"或者\",{\"1\":{\"454\":2,\"666\":1}}],[\"或者在调用方进行任何其他的协调操作\",{\"1\":{\"435\":1}}],[\"或者使用了45\",{\"1\":{\"398\":1}}],[\"或者相对超过了某个阈值的对象\",{\"1\":{\"311\":1,\"312\":1}}],[\"或者根据创建映射时提供的comparator进行排序\",{\"1\":{\"250\":1}}],[\"或\",{\"1\":{\"81\":1,\"287\":1,\"402\":1,\"445\":1,\"464\":1,\"623\":3}}],[\"或boolean\",{\"1\":{\"62\":1}}],[\"返回true\",{\"1\":{\"479\":1}}],[\"返回false\",{\"1\":{\"479\":1}}],[\"返回数\",{\"0\":{\"296\":1}}],[\"返回的值增加\",{\"1\":{\"176\":1}}],[\"返回的class对象是被所表示类的静态同步方法锁定的对象\",{\"1\":{\"136\":1}}],[\"返回此对象的运行时类\",{\"1\":{\"136\":1}}],[\"返回一个\",{\"1\":{\"122\":2}}],[\"返回值\",{\"1\":{\"99\":1,\"101\":1}}],[\"返回\",{\"1\":{\"81\":1,\"138\":6}}],[\"返回与给定位表示相对应的\",{\"1\":{\"78\":1}}],[\"时才读取数据并返回\",{\"1\":{\"467\":1}}],[\"时候不会停顿用户线程的运行\",{\"1\":{\"348\":1}}],[\"时则直接从缓存中获取对应的integer对象\",{\"1\":{\"112\":1}}],[\"时\",{\"1\":{\"81\":1}}],[\"当在shenyu\",{\"1\":{\"499\":1}}],[\"当禁用当前选择器或者规则时\",{\"1\":{\"494\":1}}],[\"当rule或者selector中matchrestful为true的时候\",{\"1\":{\"489\":1}}],[\"当删除当前选择器或者规则时\",{\"1\":{\"494\":1}}],[\"当删除当前rule的时候会将当前rule相关的缓存数据删除\",{\"1\":{\"488\":1}}],[\"当删除当前selector的时候会将当前selector相关的缓存数据删除\",{\"1\":{\"488\":1}}],[\"当删除当前selector或者rule的时候\",{\"1\":{\"488\":1}}],[\"当更新rule的时候\",{\"1\":{\"488\":1}}],[\"当更新selector的时候\",{\"1\":{\"488\":1}}],[\"当更新当前selector或者rule的时候\",{\"1\":{\"488\":1}}],[\"当更新当前插件的时候\",{\"1\":{\"488\":1}}],[\"当默认缓存没有命中的时候\",{\"1\":{\"486\":1}}],[\"当二级缓存或者三级缓存\",{\"1\":{\"486\":1}}],[\"当一级缓存是rule缓存时\",{\"1\":{\"485\":1}}],[\"当一级缓存是selector缓存时\",{\"1\":{\"485\":1}}],[\"当一个客户端进程写入一个新值\",{\"1\":{\"465\":1}}],[\"当一个方法开始执行后\",{\"1\":{\"302\":1}}],[\"当netty的写缓冲区中的字节超过高水位之后若下降到低水位\",{\"1\":{\"479\":1}}],[\"当协调者出问题时\",{\"1\":{\"475\":1}}],[\"当跨分布式系统提供acid时\",{\"1\":{\"474\":1}}],[\"当applyindex大于等于readindex\",{\"1\":{\"467\":1}}],[\"当\",{\"1\":{\"467\":1}}],[\"当状态机的\",{\"1\":{\"467\":1}}],[\"当我们说线程安全时\",{\"1\":{\"448\":1}}],[\"当我们调用halt方法时\",{\"1\":{\"165\":1}}],[\"当线程调用同步方法时\",{\"1\":{\"445\":1}}],[\"当类实例的内部状态在构造之后无法修改时\",{\"1\":{\"440\":1}}],[\"当类被加载和初始化时\",{\"1\":{\"192\":1}}],[\"当多个线程访问同一个对象时\",{\"1\":{\"435\":1}}],[\"当对象没有覆盖\",{\"1\":{\"402\":1}}],[\"当eden区或者s区不够用了\",{\"1\":{\"388\":1}}],[\"当然假如你删除错误的话\",{\"1\":{\"644\":1}}],[\"当然前提是没有恶意节点\",{\"1\":{\"457\":1}}],[\"当然也可以参考官方文档进行编译\",{\"1\":{\"415\":1}}],[\"当然\",{\"1\":{\"388\":1}}],[\"当然你也可以使用命令\",{\"1\":{\"137\":1}}],[\"当前的dev分支上的工作还没有提交\",{\"1\":{\"666\":1}}],[\"当前的路径情况下可以匹配成功\",{\"1\":{\"486\":1}}],[\"当前缀树是rule前缀树的时候\",{\"1\":{\"491\":1}}],[\"当前缀树是selector前缀树的时候\",{\"1\":{\"491\":1}}],[\"当前jvm的线程堆栈信息\",{\"1\":{\"377\":1}}],[\"当前进程的实时数据面板\",{\"1\":{\"377\":1}}],[\"当其中一块内存使用完了\",{\"1\":{\"337\":1}}],[\"当方法区无法满足内存分配需求时\",{\"1\":{\"294\":1}}],[\"当控制从方法调用返回时\",{\"1\":{\"169\":1,\"179\":1}}],[\"当系统执行完这些钩子后\",{\"1\":{\"157\":1}}],[\"当jvm关闭的时候\",{\"1\":{\"157\":1}}],[\"当垃圾回收确定对象不再有引用时\",{\"1\":{\"144\":1}}],[\"当值在\",{\"1\":{\"112\":1}}],[\"当integer的值范围在\",{\"1\":{\"112\":1}}],[\"当此\",{\"1\":{\"81\":1}}],[\"当52位小数部分f不全为0时\",{\"1\":{\"70\":1}}],[\"当52位小数部分f全为0时\",{\"1\":{\"70\":1}}],[\"非0整数值表示调用socket\",{\"1\":{\"479\":1}}],[\"非死不可\",{\"1\":{\"402\":1}}],[\"非boolean类型\",{\"1\":{\"358\":1}}],[\"非标准化参数\",{\"1\":{\"358\":1}}],[\"非堆\",{\"1\":{\"294\":1}}],[\"非零表示异常终止\",{\"1\":{\"154\":1}}],[\"非整型数\",{\"1\":{\"81\":1}}],[\"非专业书籍\",{\"0\":{\"13\":1}}],[\"如上图所示\",{\"1\":{\"467\":1}}],[\"如raft中对于一致性读给出了两种方案\",{\"1\":{\"467\":1}}],[\"如买最后一张车票\",{\"1\":{\"461\":2}}],[\"如强一致性和弱一致性\",{\"1\":{\"460\":1}}],[\"如\",{\"1\":{\"458\":1,\"464\":1,\"467\":1,\"474\":1}}],[\"如何测试\",{\"0\":{\"598\":1}}],[\"如何设置sentinel加载资源的resourcename\",{\"0\":{\"505\":1}}],[\"如何开启需要的垃圾收集器\",{\"0\":{\"351\":1}}],[\"如何选择合适的垃圾收集器\",{\"0\":{\"350\":1}}],[\"如何确定一个对象是垃圾\",{\"0\":{\"332\":1}}],[\"如何理解minor\",{\"1\":{\"314\":1}}],[\"如何判断两个double类型的数字大小\",{\"0\":{\"81\":1}}],[\"如tomcat\",{\"1\":{\"287\":1}}],[\"如下图中紫线所示\",{\"1\":{\"466\":1}}],[\"如下图所示\",{\"1\":{\"337\":1}}],[\"如下所示\",{\"1\":{\"441\":1}}],[\"如下面\",{\"1\":{\"135\":1}}],[\"如下\",{\"1\":{\"135\":1,\"679\":1}}],[\"如果合并有冲突\",{\"1\":{\"672\":1}}],[\"如果推送失败\",{\"1\":{\"672\":1}}],[\"如果访问root节点还找不到\",{\"1\":{\"493\":1}}],[\"如果存在则继续访问\",{\"1\":{\"493\":1}}],[\"如果存在可靠的物理时钟\",{\"1\":{\"461\":1}}],[\"如果在访问过程中\",{\"1\":{\"493\":1}}],[\"如果在同一个selector中有多个相同uri\",{\"1\":{\"489\":1}}],[\"如果在栈帧中有一个变量\",{\"1\":{\"304\":1}}],[\"如果插件开启的前提下\",{\"1\":{\"488\":1}}],[\"如果匹配成功则表示\",{\"1\":{\"486\":1}}],[\"如果所有的条件都是uri条件\",{\"1\":{\"486\":1}}],[\"如果所有节点一致给出一个\",{\"1\":{\"460\":1}}],[\"如果默认的缓存没有匹配成功\",{\"1\":{\"483\":1}}],[\"如果前缀树缓存也没有命中\",{\"1\":{\"483\":1}}],[\"如果一级缓存没有命中\",{\"1\":{\"483\":1}}],[\"如果一个对象没有任\",{\"1\":{\"333\":1}}],[\"如果一个类加载器在接到加载类的请求时\",{\"1\":{\"289\":1}}],[\"如果需要发送一些较小的报文\",{\"1\":{\"479\":1}}],[\"如果需要精度计算\",{\"1\":{\"102\":1}}],[\"如果为false\",{\"1\":{\"479\":1}}],[\"如果为trye\",{\"1\":{\"479\":1}}],[\"如果为非0的话\",{\"1\":{\"154\":1}}],[\"如果netty的写缓冲区中的字节超过该值\",{\"1\":{\"479\":1}}],[\"如果带有一个外键的一行记录被删除\",{\"1\":{\"474\":1}}],[\"如果数据表结构定义一个字段值是唯一的\",{\"1\":{\"474\":1}}],[\"如果进程\",{\"1\":{\"470\":1}}],[\"如果还能收到大多数节点的响应\",{\"1\":{\"467\":1}}],[\"如果还能收到大多数节点的应答\",{\"1\":{\"467\":1}}],[\"如果客户端一开始选择\",{\"1\":{\"467\":1}}],[\"如果读请求依然由过期的\",{\"1\":{\"467\":1}}],[\"如果获取到的\",{\"1\":{\"467\":1}}],[\"如果我们把这些时刻连接起来\",{\"1\":{\"466\":1}}],[\"如果我们只需要使方法的一部分成为线程安全的\",{\"1\":{\"446\":1}}],[\"如果我们确实需要维护状态\",{\"1\":{\"441\":1}}],[\"如果我们需要在不同线程之间共享状态\",{\"1\":{\"440\":1}}],[\"如果\",{\"1\":{\"440\":1,\"466\":1,\"467\":1}}],[\"如果不存在则返回null\",{\"1\":{\"493\":1}}],[\"如果不能匹配命中\",{\"1\":{\"487\":1}}],[\"如果不用考虑这些线程在运行时环境下的调度和交替运行\",{\"1\":{\"435\":1}}],[\"如果不采用\",{\"1\":{\"289\":1}}],[\"如果你有兴趣自行编译hsdis的话\",{\"1\":{\"413\":1}}],[\"如果你有兴趣的话\",{\"0\":{\"413\":1},\"1\":{\"415\":1}}],[\"如果出现如下所示则说明配置成功\",{\"1\":{\"412\":1}}],[\"如果阀值设置过低\",{\"1\":{\"399\":1}}],[\"如果手动设置了大小就意味着放弃了g1的自动调优\",{\"1\":{\"399\":1}}],[\"如果回收的差值中间有出入\",{\"1\":{\"391\":1}}],[\"如果无法满足此时间\",{\"1\":{\"363\":1}}],[\"如果将此值设置为较大值\",{\"1\":{\"363\":1}}],[\"如果响应时间最重要\",{\"1\":{\"350\":1}}],[\"如果允许停顿时间超过1秒\",{\"1\":{\"350\":1}}],[\"如果内存小于100m\",{\"1\":{\"350\":1}}],[\"如果内存不够\",{\"1\":{\"295\":1}}],[\"如果它找到一条路线\",{\"1\":{\"331\":1}}],[\"如果是禁用选择器或者规则就删除前缀树中的缓存\",{\"1\":{\"494\":1}}],[\"如果是更新更新rule的话\",{\"1\":{\"488\":1}}],[\"如果是更新更新selector的话\",{\"1\":{\"488\":1}}],[\"如果是更新插件\",{\"1\":{\"488\":1}}],[\"如果是更新插件的任意一个选项\",{\"1\":{\"488\":1}}],[\"如果是单核\",{\"1\":{\"350\":1}}],[\"如果是多线程的应用\",{\"1\":{\"327\":1}}],[\"如果是下面这种情况\",{\"1\":{\"305\":1}}],[\"如果该值设置过大\",{\"1\":{\"327\":1}}],[\"如果该对象有正常的对象头\",{\"1\":{\"137\":1}}],[\"如果该对象为null则直接抛出空指针\",{\"1\":{\"136\":1}}],[\"如果设置为0\",{\"1\":{\"363\":1}}],[\"如果设置为4\",{\"1\":{\"363\":2}}],[\"如果设置过小\",{\"1\":{\"327\":1}}],[\"如果设置了cache的高位\",{\"1\":{\"112\":1}}],[\"如果此时节点\",{\"1\":{\"467\":1}}],[\"如果此时客户端向节点\",{\"1\":{\"467\":1}}],[\"如果此时把eden区的存活对象硬放到survivor区\",{\"1\":{\"314\":1}}],[\"如果此对象表示的值是正无穷大或负无穷大\",{\"1\":{\"76\":1}}],[\"如果eden区和from区没有达到阈值的\",{\"1\":{\"311\":1}}],[\"如果当前线程执行的方法是native类型的\",{\"1\":{\"298\":1}}],[\"如果正在执行的是native方法\",{\"1\":{\"297\":1}}],[\"如果线程正在执行java方法\",{\"1\":{\"297\":1}}],[\"如果这时候把从class文件到装载的第\",{\"1\":{\"294\":1}}],[\"如果这个方法被调用后\",{\"1\":{\"154\":1}}],[\"如果父类加载器可以完成类加载任务\",{\"1\":{\"289\":1}}],[\"如果容量小于64\",{\"1\":{\"246\":1}}],[\"如果使用相同的库名称多次调用此方法\",{\"1\":{\"192\":1}}],[\"如果使用偏向锁\",{\"1\":{\"141\":1}}],[\"如果要在类的实现中使用本地方法\",{\"1\":{\"192\":1}}],[\"如果有n个\",{\"1\":{\"690\":1}}],[\"如果有一个安全管理器\",{\"1\":{\"192\":1}}],[\"如果有安全管理器\",{\"1\":{\"188\":1}}],[\"如果布尔参数为假\",{\"1\":{\"182\":1}}],[\"如果布尔参数为真\",{\"1\":{\"182\":1,\"185\":1}}],[\"如果虚拟机不支持此功能\",{\"1\":{\"182\":1,\"185\":1}}],[\"如果没有这两个文件就使用下面的这个命令生成密钥\",{\"1\":{\"677\":1}}],[\"如果没有这个环节\",{\"1\":{\"467\":1}}],[\"如果没有uri类型的参数\",{\"1\":{\"495\":1}}],[\"如果没有则返回null\",{\"1\":{\"493\":1}}],[\"如果没有匹配成功\",{\"1\":{\"486\":1}}],[\"如果没有survivor\",{\"1\":{\"314\":1}}],[\"如果没有固有限制\",{\"1\":{\"177\":1}}],[\"如果没有获取到参数或者获取错误都返回false\",{\"1\":{\"57\":1}}],[\"如果未显式调用\",{\"1\":{\"169\":1}}],[\"如果钩子运行完成\",{\"1\":{\"154\":1}}],[\"如果启用了退出完成\",{\"1\":{\"154\":1}}],[\"如果finalize方法抛出了一个未捕获的异常\",{\"1\":{\"144\":1}}],[\"如果ab相互持有引用\",{\"1\":{\"333\":1}}],[\"如果a\",{\"1\":{\"138\":2}}],[\"如果大量对象跨线程使用\",{\"1\":{\"137\":1}}],[\"如果hash值为0\",{\"1\":{\"137\":1}}],[\"如果能够生成markoop对象标记则直接返回当前对象的hash值\",{\"1\":{\"137\":1}}],[\"如果根据equals\",{\"1\":{\"137\":2}}],[\"如果指定的值在其二进制补码表示中没有一位\",{\"1\":{\"122\":2}}],[\"如果输入的是负数则返回\",{\"1\":{\"118\":1}}],[\"如果输入的是零则返回0\",{\"1\":{\"118\":1}}],[\"如果输入的是正数则返回1\",{\"1\":{\"118\":1}}],[\"如果传递的参数在\",{\"1\":{\"101\":1}}],[\"如果传递的参数为\",{\"1\":{\"101\":2}}],[\"如果传入不是true或者false\",{\"1\":{\"54\":1}}],[\"如果传入的值为true或者false的大小写\",{\"1\":{\"54\":1}}],[\"如果参数为nan\",{\"1\":{\"99\":1,\"101\":1}}],[\"如果参数为负无穷大\",{\"1\":{\"99\":1,\"101\":1}}],[\"如果参数为正无穷大\",{\"1\":{\"99\":1,\"101\":1}}],[\"如果第一个值为true则返回1\",{\"1\":{\"58\":1}}],[\"如果第一个值是false则返回\",{\"1\":{\"58\":1}}],[\"如果两个值不等\",{\"1\":{\"58\":1}}],[\"如果两个值相等则返回0\",{\"1\":{\"58\":1}}],[\"如果您需要更改您的链接或者链接有错误\",{\"1\":{\"16\":1}}],[\"如果您有兴趣交个朋友\",{\"1\":{\"2\":1}}],[\">15039k\",{\"1\":{\"391\":1}}],[\">10748k\",{\"1\":{\"391\":1}}],[\">details\",{\"1\":{\"381\":1}}],[\">displaced\",{\"1\":{\"137\":1}}],[\">找到gc\",{\"1\":{\"381\":1}}],[\">exclude\",{\"1\":{\"381\":1}}],[\">external\",{\"1\":{\"139\":1}}],[\">列出该类的实例\",{\"1\":{\"381\":1}}],[\">5663k\",{\"1\":{\"363\":1}}],[\">5118k\",{\"1\":{\"363\":1}}],[\">运行用户代码时间\",{\"1\":{\"349\":1}}],[\">垃圾收集器\",{\"1\":{\"349\":1}}],[\">cms\",{\"1\":{\"348\":1}}],[\">copy\",{\"1\":{\"137\":2}}],[\">parallel\",{\"1\":{\"348\":1}}],[\">park\",{\"1\":{\"143\":2}}],[\">速度很快\",{\"1\":{\"346\":1}}],[\">visual\",{\"1\":{\"316\":1}}],[\">选择对应版本链接\",{\"1\":{\"316\":1}}],[\">类装载器classloader\",{\"1\":{\"279\":1}}],[\">reset\",{\"1\":{\"143\":1}}],[\">registernatives\",{\"1\":{\"135\":1}}],[\">serial和serial\",{\"1\":{\"348\":1}}],[\">set\",{\"1\":{\"143\":3}}],[\">size\",{\"1\":{\"139\":1}}],[\">with\",{\"1\":{\"381\":1}}],[\">wait\",{\"1\":{\"141\":1,\"143\":1}}],[\">write\",{\"1\":{\"139\":1}}],[\">unpark\",{\"1\":{\"141\":1,\"143\":1}}],[\">osthread\",{\"1\":{\"141\":1,\"143\":1}}],[\">tools\",{\"1\":{\"316\":1}}],[\">tstate\",{\"1\":{\"141\":6}}],[\">thread\",{\"1\":{\"137\":1,\"141\":1}}],[\">notify\",{\"1\":{\"141\":1}}],[\">add\",{\"1\":{\"139\":1}}],[\">barrier\",{\"1\":{\"139\":1}}],[\">inc\",{\"1\":{\"141\":1}}],[\">init\",{\"1\":{\"139\":1}}],[\">is\",{\"1\":{\"137\":8,\"139\":9,\"141\":1,\"143\":1}}],[\">leak\",{\"1\":{\"381\":1}}],[\">length\",{\"1\":{\"139\":1}}],[\">list\",{\"1\":{\"381\":1}}],[\">locker\",{\"1\":{\"137\":1,\"141\":1}}],[\">http\",{\"1\":{\"319\":1,\"323\":1}}],[\">header\",{\"1\":{\"137\":2}}],[\">hash\",{\"1\":{\"137\":5}}],[\">has\",{\"1\":{\"137\":4,\"139\":2,\"141\":2,\"143\":1}}],[\">merge\",{\"1\":{\"381\":1}}],[\">method\",{\"1\":{\"139\":1}}],[\">monitor\",{\"1\":{\"137\":1}}],[\">mark\",{\"1\":{\"137\":3,\"141\":2,\"143\":2}}],[\">java\",{\"1\":{\"136\":1,\"143\":1}}],[\">klass\",{\"1\":{\"136\":1,\"139\":1}}],[\">getobjectclass\",{\"1\":{\"136\":1}}],[\">>\",{\"1\":{\"117\":1,\"118\":1,\"122\":5,\"137\":4,\"294\":3,\"298\":1,\"321\":3,\"322\":2,\"491\":1}}],[\">>>\",{\"1\":{\"117\":1,\"118\":1,\"119\":5,\"120\":2,\"121\":6,\"122\":1,\"291\":1}}],[\">=\",{\"1\":{\"112\":2,\"139\":1}}],[\">\",{\"1\":{\"79\":1,\"81\":1,\"116\":1,\"134\":3,\"137\":9,\"141\":27,\"143\":8,\"158\":1,\"162\":2,\"166\":1,\"187\":1,\"191\":1,\"273\":2,\"276\":8,\"279\":6,\"321\":1,\"360\":1,\"442\":2,\"462\":1,\"464\":5,\"485\":4,\"486\":4,\"493\":3,\"496\":2,\"497\":3,\"499\":2,\"506\":2,\"508\":1,\"509\":2,\"537\":9,\"541\":3,\"545\":4,\"552\":26,\"561\":2,\"566\":4,\"690\":7,\"691\":15}}],[\"<class\",{\"1\":{\"691\":1}}],[\"<classpathprefix>\",{\"1\":{\"691\":1}}],[\"<configuration>\",{\"1\":{\"552\":1,\"691\":6}}],[\"<commons\",{\"1\":{\"537\":3}}],[\"<goal>single<\",{\"1\":{\"691\":1}}],[\"<goal>copy\",{\"1\":{\"691\":1}}],[\"<goals>\",{\"1\":{\"691\":2}}],[\"<groupid>non\",{\"1\":{\"691\":1}}],[\"<groupid>mysql<\",{\"1\":{\"545\":1}}],[\"<groupid>commons\",{\"1\":{\"537\":1}}],[\"<groupid>com\",{\"1\":{\"537\":1,\"545\":3,\"566\":1}}],[\"<groupid>cn\",{\"1\":{\"537\":2,\"541\":1,\"545\":1,\"561\":1,\"566\":2}}],[\"<groupid>org\",{\"1\":{\"537\":8,\"541\":1,\"545\":7,\"561\":1,\"566\":6,\"691\":6}}],[\"<groupid>asm<\",{\"1\":{\"321\":1}}],[\"<overwriteifnewer>true<\",{\"1\":{\"691\":1}}],[\"<overwritesnapshots>false<\",{\"1\":{\"691\":1}}],[\"<overwritereleases>false<\",{\"1\":{\"691\":1}}],[\"<outputdirectory>target\",{\"1\":{\"691\":1}}],[\"<outputdirectory>boot<\",{\"1\":{\"690\":1}}],[\"<outputdirectory>bin<\",{\"1\":{\"690\":1}}],[\"<outputdirectory>lib<\",{\"1\":{\"690\":1}}],[\"<outputdirectory>config<\",{\"1\":{\"690\":1}}],[\"<onmismatch>deny<\",{\"1\":{\"552\":1}}],[\"<onmatch>accept<\",{\"1\":{\"552\":1}}],[\"<finalname>app\",{\"1\":{\"691\":1}}],[\"<filter\",{\"1\":{\"552\":1}}],[\"<filemode>0755<\",{\"1\":{\"690\":3}}],[\"<filemode>0644<\",{\"1\":{\"690\":1}}],[\"<fileset>\",{\"1\":{\"690\":2}}],[\"<filesets>\",{\"1\":{\"690\":1}}],[\"<filenamepattern>$\",{\"1\":{\"552\":2}}],[\"<file>$\",{\"1\":{\"552\":2}}],[\"<format>zip<\",{\"1\":{\"690\":1}}],[\"<format>tar\",{\"1\":{\"690\":1}}],[\"<formats>\",{\"1\":{\"690\":1}}],[\"<level>error<\",{\"1\":{\"552\":1}}],[\"<layout>zip<\",{\"1\":{\"691\":1}}],[\"<layout>backup<\",{\"1\":{\"537\":1}}],[\"<layout>default<\",{\"1\":{\"537\":1}}],[\"<root\",{\"1\":{\"552\":1}}],[\"<rollingpolicy\",{\"1\":{\"552\":2}}],[\"<releases>\",{\"1\":{\"537\":3}}],[\"<relativepath\",{\"1\":{\"537\":1,\"541\":1,\"566\":1}}],[\"<repositories>\",{\"1\":{\"537\":1}}],[\"<repository>\",{\"1\":{\"537\":4}}],[\"<queuesize>$\",{\"1\":{\"552\":3}}],[\"<addclasspath>true<\",{\"1\":{\"691\":1}}],[\"<archive>\",{\"1\":{\"691\":1}}],[\"<artifactid>non\",{\"1\":{\"691\":1}}],[\"<artifactid>maven\",{\"1\":{\"691\":5}}],[\"<artifactid>mysql\",{\"1\":{\"545\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"545\":1}}],[\"<artifactid>moremind\",{\"1\":{\"537\":1,\"541\":2,\"545\":2,\"561\":2,\"566\":3}}],[\"<artifactid>hutool\",{\"1\":{\"537\":1}}],[\"<artifactid>commons\",{\"1\":{\"537\":3}}],[\"<artifactid>spring\",{\"1\":{\"537\":7,\"541\":1,\"545\":9,\"561\":1,\"566\":7,\"691\":1}}],[\"<artifactid>asm<\",{\"1\":{\"321\":1}}],[\"<assembly>\",{\"1\":{\"690\":1}}],[\"<append>true<\",{\"1\":{\"552\":1}}],[\"<appender\",{\"1\":{\"552\":12}}],[\"<execution>\",{\"1\":{\"691\":2}}],[\"<executions>\",{\"1\":{\"691\":2}}],[\"<exclude>\",{\"1\":{\"691\":3}}],[\"<exclude>$\",{\"1\":{\"690\":1}}],[\"<excludes>\",{\"1\":{\"690\":1,\"691\":1}}],[\"<exclusion>\",{\"1\":{\"545\":1,\"566\":1}}],[\"<exclusions>\",{\"1\":{\"545\":1,\"566\":1}}],[\"<encoder>\",{\"1\":{\"552\":3}}],[\"<enabled>false<\",{\"1\":{\"537\":3}}],[\"<enabled>true<\",{\"1\":{\"537\":3}}],[\"<manifestentries>\",{\"1\":{\"691\":1}}],[\"<manifest>\",{\"1\":{\"691\":1}}],[\"<mainclass>cn\",{\"1\":{\"691\":1}}],[\"<maxhistory>$\",{\"1\":{\"552\":2}}],[\"<maxfilesize>$\",{\"1\":{\"552\":2}}],[\"<maven\",{\"1\":{\"545\":2,\"561\":2}}],[\"<mysql\",{\"1\":{\"545\":1}}],[\"<mybatis\",{\"1\":{\"545\":1}}],[\"<modelversion>4\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"<url>https\",{\"1\":{\"537\":6}}],[\"<includescope>compile<\",{\"1\":{\"691\":1}}],[\"<includes>\",{\"1\":{\"690\":3,\"691\":1}}],[\"<include>$\",{\"1\":{\"690\":1}}],[\"<include>\",{\"1\":{\"690\":4,\"691\":1}}],[\"<include>application\",{\"1\":{\"690\":1}}],[\"<includebasedirectory>true<\",{\"1\":{\"690\":1}}],[\"<includecallerdata>false<\",{\"1\":{\"552\":1}}],[\"<includecallerdata>true<\",{\"1\":{\"552\":2}}],[\"<init>\",{\"1\":{\"302\":1,\"321\":2}}],[\"<id>make\",{\"1\":{\"691\":1}}],[\"<id>$\",{\"1\":{\"690\":1}}],[\"<id>central<\",{\"1\":{\"537\":1}}],[\"<id>aliyun\",{\"1\":{\"537\":1}}],[\"<id>nexus<\",{\"1\":{\"537\":2}}],[\"<id>nexus\",{\"1\":{\"537\":2}}],[\"<directory>$\",{\"1\":{\"690\":1}}],[\"<directory>src\",{\"1\":{\"690\":1}}],[\"<discardingthreshold>$\",{\"1\":{\"552\":3}}],[\"<distributionmanagement>\",{\"1\":{\"537\":1}}],[\"<descriptor>src\",{\"1\":{\"691\":1}}],[\"<descriptors>\",{\"1\":{\"691\":1}}],[\"<description>module1\",{\"1\":{\"561\":1}}],[\"<description>moremind\",{\"1\":{\"537\":1,\"541\":1,\"566\":1}}],[\"<dependencies>\",{\"1\":{\"537\":2,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"<dependencyset>\",{\"1\":{\"690\":2}}],[\"<dependencysets>\",{\"1\":{\"690\":1}}],[\"<dependencymanagement>\",{\"1\":{\"537\":1}}],[\"<dependency>\",{\"1\":{\"321\":1,\"537\":9,\"545\":9,\"561\":1,\"566\":6}}],[\"<build>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"566\":1,\"691\":1}}],[\"<skiptests>true<\",{\"1\":{\"691\":1}}],[\"<source>$\",{\"1\":{\"691\":1}}],[\"<shutdownhook\",{\"1\":{\"552\":1}}],[\"<snapshots>\",{\"1\":{\"537\":3}}],[\"<snapshotrepository>\",{\"1\":{\"537\":1}}],[\"<scope>runtime<\",{\"1\":{\"690\":1}}],[\"<scope>test<\",{\"1\":{\"537\":1}}],[\"<scope>import<\",{\"1\":{\"537\":3}}],[\"<spring\",{\"1\":{\"537\":3}}],[\"<target>$\",{\"1\":{\"691\":1}}],[\"<totalsizecap>$\",{\"1\":{\"552\":2}}],[\"<type>pom<\",{\"1\":{\"537\":3}}],[\"<t>\",{\"1\":{\"488\":2,\"494\":2,\"497\":1,\"499\":1}}],[\"<hutool\",{\"1\":{\"537\":1}}],[\"<java\",{\"1\":{\"537\":1,\"541\":1,\"566\":1}}],[\"<version>$\",{\"1\":{\"537\":7,\"545\":2}}],[\"<version>0\",{\"1\":{\"537\":1,\"541\":2,\"545\":1,\"561\":2,\"566\":3}}],[\"<version>2\",{\"1\":{\"537\":1,\"691\":1}}],[\"<version>3\",{\"1\":{\"321\":1,\"691\":3}}],[\"<phase>package<\",{\"1\":{\"691\":1}}],[\"<phase>prepare\",{\"1\":{\"691\":1}}],[\"<pluginrepository>\",{\"1\":{\"537\":1}}],[\"<pluginrepositories>\",{\"1\":{\"537\":1}}],[\"<plugin>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"566\":1,\"691\":6}}],[\"<plugins>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"566\":1,\"691\":1}}],[\"<property\",{\"1\":{\"552\":8}}],[\"<properties>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"<project\",{\"1\":{\"537\":1,\"541\":1,\"545\":2,\"561\":2,\"566\":1}}],[\"<pattern>$\",{\"1\":{\"552\":3}}],[\"<packaging>jar<\",{\"1\":{\"545\":1}}],[\"<packaging>pom<\",{\"1\":{\"537\":1,\"541\":1}}],[\"<parent>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"<name>central\",{\"1\":{\"537\":1}}],[\"<name>aliyun\",{\"1\":{\"537\":1}}],[\"<name>nexus\",{\"1\":{\"537\":2}}],[\"<name>moremind\",{\"1\":{\"537\":1,\"541\":1,\"561\":1,\"566\":1}}],[\"<name>\",{\"1\":{\"358\":1}}],[\"<<path\",{\"1\":{\"486\":1}}],[\"<<16\",{\"1\":{\"121\":1}}],[\"<<=\",{\"1\":{\"121\":4}}],[\"<<\",{\"1\":{\"117\":2,\"119\":5,\"120\":2,\"121\":4,\"137\":1}}],[\"<\",{\"1\":{\"79\":2,\"81\":2,\"94\":1,\"102\":1,\"112\":1,\"116\":3,\"120\":2,\"134\":2,\"141\":1,\"143\":1,\"321\":2,\"537\":51,\"541\":8,\"545\":23,\"552\":30,\"561\":6,\"566\":17,\"690\":23,\"691\":46}}],[\"<==>\",{\"1\":{\"107\":1}}],[\"<=\",{\"1\":{\"76\":1,\"98\":1,\"111\":1,\"112\":1,\"116\":1,\"143\":1,\"439\":1}}],[\"值得一提的是\",{\"1\":{\"443\":1}}],[\"值中最低位\",{\"1\":{\"122\":1}}],[\"值中最高\",{\"1\":{\"122\":1}}],[\"值为false时\",{\"1\":{\"479\":1}}],[\"值为0\",{\"1\":{\"464\":1}}],[\"值为\",{\"1\":{\"398\":1}}],[\"值为size除于byte\",{\"1\":{\"91\":1,\"110\":1}}],[\"值为32\",{\"1\":{\"91\":1,\"110\":1}}],[\"值为1\",{\"1\":{\"91\":1,\"464\":1,\"466\":1}}],[\"值\",{\"1\":{\"78\":1,\"101\":1,\"122\":2,\"124\":1,\"125\":1,\"177\":1}}],[\"保存在堆和方法区中的变量就是java中的共享变量\",{\"1\":{\"437\":1}}],[\"保存着一个线程中方法的调用状态\",{\"1\":{\"296\":1}}],[\"保存任何给定类型的对象所需的内存量可能取决于实现\",{\"1\":{\"178\":1}}],[\"保证大吞吐量\",{\"1\":{\"479\":1}}],[\"保证各个节点的日志一致性\",{\"1\":{\"475\":1}}],[\"保证数据库的完整性不被破坏\",{\"1\":{\"471\":1}}],[\"保证整个集群只有一个leader\",{\"1\":{\"467\":1}}],[\"保证此类只所有classloader加载一次\",{\"1\":{\"289\":1}}],[\"保证被加载类的正确性\",{\"0\":{\"281\":1}}],[\"保证了插入的entry中的顺序\",{\"1\":{\"249\":1}}],[\"保证元素唯一性的方式依赖于\",{\"1\":{\"241\":1}}],[\"保留非数字\",{\"1\":{\"78\":1}}],[\"保持\",{\"1\":{\"71\":2}}],[\"双亲委派模型\",{\"1\":{\"289\":1}}],[\"双亲委派机制\",{\"1\":{\"289\":1}}],[\"双格式\",{\"1\":{\"78\":1}}],[\"双精确度\",{\"1\":{\"69\":1,\"88\":1}}],[\"零\",{\"1\":{\"76\":1}}],[\"而我在我的目录文件下也对同样的文件同个地方作了修改\",{\"1\":{\"672\":1}}],[\"而没有写入暂存区的内容则会全部丢失\",{\"1\":{\"642\":1}}],[\"而刚刚修改的内容也将全部丢失\",{\"1\":{\"642\":1}}],[\"而b在b的电脑上修改了clone过来的a\",{\"1\":{\"632\":1}}],[\"而干活的时候\",{\"1\":{\"631\":1}}],[\"而sentinelfallbackexception就是相当于收集来自原应用端的异常信息\",{\"1\":{\"508\":1}}],[\"而paxos协议与分布式事务并不是同一层面的东西\",{\"1\":{\"475\":1}}],[\"而parsedouble返回double\",{\"1\":{\"75\":1}}],[\"而linearizability是分布式系统\",{\"1\":{\"468\":1}}],[\"而并不能确保当前状态机也已经\",{\"1\":{\"467\":1}}],[\"而并不是和对象一样不使用了就会必然\",{\"1\":{\"402\":1}}],[\"而在前面顺序一致性模型中\",{\"1\":{\"466\":1}}],[\"而读操作\",{\"1\":{\"464\":1}}],[\"而程序在不同处理器\",{\"1\":{\"463\":1}}],[\"而弱一致性具有更低的响应延迟\",{\"1\":{\"460\":1}}],[\"而言的\",{\"1\":{\"459\":1}}],[\"而共识特指达成一致的过程\",{\"1\":{\"456\":1}}],[\"而非\",{\"1\":{\"456\":1}}],[\"而其他线程将执行相同的操作\",{\"1\":{\"445\":1}}],[\"而其他线程将被阻塞\",{\"1\":{\"442\":1}}],[\"而无需使用同步\",{\"1\":{\"444\":1}}],[\"而无需进一步修改字符类别\",{\"1\":{\"173\":1}}],[\"而另一个类可能拥有一个字符串数组\",{\"1\":{\"441\":1}}],[\"而对于线程c和d的操作是不需要考虑线程安全的\",{\"1\":{\"437\":1}}],[\"而变量c和d是局部变量\",{\"1\":{\"437\":1}}],[\"而要判定一个类是否是\",{\"1\":{\"402\":1}}],[\"而\",{\"1\":{\"402\":1,\"453\":1,\"467\":1}}],[\"而full\",{\"1\":{\"402\":1}}],[\"而年老代仍旧使用串行收集\",{\"1\":{\"363\":1}}],[\"而线程中的内容是否能够拥有执行权\",{\"1\":{\"297\":1}}],[\"而是工作进行到一半时候\",{\"1\":{\"666\":1}}],[\"而是\",{\"1\":{\"472\":1}}],[\"而是当leader通过以下两点来保证整个集群中只有其一个正常工作的leader\",{\"1\":{\"467\":1}}],[\"而是让所有存活\",{\"1\":{\"338\":1}}],[\"而是把\",{\"1\":{\"289\":1}}],[\"而是一族\",{\"1\":{\"71\":1,\"91\":1}}],[\"而不是物理\",{\"1\":{\"474\":1}}],[\"而不是通过使用这个命令来实现性能的优化\",{\"1\":{\"179\":1}}],[\"而不使content变得线程安全\",{\"1\":{\"443\":1}}],[\"而不会互相干扰\",{\"1\":{\"439\":1}}],[\"而不只是某一代内存的使用比例\",{\"1\":{\"398\":1}}],[\"而不仅仅是一个库名\",{\"1\":{\"188\":1}}],[\"而且版本较多的话\",{\"1\":{\"638\":1}}],[\"而且所有节点之间的通信无需任何时间\",{\"1\":{\"461\":1}}],[\"而且这个顺序还得是大家都认可的\",{\"1\":{\"461\":1}}],[\"而且这里是用负数的形式来运算的\",{\"1\":{\"116\":1}}],[\"而且现在的版本有多种更智能的模式可以选择\",{\"1\":{\"179\":1}}],[\"而openjdk7\",{\"1\":{\"137\":1}}],[\"而生成hashcode的主要方法为\",{\"1\":{\"137\":1}}],[\"而jvm\",{\"1\":{\"137\":1}}],[\"而通过digitones数组取出来个位为8\",{\"1\":{\"111\":1}}],[\"而认为隐藏在小数点的左边\",{\"1\":{\"89\":1}}],[\"分为两种状态\",{\"1\":{\"642\":1}}],[\"分栏\",{\"1\":{\"615\":1}}],[\"分钟\",{\"1\":{\"589\":1}}],[\"分支是很强大的\",{\"1\":{\"666\":1}}],[\"分支策略\",{\"0\":{\"665\":1},\"1\":{\"665\":1}}],[\"分支名\",{\"1\":{\"663\":1}}],[\"分支操作命令\",{\"0\":{\"660\":1}}],[\"分支\",{\"0\":{\"532\":1,\"533\":1,\"534\":1}}],[\"分布式\",{\"2\":{\"477\":1,\"478\":1}}],[\"分布式系统的性能理论上可以无限提升\",{\"1\":{\"459\":1}}],[\"分布式系统是他的场景\",{\"1\":{\"456\":1}}],[\"分布式存储\",{\"1\":{\"457\":1}}],[\"分布式基础\",{\"0\":{\"451\":1}}],[\"分析\",{\"1\":{\"368\":1}}],[\"分代收集\",{\"1\":{\"347\":1}}],[\"分代收集算法\",{\"0\":{\"339\":1}}],[\"分类\",{\"0\":{\"287\":1}}],[\"分解为标记\",{\"1\":{\"173\":1}}],[\"分别对主内存的变量进行读写操作\",{\"1\":{\"436\":1}}],[\"分别为\",{\"1\":{\"137\":1}}],[\"分别是类变量\",{\"1\":{\"437\":1}}],[\"分别是符号位s\",{\"1\":{\"89\":1}}],[\"分别是将string类型的数字转为double类型和将双精度浮点数double数装箱为double类型\",{\"1\":{\"73\":1}}],[\"分享资源\",{\"1\":{\"15\":1}}],[\"84\",{\"1\":{\"604\":1}}],[\"860\",{\"1\":{\"603\":1}}],[\"86\",{\"1\":{\"603\":1}}],[\"8682266\",{\"1\":{\"448\":1}}],[\"89\",{\"1\":{\"603\":1}}],[\"8998\",{\"1\":{\"374\":2}}],[\"87380\",{\"1\":{\"591\":2}}],[\"8cf4\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"88\",{\"1\":{\"603\":1}}],[\"8848\",{\"1\":{\"547\":1,\"548\":1,\"549\":1,\"550\":1,\"551\":1,\"567\":1}}],[\"885+0800\",{\"1\":{\"363\":1}}],[\"80\",{\"1\":{\"603\":1,\"604\":1}}],[\"800\",{\"1\":{\"603\":1,\"604\":1}}],[\"8002\",{\"1\":{\"567\":1}}],[\"8001\",{\"1\":{\"547\":1,\"548\":1,\"549\":1,\"555\":2,\"556\":2,\"557\":2,\"571\":1}}],[\"8080\",{\"1\":{\"319\":2,\"323\":1,\"374\":1}}],[\"8<\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"8189\",{\"1\":{\"599\":1}}],[\"81\",{\"1\":{\"555\":6,\"556\":6,\"557\":6,\"602\":1}}],[\"81149674\",{\"1\":{\"476\":1}}],[\"8192\",{\"1\":{\"120\":1}}],[\"852\",{\"1\":{\"604\":1}}],[\"855\",{\"1\":{\"363\":1}}],[\"854\",{\"1\":{\"69\":1,\"88\":1}}],[\"8中就是metaspace\",{\"1\":{\"294\":1}}],[\"8中\",{\"1\":{\"294\":1}}],[\"8实现结构是数组+链表+红黑树\",{\"1\":{\"248\":1}}],[\"8\",{\"0\":{\"142\":1,\"176\":1,\"348\":1,\"363\":1,\"446\":1,\"447\":1,\"473\":1},\"1\":{\"71\":1,\"110\":1,\"111\":21,\"117\":2,\"119\":2,\"120\":1,\"121\":4,\"122\":1,\"137\":1,\"273\":5,\"302\":2,\"314\":1,\"323\":2,\"363\":1,\"374\":1,\"398\":1,\"399\":1,\"402\":1,\"411\":2,\"442\":1,\"534\":1,\"537\":2,\"541\":1,\"545\":1,\"547\":1,\"550\":1,\"551\":1,\"552\":1,\"555\":2,\"556\":2,\"557\":2,\"561\":1,\"566\":1,\"571\":1,\"589\":1,\"591\":3,\"690\":1}}],[\"用的都是自己的电脑\",{\"1\":{\"631\":1}}],[\"用户使用说明书\",{\"0\":{\"619\":1}}],[\"用户角度对于一致性的要求是不一样的\",{\"1\":{\"460\":1}}],[\"用户名\",{\"1\":{\"374\":1}}],[\"用户线程和垃圾收集线程同时执行\",{\"1\":{\"348\":1}}],[\"用户线程暂停\",{\"1\":{\"348\":1}}],[\"用其他方法\",{\"1\":{\"296\":1}}],[\"用来关闭添加的钩子已经添加的钩子\",{\"1\":{\"161\":1}}],[\"用来获取monitor对象\",{\"1\":{\"143\":1}}],[\"用来表示二进制float值的字节数\",{\"1\":{\"91\":1}}],[\"用来表示二进制float值的比特数\",{\"1\":{\"91\":1}}],[\"用来表示指数的最小值\",{\"1\":{\"91\":1}}],[\"用来表示指数的最大值\",{\"1\":{\"91\":1}}],[\"用来表示浮点数最小值\",{\"1\":{\"91\":1}}],[\"用来表示最小标准值\",{\"1\":{\"91\":1}}],[\"用来表示最大的浮点数值\",{\"1\":{\"91\":1}}],[\"用来表示double的最大值\",{\"1\":{\"71\":1}}],[\"用来表示处理计算中出现的错误情况\",{\"1\":{\"71\":1,\"91\":1}}],[\"用来表示负无穷大\",{\"1\":{\"71\":1,\"91\":1}}],[\"用来表示正无穷大\",{\"1\":{\"71\":1,\"91\":1}}],[\"用objectwaiter对象表示\",{\"1\":{\"141\":1}}],[\"用法\",{\"1\":{\"136\":1,\"368\":1}}],[\"用缓存的好处在于快速读取\",{\"1\":{\"128\":1}}],[\"用于排除jar中依赖包\",{\"1\":{\"691\":1}}],[\"用于描述ip包的优先级和qos选项\",{\"1\":{\"479\":1}}],[\"用于channel分配接受buffer的分配器\",{\"1\":{\"479\":1}}],[\"用于分布式场景\",{\"1\":{\"456\":1}}],[\"用于内部锁定时\",{\"1\":{\"447\":1}}],[\"用于新生代和老年代的回收\",{\"1\":{\"402\":1}}],[\"用于老年代的回收\",{\"1\":{\"402\":1}}],[\"用于查找内存泄漏\",{\"1\":{\"378\":1}}],[\"用于输出gc时间戳\",{\"1\":{\"363\":2}}],[\"用于输出gc日志\",{\"1\":{\"363\":2}}],[\"用于辅助的gc典型配置参数\",{\"1\":{\"363\":1}}],[\"用于存放编译时期生成的各种字面量和符号引用\",{\"1\":{\"294\":1}}],[\"用于存储已被虚拟机加载的类信息\",{\"1\":{\"294\":1}}],[\"用于返回指定int值的二进制补码二进制表示形式的位的相反顺序\",{\"1\":{\"119\":1}}],[\"用于表示\",{\"1\":{\"71\":2}}],[\"它已经更新了一个数据项\",{\"1\":{\"470\":1}}],[\"它被认为是线程安全的\",{\"1\":{\"439\":1}}],[\"它们都是一部分region\",{\"1\":{\"347\":1}}],[\"它们主要用于获取0到99之间某个数的十位和个位\",{\"1\":{\"111\":1}}],[\"它将释放锁\",{\"1\":{\"445\":1}}],[\"它将获取内部锁\",{\"1\":{\"445\":1}}],[\"它将始终产生相同的输出\",{\"1\":{\"439\":1}}],[\"它将整个java堆划分为多个\",{\"1\":{\"347\":1}}],[\"它将运行所有未调用的终结器\",{\"1\":{\"154\":1}}],[\"它也是使用复制算法的收集器\",{\"1\":{\"343\":1}}],[\"它就是垃圾\",{\"1\":{\"333\":1}}],[\"它存放在rt\",{\"1\":{\"289\":1}}],[\"它首先不会自己尝试去加载这个类\",{\"1\":{\"289\":1}}],[\"它的\",{\"1\":{\"192\":1}}],[\"它可能会忽略此请求\",{\"1\":{\"182\":1,\"185\":1}}],[\"它停止了jvm\",{\"1\":{\"154\":1}}],[\"它还会释放synchronized对应的锁\",{\"1\":{\"143\":1}}],[\"它对应的本地方法是jvm\",{\"1\":{\"143\":1}}],[\"它并没有释放synchronized对应的锁\",{\"1\":{\"141\":1}}],[\"它并没有要求具体的尾数域\",{\"1\":{\"71\":1,\"91\":1}}],[\"它是基于electron框架开发的markdown笔记工具\",{\"1\":{\"611\":1}}],[\"它是基于线程状态的数字\",{\"1\":{\"137\":1}}],[\"它是线程安全的\",{\"1\":{\"440\":1}}],[\"它是不可变的\",{\"1\":{\"440\":1}}],[\"它是一种单线程收集器\",{\"1\":{\"341\":1}}],[\"它是一个将被分割的\",{\"1\":{\"124\":1,\"125\":1}}],[\"它是一个用于转换为\",{\"1\":{\"123\":1}}],[\"它是随机生成的数字\",{\"1\":{\"137\":1}}],[\"它干的事大概就是将java层的方法名和本地函数对应起来\",{\"1\":{\"135\":1}}],[\"它包含了对象常用的一些方法\",{\"1\":{\"133\":1}}],[\"它返回第一个参数除以第二个参数的无符号余数\",{\"1\":{\"125\":1}}],[\"它通过无符号转换将参数转换为\",{\"1\":{\"123\":1}}],[\"它会转换成对应进制的字符串\",{\"1\":{\"116\":1}}],[\"它根据ieee\",{\"1\":{\"99\":1}}],[\"它为\",{\"1\":{\"91\":1}}],[\"它定义为0x0\",{\"1\":{\"91\":1}}],[\"它定义为0x1\",{\"1\":{\"91\":2}}],[\"它规定了计算机中二进制与十进制浮点数转换的格式及方法\",{\"1\":{\"69\":1,\"88\":1}}],[\"对端收到复位错误\",{\"1\":{\"479\":1}}],[\"对并发事务包含的操作进行调度后的结果和某种把这些事务一个接一个的执行之后的结果一样\",{\"1\":{\"468\":1}}],[\"对比例1\",{\"1\":{\"464\":1}}],[\"对其的操作顺序和结果\",{\"1\":{\"464\":1}}],[\"对任何一个节点发起请求都会得到相同的回复\",{\"1\":{\"460\":1}}],[\"对各个region的回收价值和成本进行排序\",{\"1\":{\"347\":1}}],[\"对类的静态变量\",{\"1\":{\"284\":1}}],[\"对象创建\",{\"1\":{\"444\":1}}],[\"对象创建所在区域\",{\"0\":{\"310\":1}}],[\"对象实际上需要通过字段维护状态并通过一种或多种方法来实现行为\",{\"1\":{\"441\":1}}],[\"对象实际上是不可变的\",{\"1\":{\"440\":1}}],[\"对象没有在任何地方被引用\",{\"1\":{\"402\":1}}],[\"对象是否有必要执行\",{\"1\":{\"402\":1}}],[\"对象无法得到及时的回收\",{\"1\":{\"402\":1}}],[\"对象的个数及其大小\",{\"1\":{\"381\":1}}],[\"对象的一辈子理解\",{\"0\":{\"313\":1}}],[\"对象分配和晋升的速度变化非常大\",{\"1\":{\"347\":1,\"398\":1}}],[\"对象在被分配之后\",{\"1\":{\"339\":1}}],[\"对象会被复制到to区\",{\"1\":{\"311\":1}}],[\"对象头\",{\"1\":{\"307\":1}}],[\"对象头中偏向锁和hashcode的冲突\",{\"1\":{\"137\":1}}],[\"对象或者数组\",{\"0\":{\"295\":1},\"1\":{\"295\":1}}],[\"对象等这些数\",{\"1\":{\"290\":1}}],[\"对象销毁等操作\",{\"1\":{\"157\":1}}],[\"对称性\",{\"1\":{\"138\":1}}],[\"对对象加重量级锁\",{\"1\":{\"137\":1}}],[\"对对象进行原子操作标记\",{\"1\":{\"137\":1}}],[\"对于强大的笔记可能需要进一步完善\",{\"1\":{\"625\":1}}],[\"对于serverchannel或者niobytechannel\",{\"1\":{\"479\":1}}],[\"对于2pc协调者单点问题\",{\"1\":{\"475\":1}}],[\"对于不同的场景\",{\"1\":{\"460\":1}}],[\"对于变量a和b的操作是需要考虑线程安全的\",{\"1\":{\"437\":1}}],[\"对于年老代比较多的应用\",{\"1\":{\"363\":1}}],[\"对于某个对象而言\",{\"1\":{\"333\":1}}],[\"对于存活着的对象需要将其复制到survivor\",{\"1\":{\"310\":1}}],[\"对于基本类型\",{\"1\":{\"235\":1}}],[\"对于任何给定的对象\",{\"1\":{\"144\":1}}],[\"对于没有hashcode的对象则需要重新生成一个对象头\",{\"1\":{\"137\":1}}],[\"对于单精度浮点数\",{\"1\":{\"71\":1,\"91\":1}}],[\"对应ip参数ip\",{\"1\":{\"479\":3}}],[\"对应十进制27\",{\"1\":{\"277\":1}}],[\"对应的本地方法为java\",{\"1\":{\"135\":1}}],[\"对应boolean的两个属性\",{\"1\":{\"53\":1}}],[\"对应源码如下\",{\"1\":{\"49\":1,\"143\":1}}],[\"这次将所有文件提交到一个分支\",{\"1\":{\"638\":1}}],[\"这两个概念会混淆在一起\",{\"1\":{\"474\":1}}],[\"这两个属性存在jvm方法区的静态区\",{\"1\":{\"49\":1}}],[\"这点非常关键\",{\"1\":{\"467\":1}}],[\"这便是\",{\"1\":{\"467\":1}}],[\"这与cap定理中定义的\",{\"1\":{\"471\":1}}],[\"这与\",{\"1\":{\"463\":1}}],[\"这也是解决分布式系统领域很多问题的核心秘诀\",{\"1\":{\"461\":1}}],[\"这时\",{\"1\":{\"461\":2}}],[\"这时候它们暂时处于\",{\"1\":{\"402\":1}}],[\"这时候from和to交换角色\",{\"1\":{\"311\":1}}],[\"这时候就需要对eden内存空间进行清理\",{\"1\":{\"310\":1}}],[\"这时候就是典型的栈中元素指向堆中的对象\",{\"1\":{\"304\":1}}],[\"这篇文章就列出来了\",{\"1\":{\"459\":1}}],[\"这篇文档就列举下分布式系统中的那些\",{\"1\":{\"453\":1}}],[\"这种情况下\",{\"1\":{\"461\":2}}],[\"这种复制日志的方式被大量运用\",{\"1\":{\"458\":1}}],[\"这种单机场景\",{\"1\":{\"456\":1}}],[\"这种方案简单\",{\"1\":{\"461\":1}}],[\"这种方式实际上是main线程执行之后调用的方法\",{\"1\":{\"296\":1}}],[\"这种方法可以高效得到对应字符串长度\",{\"1\":{\"111\":1}}],[\"这使得攻击者更难获得锁定并导致死锁\",{\"1\":{\"447\":1}}],[\"这不仅可以在多线程环境中提供对共享资源的协调访问\",{\"1\":{\"447\":1}}],[\"这意味着一个操作将在程序的调用和返回之间的某个点p起作用\",{\"1\":{\"460\":1}}],[\"这意味着该方法一次只能由一个线程访问\",{\"1\":{\"442\":1}}],[\"这意味着它是线程安全的\",{\"1\":{\"251\":1}}],[\"这意味着它不是线程安全的\",{\"1\":{\"248\":1}}],[\"这只和对象在程序中是以何种方式被使用的有关\",{\"1\":{\"435\":1}}],[\"这样可以避免编写时的找不到相应文件\",{\"1\":{\"691\":1}}],[\"这样你就拥有分布式版本仓库了\",{\"1\":{\"679\":1}}],[\"这样就说明你已经把文件提交到文件暂存区了\",{\"1\":{\"649\":1}}],[\"这样看起来很碍眼\",{\"1\":{\"638\":1}}],[\"这样会导致前缀树的匹配性能损耗\",{\"1\":{\"495\":1}}],[\"这样会导致性能的损耗\",{\"1\":{\"495\":1}}],[\"这样能够节省内存\",{\"1\":{\"489\":1}}],[\"这样不需要进行线程切换以及线程同步\",{\"1\":{\"479\":1}}],[\"这样\",{\"1\":{\"467\":1,\"632\":1}}],[\"这样内存溢出时\",{\"1\":{\"369\":1}}],[\"这样继续循环下去\",{\"1\":{\"314\":1}}],[\"这样一来\",{\"1\":{\"314\":1,\"467\":1}}],[\"这样的gc我们称之为minor\",{\"1\":{\"310\":1}}],[\"这样的关系怎么维护呢\",{\"1\":{\"296\":1}}],[\"这就是为什么你就是没有网络也能使用版本控制\",{\"1\":{\"632\":1}}],[\"这就是acid一致性的意思\",{\"1\":{\"474\":1}}],[\"这就是需要在线程中维护一个变量\",{\"1\":{\"297\":1}}],[\"这就导致了不同的客户端在相同的时间获取了不一样的数据\",{\"1\":{\"464\":1}}],[\"这就造成分布式系统达成一致顺序十分具有挑战\",{\"1\":{\"461\":1}}],[\"这就需要了解一个java对象的具体信息咯\",{\"1\":{\"306\":1}}],[\"这部分内容将在\",{\"1\":{\"294\":1}}],[\"这虽然会导致额外的性能和空间开销\",{\"1\":{\"235\":1}}],[\"这类似于方法\",{\"1\":{\"188\":1}}],[\"这可能会导致安全异常\",{\"1\":{\"192\":1}}],[\"这可能会导致安全\",{\"1\":{\"188\":1}}],[\"这通常是通过将对象的内部地址转换为整数来实现的\",{\"1\":{\"137\":1}}],[\"这是一个好习惯\",{\"1\":{\"650\":1}}],[\"这是一种逻辑保证\",{\"1\":{\"474\":1}}],[\"这是一种方便的方法\",{\"1\":{\"173\":5}}],[\"这是最重要的\",{\"1\":{\"638\":1}}],[\"这是线程安全的\",{\"1\":{\"444\":1}}],[\"这是不要求的\",{\"1\":{\"137\":1}}],[\"这是特殊值\",{\"1\":{\"70\":1}}],[\"这个命令是告诉你所有操作的版本信息\",{\"1\":{\"656\":1}}],[\"这个只会提示你的跟\",{\"1\":{\"654\":1}}],[\"这个可以自己去尝试哟\",{\"1\":{\"654\":1}}],[\"这个就是控制版本的版本控制库\",{\"1\":{\"638\":1}}],[\"这个http状态码的消费者主要作用就是根据响应码抛出sentinelfallbackexception\",{\"1\":{\"508\":1}}],[\"这个余额和是不变\",{\"1\":{\"471\":1}}],[\"这个顺序对于两个进程内部的读写顺序都是合理的\",{\"1\":{\"464\":1}}],[\"这个对象被创建了多少个\",{\"1\":{\"381\":1}}],[\"这个文件\",{\"1\":{\"374\":1}}],[\"这个请求任务委托给父类加载器去完成\",{\"1\":{\"289\":1}}],[\"这个status表示退出的状态码\",{\"1\":{\"154\":1}}],[\"这个过程是objectsynchronizer会尝试当前线程获取free\",{\"1\":{\"141\":1}}],[\"这个整数不需要在应用程序的一次执行和同一应用程序的另一次执行之间保持一致\",{\"1\":{\"137\":1}}],[\"这个映射其实就可以看成将字符串映射到函数指针\",{\"1\":{\"135\":1}}],[\"这个也是按照ieee\",{\"1\":{\"91\":1}}],[\"这些操作由涉及到多个数据对象\",{\"1\":{\"468\":1}}],[\"这些软件在实现一致读时都是基于这两种方式\",{\"1\":{\"467\":1}}],[\"这些follower在看到这两个请求时\",{\"1\":{\"465\":1}}],[\"这些类是线程安全的\",{\"1\":{\"441\":1}}],[\"这些类都有其自己的状态\",{\"1\":{\"441\":1}}],[\"这些方法就会在本地方法栈中执行\",{\"1\":{\"298\":1}}],[\"这些方法大多数是native方法\",{\"1\":{\"133\":1}}],[\"这些缓存值都是静态且final的\",{\"1\":{\"112\":1}}],[\"这由float类的valueof方法完成\",{\"1\":{\"96\":1}}],[\"这里指定的是项目环境\",{\"1\":{\"690\":1}}],[\"这里的就是你提交的注释\",{\"1\":{\"650\":1}}],[\"这里的就是你刚刚注册的用户名\",{\"1\":{\"647\":1}}],[\"这里的c代表的一致性\",{\"1\":{\"471\":1}}],[\"这里对readindex和lease\",{\"1\":{\"467\":1}}],[\"这里\",{\"1\":{\"460\":1}}],[\"这里提一下paxos\",{\"1\":{\"457\":1}}],[\"这里说的仅仅是\",{\"1\":{\"402\":1}}],[\"这里会校验是否有实现该接口\",{\"1\":{\"139\":1}}],[\"这里跟synchronized一样\",{\"1\":{\"137\":1}}],[\"这里定为127\",{\"1\":{\"91\":1}}],[\"这里其实就是2的\",{\"1\":{\"91\":1}}],[\"这里就是2的127次方\",{\"1\":{\"91\":1}}],[\"这里0x表示十六进制\",{\"1\":{\"91\":1}}],[\"这被称为非规格化\",{\"1\":{\"70\":1}}],[\"这被称为规格化\",{\"1\":{\"70\":1}}],[\"范围\",{\"1\":{\"70\":1}}],[\"十进制范围为0\",{\"1\":{\"70\":1}}],[\"~\",{\"1\":{\"70\":4,\"323\":2}}],[\"576\",{\"1\":{\"603\":1}}],[\"57\",{\"1\":{\"603\":1}}],[\"5ms\",{\"1\":{\"571\":1}}],[\"54\",{\"1\":{\"556\":1,\"557\":1,\"604\":1}}],[\"5level\",{\"1\":{\"552\":1}}],[\"5<\",{\"1\":{\"537\":1}}],[\"53\",{\"1\":{\"391\":1}}],[\"508+0800\",{\"1\":{\"393\":1}}],[\"50\",{\"1\":{\"347\":1,\"398\":1,\"571\":1,\"602\":1,\"603\":1,\"604\":1}}],[\"5以后每个线程堆栈大小为1m\",{\"1\":{\"327\":1}}],[\"5\",{\"0\":{\"77\":1,\"102\":1,\"129\":1,\"139\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"298\":2,\"313\":1,\"345\":1,\"360\":1,\"369\":1,\"382\":1,\"397\":1,\"398\":1,\"399\":1,\"402\":1,\"413\":1,\"443\":1,\"448\":1,\"470\":1,\"489\":1,\"495\":1,\"496\":1,\"497\":1,\"498\":1,\"499\":1},\"1\":{\"71\":1,\"110\":1,\"111\":21,\"112\":1,\"121\":2,\"137\":2,\"139\":1,\"238\":1,\"241\":1,\"245\":1,\"246\":1,\"248\":2,\"250\":1,\"279\":1,\"294\":2,\"302\":4,\"322\":1,\"362\":1,\"363\":4,\"369\":1,\"374\":1,\"393\":4,\"399\":1,\"402\":1,\"441\":1,\"442\":1,\"448\":1,\"460\":2,\"467\":3,\"530\":1,\"533\":2,\"534\":1,\"537\":1,\"545\":1,\"571\":1,\"665\":1}}],[\"512k\",{\"1\":{\"590\":1}}],[\"512\",{\"1\":{\"120\":1}}],[\"51\",{\"1\":{\"70\":1}}],[\"52bit\",{\"1\":{\"70\":1}}],[\"52\",{\"1\":{\"70\":1,\"603\":1,\"604\":1}}],[\"5555555555555\",{\"1\":{\"666\":1}}],[\"559\",{\"1\":{\"69\":1,\"88\":1}}],[\"55\",{\"1\":{\"57\":1,\"115\":2,\"603\":2}}],[\"位\",{\"1\":{\"362\":1}}],[\"位等于整数参数的位\",{\"1\":{\"123\":1}}],[\"位为零\",{\"1\":{\"123\":1}}],[\"位于指定\",{\"1\":{\"122\":2}}],[\"位向右移\",{\"1\":{\"120\":1}}],[\"位布局\",{\"1\":{\"101\":1}}],[\"位布局返回指定浮点值的表示形式\",{\"1\":{\"99\":1,\"101\":1}}],[\"位布局返回指定浮点值的表示\",{\"1\":{\"78\":1}}],[\"位置\",{\"1\":{\"70\":1}}],[\"位数\",{\"1\":{\"70\":1}}],[\"描述\",{\"1\":{\"70\":1}}],[\"组成的新集群才是当前\",{\"1\":{\"467\":1}}],[\"组成的分区在经过一定时间没有收到\",{\"1\":{\"467\":1}}],[\"组成\",{\"1\":{\"70\":2}}],[\"有人说最终一致性就是没有一致性\",{\"1\":{\"470\":1}}],[\"有可能因网络分区等原因已不再是\",{\"1\":{\"467\":1}}],[\"有可能因为网络延迟反而会更晚\",{\"1\":{\"464\":1}}],[\"有可能\",{\"1\":{\"464\":1}}],[\"有可能相等\",{\"1\":{\"138\":1}}],[\"有效\",{\"1\":{\"461\":1}}],[\"有必要对这几个概念做一个区分\",{\"1\":{\"454\":1}}],[\"有时\",{\"1\":{\"446\":1}}],[\"有时候在survivor的\",{\"1\":{\"313\":2}}],[\"有一天eden区中的人实在是太多了\",{\"1\":{\"313\":1}}],[\"有一个integer类型的数组缓存\",{\"1\":{\"128\":1}}],[\"有一个高位\",{\"1\":{\"128\":1}}],[\"有些对象可能还存活着\",{\"1\":{\"310\":1}}],[\"有些对象就会被清理掉\",{\"1\":{\"310\":1}}],[\"有什么意义\",{\"1\":{\"296\":1}}],[\"有3种特殊情况\",{\"1\":{\"101\":1}}],[\"有两种情况\",{\"1\":{\"70\":1}}],[\"有偏指数\",{\"1\":{\"70\":1}}],[\"有规定基数为2跟10的状况\",{\"1\":{\"69\":1,\"88\":1}}],[\"最准确的原子震荡时钟的漂移率为\",{\"1\":{\"461\":1}}],[\"最简单的方法\",{\"0\":{\"640\":1}}],[\"最简单的一种调度实现就是真的把所有的事务进行排队\",{\"1\":{\"468\":1}}],[\"最简单的\",{\"1\":{\"460\":1}}],[\"最常见的问题反而是节点失去响应\",{\"1\":{\"457\":1}}],[\"最佳指南\",{\"0\":{\"399\":1}}],[\"最大响应时间\",{\"1\":{\"602\":1,\"603\":1,\"604\":1}}],[\"最大的好处就是解决了碎片化\",{\"1\":{\"314\":1}}],[\"最大值可通过指定方式进行调整\",{\"1\":{\"112\":1}}],[\"最大值是integer\",{\"1\":{\"112\":1}}],[\"最顶端的启动类加载器进行加载\",{\"1\":{\"289\":1}}],[\"最终一致其实分支很多\",{\"1\":{\"470\":1}}],[\"最终一致性弱于\",{\"1\":{\"473\":1}}],[\"最终一致性这个词大家听到的次数应该是最多的\",{\"1\":{\"470\":1}}],[\"最终一致性即是经过一段时间后终会到达一致的弱一致性\",{\"1\":{\"460\":1}}],[\"最终一致性\",{\"0\":{\"470\":1},\"1\":{\"460\":1,\"473\":2}}],[\"最终一致性等\",{\"1\":{\"456\":1}}],[\"最终退化成full\",{\"1\":{\"399\":1}}],[\"最终标记\",{\"1\":{\"347\":1}}],[\"最终都是委派给处于模型\",{\"1\":{\"289\":1}}],[\"最终到java层则为class<integer>\",{\"1\":{\"110\":1}}],[\"最右边\",{\"1\":{\"122\":1}}],[\"最多只有一个一位\",{\"1\":{\"122\":1}}],[\"最多有一个单个位\",{\"1\":{\"122\":1}}],[\"最左边\",{\"1\":{\"122\":1}}],[\"最后我们使用git\",{\"1\":{\"642\":1}}],[\"最后将所有规则加载到sentinel中\",{\"1\":{\"506\":1}}],[\"最后你的余额一定是对的\",{\"1\":{\"460\":1}}],[\"最后\",{\"1\":{\"154\":1}}],[\"最后再转成jobject类型方便转成java层的object类型\",{\"1\":{\"139\":1}}],[\"最后返回一个string类型\",{\"1\":{\"116\":1}}],[\"最后的值为1\",{\"1\":{\"91\":1}}],[\"最后的f是转成浮点型\",{\"1\":{\"91\":1}}],[\"最高有效位\",{\"1\":{\"89\":1}}],[\"最新标准是\",{\"1\":{\"69\":1,\"88\":1}}],[\"最好提供你网站的简介哟\",{\"1\":{\"16\":1}}],[\"的uri\",{\"1\":{\"495\":1}}],[\"的正确定义可参考cap\",{\"1\":{\"472\":1}}],[\"的访问将遵循正常的最终一致性规则\",{\"1\":{\"470\":1}}],[\"的后续访问将返回更新后的值\",{\"1\":{\"470\":1}}],[\"的双向过程\",{\"1\":{\"467\":1}}],[\"的情况\",{\"1\":{\"467\":1}}],[\"的准确\",{\"1\":{\"467\":1}}],[\"的选主架构这里不做描述\",{\"1\":{\"467\":1}}],[\"的软件有很多\",{\"1\":{\"467\":1}}],[\"的先后关系\",{\"1\":{\"466\":1}}],[\"的论文\",{\"1\":{\"465\":1}}],[\"的官方文档中没有写出来\",{\"1\":{\"465\":1}}],[\"的写操作是\",{\"1\":{\"465\":1}}],[\"的读操作是\",{\"1\":{\"465\":1}}],[\"的一致性更复杂一些\",{\"1\":{\"465\":1}}],[\"的一个变种\",{\"1\":{\"457\":1}}],[\"的新值\",{\"1\":{\"464\":1,\"466\":1}}],[\"的时候\",{\"1\":{\"464\":1}}],[\"的顺序一致\",{\"1\":{\"464\":1}}],[\"的初始值为\",{\"1\":{\"464\":1}}],[\"的效果可能在\",{\"1\":{\"463\":1}}],[\"的调用永远不会阻塞\",{\"1\":{\"460\":1}}],[\"的意思是被系统中并发运行的所有其他线程所感知\",{\"1\":{\"460\":1}}],[\"的衣服\",{\"1\":{\"460\":1}}],[\"的答案\",{\"1\":{\"460\":1}}],[\"的范畴\",{\"1\":{\"458\":1}}],[\"的模型\",{\"1\":{\"457\":1}}],[\"的含义比共识\",{\"1\":{\"456\":1}}],[\"的系统都是线性一致的\",{\"1\":{\"456\":1}}],[\"的线程安全实现\",{\"1\":{\"447\":1}}],[\"的使用\",{\"1\":{\"445\":1}}],[\"的条件则相对苛刻许多\",{\"1\":{\"402\":1}}],[\"的集合\",{\"1\":{\"347\":1}}],[\"的对象都向一端移动\",{\"1\":{\"338\":1}}],[\"的位置\",{\"1\":{\"297\":1}}],[\"的图可以改动一下\",{\"1\":{\"295\":1}}],[\"的是与java堆区分开来\",{\"1\":{\"294\":1}}],[\"的实现不是同步的\",{\"1\":{\"248\":1}}],[\"的行为方式完全相同\",{\"1\":{\"173\":3}}],[\"的关系\",{\"1\":{\"138\":2}}],[\"的返回值和equals\",{\"1\":{\"138\":2}}],[\"的区别\",{\"0\":{\"127\":1}}],[\"的无符号转换中\",{\"1\":{\"123\":1}}],[\"的值发生了回跳\",{\"1\":{\"464\":1,\"466\":1}}],[\"的值\",{\"1\":{\"123\":1}}],[\"的定义说明里找到\",{\"1\":{\"115\":1}}],[\"的功能是根据指定的名称得到系统属性的整数值\",{\"1\":{\"115\":1}}],[\"的指数域全为\",{\"1\":{\"71\":1,\"91\":1}}],[\"的\",{\"1\":{\"69\":1,\"88\":1,\"123\":1,\"402\":1,\"461\":1,\"465\":2,\"467\":2}}],[\"与\",{\"0\":{\"467\":1}}],[\"与写操作\",{\"1\":{\"464\":1}}],[\"与同步方法不同\",{\"1\":{\"446\":1}}],[\"与同步对象不同\",{\"1\":{\"443\":1}}],[\"与语言无关的概念\",{\"1\":{\"440\":1}}],[\"与年老代的比值\",{\"1\":{\"363\":1}}],[\"与用户线程并发执行\",{\"1\":{\"347\":1}}],[\"与hashmap不同\",{\"1\":{\"251\":1}}],[\"与hashmap一样\",{\"1\":{\"251\":1}}],[\"与exit方法不同\",{\"1\":{\"165\":1}}],[\"与notify方法类似\",{\"1\":{\"142\":1}}],[\"与之对应的本地方法为jvm\",{\"1\":{\"141\":1}}],[\"与基数无关的浮点数\",{\"1\":{\"69\":1,\"88\":1}}],[\"与延伸双精确度\",{\"1\":{\"69\":1,\"88\":1}}],[\"后来又有人基于\",{\"1\":{\"473\":1}}],[\"后来还有\",{\"1\":{\"69\":1,\"88\":1}}],[\"后面要提到的\",{\"1\":{\"470\":1}}],[\"后\",{\"1\":{\"466\":1,\"467\":2}}],[\"后台处理等若交互场\",{\"1\":{\"348\":1}}],[\"后续做啥呢\",{\"1\":{\"296\":1}}],[\"后续的链接\",{\"1\":{\"296\":1}}],[\"后端架构师技术图谱\",{\"1\":{\"16\":3}}],[\"微处理器系统的二进制浮点数算术\",{\"1\":{\"69\":1,\"88\":1}}],[\"66\",{\"1\":{\"604\":1}}],[\"68\",{\"1\":{\"603\":1}}],[\"6844903890224152584\",{\"1\":{\"448\":1}}],[\"69\",{\"1\":{\"603\":1,\"604\":1}}],[\"696e\",{\"1\":{\"277\":1}}],[\"654321\",{\"1\":{\"642\":1}}],[\"65536\",{\"1\":{\"591\":3}}],[\"65536k\",{\"1\":{\"391\":2}}],[\"6501\",{\"1\":{\"277\":1}}],[\"600\",{\"1\":{\"374\":1,\"603\":1,\"604\":1}}],[\"60559\",{\"1\":{\"69\":2,\"88\":2}}],[\"6765\",{\"1\":{\"277\":1}}],[\"673b\",{\"1\":{\"277\":1}}],[\"6e67\",{\"1\":{\"277\":1}}],[\"6c61\",{\"1\":{\"277\":1}}],[\"612f\",{\"1\":{\"277\":1}}],[\"6176\",{\"1\":{\"277\":1}}],[\"616d\",{\"1\":{\"277\":1}}],[\"6f\",{\"1\":{\"102\":1}}],[\"6开始\",{\"1\":{\"91\":2}}],[\"6开始存在\",{\"1\":{\"91\":1}}],[\"6d\",{\"1\":{\"81\":1}}],[\"6464\",{\"1\":{\"277\":1}}],[\"64\",{\"1\":{\"71\":1,\"120\":1}}],[\"64位\",{\"1\":{\"69\":1,\"88\":1,\"407\":1}}],[\"6\",{\"0\":{\"78\":1,\"140\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"314\":1,\"346\":1,\"361\":1,\"444\":1,\"471\":1},\"1\":{\"71\":3,\"111\":21,\"120\":1,\"121\":1,\"238\":1,\"241\":1,\"245\":1,\"246\":1,\"248\":1,\"250\":1,\"296\":1,\"297\":1,\"302\":4,\"363\":2,\"374\":1,\"402\":1,\"441\":1,\"442\":1,\"448\":1,\"533\":3,\"534\":1,\"583\":2,\"595\":2,\"596\":2,\"665\":1}}],[\"6254741\",{\"1\":{\"143\":1}}],[\"62\",{\"1\":{\"70\":1,\"604\":1}}],[\"6320749\",{\"1\":{\"137\":2}}],[\"63\",{\"1\":{\"70\":1,\"374\":4}}],[\"77\",{\"1\":{\"603\":1,\"604\":2}}],[\"78\",{\"1\":{\"602\":1}}],[\"75\",{\"1\":{\"602\":1,\"603\":1,\"604\":1}}],[\"754标准\",{\"1\":{\"88\":1}}],[\"754浮点标准的规定\",{\"1\":{\"91\":2}}],[\"754浮点标准规定\",{\"1\":{\"71\":1,\"91\":1}}],[\"754浮点\",{\"1\":{\"78\":1,\"99\":1,\"101\":1}}],[\"754双精度浮点数\",{\"1\":{\"70\":1}}],[\"754单精度浮点数表示\",{\"0\":{\"70\":1,\"89\":1}}],[\"754简介\",{\"0\":{\"69\":1,\"88\":1}}],[\"754\",{\"0\":{\"68\":1,\"87\":1},\"1\":{\"69\":1,\"88\":1,\"101\":1}}],[\"7~2\",{\"1\":{\"531\":1}}],[\"765\",{\"1\":{\"604\":1}}],[\"76288k\",{\"1\":{\"391\":1}}],[\"763\",{\"1\":{\"323\":1}}],[\"7265\",{\"1\":{\"277\":1}}],[\"7472\",{\"1\":{\"277\":1}}],[\"7实现的结果是数组+链表\",{\"1\":{\"248\":1}}],[\"7\",{\"0\":{\"79\":1,\"141\":1,\"175\":1,\"347\":1,\"362\":1,\"445\":1,\"472\":1},\"1\":{\"111\":21,\"112\":1,\"118\":1,\"119\":1,\"246\":1,\"248\":1,\"250\":1,\"302\":3,\"374\":1,\"393\":2,\"402\":1,\"442\":1,\"448\":1,\"461\":1,\"530\":1,\"534\":1,\"537\":2,\"552\":1,\"555\":2,\"556\":2,\"557\":2}}],[\"7976931348623157e+308\",{\"1\":{\"71\":1}}],[\"7976931348623157e308\",{\"1\":{\"71\":1}}],[\"79位以上\",{\"1\":{\"69\":1,\"88\":1}}],[\"延伸单精确度\",{\"1\":{\"69\":1,\"88\":1}}],[\"规定了四种表示浮点数值的方法\",{\"1\":{\"69\":1,\"88\":1}}],[\"该缓存是shenyu默认的匹配缓存\",{\"1\":{\"496\":1}}],[\"该缓冲区即tcp发送滑动窗口\",{\"1\":{\"479\":1}}],[\"该过程发生在更新选择器或者规则的时候\",{\"1\":{\"494\":1}}],[\"该示例很简单\",{\"1\":{\"446\":1}}],[\"该类对应的\",{\"1\":{\"402\":1}}],[\"该类所有的实例都已经被回收\",{\"1\":{\"402\":1}}],[\"该类型数据存放在方法区\",{\"1\":{\"294\":1}}],[\"该值设置nagle算法的启用\",{\"1\":{\"479\":1}}],[\"该值控制执行channelpipeline中执行channelhandler的线程\",{\"1\":{\"479\":1}}],[\"该值估算的字节数在计算水位时使用\",{\"1\":{\"479\":1}}],[\"该值可能会影响性能\",{\"1\":{\"363\":1}}],[\"该值建议使用并行收集器时\",{\"1\":{\"363\":1}}],[\"该去社会上闯闯了\",{\"1\":{\"313\":1}}],[\"该映射根据其键的自然顺序进行排序\",{\"1\":{\"250\":1}}],[\"该对象的终结将终止\",{\"1\":{\"144\":1}}],[\"该契约规定相等的对象必须具有相等的散列码\",{\"1\":{\"138\":1}}],[\"该函数返回代表浮点数的位\",{\"1\":{\"101\":1}}],[\"该函数返回表示浮点数的整数位\",{\"1\":{\"99\":1}}],[\"该函数根据ieee\",{\"1\":{\"101\":1}}],[\"该新float初始化为指定的string表示的值\",{\"1\":{\"96\":1}}],[\"该是java中的内置方法\",{\"1\":{\"96\":1}}],[\"该转化可能出现精度丢失的情况\",{\"1\":{\"93\":1}}],[\"该标准的全称为ieee二进制浮点数算术标准\",{\"1\":{\"69\":1,\"88\":1}}],[\"该标准定义了浮点数的格式还有一些特殊值\",{\"1\":{\"69\":1,\"88\":1}}],[\"该方法既不依赖外部状态\",{\"1\":{\"439\":1}}],[\"该方法可以计算数字的阶乘\",{\"1\":{\"439\":1}}],[\"该方法存放在方法区\",{\"1\":{\"294\":3}}],[\"该方法作用是终止当前正在运行的java虚拟机\",{\"1\":{\"154\":1}}],[\"该方法创建一个objectwaiter对象\",{\"1\":{\"143\":1}}],[\"该方法对应调用objectmonitor\",{\"1\":{\"143\":1}}],[\"该方法源码如下\",{\"1\":{\"137\":1}}],[\"该方法源码目录为\",{\"1\":{\"137\":1}}],[\"该方法它返回第一个参数除以第二个参数的无符号商\",{\"1\":{\"124\":1}}],[\"该方法返回通过反转指定int值的二进制补码表示形式的字节顺序而获得的值\",{\"1\":{\"117\":1}}],[\"该方法返回一个新的float\",{\"1\":{\"96\":1}}],[\"该方法返回对分配的布尔操作数执行逻辑异或运算的结果\",{\"1\":{\"61\":1}}],[\"该方法要求两个值必须同时满足才返回true\",{\"1\":{\"59\":1}}],[\"该方法是判断是否是非数字的值\",{\"1\":{\"97\":1}}],[\"该方法是比较两个boolean值\",{\"1\":{\"58\":1}}],[\"该方法是获取系统设置的参数\",{\"1\":{\"57\":1}}],[\"该方法是将浮点数转为16进制数的字符串\",{\"1\":{\"94\":1}}],[\"该方法是将boolean值转为对应的boolean字符串\",{\"1\":{\"56\":1}}],[\"该方法是将字符串值转为对应boolean值\",{\"1\":{\"54\":1}}],[\"进入moremind\",{\"1\":{\"563\":1}}],[\"进程p1\",{\"1\":{\"464\":1}}],[\"进程是分配资源的基本单位\",{\"1\":{\"437\":1}}],[\"进而减少full\",{\"1\":{\"314\":1}}],[\"进行快速创作\",{\"1\":{\"623\":1}}],[\"进行测试\",{\"1\":{\"589\":1}}],[\"进行划分\",{\"1\":{\"493\":1}}],[\"进行读操作\",{\"1\":{\"467\":1}}],[\"进行\",{\"1\":{\"349\":1}}],[\"进行gc\",{\"1\":{\"346\":1}}],[\"进行垃圾\",{\"1\":{\"345\":1}}],[\"进行一次full\",{\"1\":{\"314\":1}}],[\"进行判断\",{\"1\":{\"62\":1}}],[\"进阶操作命令\",{\"0\":{\"636\":1}}],[\"进阶\",{\"0\":{\"35\":1},\"1\":{\"16\":3}}],[\"49\",{\"1\":{\"604\":1}}],[\"44\",{\"1\":{\"604\":2}}],[\"44831d1d10d3\",{\"1\":{\"448\":1}}],[\"44808\",{\"1\":{\"369\":1,\"380\":1}}],[\"42\",{\"1\":{\"603\":1,\"604\":1}}],[\"47\",{\"1\":{\"603\":2,\"604\":1}}],[\"404\",{\"1\":{\"666\":1}}],[\"40\",{\"1\":{\"603\":2}}],[\"402\",{\"1\":{\"602\":1}}],[\"4028235e+38f\",{\"1\":{\"91\":1}}],[\"4028235e38\",{\"1\":{\"91\":2}}],[\"41\",{\"1\":{\"602\":1}}],[\"4g\",{\"1\":{\"590\":2}}],[\"4核8线程\",{\"1\":{\"581\":1,\"582\":1}}],[\"4f4f\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"4<\",{\"1\":{\"537\":1}}],[\"4以下版本之间变化较大比较大\",{\"1\":{\"531\":1}}],[\"46\",{\"1\":{\"393\":1}}],[\"4c6a\",{\"1\":{\"277\":1}}],[\"48\",{\"1\":{\"604\":1}}],[\"4846409\",{\"1\":{\"139\":1}}],[\"4840070\",{\"1\":{\"139\":1}}],[\"4839641\",{\"1\":{\"139\":1}}],[\"45000\",{\"1\":{\"592\":4,\"593\":4}}],[\"458的时间刻\",{\"1\":{\"393\":1}}],[\"458\",{\"1\":{\"393\":4}}],[\"45f\",{\"1\":{\"91\":2}}],[\"45\",{\"1\":{\"91\":1,\"398\":2,\"603\":1}}],[\"4e\",{\"1\":{\"91\":3}}],[\"43位以上\",{\"1\":{\"69\":1,\"88\":1}}],[\"4\",{\"0\":{\"62\":1,\"76\":1,\"80\":1,\"81\":1,\"90\":1,\"91\":1,\"92\":1,\"126\":1,\"138\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"285\":1,\"286\":1,\"287\":1,\"288\":1,\"289\":1,\"297\":1,\"307\":1,\"312\":1,\"315\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":2,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"349\":1,\"350\":1,\"351\":1,\"359\":1,\"368\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"394\":1,\"395\":1,\"396\":1,\"401\":1,\"412\":1,\"438\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":2,\"443\":1,\"444\":1,\"445\":1,\"446\":1,\"447\":1,\"469\":1,\"488\":1,\"490\":1,\"491\":1,\"492\":1,\"493\":1,\"494\":2,\"495\":1,\"693\":1},\"1\":{\"71\":1,\"81\":1,\"111\":21,\"119\":2,\"120\":1,\"121\":4,\"122\":1,\"137\":1,\"141\":2,\"143\":1,\"238\":1,\"239\":1,\"241\":1,\"242\":1,\"243\":1,\"245\":1,\"246\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"277\":1,\"287\":1,\"294\":2,\"302\":3,\"346\":1,\"362\":1,\"363\":2,\"366\":1,\"369\":1,\"374\":1,\"388\":1,\"393\":2,\"398\":1,\"399\":1,\"402\":1,\"416\":1,\"441\":1,\"442\":1,\"448\":1,\"464\":4,\"467\":1,\"476\":1,\"531\":1,\"533\":3,\"534\":1,\"537\":3,\"541\":3,\"545\":3,\"561\":3,\"566\":3,\"584\":1,\"665\":1}}],[\"^=\",{\"1\":{\"137\":1}}],[\"^\",{\"1\":{\"61\":1,\"137\":5}}],[\"逻辑上是属于堆的一部分\",{\"1\":{\"294\":1}}],[\"逻辑或方法\",{\"1\":{\"60\":1}}],[\"逻辑和方法\",{\"1\":{\"59\":1}}],[\"0ghz\",{\"1\":{\"581\":1,\"582\":1}}],[\"05\",{\"1\":{\"571\":1}}],[\"05f\",{\"1\":{\"98\":2}}],[\"0<\",{\"1\":{\"537\":4,\"541\":1,\"545\":1,\"561\":1,\"566\":1,\"691\":2}}],[\"0表示socket\",{\"1\":{\"479\":1}}],[\"0表示正\",{\"1\":{\"70\":1}}],[\"0次磁盘写\",{\"1\":{\"467\":3}}],[\"0次rtt\",{\"1\":{\"467\":1}}],[\"0910\",{\"1\":{\"460\":1}}],[\"09\",{\"1\":{\"448\":1,\"476\":1,\"603\":1,\"604\":1}}],[\"06\",{\"1\":{\"391\":1,\"393\":1,\"603\":1,\"604\":1}}],[\"0600\",{\"1\":{\"277\":1}}],[\"0以上版本\",{\"1\":{\"363\":1}}],[\"0以前版本每个线程栈大小为256\",{\"1\":{\"363\":1}}],[\"0支持对年老代并行收集\",{\"1\":{\"363\":1}}],[\"0版本以后每个线程栈大小为1\",{\"1\":{\"363\":1}}],[\"0761\",{\"1\":{\"277\":1}}],[\"0700\",{\"1\":{\"277\":1}}],[\"0361\",{\"1\":{\"277\":1}}],[\"046e\",{\"1\":{\"277\":1}}],[\"0800\",{\"1\":{\"277\":1}}],[\"0a00\",{\"1\":{\"277\":1}}],[\"0f\",{\"1\":{\"91\":6,\"94\":2}}],[\"0047804\",{\"1\":{\"393\":1}}],[\"00478s\",{\"1\":{\"393\":1}}],[\"0036685\",{\"1\":{\"363\":1}}],[\"0034\",{\"1\":{\"277\":1}}],[\"00\",{\"1\":{\"363\":1,\"391\":2}}],[\"0067629\",{\"1\":{\"363\":1}}],[\"0027\",{\"1\":{\"277\":2}}],[\"0000\",{\"1\":{\"277\":1}}],[\"000002p\",{\"1\":{\"91\":2,\"94\":1}}],[\"0000000000001p\",{\"1\":{\"71\":1}}],[\"0012\",{\"1\":{\"277\":1}}],[\"001f\",{\"1\":{\"277\":1}}],[\"001d\",{\"1\":{\"277\":1}}],[\"001c\",{\"1\":{\"277\":1}}],[\"001a\",{\"1\":{\"277\":1}}],[\"0019\",{\"1\":{\"277\":1}}],[\"0011\",{\"1\":{\"81\":1}}],[\"001\",{\"1\":{\"81\":1}}],[\"02\",{\"1\":{\"81\":2,\"547\":1,\"548\":1,\"549\":1}}],[\"0149\",{\"1\":{\"277\":1}}],[\"0100\",{\"1\":{\"277\":4}}],[\"01000001001101100000000000000000\",{\"1\":{\"89\":1}}],[\"01i\",{\"1\":{\"95\":2}}],[\"01d\",{\"1\":{\"95\":1}}],[\"01f\",{\"1\":{\"95\":4}}],[\"0113277\",{\"1\":{\"391\":1}}],[\"011\",{\"1\":{\"89\":1}}],[\"011011\",{\"1\":{\"89\":1}}],[\"01\",{\"1\":{\"81\":4,\"95\":7,\"363\":3,\"391\":1,\"413\":1,\"448\":1,\"547\":2,\"548\":2,\"549\":2}}],[\"0l\",{\"1\":{\"77\":1}}],[\"0p0\",{\"1\":{\"94\":2}}],[\"0p\",{\"1\":{\"71\":1,\"91\":2,\"94\":1}}],[\"0d\",{\"1\":{\"71\":1,\"302\":1}}],[\"0xbad\",{\"1\":{\"137\":1}}],[\"0x33333333\",{\"1\":{\"119\":2}}],[\"0x55555555\",{\"1\":{\"119\":2}}],[\"0x80000000\",{\"1\":{\"110\":1}}],[\"0xff0000\",{\"1\":{\"117\":1}}],[\"0xff00\",{\"1\":{\"117\":1,\"119\":2}}],[\"0xffffffffl\",{\"1\":{\"123\":1}}],[\"0xffffffff\",{\"1\":{\"101\":1}}],[\"0xfff0000000000000l\",{\"1\":{\"71\":2}}],[\"0xff800001\",{\"1\":{\"101\":1}}],[\"0xff800000\",{\"1\":{\"91\":1,\"101\":1}}],[\"0x0f0f0f0f\",{\"1\":{\"119\":2}}],[\"0x00800000\",{\"1\":{\"91\":2}}],[\"0x0010000000000000l\",{\"1\":{\"71\":1}}],[\"0x0\",{\"1\":{\"71\":1,\"91\":1,\"94\":1}}],[\"0x1l\",{\"1\":{\"71\":1}}],[\"0x1\",{\"1\":{\"71\":2,\"91\":4,\"94\":4}}],[\"0x7f800001\",{\"1\":{\"101\":1}}],[\"0x7f800000\",{\"1\":{\"91\":1,\"101\":1}}],[\"0x7f7fffff\",{\"1\":{\"91\":2}}],[\"0x7fc00000\",{\"1\":{\"91\":2,\"99\":1}}],[\"0x7fefffffffffffffl\",{\"1\":{\"71\":2}}],[\"0x7fffffff\",{\"1\":{\"101\":1,\"110\":1}}],[\"0x7ff8000000000000l\",{\"1\":{\"71\":2,\"77\":1}}],[\"0x7ff0000000000000l\",{\"1\":{\"71\":1}}],[\"0\",{\"1\":{\"58\":3,\"70\":2,\"71\":9,\"79\":9,\"81\":9,\"91\":4,\"94\":3,\"98\":2,\"99\":1,\"111\":21,\"112\":2,\"116\":2,\"118\":2,\"120\":2,\"121\":10,\"134\":4,\"135\":1,\"136\":2,\"137\":8,\"139\":1,\"141\":2,\"143\":15,\"154\":1,\"166\":1,\"172\":1,\"174\":1,\"302\":10,\"321\":4,\"323\":2,\"363\":4,\"374\":1,\"391\":1,\"393\":20,\"398\":1,\"411\":2,\"416\":1,\"444\":1,\"447\":1,\"464\":2,\"530\":1,\"531\":1,\"532\":7,\"533\":10,\"534\":1,\"537\":11,\"541\":10,\"545\":10,\"547\":2,\"548\":2,\"549\":2,\"550\":2,\"551\":2,\"552\":2,\"555\":1,\"556\":1,\"557\":1,\"561\":10,\"566\":11,\"567\":2,\"583\":2,\"584\":1,\"589\":1,\"591\":1,\"595\":2,\"596\":2,\"647\":1,\"690\":1}}],[\"xnio\",{\"1\":{\"555\":4,\"556\":4,\"557\":4}}],[\"xsd\",{\"1\":{\"537\":2,\"541\":2,\"545\":2,\"561\":2,\"566\":2}}],[\"xsi\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"xsi=\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"xss256k\",{\"1\":{\"597\":1}}],[\"xss\",{\"1\":{\"363\":1,\"590\":1}}],[\"xss100等价于\",{\"1\":{\"359\":1}}],[\"xss128k\",{\"1\":{\"327\":1,\"363\":10}}],[\"xuyasong\",{\"1\":{\"467\":1}}],[\"x=4\",{\"1\":{\"464\":1}}],[\"xloggc\",{\"1\":{\"363\":1,\"382\":1,\"390\":1,\"392\":1,\"393\":1}}],[\"xcomp\",{\"1\":{\"357\":1}}],[\"xint\",{\"1\":{\"357\":1}}],[\"x参数\",{\"0\":{\"357\":1}}],[\"xml<\",{\"1\":{\"690\":1,\"691\":2}}],[\"xml配置文件\",{\"1\":{\"690\":1,\"691\":1}}],[\"xmlschema\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"xmlns\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"xmlns=\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"xml\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"547\":2,\"550\":2,\"551\":2,\"552\":1,\"561\":1,\"566\":1,\"690\":1}}],[\"xml文件build节点的配置\",{\"0\":{\"691\":1}}],[\"xml文件配置\",{\"0\":{\"541\":1}}],[\"xml文件\",{\"0\":{\"537\":1,\"566\":1}}],[\"xmn1g\",{\"1\":{\"597\":1}}],[\"xmn设置\",{\"1\":{\"363\":1}}],[\"xmn2g\",{\"1\":{\"363\":10}}],[\"xmn\",{\"1\":{\"363\":1,\"590\":1}}],[\"xmx4g\",{\"1\":{\"597\":1}}],[\"xmx300m\",{\"1\":{\"369\":1,\"398\":1}}],[\"xmx3800m\",{\"1\":{\"363\":2}}],[\"xmx3550m\",{\"1\":{\"363\":8}}],[\"xmx相同\",{\"1\":{\"363\":1}}],[\"xmx\",{\"1\":{\"363\":1,\"590\":1}}],[\"xmx100m\",{\"1\":{\"362\":1}}],[\"xmx1000等价于\",{\"1\":{\"359\":1}}],[\"xmx20m\",{\"1\":{\"318\":1,\"369\":1}}],[\"xms4g\",{\"1\":{\"597\":1}}],[\"xms300m\",{\"1\":{\"369\":1,\"398\":1}}],[\"xms3800m\",{\"1\":{\"363\":2}}],[\"xms3550m\",{\"1\":{\"363\":8}}],[\"xms\",{\"1\":{\"363\":1,\"590\":1}}],[\"xms100m\",{\"1\":{\"362\":1}}],[\"xms1000等价于\",{\"1\":{\"359\":1}}],[\"xms20m\",{\"1\":{\"318\":1,\"369\":1}}],[\"xmixed\",{\"1\":{\"357\":1}}],[\"xbootclassoath选项指定的jar包\",{\"1\":{\"287\":1}}],[\"xor\",{\"1\":{\"137\":1}}],[\"xorshift\",{\"1\":{\"137\":2}}],[\"xx<name>=<value>表示name属性的值是value\",{\"1\":{\"358\":1}}],[\"xx参数\",{\"0\":{\"358\":1}}],[\"xx\",{\"1\":{\"137\":3,\"343\":2,\"351\":6,\"358\":4,\"359\":3,\"360\":1,\"361\":1,\"362\":1,\"363\":52,\"369\":3,\"380\":2,\"382\":3,\"390\":3,\"392\":1,\"393\":2,\"398\":4,\"399\":5,\"412\":2,\"590\":2}}],[\"xxxx\",{\"1\":{\"652\":1,\"692\":1}}],[\"xxx\",{\"1\":{\"62\":1,\"361\":1,\"690\":1,\"692\":3}}],[\"x\",{\"0\":{\"532\":1,\"533\":1,\"534\":1},\"1\":{\"58\":3,\"89\":1,\"107\":1,\"111\":4,\"123\":3,\"127\":1,\"464\":34,\"466\":3,\"534\":2}}],[\"|=\",{\"1\":{\"122\":5}}],[\"||\",{\"1\":{\"60\":1,\"76\":2,\"98\":1,\"116\":1,\"134\":1,\"137\":4,\"143\":2,\"486\":2,\"508\":1,\"509\":1}}],[\"|\",{\"1\":{\"57\":1,\"115\":1,\"117\":3,\"118\":1,\"119\":6,\"120\":2,\"374\":1}}],[\"并在本地提交\",{\"1\":{\"672\":1}}],[\"并应用到状态机后\",{\"1\":{\"467\":1}}],[\"并成功写入数据\",{\"1\":{\"467\":1}}],[\"并不是我不想提交\",{\"1\":{\"666\":1}}],[\"并不是正确\",{\"1\":{\"460\":1}}],[\"并不知道另外\",{\"1\":{\"467\":1}}],[\"并不能总是得到满足\",{\"1\":{\"399\":1}}],[\"并输出方法路径上的每个节点上耗时\",{\"1\":{\"377\":1}}],[\"并行的时间\",{\"1\":{\"393\":1}}],[\"并行\",{\"1\":{\"351\":1}}],[\"并行收集器自动选择年轻代区大小和相应的survivor区比例\",{\"1\":{\"363\":1}}],[\"并行收集器\",{\"1\":{\"348\":1}}],[\"并行与并发\",{\"1\":{\"347\":1}}],[\"并发\",{\"1\":{\"603\":4,\"604\":4}}],[\"并发编程领域的东西\",{\"1\":{\"468\":1}}],[\"并发编程网\",{\"1\":{\"16\":3}}],[\"并发基础\",{\"1\":{\"448\":1}}],[\"并发集合类具备远超同步集合类更好的性能\",{\"1\":{\"443\":1}}],[\"并发集合通过将其数据划分为段来实现线程安全\",{\"1\":{\"443\":1}}],[\"并发阶段会降低吞吐量\",{\"1\":{\"346\":1}}],[\"并发收集器\",{\"1\":{\"348\":1,\"351\":1}}],[\"并发收集\",{\"1\":{\"346\":1}}],[\"并发清除\",{\"1\":{\"346\":1}}],[\"并发标记和并发清除\",{\"1\":{\"346\":1}}],[\"并发标记\",{\"1\":{\"346\":1,\"347\":1}}],[\"并分配处理器执行时\",{\"1\":{\"297\":1}}],[\"并初始化其值为0\",{\"1\":{\"282\":1}}],[\"并将其初始化为默认值\",{\"1\":{\"282\":1}}],[\"并等待它们完成\",{\"1\":{\"154\":1}}],[\"并保留not\",{\"1\":{\"101\":1}}],[\"并且master分支中增加内容\",{\"1\":{\"664\":1}}],[\"并且检查文件\",{\"1\":{\"664\":1}}],[\"并且other中添加数据\",{\"1\":{\"664\":1}}],[\"并且提交到暂存区\",{\"1\":{\"662\":1}}],[\"并且在里面写入123456789\",{\"1\":{\"649\":1}}],[\"并且在每次更新selector或者rule的时候都会更新对应的selector或者rule数据\",{\"1\":{\"497\":1}}],[\"并且使用commit提交到一个分支中\",{\"1\":{\"638\":1}}],[\"并且git提示你需要commit\",{\"1\":{\"651\":1}}],[\"并且git\",{\"1\":{\"638\":1}}],[\"并且是根据pluginname进行删除的\",{\"1\":{\"488\":1}}],[\"并且完成的任何事务都会改变数据库的状态\",{\"1\":{\"471\":1}}],[\"并且写操作将被保证取代前一次写入\",{\"1\":{\"470\":1}}],[\"并且每个单独的处理器的操作按照其程序指定的顺序出现在这个顺序中\",{\"1\":{\"463\":1}}],[\"并且增量不是原子的\",{\"1\":{\"444\":1}}],[\"并且将获得预期结果\",{\"1\":{\"439\":1}}],[\"并且将对应的参数转为true或者false\",{\"1\":{\"57\":1}}],[\"并且可以同时被多个线程安全地调用\",{\"1\":{\"439\":1}}],[\"并且有可能混合收集期回收不到空间\",{\"1\":{\"399\":1}}],[\"并且输入用户名和密码则登录成功\",{\"1\":{\"374\":1}}],[\"并且一直打开\",{\"1\":{\"363\":1}}],[\"并且不能超过1秒\",{\"1\":{\"350\":1}}],[\"并且没有停顿时间要求\",{\"1\":{\"350\":1}}],[\"并且没有年龄限制的话\",{\"1\":{\"314\":1}}],[\"并且修改tams的值\",{\"1\":{\"347\":1}}],[\"并且把它们标记出来\",{\"1\":{\"336\":1}}],[\"并且年龄都挺大的\",{\"1\":{\"313\":1}}],[\"并且这个异常没有在方法体内得到处理\",{\"1\":{\"302\":1}}],[\"并且\",{\"1\":{\"251\":1}}],[\"并且未调用的finalizers\",{\"1\":{\"154\":1}}],[\"并且已经有hashcode就直接返回该hashcode\",{\"1\":{\"137\":1}}],[\"并且以表示这个值的integer对象形式返回\",{\"1\":{\"115\":1}}],[\"并且返回对应的int值\",{\"1\":{\"58\":1}}],[\"根据jvm系统环境而定\",{\"1\":{\"388\":1}}],[\"根据用户所期望的gc停顿时间制定回收计划\",{\"1\":{\"347\":1}}],[\"根据应用的线程所需内存大小进行调整\",{\"1\":{\"327\":1}}],[\"根据之前对于heap的介绍可以知道\",{\"1\":{\"309\":1}}],[\"根据该对象生成一个相同的新对象\",{\"1\":{\"139\":1}}],[\"根据globals\",{\"1\":{\"137\":1}}],[\"根据\",{\"1\":{\"101\":1}}],[\"根据ieee\",{\"1\":{\"78\":1}}],[\"根据不同的boolean值返回对应boolean字符串\",{\"1\":{\"56\":1}}],[\"根据值返回true或者false\",{\"1\":{\"53\":1}}],[\"则需要解决冲突\",{\"1\":{\"672\":1}}],[\"则需要禁用该算法\",{\"1\":{\"479\":1}}],[\"则因为远程分支比你的本地更新早\",{\"1\":{\"672\":1}}],[\"则能够展示导航栏\",{\"1\":{\"616\":1}}],[\"则不会使用二级缓存\",{\"1\":{\"495\":1}}],[\"则通过ac自动机构建的失配节点继续访问\",{\"1\":{\"493\":1}}],[\"则从trie缓存中匹配\",{\"1\":{\"487\":1}}],[\"则说明无法匹配\",{\"1\":{\"493\":1}}],[\"则说明匹配失效\",{\"1\":{\"483\":1}}],[\"则说明此时\",{\"1\":{\"467\":1}}],[\"则对端会收到复位错误\",{\"1\":{\"479\":1}}],[\"则可以读取状态机中的数据返回\",{\"1\":{\"467\":1}}],[\"则可以通过使它们的字段成为线程局部的来创建不在线程之间共享状态的线程安全类\",{\"1\":{\"441\":1}}],[\"则可以通过使它们成为不可变对象来创建线程安全类\",{\"1\":{\"440\":1}}],[\"则这条线会一直沿时间轴向前\",{\"1\":{\"466\":1}}],[\"则这个计数器为空\",{\"1\":{\"297\":1}}],[\"则任何人都可以硬分叉\",{\"1\":{\"459\":1}}],[\"则用户代码可以充分利用cpu资源\",{\"1\":{\"343\":1}}],[\"则计数器记录的是正在执行的虚拟机字节码指令的地址\",{\"1\":{\"297\":1}}],[\"则忽略第二次和后续调用\",{\"1\":{\"192\":1}}],[\"则以文件名作为参数调用其\",{\"1\":{\"188\":1}}],[\"则此方法建议\",{\"1\":{\"182\":1,\"185\":1}}],[\"则该异常将被忽略\",{\"1\":{\"144\":1}}],[\"则channel的iswritable\",{\"1\":{\"479\":1}}],[\"则c\",{\"1\":{\"138\":1}}],[\"则\",{\"1\":{\"138\":1,\"466\":1}}],[\"则结果为0x7fc00000\",{\"1\":{\"99\":1,\"101\":1}}],[\"则结果为0x7f800000\",{\"1\":{\"99\":1,\"101\":1}}],[\"则结果为0xff800000\",{\"1\":{\"99\":1,\"101\":1}}],[\"则表示\",{\"1\":{\"70\":1,\"398\":1}}],[\"则表示+infinity\",{\"1\":{\"70\":1}}],[\"则返回零\",{\"1\":{\"122\":2}}],[\"则返回的结果为\",{\"1\":{\"101\":1}}],[\"则返回的结果为负无穷大\",{\"1\":{\"101\":1}}],[\"则返回的结果为正无穷大\",{\"1\":{\"101\":1}}],[\"则返回\",{\"1\":{\"76\":1,\"98\":1,\"177\":1}}],[\"则返回1或者\",{\"1\":{\"58\":1}}],[\"则返回false\",{\"1\":{\"54\":1}}],[\"则返回true或者false\",{\"1\":{\"54\":1}}],[\"则予知\",{\"1\":{\"15\":1}}],[\"v3协议发布\",{\"1\":{\"611\":1}}],[\"v1\",{\"1\":{\"321\":1}}],[\"vim\",{\"1\":{\"374\":1}}],[\"visitend\",{\"1\":{\"321\":1}}],[\"visitmaxs\",{\"1\":{\"321\":1}}],[\"visitmethodinsn\",{\"1\":{\"321\":1}}],[\"visitmethod\",{\"1\":{\"321\":1}}],[\"visitinsn\",{\"1\":{\"321\":1}}],[\"visitvarinsn\",{\"1\":{\"321\":1}}],[\"visit\",{\"1\":{\"321\":1}}],[\"visualvm\",{\"1\":{\"316\":1}}],[\"visualgc插件下载链接\",{\"1\":{\"316\":1}}],[\"virtual\",{\"0\":{\"296\":1},\"1\":{\"137\":1,\"273\":1,\"291\":4,\"294\":5,\"295\":4,\"296\":8,\"297\":6,\"298\":1}}],[\"variables\",{\"1\":{\"302\":2,\"379\":1,\"437\":1,\"491\":1}}],[\"variable\",{\"1\":{\"143\":1,\"491\":2}}],[\"variants\",{\"1\":{\"139\":1}}],[\"variation\",{\"1\":{\"137\":1}}],[\"various\",{\"1\":{\"139\":1,\"291\":1}}],[\"val\",{\"1\":{\"76\":2,\"79\":2,\"81\":1,\"115\":4}}],[\"value=\",{\"1\":{\"552\":8}}],[\"value是对应选择器的规则集合\",{\"1\":{\"496\":1}}],[\"value是对应插件的选择器的集合\",{\"1\":{\"496\":1}}],[\"value是shenyutrienode\",{\"1\":{\"491\":2}}],[\"value是基于caffeine实现的windowtinylfumap\",{\"1\":{\"485\":1}}],[\"value为ruledata\",{\"1\":{\"485\":1}}],[\"value为selectordata\",{\"1\":{\"485\":1}}],[\"value为map<string\",{\"1\":{\"485\":2}}],[\"value为integer可定义的最大值\",{\"1\":{\"110\":1}}],[\"value为integer可定义的最小值\",{\"1\":{\"110\":1}}],[\"value都不可以为null\",{\"1\":{\"251\":1}}],[\"value存储形式存在\",{\"1\":{\"251\":1}}],[\"value值可以为null\",{\"1\":{\"248\":1}}],[\"values\",{\"1\":{\"77\":1,\"79\":1,\"99\":1,\"379\":1,\"460\":1}}],[\"valueof在返回的时候用了构造方法\",{\"1\":{\"75\":1}}],[\"valueof与parsedouble的区别在于valueof返回double类型\",{\"1\":{\"75\":1}}],[\"valueof\",{\"0\":{\"127\":1},\"1\":{\"53\":2,\"62\":2,\"74\":2,\"95\":9,\"107\":1,\"112\":1,\"115\":1,\"127\":1,\"439\":1}}],[\"valueof方法有两个\",{\"1\":{\"74\":1}}],[\"valueof方法\",{\"0\":{\"53\":1,\"74\":1,\"95\":1}}],[\"value\",{\"1\":{\"49\":2,\"52\":3,\"55\":1,\"56\":1,\"71\":7,\"73\":4,\"76\":2,\"77\":2,\"78\":1,\"91\":6,\"93\":7,\"94\":3,\"97\":1,\"98\":1,\"99\":2,\"101\":1,\"110\":6,\"111\":1,\"112\":3,\"116\":2,\"120\":2,\"134\":2,\"137\":12,\"143\":4,\"177\":1,\"248\":1,\"297\":1,\"460\":3,\"492\":1,\"562\":1}}],[\"verify\",{\"0\":{\"281\":1},\"1\":{\"137\":4,\"143\":1}}],[\"version=\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"552\":1,\"561\":1,\"566\":1,\"690\":1}}],[\"version验证是否配置成功\",{\"1\":{\"412\":1}}],[\"version>8\",{\"1\":{\"545\":1}}],[\"version>4\",{\"1\":{\"537\":1}}],[\"version>5\",{\"1\":{\"537\":1}}],[\"version>3\",{\"1\":{\"537\":1,\"545\":1}}],[\"version>2021\",{\"1\":{\"537\":2}}],[\"version>2\",{\"1\":{\"537\":2}}],[\"version>1\",{\"1\":{\"537\":1,\"541\":1,\"566\":1}}],[\"version>\",{\"1\":{\"321\":1,\"537\":17,\"541\":3,\"545\":5,\"561\":2,\"566\":4,\"691\":4}}],[\"version\",{\"1\":{\"116\":1,\"137\":1,\"277\":6,\"356\":1,\"360\":1,\"377\":1,\"537\":7,\"545\":2,\"555\":3,\"556\":3,\"557\":3,\"691\":2}}],[\"vmoptions\",{\"1\":{\"363\":1}}],[\"vmtarget\",{\"1\":{\"139\":1}}],[\"vmsymbols\",{\"1\":{\"139\":1,\"143\":3}}],[\"vm\",{\"1\":{\"112\":1,\"136\":1,\"137\":3,\"139\":1,\"141\":1,\"143\":2,\"393\":1,\"398\":1,\"399\":1}}],[\"v\",{\"1\":{\"76\":3,\"97\":3,\"98\":3,\"111\":1,\"115\":4,\"135\":3,\"137\":6,\"143\":4,\"302\":3,\"321\":2,\"486\":2,\"670\":1}}],[\"void\",{\"1\":{\"52\":1,\"54\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"76\":1,\"94\":1,\"95\":1,\"98\":1,\"107\":1,\"114\":1,\"115\":1,\"118\":1,\"119\":1,\"120\":2,\"134\":7,\"135\":6,\"141\":3,\"143\":3,\"153\":1,\"156\":1,\"158\":1,\"162\":1,\"164\":1,\"166\":1,\"168\":2,\"170\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"181\":1,\"184\":1,\"187\":2,\"189\":1,\"191\":2,\"193\":1,\"275\":1,\"294\":2,\"302\":6,\"304\":1,\"325\":2,\"368\":2,\"437\":1,\"441\":2,\"444\":2,\"445\":1,\"446\":1,\"447\":1,\"486\":1,\"488\":2,\"492\":3,\"494\":2,\"497\":1,\"499\":1,\"506\":1,\"568\":1}}],[\"将config目录加入classpath目录\",{\"1\":{\"691\":1}}],[\"将项目中代码文件打成jar包\",{\"1\":{\"691\":1}}],[\"将依赖cp到lib目录下\",{\"1\":{\"691\":1}}],[\"将会打n个类型的包\",{\"1\":{\"690\":1}}],[\"将会减小年老代大小\",{\"1\":{\"363\":1}}],[\"将所有文件复制到testgit目录下\",{\"1\":{\"679\":1}}],[\"将moremind\",{\"0\":{\"563\":1}}],[\"将module1\",{\"1\":{\"556\":1,\"557\":1}}],[\"将空数据存入缓存中\",{\"1\":{\"486\":1}}],[\"将迫使客户端重新选择新的节点进行读写操作\",{\"1\":{\"467\":1}}],[\"将不再处理读写请求\",{\"1\":{\"467\":1}}],[\"将无法接收到\",{\"1\":{\"467\":1}}],[\"将请求\",{\"1\":{\"467\":1}}],[\"将\",{\"1\":{\"447\":1}}],[\"将下载好的hsdis\",{\"1\":{\"411\":2}}],[\"将连接服务器地址改为公网ip地址\",{\"1\":{\"374\":1}}],[\"将内存划分为两块相等的区域\",{\"1\":{\"337\":1}}],[\"将栈顶int类型值保存到\",{\"1\":{\"302\":1}}],[\"将栈顶元素弹出栈\",{\"1\":{\"302\":1}}],[\"将int类型值存入局部变量表\",{\"1\":{\"302\":1}}],[\"将int类型常量3压入\",{\"1\":{\"302\":1}}],[\"将抛出outofmemoryerror异常\",{\"1\":{\"294\":1}}],[\"将这两种情况视为没有必要执行\",{\"1\":{\"402\":1}}],[\"将这个字节流所代表的静态存储结构转化为方法区的运行时数据\",{\"1\":{\"294\":1}}],[\"将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\",{\"1\":{\"279\":1,\"290\":1}}],[\"将这些方法进行注册\",{\"1\":{\"135\":1}}],[\"将对讲加入objectwaiter中\",{\"1\":{\"143\":1}}],[\"将对应的boolean值转为对应的boolean值\",{\"1\":{\"55\":1}}],[\"将生成的hash值放回对象头中\",{\"1\":{\"137\":1}}],[\"将进行除法过程的值\",{\"1\":{\"124\":1,\"125\":1}}],[\"将double数转为字符串\",{\"1\":{\"81\":1}}],[\"将输入拖来的字符串解析为true或者false\",{\"1\":{\"52\":1}}],[\"将传过来的boolean作为参数\",{\"1\":{\"52\":1}}],[\"源码到类文件\",{\"0\":{\"274\":1}}],[\"源码\",{\"0\":{\"153\":1,\"156\":1,\"160\":1,\"164\":1,\"168\":1,\"172\":1,\"181\":1,\"184\":1,\"187\":1,\"191\":1,\"275\":1}}],[\"源码如下\",{\"1\":{\"141\":1}}],[\"源码目录为\",{\"1\":{\"136\":1,\"137\":1}}],[\"源码解读\",{\"0\":{\"50\":1,\"90\":1,\"108\":1}}],[\"源码大佬\",{\"1\":{\"15\":1}}],[\"34\",{\"1\":{\"604\":1}}],[\"35\",{\"1\":{\"603\":1}}],[\"36\",{\"1\":{\"603\":1}}],[\"369\",{\"1\":{\"413\":1}}],[\"3c42f17a\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"3pc\",{\"0\":{\"475\":1},\"1\":{\"475\":1}}],[\"3932\",{\"1\":{\"476\":1}}],[\"39\",{\"1\":{\"374\":4}}],[\"37\",{\"1\":{\"603\":2,\"604\":1}}],[\"372\",{\"1\":{\"555\":1}}],[\"3782737920\",{\"1\":{\"177\":1}}],[\"375\",{\"1\":{\"89\":1}}],[\"3000\",{\"1\":{\"547\":2,\"550\":2,\"551\":2,\"592\":14,\"593\":14}}],[\"3060\",{\"1\":{\"448\":1}}],[\"303\",{\"1\":{\"391\":1}}],[\"305+0800\",{\"1\":{\"391\":1}}],[\"30\",{\"1\":{\"121\":1,\"459\":1}}],[\"308\",{\"1\":{\"71\":1}}],[\"31\",{\"1\":{\"118\":2,\"121\":3,\"374\":2,\"571\":1,\"603\":2,\"604\":3}}],[\"33333333333333333这样的信息\",{\"1\":{\"664\":1}}],[\"3333333333333\",{\"1\":{\"664\":1}}],[\"3306\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"33280k\",{\"1\":{\"363\":2}}],[\"33\",{\"1\":{\"116\":2,\"603\":1}}],[\"38400k\",{\"1\":{\"363\":1}}],[\"38f\",{\"1\":{\"91\":2}}],[\"38\",{\"1\":{\"91\":1,\"604\":1}}],[\"32768\",{\"1\":{\"591\":2}}],[\"328\",{\"1\":{\"555\":1}}],[\"32<\",{\"1\":{\"545\":1}}],[\"32\",{\"1\":{\"91\":1,\"110\":1,\"116\":1,\"120\":1,\"121\":2,\"123\":2,\"139\":1,\"143\":1,\"603\":3,\"604\":1}}],[\"324\",{\"1\":{\"71\":1}}],[\"32位\",{\"1\":{\"69\":1,\"88\":1}}],[\"3\",{\"0\":{\"50\":1,\"51\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":2,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"87\":1,\"88\":1,\"89\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":2,\"113\":1,\"137\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":2,\"166\":1,\"170\":1,\"174\":1,\"189\":1,\"193\":1,\"277\":1,\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"283\":2,\"284\":2,\"285\":1,\"289\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":2,\"297\":1,\"298\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":2,\"312\":1,\"313\":1,\"314\":1,\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":2,\"338\":1,\"339\":1,\"343\":1,\"358\":1,\"367\":1,\"370\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":2,\"376\":2,\"377\":2,\"378\":1,\"379\":1,\"380\":1,\"381\":2,\"382\":1,\"390\":1,\"391\":1,\"392\":1,\"393\":2,\"400\":1,\"411\":1,\"417\":1,\"431\":1,\"437\":1,\"441\":1,\"459\":1,\"460\":1,\"465\":1,\"468\":1,\"476\":1,\"484\":1,\"485\":1,\"486\":1,\"487\":2,\"488\":1,\"489\":1,\"493\":1,\"499\":1,\"692\":1},\"1\":{\"81\":1,\"91\":2,\"107\":4,\"111\":21,\"120\":1,\"122\":1,\"137\":2,\"141\":1,\"238\":1,\"239\":1,\"241\":1,\"242\":1,\"243\":1,\"245\":1,\"246\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"279\":1,\"287\":1,\"290\":2,\"295\":2,\"302\":5,\"321\":1,\"341\":1,\"346\":1,\"347\":1,\"351\":1,\"362\":1,\"366\":1,\"367\":1,\"368\":1,\"369\":1,\"374\":1,\"388\":1,\"393\":1,\"398\":2,\"399\":1,\"402\":3,\"416\":1,\"441\":1,\"442\":1,\"443\":1,\"448\":1,\"464\":4,\"466\":1,\"467\":2,\"488\":1,\"493\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":5,\"545\":1,\"555\":6,\"556\":3,\"557\":3,\"581\":1,\"582\":1,\"589\":1,\"604\":1,\"665\":1,\"679\":2}}],[\"=2\",{\"1\":{\"464\":1}}],[\"=true\",{\"1\":{\"362\":1}}],[\"=8bit\",{\"1\":{\"362\":1}}],[\"=地址是什么\",{\"1\":{\"283\":1}}],[\"=>\",{\"1\":{\"71\":4,\"112\":1,\"114\":12}}],[\"======================================================================\",{\"1\":{\"692\":2}}],[\"===>这个repository就是上面说的你的本地仓库\",{\"1\":{\"647\":1}}],[\"==>\",{\"1\":{\"91\":1,\"302\":1}}],[\"==\",{\"1\":{\"58\":1,\"71\":7,\"76\":2,\"77\":1,\"79\":1,\"81\":1,\"91\":7,\"98\":2,\"99\":1,\"102\":1,\"107\":4,\"115\":1,\"116\":2,\"121\":6,\"134\":1,\"136\":1,\"137\":9,\"139\":1,\"141\":18,\"143\":20,\"506\":2,\"508\":2,\"509\":2,\"662\":1}}],[\"=\",{\"0\":{\"127\":3},\"1\":{\"49\":2,\"52\":6,\"54\":1,\"57\":2,\"71\":10,\"73\":2,\"77\":3,\"79\":2,\"81\":6,\"89\":2,\"91\":10,\"93\":3,\"94\":2,\"97\":1,\"99\":3,\"102\":2,\"107\":5,\"110\":7,\"111\":4,\"112\":19,\"115\":5,\"116\":11,\"119\":4,\"120\":6,\"121\":19,\"127\":1,\"135\":1,\"136\":4,\"137\":40,\"139\":11,\"141\":47,\"143\":27,\"153\":2,\"156\":2,\"158\":1,\"160\":2,\"162\":1,\"164\":2,\"166\":1,\"172\":4,\"174\":6,\"187\":2,\"191\":3,\"282\":1,\"284\":1,\"294\":1,\"302\":1,\"304\":1,\"314\":1,\"321\":7,\"362\":1,\"366\":1,\"439\":3,\"440\":1,\"441\":3,\"442\":3,\"443\":1,\"444\":2,\"447\":2,\"485\":2,\"486\":16,\"487\":3,\"488\":6,\"491\":3,\"492\":1,\"493\":9,\"496\":2,\"497\":4,\"498\":2,\"499\":2,\"506\":6,\"509\":1,\"562\":4,\"568\":1,\"569\":1,\"692\":2}}],[\"oom\",{\"1\":{\"294\":1}}],[\"oops\",{\"1\":{\"139\":1,\"143\":1}}],[\"oop<intptr\",{\"1\":{\"137\":2}}],[\"oop\",{\"1\":{\"137\":2,\"139\":14,\"143\":4,\"441\":1}}],[\"overwriteifnewer>\",{\"1\":{\"691\":1}}],[\"overwritesnapshots>\",{\"1\":{\"691\":1}}],[\"overwritereleases>\",{\"1\":{\"691\":1}}],[\"overriding\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"override\",{\"1\":{\"441\":3,\"487\":1,\"492\":1,\"498\":1,\"506\":1}}],[\"overhead\",{\"1\":{\"319\":1}}],[\"over\",{\"1\":{\"143\":2}}],[\"overall\",{\"1\":{\"137\":1}}],[\"ok\",{\"1\":{\"143\":1,\"571\":2}}],[\"oldplugindata\",{\"1\":{\"497\":1}}],[\"old收集器是parallel\",{\"1\":{\"345\":1}}],[\"old收集器是serial收集器的老年代版本\",{\"1\":{\"344\":1}}],[\"old收集器\",{\"0\":{\"344\":1,\"345\":1}}],[\"old区对象存活时间比较长\",{\"1\":{\"339\":1}}],[\"old区\",{\"1\":{\"339\":1}}],[\"old区详解\",{\"0\":{\"312\":1}}],[\"old区的gc我们称作为major\",{\"1\":{\"311\":1,\"312\":1}}],[\"old\",{\"1\":{\"143\":3,\"348\":2}}],[\"our\",{\"1\":{\"141\":1}}],[\"outputdirectory>\",{\"1\":{\"690\":4,\"691\":1}}],[\"outofmemoryerror\",{\"1\":{\"294\":1,\"295\":1,\"296\":1,\"319\":1,\"323\":1}}],[\"outside\",{\"1\":{\"137\":1,\"141\":1}}],[\"out\",{\"1\":{\"54\":4,\"57\":2,\"58\":4,\"59\":3,\"60\":2,\"61\":4,\"71\":16,\"91\":16,\"94\":1,\"95\":7,\"98\":4,\"107\":2,\"114\":3,\"118\":3,\"119\":1,\"120\":2,\"134\":1,\"139\":1,\"143\":2,\"158\":1,\"162\":3,\"166\":2,\"170\":4,\"174\":2,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"189\":3,\"193\":3,\"275\":1,\"302\":2,\"325\":1,\"368\":4,\"374\":1,\"441\":2,\"644\":1}}],[\"opcodes\",{\"1\":{\"321\":6}}],[\"op\",{\"1\":{\"302\":1}}],[\"op2\",{\"1\":{\"275\":1,\"302\":1}}],[\"op1=3\",{\"1\":{\"302\":1}}],[\"op1+op2\",{\"1\":{\"275\":1}}],[\"op1\",{\"1\":{\"275\":1,\"302\":1}}],[\"optional\",{\"1\":{\"487\":1,\"497\":3,\"499\":2,\"547\":4,\"548\":4,\"549\":4}}],[\"opts\",{\"1\":{\"374\":1}}],[\"opts=\",{\"1\":{\"374\":1}}],[\"opt\",{\"1\":{\"139\":1,\"692\":1}}],[\"operand\",{\"1\":{\"302\":2}}],[\"operation\",{\"1\":{\"137\":2,\"141\":1}}],[\"operations\",{\"1\":{\"137\":2}}],[\"openfeign目录执行命令mvn\",{\"1\":{\"563\":1}}],[\"openfeign打包到本地\",{\"0\":{\"563\":1}}],[\"openfeign\",{\"1\":{\"562\":4,\"568\":1,\"569\":1}}],[\"openfeign<\",{\"1\":{\"561\":4,\"566\":1}}],[\"openfeign的pom文件\",{\"0\":{\"561\":1}}],[\"openfeign子模块的init\",{\"0\":{\"560\":1}}],[\"openfeign子模块\",{\"0\":{\"559\":1}}],[\"opensource\",{\"0\":{\"716\":1},\"2\":{\"510\":1}}],[\"opening\",{\"1\":{\"174\":1}}],[\"open\",{\"1\":{\"174\":3,\"622\":1,\"626\":1}}],[\"openjdk\",{\"1\":{\"589\":1}}],[\"openjdk默认的hashcode方法实现和对象内存地址无关\",{\"1\":{\"137\":1}}],[\"openjdk8默认采用第五种方法\",{\"1\":{\"137\":1}}],[\"oam\",{\"1\":{\"139\":1}}],[\"os放弃发送缓冲区的数据直接向对端发送rst包\",{\"1\":{\"479\":1}}],[\"osts\",{\"1\":{\"143\":1}}],[\"osthreadwaitstate\",{\"1\":{\"143\":2}}],[\"osthread\",{\"1\":{\"143\":3}}],[\"os\",{\"1\":{\"137\":1,\"143\":3}}],[\"otherwise\",{\"1\":{\"143\":1}}],[\"other\",{\"1\":{\"137\":2,\"143\":1,\"273\":1,\"291\":1,\"298\":1,\"460\":1,\"664\":1}}],[\"own\",{\"1\":{\"143\":1,\"297\":1}}],[\"ownership\",{\"1\":{\"143\":1}}],[\"owner\",{\"1\":{\"141\":2,\"143\":6}}],[\"owned\",{\"1\":{\"137\":2,\"141\":1}}],[\"owns\",{\"1\":{\"137\":1,\"143\":1}}],[\"obtainplugindata\",{\"1\":{\"497\":1}}],[\"obtainruledata\",{\"1\":{\"487\":1,\"498\":1}}],[\"obtainruledatacacheifenabled\",{\"1\":{\"487\":2}}],[\"obtainselectordata\",{\"1\":{\"487\":2,\"498\":1}}],[\"obtainselectordatacacheifenabled\",{\"1\":{\"487\":2}}],[\"obtained\",{\"1\":{\"120\":2}}],[\"obj2\",{\"1\":{\"368\":2}}],[\"obj2=new\",{\"1\":{\"368\":1}}],[\"obj1\",{\"1\":{\"368\":2}}],[\"obj1=new\",{\"1\":{\"368\":1}}],[\"obj=new\",{\"1\":{\"304\":1,\"305\":1}}],[\"obj进行copy及c++层数据结构的设置\",{\"1\":{\"139\":1}}],[\"obj\",{\"1\":{\"134\":2,\"136\":4,\"137\":13,\"139\":31,\"141\":7,\"143\":10,\"304\":1}}],[\"objectlockcounter\",{\"1\":{\"447\":1}}],[\"objectwaiter\",{\"1\":{\"141\":11,\"143\":11}}],[\"object分别存放的是hashcode和java的线程id\",{\"1\":{\"137\":1}}],[\"object和biased\",{\"1\":{\"137\":1}}],[\"objectmonitor对象包含一个\",{\"1\":{\"141\":1}}],[\"objectmonitor对象\",{\"1\":{\"141\":1}}],[\"objectmonitor\",{\"1\":{\"137\":1,\"141\":3,\"143\":5}}],[\"objects\",{\"1\":{\"137\":1,\"139\":3,\"379\":3,\"381\":2,\"486\":6,\"493\":4}}],[\"objectsynchronizer\",{\"1\":{\"137\":3,\"141\":5,\"143\":4}}],[\"object类\",{\"0\":{\"132\":1},\"1\":{\"289\":1}}],[\"object\",{\"1\":{\"49\":2,\"133\":1,\"134\":3,\"135\":3,\"136\":2,\"137\":7,\"139\":4,\"141\":1,\"143\":4,\"302\":1,\"304\":3,\"305\":2,\"321\":2,\"368\":4,\"447\":3,\"460\":3,\"486\":1,\"493\":1}}],[\"o\",{\"1\":{\"111\":1,\"376\":1}}],[\"ofnullable\",{\"1\":{\"487\":1,\"497\":3,\"499\":2}}],[\"off\",{\"1\":{\"143\":1,\"692\":1}}],[\"of\",{\"0\":{\"273\":1},\"1\":{\"77\":1,\"79\":2,\"99\":1,\"110\":2,\"124\":1,\"125\":1,\"134\":1,\"137\":11,\"139\":10,\"141\":5,\"143\":18,\"174\":1,\"187\":1,\"273\":1,\"291\":3,\"294\":1,\"297\":4,\"298\":1,\"379\":2,\"460\":3,\"465\":1,\"479\":1,\"486\":1,\"491\":3,\"493\":1}}],[\"onmismatch>\",{\"1\":{\"552\":1}}],[\"onmatch>\",{\"1\":{\"552\":1}}],[\"onapplicationevent\",{\"1\":{\"492\":1}}],[\"onedrive\",{\"1\":{\"623\":1}}],[\"onerrorresume\",{\"1\":{\"509\":1}}],[\"one\",{\"1\":{\"443\":1,\"486\":1,\"493\":1}}],[\"once\",{\"1\":{\"143\":1,\"297\":1}}],[\"only\",{\"1\":{\"137\":2,\"141\":1,\"143\":1,\"291\":1,\"460\":1,\"486\":1,\"491\":1,\"493\":1}}],[\"on\",{\"1\":{\"77\":1,\"99\":1,\"137\":2,\"139\":2,\"141\":2,\"143\":9,\"154\":1,\"181\":1,\"182\":1,\"184\":1,\"185\":1,\"291\":1,\"294\":1,\"295\":1,\"297\":1,\"413\":2,\"479\":1,\"555\":1,\"556\":1,\"557\":1}}],[\"origin\",{\"1\":{\"671\":2,\"672\":7,\"679\":4}}],[\"orelse\",{\"1\":{\"486\":1,\"487\":1,\"493\":1}}],[\"oracle\",{\"1\":{\"273\":1,\"277\":1,\"279\":1,\"291\":1,\"302\":2,\"350\":1,\"363\":1,\"393\":1,\"398\":2,\"399\":1}}],[\"orderaccess\",{\"1\":{\"141\":1,\"143\":4}}],[\"order\",{\"1\":{\"123\":1,\"302\":4,\"304\":1,\"466\":2}}],[\"or\",{\"1\":{\"76\":1,\"79\":2,\"139\":2,\"143\":7,\"294\":1,\"296\":1,\"297\":1,\"460\":2,\"486\":1}}],[\"org\",{\"1\":{\"3\":1,\"137\":1,\"378\":1,\"460\":2,\"463\":1,\"476\":4,\"537\":5,\"541\":4,\"545\":4,\"555\":11,\"556\":11,\"557\":11,\"558\":3,\"561\":4,\"562\":2,\"566\":4,\"568\":3,\"569\":3}}],[\"2<\",{\"1\":{\"691\":1}}],[\"29\",{\"1\":{\"603\":1}}],[\"291\",{\"1\":{\"556\":1,\"557\":1}}],[\"299\",{\"1\":{\"363\":1}}],[\"23\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"602\":1,\"603\":2,\"604\":1}}],[\"23f2\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"2347426887850566364l\",{\"1\":{\"491\":1}}],[\"231296640\",{\"1\":{\"176\":1}}],[\"27360832\",{\"1\":{\"476\":1}}],[\"27t16\",{\"1\":{\"363\":1}}],[\"2pc相似\",{\"1\":{\"475\":1}}],[\"2pc用于保证多个数据分片上事务的原子性\",{\"1\":{\"475\":1}}],[\"2pc\",{\"0\":{\"475\":1},\"1\":{\"475\":1}}],[\"2pc+\",{\"1\":{\"474\":1}}],[\"2次或1次rtt\",{\"1\":{\"467\":1}}],[\"2以后\",{\"1\":{\"402\":1}}],[\"21129\",{\"1\":{\"603\":1}}],[\"21\",{\"1\":{\"391\":1,\"603\":1}}],[\"2147483647\",{\"1\":{\"110\":1}}],[\"2147483648\",{\"1\":{\"110\":1,\"116\":1}}],[\"26898657\",{\"1\":{\"421\":1}}],[\"26\",{\"1\":{\"374\":2,\"602\":1,\"603\":1,\"604\":2}}],[\"2222222222222\",{\"1\":{\"664\":1}}],[\"222222\",{\"1\":{\"642\":1}}],[\"225\",{\"1\":{\"374\":1}}],[\"2250738585072014e\",{\"1\":{\"71\":1}}],[\"22\",{\"1\":{\"363\":1,\"571\":3,\"603\":1,\"604\":1,\"691\":1}}],[\"2f53\",{\"1\":{\"277\":1}}],[\"28998\",{\"1\":{\"602\":1}}],[\"28\",{\"1\":{\"121\":1,\"602\":1,\"603\":1,\"604\":2}}],[\"240\",{\"1\":{\"374\":2}}],[\"24\",{\"1\":{\"117\":2,\"119\":2,\"121\":1,\"602\":1,\"604\":1}}],[\"251392k\",{\"1\":{\"391\":1}}],[\"255\",{\"1\":{\"374\":1}}],[\"255328256\",{\"1\":{\"178\":1}}],[\"256\",{\"1\":{\"112\":1,\"552\":1}}],[\"25\",{\"1\":{\"94\":1,\"603\":1,\"604\":1}}],[\"2^31\",{\"1\":{\"110\":3}}],[\"2^\",{\"1\":{\"71\":1}}],[\"20979\",{\"1\":{\"603\":1}}],[\"20703\",{\"1\":{\"603\":1}}],[\"200\",{\"1\":{\"571\":2}}],[\"2001\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"2000000050为true\",{\"1\":{\"102\":1}}],[\"2000000000\",{\"1\":{\"102\":1}}],[\"2013\",{\"1\":{\"413\":1}}],[\"2019\",{\"1\":{\"391\":1,\"393\":1,\"476\":1}}],[\"2010\",{\"1\":{\"69\":1,\"88\":1}}],[\"20\",{\"1\":{\"139\":1,\"363\":1,\"602\":2,\"603\":1,\"604\":1}}],[\"2048\",{\"1\":{\"120\":1}}],[\"2046\",{\"1\":{\"70\":1}}],[\"20472\",{\"1\":{\"603\":1}}],[\"2047\",{\"1\":{\"70\":2}}],[\"2021\",{\"0\":{\"533\":1},\"1\":{\"533\":7}}],[\"20210414235239556\",{\"1\":{\"419\":1}}],[\"20210414234700267\",{\"1\":{\"418\":1}}],[\"20210414234418226\",{\"1\":{\"416\":1}}],[\"20210414232726380\",{\"1\":{\"416\":1}}],[\"20210414232505669\",{\"1\":{\"416\":1}}],[\"20210414233652204\",{\"1\":{\"416\":1}}],[\"20210414230849483\",{\"1\":{\"412\":1}}],[\"2020\",{\"1\":{\"448\":1,\"533\":1}}],[\"20220311003005058\",{\"1\":{\"402\":1}}],[\"20220311003339439\",{\"1\":{\"402\":1}}],[\"20220311002930038\",{\"1\":{\"402\":1}}],[\"20220311002742261\",{\"1\":{\"402\":1}}],[\"20220311001043190\",{\"1\":{\"400\":1}}],[\"20220310233428017\",{\"1\":{\"398\":1}}],[\"20220310233319130\",{\"1\":{\"398\":1}}],[\"20220310233227857\",{\"1\":{\"398\":1}}],[\"20220310233115552\",{\"1\":{\"398\":1}}],[\"20220310232844104\",{\"1\":{\"396\":1}}],[\"20220310232830568\",{\"1\":{\"395\":1}}],[\"20220310232816712\",{\"1\":{\"395\":1}}],[\"20220310232235655\",{\"1\":{\"390\":1}}],[\"20220310222954259\",{\"1\":{\"373\":1}}],[\"20220310221914338\",{\"1\":{\"369\":1}}],[\"20220310221521362\",{\"1\":{\"369\":1}}],[\"20220310221505262\",{\"1\":{\"369\":1}}],[\"20220310221042830\",{\"1\":{\"368\":1}}],[\"20220310220241447\",{\"1\":{\"367\":1}}],[\"20220310220302064\",{\"1\":{\"367\":1}}],[\"20220310210434471\",{\"1\":{\"346\":1}}],[\"20220310205235758\",{\"1\":{\"344\":1}}],[\"20220310204357425\",{\"1\":{\"341\":1}}],[\"20220310004914409\",{\"1\":{\"340\":1}}],[\"20220310004604646\",{\"1\":{\"338\":1}}],[\"20220310004442121\",{\"1\":{\"337\":1}}],[\"20220310004225334\",{\"1\":{\"336\":1}}],[\"20220310004158070\",{\"1\":{\"336\":1}}],[\"20220310000555900\",{\"1\":{\"326\":1}}],[\"20220310000015238\",{\"1\":{\"316\":1}}],[\"20220310000943157\",{\"1\":{\"271\":1}}],[\"20220309235221230\",{\"1\":{\"313\":1}}],[\"20220309233506458\",{\"1\":{\"309\":1}}],[\"20220309233401625\",{\"1\":{\"309\":1}}],[\"20220309230913143\",{\"1\":{\"307\":1}}],[\"20220309230858070\",{\"1\":{\"306\":1}}],[\"20220309230410111\",{\"1\":{\"305\":1}}],[\"20220309230040459\",{\"1\":{\"304\":1}}],[\"20220309223510002\",{\"1\":{\"302\":1}}],[\"20220309223600414\",{\"1\":{\"302\":1}}],[\"20220309220003612\",{\"1\":{\"296\":1}}],[\"20220309211440247\",{\"1\":{\"294\":1}}],[\"20220309211847128\",{\"1\":{\"292\":1,\"295\":1}}],[\"20220309213359201\",{\"1\":{\"292\":1}}],[\"20220309205433326\",{\"1\":{\"288\":1}}],[\"20220309205334127\",{\"1\":{\"285\":1}}],[\"20220309204625348\",{\"1\":{\"278\":1}}],[\"20220309204252776\",{\"1\":{\"277\":1}}],[\"20220309203220133\",{\"1\":{\"273\":1}}],[\"20220309202058012\",{\"1\":{\"273\":1}}],[\"2022\",{\"0\":{\"10\":1,\"11\":1,\"532\":1},\"1\":{\"363\":1,\"532\":2}}],[\"2023\",{\"1\":{\"4\":1,\"571\":1}}],[\"2\",{\"0\":{\"49\":1,\"67\":1,\"70\":1,\"72\":1,\"73\":1,\"74\":2,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"86\":1,\"89\":1,\"92\":1,\"107\":1,\"111\":1,\"113\":1,\"128\":1,\"134\":1,\"135\":1,\"136\":2,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"151\":1,\"152\":1,\"153\":1,\"154\":2,\"155\":2,\"156\":2,\"157\":3,\"158\":2,\"159\":1,\"160\":1,\"161\":2,\"162\":1,\"163\":1,\"164\":1,\"165\":2,\"166\":1,\"167\":1,\"168\":1,\"169\":2,\"170\":1,\"171\":1,\"172\":1,\"173\":2,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":2,\"183\":1,\"184\":1,\"185\":2,\"186\":1,\"187\":1,\"188\":2,\"189\":1,\"190\":1,\"191\":1,\"192\":2,\"193\":1,\"273\":1,\"274\":1,\"275\":1,\"276\":2,\"277\":1,\"280\":1,\"281\":1,\"282\":2,\"283\":1,\"288\":1,\"292\":1,\"295\":1,\"303\":1,\"304\":1,\"305\":2,\"306\":1,\"307\":1,\"310\":1,\"319\":1,\"320\":1,\"321\":1,\"322\":2,\"323\":1,\"326\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":2,\"338\":1,\"342\":1,\"357\":1,\"364\":1,\"365\":1,\"366\":2,\"367\":1,\"368\":1,\"369\":1,\"372\":1,\"373\":1,\"374\":2,\"377\":1,\"380\":1,\"387\":1,\"388\":1,\"389\":2,\"390\":1,\"391\":1,\"392\":2,\"393\":1,\"394\":1,\"395\":1,\"396\":2,\"397\":1,\"398\":1,\"399\":2,\"410\":1,\"416\":1,\"430\":1,\"436\":1,\"440\":1,\"456\":1,\"457\":1,\"458\":2,\"459\":1,\"461\":1,\"462\":1,\"463\":1,\"464\":2,\"465\":1,\"466\":2,\"467\":2,\"468\":1,\"469\":1,\"470\":1,\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"483\":1,\"486\":1,\"492\":1,\"498\":1,\"504\":1,\"505\":1,\"506\":1,\"507\":2,\"508\":2,\"509\":2,\"534\":2,\"691\":1},\"1\":{\"71\":1,\"94\":1,\"111\":21,\"112\":1,\"118\":1,\"119\":2,\"120\":3,\"121\":4,\"122\":2,\"137\":1,\"141\":1,\"154\":1,\"174\":2,\"235\":1,\"238\":1,\"239\":1,\"241\":1,\"242\":1,\"243\":1,\"245\":1,\"246\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"279\":1,\"287\":1,\"290\":2,\"291\":1,\"294\":7,\"295\":1,\"296\":1,\"297\":1,\"302\":9,\"319\":1,\"336\":1,\"346\":1,\"347\":1,\"351\":1,\"362\":1,\"366\":1,\"367\":1,\"368\":1,\"369\":2,\"374\":1,\"388\":1,\"393\":1,\"398\":2,\"399\":1,\"402\":1,\"413\":1,\"416\":1,\"420\":1,\"421\":1,\"439\":1,\"441\":1,\"442\":1,\"443\":1,\"448\":1,\"464\":23,\"466\":1,\"467\":2,\"486\":1,\"488\":1,\"493\":1,\"498\":1,\"530\":1,\"531\":2,\"533\":5,\"534\":29,\"555\":2,\"556\":5,\"557\":5,\"583\":2,\"584\":1,\"595\":2,\"596\":2,\"665\":1,\"692\":1}}],[\"1g\",{\"1\":{\"590\":1}}],[\"1gb=1024mb\",{\"1\":{\"362\":1}}],[\"1565327770486\",{\"1\":{\"693\":1}}],[\"15\",{\"1\":{\"604\":1}}],[\"152\",{\"1\":{\"555\":6,\"556\":6,\"557\":6}}],[\"15<\",{\"1\":{\"537\":1}}],[\"150232\",{\"1\":{\"505\":1}}],[\"1表示socket\",{\"1\":{\"479\":1}}],[\"1表示负\",{\"1\":{\"70\":1}}],[\"18965\",{\"1\":{\"604\":1}}],[\"18928\",{\"1\":{\"604\":1}}],[\"18\",{\"1\":{\"604\":1}}],[\"18723\",{\"1\":{\"604\":1}}],[\"18640\",{\"1\":{\"604\":1}}],[\"18t16\",{\"1\":{\"393\":1}}],[\"1809\",{\"1\":{\"277\":1}}],[\"1tb=1024gb\",{\"1\":{\"362\":1}}],[\"1mb=1024kb\",{\"1\":{\"362\":1}}],[\"1kb=1024byte\",{\"1\":{\"362\":1}}],[\"1之前\",{\"1\":{\"341\":1}}],[\"1<\",{\"1\":{\"321\":1,\"545\":1,\"691\":1}}],[\"1栈指向堆\",{\"0\":{\"304\":1}}],[\"172\",{\"1\":{\"374\":3}}],[\"17\",{\"1\":{\"297\":1,\"302\":1,\"374\":1,\"476\":1}}],[\"17549435e\",{\"1\":{\"91\":3}}],[\"1byte\",{\"1\":{\"362\":1}}],[\"1b0a\",{\"1\":{\"277\":1}}],[\"1bit\",{\"1\":{\"70\":1}}],[\"13\",{\"0\":{\"186\":1,\"187\":1,\"188\":1,\"189\":1},\"1\":{\"461\":1,\"533\":1,\"534\":1,\"556\":1,\"557\":1}}],[\"1389544331186147328\",{\"1\":{\"129\":1}}],[\"130\",{\"1\":{\"112\":1}}],[\"1与integer\",{\"1\":{\"127\":1}}],[\"14\",{\"0\":{\"190\":1,\"191\":1,\"192\":1,\"193\":1},\"1\":{\"121\":1,\"302\":1}}],[\"16384\",{\"1\":{\"591\":1}}],[\"16g\",{\"1\":{\"581\":1,\"582\":1}}],[\"168\",{\"1\":{\"555\":6,\"556\":6,\"557\":6}}],[\"16bf62d8c174d776\",{\"1\":{\"436\":1}}],[\"161\",{\"1\":{\"411\":2}}],[\"16\",{\"1\":{\"120\":1,\"121\":4,\"122\":1,\"591\":2,\"592\":2,\"593\":2}}],[\"192\",{\"1\":{\"555\":6,\"556\":6,\"557\":6}}],[\"1990\",{\"1\":{\"462\":1}}],[\"1979年\",{\"1\":{\"462\":1}}],[\"191\",{\"1\":{\"323\":2}}],[\"19\",{\"1\":{\"137\":1,\"602\":1,\"603\":1,\"604\":1}}],[\"195\",{\"1\":{\"114\":1}}],[\"1987标准\",{\"1\":{\"69\":1,\"88\":1}}],[\"1989\",{\"1\":{\"69\":2,\"88\":2}}],[\"1985\",{\"1\":{\"69\":1,\"88\":1}}],[\"1+128\",{\"1\":{\"112\":1}}],[\"122\",{\"1\":{\"604\":1}}],[\"1200\",{\"1\":{\"603\":1,\"604\":1}}],[\"123456\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"1233\",{\"1\":{\"505\":1}}],[\"125952k\",{\"1\":{\"363\":1}}],[\"1251602255\",{\"1\":{\"16\":1}}],[\"12\",{\"0\":{\"183\":1,\"184\":1,\"185\":1},\"1\":{\"393\":1,\"442\":1,\"534\":4,\"537\":1,\"555\":1,\"556\":1,\"557\":1,\"604\":1}}],[\"129\",{\"1\":{\"107\":2,\"112\":2}}],[\"128\",{\"1\":{\"107\":1,\"112\":7,\"120\":1,\"127\":1,\"128\":1,\"591\":1}}],[\"126\",{\"1\":{\"91\":3,\"94\":2}}],[\"126次方的了\",{\"1\":{\"91\":1}}],[\"126f\",{\"1\":{\"91\":4}}],[\"127的值存储在jvm方法区的静态区\",{\"1\":{\"107\":1,\"127\":1}}],[\"127\",{\"1\":{\"89\":1,\"91\":2,\"112\":9,\"547\":1,\"548\":1,\"549\":1,\"550\":1,\"551\":1,\"567\":1}}],[\"1e07\",{\"1\":{\"277\":1}}],[\"1e\",{\"1\":{\"81\":1,\"102\":1}}],[\"108\",{\"1\":{\"604\":1}}],[\"1075\",{\"1\":{\"604\":1}}],[\"1070\",{\"1\":{\"603\":1}}],[\"1074\",{\"1\":{\"71\":1}}],[\"1040\",{\"1\":{\"604\":1}}],[\"1043\",{\"1\":{\"603\":1}}],[\"104857600是字节单位\",{\"1\":{\"362\":1}}],[\"104857600\",{\"1\":{\"362\":2}}],[\"10gb\",{\"1\":{\"552\":1}}],[\"10<\",{\"1\":{\"537\":2}}],[\"10版本搭建\",{\"1\":{\"530\":1}}],[\"10ms\",{\"1\":{\"461\":1}}],[\"10的\",{\"1\":{\"461\":2}}],[\"10t23\",{\"1\":{\"391\":1}}],[\"100mb\",{\"1\":{\"552\":1}}],[\"100m或者达到一个设定的临界值\",{\"1\":{\"310\":1}}],[\"10000\",{\"1\":{\"591\":6}}],[\"10000000\",{\"1\":{\"321\":1}}],[\"10000010\",{\"1\":{\"89\":1}}],[\"1000\",{\"1\":{\"367\":2,\"506\":1,\"591\":2,\"603\":1,\"604\":1}}],[\"100=99\",{\"1\":{\"343\":1}}],[\"100\",{\"1\":{\"302\":1,\"343\":1,\"374\":4,\"471\":1}}],[\"100663296\",{\"1\":{\"119\":1}}],[\"10\",{\"0\":{\"144\":1,\"178\":1,\"350\":1,\"475\":1},\"1\":{\"116\":2,\"282\":1,\"284\":1,\"302\":2,\"367\":2,\"374\":1,\"442\":1,\"534\":1,\"571\":1,\"603\":1,\"604\":1}}],[\"1011\",{\"1\":{\"89\":1}}],[\"1024=100\",{\"1\":{\"362\":1}}],[\"1024=102400\",{\"1\":{\"362\":1}}],[\"102400\",{\"1\":{\"362\":1}}],[\"1023\",{\"1\":{\"71\":3}}],[\"1022$\",{\"1\":{\"94\":1}}],[\"1022+126\",{\"1\":{\"94\":1}}],[\"1022\",{\"1\":{\"71\":5}}],[\"1022类型的最小正正常值的常量\",{\"1\":{\"71\":1}}],[\"11a\",{\"1\":{\"460\":1}}],[\"1190000022248118\",{\"1\":{\"452\":1}}],[\"1190000023187634\",{\"1\":{\"448\":1}}],[\"11\",{\"0\":{\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"351\":1},\"1\":{\"89\":1,\"137\":1,\"302\":2,\"374\":1,\"442\":1,\"533\":1,\"537\":1,\"555\":1,\"603\":2}}],[\"11111111110\",{\"1\":{\"70\":1}}],[\"1111111111111\",{\"1\":{\"662\":1}}],[\"11111111111\",{\"1\":{\"70\":1}}],[\"11位指数不为00000000000和11111111111\",{\"1\":{\"70\":1}}],[\"11位的指数部分可存储00000000000\",{\"1\":{\"70\":1}}],[\"11bit\",{\"1\":{\"70\":1}}],[\"1\",{\"0\":{\"48\":1,\"51\":1,\"66\":1,\"69\":1,\"71\":1,\"73\":1,\"81\":1,\"85\":1,\"88\":1,\"91\":1,\"106\":1,\"109\":1,\"110\":2,\"111\":1,\"112\":1,\"127\":4,\"133\":1,\"135\":1,\"150\":1,\"152\":1,\"153\":2,\"154\":1,\"156\":1,\"160\":1,\"164\":1,\"168\":1,\"172\":1,\"181\":1,\"184\":1,\"187\":1,\"191\":1,\"271\":1,\"272\":2,\"273\":1,\"275\":1,\"279\":1,\"281\":1,\"287\":1,\"291\":1,\"294\":1,\"302\":1,\"309\":1,\"316\":1,\"317\":1,\"318\":2,\"319\":1,\"321\":1,\"325\":1,\"331\":1,\"332\":2,\"333\":3,\"334\":2,\"335\":1,\"336\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":2,\"342\":1,\"343\":1,\"344\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"349\":1,\"350\":1,\"351\":1,\"355\":2,\"356\":3,\"357\":2,\"358\":2,\"359\":2,\"360\":2,\"361\":2,\"362\":2,\"363\":2,\"364\":1,\"365\":2,\"366\":1,\"367\":1,\"368\":1,\"369\":1,\"370\":1,\"371\":2,\"372\":1,\"373\":2,\"374\":1,\"375\":1,\"376\":2,\"377\":1,\"378\":1,\"379\":2,\"380\":1,\"381\":1,\"382\":1,\"386\":2,\"387\":1,\"388\":2,\"389\":1,\"390\":1,\"391\":2,\"392\":1,\"393\":1,\"394\":1,\"395\":2,\"396\":1,\"397\":1,\"398\":2,\"399\":1,\"400\":1,\"401\":1,\"402\":1,\"409\":1,\"415\":1,\"429\":1,\"435\":1,\"439\":1,\"454\":1,\"455\":2,\"456\":1,\"457\":2,\"458\":1,\"459\":1,\"460\":1,\"462\":1,\"463\":2,\"464\":1,\"465\":1,\"467\":1,\"482\":1,\"485\":1,\"491\":1,\"497\":1,\"503\":1,\"505\":1,\"506\":1,\"508\":1,\"509\":1,\"690\":1},\"1\":{\"58\":6,\"70\":1,\"71\":10,\"79\":4,\"81\":3,\"89\":2,\"91\":11,\"94\":2,\"95\":13,\"110\":5,\"111\":21,\"112\":7,\"116\":1,\"118\":3,\"119\":3,\"120\":1,\"121\":2,\"122\":4,\"125\":1,\"127\":3,\"129\":1,\"137\":4,\"139\":1,\"141\":2,\"143\":1,\"154\":2,\"174\":1,\"191\":1,\"235\":1,\"238\":1,\"239\":1,\"241\":1,\"242\":1,\"243\":1,\"245\":1,\"246\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"277\":1,\"279\":1,\"286\":2,\"287\":1,\"294\":2,\"295\":1,\"302\":7,\"309\":2,\"314\":6,\"318\":1,\"321\":3,\"323\":2,\"325\":1,\"336\":1,\"343\":1,\"346\":1,\"347\":1,\"351\":1,\"362\":1,\"366\":1,\"367\":1,\"368\":1,\"369\":2,\"374\":2,\"388\":1,\"391\":1,\"393\":1,\"398\":2,\"399\":1,\"402\":1,\"413\":1,\"416\":2,\"420\":1,\"421\":1,\"439\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"446\":1,\"447\":1,\"448\":1,\"464\":16,\"466\":1,\"467\":2,\"479\":1,\"486\":2,\"488\":1,\"493\":2,\"498\":1,\"533\":4,\"534\":5,\"537\":2,\"541\":3,\"545\":2,\"547\":1,\"548\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"555\":8,\"556\":8,\"557\":8,\"561\":3,\"566\":4,\"567\":1,\"571\":2,\"589\":1,\"591\":2,\"592\":2,\"593\":2,\"647\":1,\"665\":1,\"679\":1,\"690\":1,\"691\":3,\"692\":1}}],[\"数组\",{\"0\":{\"111\":1}}],[\"数据库的四种隔离级别\",{\"1\":{\"468\":1}}],[\"数据库领域的acid中的i\",{\"1\":{\"468\":1}}],[\"数据库基础知识体系\",{\"1\":{\"39\":1}}],[\"数据库知识体系\",{\"0\":{\"39\":1}}],[\"数据库进阶\",{\"0\":{\"37\":1}}],[\"数据结构\",{\"0\":{\"23\":1}}],[\"数学基础类原创博客\",{\"1\":{\"15\":1}}],[\"jboss\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"jboss都会根据j2ee规范自行实现classloader\",{\"1\":{\"287\":1}}],[\"join\",{\"1\":{\"505\":1}}],[\"jobject\",{\"1\":{\"136\":2,\"137\":1,\"139\":2,\"141\":1,\"143\":1}}],[\"jdbc\",{\"1\":{\"547\":2,\"550\":2,\"551\":2}}],[\"jdon\",{\"1\":{\"476\":1}}],[\"jdk版本\",{\"1\":{\"589\":1}}],[\"jdk版本为oracle\",{\"1\":{\"407\":1}}],[\"jdk\",{\"0\":{\"273\":1},\"1\":{\"273\":1,\"327\":1,\"363\":4}}],[\"jdk8\",{\"0\":{\"272\":1},\"1\":{\"407\":1}}],[\"jdk1\",{\"1\":{\"110\":1,\"248\":3,\"402\":1,\"411\":2}}],[\"jraft\",{\"1\":{\"476\":1}}],[\"jre\",{\"0\":{\"273\":1},\"1\":{\"273\":4,\"287\":2,\"411\":4}}],[\"juejin\",{\"1\":{\"448\":1}}],[\"just\",{\"1\":{\"124\":1,\"125\":1,\"137\":2,\"139\":1,\"141\":1}}],[\"jianshu\",{\"1\":{\"448\":1}}],[\"jit\",{\"1\":{\"421\":1}}],[\"jitwatch简单使用\",{\"0\":{\"417\":1}}],[\"jitwatch链接如下\",{\"1\":{\"415\":1}}],[\"jitwatch\",{\"1\":{\"415\":2,\"416\":1,\"420\":3,\"421\":2}}],[\"jitwatch环境\",{\"0\":{\"414\":1}}],[\"jinfo\",{\"0\":{\"366\":1},\"1\":{\"366\":4}}],[\"jint\",{\"1\":{\"137\":1}}],[\"jmm\",{\"0\":{\"436\":1}}],[\"jmxremot\",{\"1\":{\"374\":1}}],[\"jmxremote\",{\"1\":{\"374\":10}}],[\"jmx\",{\"1\":{\"374\":1}}],[\"jmap\",{\"0\":{\"369\":1},\"1\":{\"369\":2,\"380\":1}}],[\"jvisualvm\",{\"0\":{\"372\":1},\"1\":{\"372\":1}}],[\"jvm配置\",{\"0\":{\"590\":1}}],[\"jvm内存图谱\",{\"0\":{\"405\":1}}],[\"jvm性能优化指南\",{\"0\":{\"401\":1}}],[\"jvm性能分析以及调优分析\",{\"0\":{\"354\":1}}],[\"jvm分析\",{\"0\":{\"385\":1}}],[\"jvm终篇\",{\"0\":{\"385\":1}}],[\"jvm启动到当前日期的总时长的时间戳形式\",{\"1\":{\"363\":1}}],[\"jvm根据系统配置自行设置\",{\"1\":{\"363\":1}}],[\"jvm会自动调整年轻代大小\",{\"1\":{\"363\":1}}],[\"jvm自己来决定\",{\"1\":{\"357\":1}}],[\"jvm参数可以加上下面两句\",{\"1\":{\"369\":1}}],[\"jvm参数说明\",{\"1\":{\"363\":1}}],[\"jvm参数\",{\"0\":{\"355\":1},\"1\":{\"363\":1}}],[\"jvm实战\",{\"0\":{\"354\":1}}],[\"jvm垃圾回收算法以及垃圾回收器\",{\"0\":{\"330\":1}}],[\"jvm升华\",{\"0\":{\"330\":1}}],[\"jvm堆栈内存详解\",{\"0\":{\"301\":1}}],[\"jvm堆栈内存简析\",{\"0\":{\"270\":1}}],[\"jvm进行时\",{\"0\":{\"301\":1}}],[\"jvm里卖弄的某一块区域\",{\"1\":{\"279\":1}}],[\"jvms\",{\"1\":{\"277\":2,\"302\":4}}],[\"jvm前奏\",{\"0\":{\"270\":1}}],[\"jvm才会关闭\",{\"1\":{\"157\":1}}],[\"jvm中增加一个关闭的钩子\",{\"1\":{\"157\":1}}],[\"jvm的关闭序列首先调用所有已注册的关闭挂钩\",{\"1\":{\"154\":1}}],[\"jvmti\",{\"1\":{\"143\":3}}],[\"jvmtiexport\",{\"1\":{\"143\":6}}],[\"jvmtivmobjectalloceventcollector\",{\"1\":{\"139\":1}}],[\"jvmwrapper\",{\"1\":{\"137\":1,\"139\":1,\"141\":1,\"143\":1}}],[\"jvm源码解读\",{\"0\":{\"47\":1,\"65\":1,\"84\":1,\"105\":1,\"132\":1,\"149\":1}}],[\"jvm\",{\"0\":{\"273\":1},\"1\":{\"17\":1,\"19\":1,\"21\":1,\"23\":2,\"25\":1,\"27\":1,\"29\":1,\"31\":1,\"33\":1,\"35\":1,\"37\":1,\"41\":1,\"43\":1,\"45\":1,\"135\":5,\"137\":6,\"139\":5,\"141\":4,\"143\":5,\"268\":1,\"273\":1,\"279\":2,\"377\":1,\"379\":1,\"405\":1,\"424\":1,\"426\":1,\"512\":1,\"526\":1,\"555\":1,\"556\":1,\"557\":1,\"576\":1,\"607\":1,\"682\":1,\"684\":1,\"696\":1,\"698\":1,\"700\":1,\"702\":1,\"704\":1},\"2\":{\"18\":1,\"20\":1,\"22\":1,\"24\":1,\"26\":1,\"28\":1,\"299\":1,\"300\":1,\"328\":1,\"329\":1,\"352\":1,\"353\":1,\"383\":1,\"384\":1,\"403\":1,\"404\":1,\"406\":1,\"577\":1}}],[\"json格式通配符\",{\"1\":{\"491\":1}}],[\"jstack\",{\"0\":{\"368\":1},\"1\":{\"368\":2}}],[\"jstat\",{\"0\":{\"367\":1},\"1\":{\"367\":2}}],[\"jsp\",{\"1\":{\"363\":1}}],[\"jps\",{\"0\":{\"365\":1}}],[\"jpa\",{\"0\":{\"31\":1},\"2\":{\"32\":1}}],[\"jasongj\",{\"1\":{\"448\":1}}],[\"jad\",{\"1\":{\"377\":1}}],[\"jack\",{\"1\":{\"302\":2}}],[\"jar即可\",{\"1\":{\"692\":1}}],[\"jar启动jitwatch\",{\"1\":{\"416\":1}}],[\"jar之中\",{\"1\":{\"289\":1}}],[\"jar包\",{\"1\":{\"287\":1}}],[\"jar\",{\"1\":{\"287\":2,\"361\":1,\"376\":5,\"416\":1,\"597\":2,\"691\":1,\"692\":7}}],[\"java<\",{\"1\":{\"545\":1}}],[\"java进阶\",{\"1\":{\"448\":1}}],[\"java进程\",{\"1\":{\"331\":1}}],[\"java提供了\",{\"1\":{\"443\":1}}],[\"java中共有三种变量\",{\"1\":{\"437\":1}}],[\"java中哪些变量是存放在堆中\",{\"1\":{\"437\":1}}],[\"java中的\",{\"1\":{\"289\":1}}],[\"java内存模型\",{\"0\":{\"436\":1}}],[\"java并发编程实战\",{\"1\":{\"435\":1}}],[\"java并不保证哪个线程将调用给定对象的finalize方法\",{\"1\":{\"144\":1}}],[\"java新特性\",{\"0\":{\"424\":1}}],[\"javatool\",{\"2\":{\"422\":1,\"423\":1}}],[\"javathreadinobjectwaitstate\",{\"1\":{\"143\":1}}],[\"javathread\",{\"1\":{\"137\":2,\"143\":3}}],[\"java运行参数\",{\"1\":{\"416\":1}}],[\"java对引用进行了扩充\",{\"1\":{\"402\":1}}],[\"java对象内存布局\",{\"0\":{\"307\":1}}],[\"java对象实例以及数组都在堆上分配\",{\"1\":{\"295\":1}}],[\"java类名\",{\"1\":{\"381\":1}}],[\"java类随着加载它的类加载器一起具备了一种带有优先级的层次关系\",{\"1\":{\"289\":1}}],[\"java堆和方法区的区域是多个线程共享的数据区域\",{\"1\":{\"437\":1}}],[\"java堆分析器\",{\"1\":{\"378\":1}}],[\"java堆的内存布局与就与其他收集器有很大差别\",{\"1\":{\"347\":1}}],[\"java堆是java虚拟机所管理内存中最大的一块\",{\"1\":{\"295\":1}}],[\"javase\",{\"1\":{\"273\":1,\"277\":1,\"302\":2,\"363\":1,\"398\":1,\"399\":1}}],[\"java容器里只能放对象\",{\"1\":{\"235\":1}}],[\"java集合框架知识图谱\",{\"0\":{\"233\":1}}],[\"java集合框架包括collection和map\",{\"1\":{\"206\":1,\"220\":1,\"234\":1,\"255\":1}}],[\"java基础\",{\"0\":{\"147\":1,\"426\":1}}],[\"java虚拟机只调用finalize方法一次\",{\"1\":{\"144\":1}}],[\"java的类要实现克隆则需要实现cloneable接口\",{\"1\":{\"139\":1}}],[\"java的hashcode主要有jvm\",{\"1\":{\"137\":1}}],[\"java的object是所有其他类的父类\",{\"1\":{\"133\":1}}],[\"java层的class在c++层与之对应的则是kclass\",{\"1\":{\"136\":1}}],[\"java这里定义的值为0x7fc00000\",{\"1\":{\"91\":1}}],[\"java这里定义的值为0x7ff8000000000000l\",{\"1\":{\"71\":1}}],[\"java与cs\",{\"1\":{\"16\":3}}],[\"java\",{\"0\":{\"268\":1,\"296\":1,\"407\":1,\"711\":1},\"1\":{\"5\":1,\"15\":1,\"16\":3,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"95\":1,\"101\":1,\"110\":1,\"112\":1,\"115\":1,\"135\":3,\"136\":3,\"137\":2,\"139\":5,\"143\":6,\"154\":1,\"169\":2,\"173\":5,\"175\":1,\"176\":2,\"177\":2,\"178\":2,\"179\":2,\"182\":2,\"185\":2,\"188\":1,\"192\":1,\"235\":1,\"273\":4,\"276\":1,\"291\":7,\"294\":5,\"295\":3,\"296\":8,\"297\":6,\"298\":4,\"302\":4,\"319\":1,\"321\":2,\"323\":4,\"360\":1,\"361\":1,\"363\":1,\"374\":1,\"376\":2,\"402\":2,\"411\":2,\"413\":1,\"415\":1,\"416\":2,\"443\":1,\"448\":3,\"537\":1,\"541\":1,\"566\":1,\"597\":1,\"691\":2,\"692\":3},\"2\":{\"63\":1,\"64\":1,\"82\":1,\"83\":1,\"103\":1,\"104\":1,\"130\":1,\"131\":1,\"145\":1,\"146\":1,\"148\":1,\"194\":1,\"195\":1,\"203\":1,\"204\":1,\"217\":1,\"218\":1,\"231\":1,\"232\":1,\"252\":1,\"253\":1,\"266\":1,\"267\":1,\"269\":1,\"425\":1,\"427\":1,\"432\":1,\"433\":1,\"449\":1,\"450\":1}}],[\"jconsole工具是jdk自带的可视化监控工具\",{\"1\":{\"371\":1}}],[\"jconsole\",{\"0\":{\"371\":1},\"1\":{\"371\":1}}],[\"jcf\",{\"1\":{\"235\":1}}],[\"jclass\",{\"1\":{\"135\":1,\"136\":4}}],[\"jt\",{\"1\":{\"143\":9}}],[\"jtiows\",{\"1\":{\"143\":1}}],[\"jlong\",{\"1\":{\"139\":3,\"143\":3}}],[\"jlongs\",{\"1\":{\"139\":2}}],[\"jls\",{\"1\":{\"139\":1,\"297\":1}}],[\"jls7\",{\"1\":{\"112\":1}}],[\"jnu\",{\"1\":{\"136\":1}}],[\"jnihandles\",{\"1\":{\"136\":2,\"137\":1,\"139\":2,\"141\":1,\"143\":1}}],[\"jniwrapper\",{\"1\":{\"136\":1}}],[\"jni\",{\"1\":{\"136\":8}}],[\"jnienv\",{\"1\":{\"135\":1,\"136\":2,\"137\":1,\"139\":1,\"141\":1,\"143\":1}}],[\"jniexport\",{\"1\":{\"135\":1,\"136\":1}}],[\"jnicall\",{\"1\":{\"135\":1,\"136\":1}}],[\"jninativemethod\",{\"1\":{\"135\":1}}],[\"j++\",{\"1\":{\"112\":1}}],[\"j\",{\"1\":{\"111\":1,\"112\":1,\"135\":1}}],[\"算法是\",{\"1\":{\"467\":1}}],[\"算法就可以保障\",{\"1\":{\"467\":1}}],[\"算法将可能拿到过期数据\",{\"1\":{\"467\":1}}],[\"算法的实现中都是异步的\",{\"1\":{\"467\":1}}],[\"算法中\",{\"1\":{\"467\":2}}],[\"算法一样\",{\"1\":{\"338\":1}}],[\"算法\",{\"0\":{\"17\":1,\"19\":1,\"21\":1,\"607\":1,\"682\":1,\"684\":1},\"1\":{\"342\":1,\"347\":1,\"467\":1}}],[\"介绍完了coherence和consensus共识\",{\"1\":{\"460\":1}}],[\"介绍\",{\"0\":{\"235\":1},\"1\":{\"16\":1}}],[\"头像链接\",{\"1\":{\"16\":1}}],[\"昵称\",{\"1\":{\"16\":1}}],[\"崔庆才的个人博客\",{\"1\":{\"16\":3}}],[\"阿里中间件团队博客\",{\"1\":{\"16\":3}}],[\"niobytechannel可以减少不必要的系统调用select\",{\"1\":{\"479\":1}}],[\"nio\",{\"1\":{\"319\":1,\"555\":2,\"556\":2,\"557\":2}}],[\"nm\",{\"1\":{\"115\":6}}],[\"nfe\",{\"1\":{\"112\":1}}],[\"n\",{\"1\":{\"111\":1,\"121\":17,\"136\":2,\"246\":1,\"552\":1}}],[\"nohup\",{\"1\":{\"597\":1,\"692\":1}}],[\"nodes\",{\"1\":{\"491\":1}}],[\"nodelay\",{\"1\":{\"479\":1}}],[\"node\",{\"1\":{\"143\":24,\"491\":5}}],[\"no\",{\"1\":{\"137\":1,\"141\":1,\"143\":2,\"665\":3}}],[\"nonnull\",{\"1\":{\"486\":5,\"488\":2,\"493\":4,\"494\":2,\"497\":1,\"499\":1}}],[\"nonheap\",{\"1\":{\"322\":1,\"323\":1}}],[\"nonheapcontroller\",{\"1\":{\"322\":1}}],[\"none\",{\"1\":{\"143\":1}}],[\"non\",{\"1\":{\"136\":1,\"137\":1,\"139\":2,\"141\":1,\"143\":1,\"273\":1,\"460\":1}}],[\"nonzero\",{\"1\":{\"77\":1,\"99\":1}}],[\"now\",{\"1\":{\"124\":1,\"125\":1,\"137\":1,\"141\":1,\"143\":4,\"174\":1}}],[\"normally\",{\"1\":{\"143\":1}}],[\"normal\",{\"1\":{\"71\":4,\"91\":3,\"94\":1,\"137\":2,\"143\":1}}],[\"notification\",{\"1\":{\"143\":1}}],[\"notifications\",{\"1\":{\"141\":2}}],[\"notifier\",{\"1\":{\"141\":1,\"143\":1}}],[\"notified\",{\"1\":{\"141\":2,\"143\":6}}],[\"notify1\",{\"1\":{\"141\":1}}],[\"notify要做的事是先获取\",{\"1\":{\"141\":1}}],[\"notify最终会调用objectmonitor\",{\"1\":{\"141\":1}}],[\"notify方法源码在\",{\"1\":{\"141\":1}}],[\"notify方法\",{\"0\":{\"141\":1}}],[\"notifyall方法\",{\"0\":{\"142\":1}}],[\"notifyall\",{\"1\":{\"134\":1,\"135\":1,\"143\":1}}],[\"notify\",{\"1\":{\"133\":1,\"134\":1,\"135\":1,\"141\":7,\"143\":3}}],[\"nothing\",{\"1\":{\"139\":1}}],[\"notepad\",{\"1\":{\"174\":5}}],[\"note\",{\"1\":{\"137\":1,\"143\":6,\"273\":1}}],[\"notes\",{\"1\":{\"16\":3}}],[\"not\",{\"1\":{\"70\":1,\"137\":5,\"139\":1,\"141\":3,\"143\":4,\"191\":1,\"273\":1,\"294\":1,\"297\":1,\"460\":1,\"486\":2}}],[\"nexus\",{\"1\":{\"537\":4}}],[\"nexttoken\",{\"1\":{\"172\":1}}],[\"next\",{\"1\":{\"137\":6,\"141\":15}}],[\"neilzhang\",{\"1\":{\"448\":1}}],[\"neither\",{\"1\":{\"79\":2}}],[\"netflix\",{\"1\":{\"624\":1}}],[\"nettyclient配置\",{\"0\":{\"593\":1}}],[\"nettyclient\",{\"1\":{\"589\":1}}],[\"netty\",{\"0\":{\"603\":1,\"714\":1},\"1\":{\"591\":2,\"592\":1,\"593\":2},\"2\":{\"480\":1}}],[\"netty默认关闭该功能\",{\"1\":{\"479\":1}}],[\"netty默认禁用该算法\",{\"1\":{\"479\":1}}],[\"netty默认为true而操作系统默认为false\",{\"1\":{\"479\":1}}],[\"netty参数\",{\"1\":{\"479\":8}}],[\"netty关键参数的说明\",{\"0\":{\"479\":1}}],[\"net\",{\"1\":{\"421\":1,\"476\":1,\"479\":1}}],[\"netstat\",{\"1\":{\"374\":1}}],[\"necessary\",{\"1\":{\"273\":1}}],[\"never\",{\"1\":{\"143\":2}}],[\"need\",{\"1\":{\"139\":2,\"143\":2}}],[\"neutral\",{\"1\":{\"137\":6}}],[\"negative\",{\"1\":{\"71\":3,\"76\":1,\"91\":3,\"98\":1,\"116\":3,\"134\":1,\"143\":1}}],[\"newhashmap\",{\"1\":{\"487\":1}}],[\"newconcurrentmap\",{\"1\":{\"485\":2,\"496\":2}}],[\"newratio=4\",{\"1\":{\"363\":1}}],[\"newratio=n\",{\"1\":{\"363\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"158\":1}}],[\"newintegertest\",{\"1\":{\"107\":1}}],[\"new\",{\"0\":{\"127\":1},\"1\":{\"49\":2,\"52\":5,\"74\":2,\"76\":1,\"81\":2,\"95\":2,\"112\":3,\"116\":4,\"127\":2,\"134\":2,\"137\":2,\"139\":19,\"156\":1,\"158\":1,\"160\":1,\"162\":2,\"166\":1,\"172\":4,\"173\":1,\"174\":3,\"187\":2,\"191\":1,\"296\":1,\"304\":1,\"318\":1,\"321\":3,\"439\":1,\"441\":2,\"442\":3,\"443\":1,\"444\":1,\"447\":1,\"491\":1,\"492\":7,\"494\":5,\"506\":2,\"508\":1,\"509\":3},\"2\":{\"425\":1}}],[\"num才会被真正的赋值为10\",{\"1\":{\"284\":1}}],[\"num\",{\"1\":{\"282\":1,\"284\":1}}],[\"numbers\",{\"1\":{\"441\":2}}],[\"number>\",{\"1\":{\"136\":1}}],[\"numberoftrailingzeros\",{\"1\":{\"121\":1}}],[\"numberoftrailingzeros方法\",{\"0\":{\"121\":1}}],[\"numberofleadingzeros\",{\"0\":{\"121\":1},\"1\":{\"121\":1}}],[\"number的缩写\",{\"1\":{\"97\":1}}],[\"numberformatexception\",{\"1\":{\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"93\":1,\"95\":2,\"96\":1,\"112\":1,\"115\":1}}],[\"number\",{\"1\":{\"70\":1,\"71\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"91\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":2,\"110\":2,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"136\":1,\"137\":1,\"143\":2,\"439\":2}}],[\"null值\",{\"1\":{\"250\":1}}],[\"nullpointerexception\",{\"1\":{\"57\":1,\"115\":1}}],[\"null\",{\"1\":{\"54\":2,\"112\":1,\"115\":5,\"136\":3,\"137\":4,\"138\":1,\"139\":6,\"141\":26,\"143\":5,\"153\":1,\"156\":1,\"160\":1,\"164\":1,\"172\":6,\"173\":6,\"174\":1,\"187\":1,\"191\":1,\"321\":4,\"486\":6,\"487\":2,\"493\":4,\"508\":2,\"509\":2}}],[\"null或者其他\",{\"1\":{\"54\":1}}],[\"nacoscontextrefresher\",{\"1\":{\"556\":1,\"557\":1}}],[\"nacosconfigdataloader\",{\"1\":{\"556\":1,\"557\":1}}],[\"nacosclientauthserviceimpl\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"nacos注册中心已注册module1\",{\"1\":{\"555\":1}}],[\"nacosserviceregistry\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"nacos\",{\"1\":{\"545\":4,\"547\":11,\"548\":11,\"549\":11,\"550\":3,\"551\":3,\"555\":6,\"556\":10,\"557\":10,\"566\":1,\"567\":3}}],[\"na\",{\"1\":{\"323\":2}}],[\"naked\",{\"1\":{\"143\":1}}],[\"nanosecond\",{\"1\":{\"134\":1}}],[\"nanos\",{\"1\":{\"134\":4}}],[\"nan是not\",{\"1\":{\"97\":1}}],[\"nans\",{\"1\":{\"79\":1}}],[\"nan\",{\"1\":{\"71\":5,\"76\":1,\"77\":1,\"78\":1,\"79\":6,\"91\":5,\"97\":1,\"98\":1,\"99\":1,\"101\":2}}],[\"name<\",{\"1\":{\"691\":1}}],[\"name推送\",{\"1\":{\"672\":1}}],[\"name推送自己的修改\",{\"1\":{\"672\":1}}],[\"name>\",{\"1\":{\"537\":5,\"541\":1,\"561\":1,\"566\":1}}],[\"namespace\",{\"1\":{\"547\":2,\"548\":1,\"549\":1,\"550\":1,\"551\":1,\"567\":1}}],[\"names\",{\"1\":{\"491\":1}}],[\"named\",{\"1\":{\"486\":3,\"487\":2,\"493\":1}}],[\"name=\",{\"1\":{\"302\":1,\"552\":14}}],[\"namely\",{\"1\":{\"297\":1}}],[\"name\",{\"1\":{\"57\":2,\"139\":2,\"191\":1,\"275\":1,\"302\":1,\"366\":1,\"379\":1,\"381\":1,\"485\":1,\"547\":5,\"548\":3,\"549\":3,\"550\":2,\"551\":2,\"552\":6,\"562\":1,\"567\":2,\"592\":1,\"593\":1,\"647\":1,\"663\":5,\"690\":1}}],[\"native方法\",{\"0\":{\"78\":1,\"101\":1}}],[\"native方法与longbitstodouble\",{\"0\":{\"78\":1}}],[\"native\",{\"0\":{\"298\":1},\"1\":{\"5\":2,\"78\":2,\"101\":2,\"110\":3,\"134\":7,\"139\":1,\"168\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"181\":1,\"184\":1,\"297\":3,\"298\":1,\"323\":1}}],[\"美团技术团队相关文档\",{\"1\":{\"16\":1}}],[\"美团技术团队\",{\"1\":{\"16\":2}}],[\"链接\",{\"0\":{\"280\":1},\"1\":{\"16\":2}}],[\"名称repository\",{\"1\":{\"647\":1}}],[\"名称\",{\"1\":{\"16\":1,\"179\":1}}],[\"飞跃高山和大洋的🐟\",{\"1\":{\"15\":2}}],[\"羽叶丶的个人博客\",{\"1\":{\"15\":1}}],[\"羽叶丶\",{\"1\":{\"15\":2}}],[\"+disableexplicitgc\",{\"1\":{\"590\":1}}],[\"+write\",{\"1\":{\"465\":1}}],[\"+unlockdiagnosticvmoptions\",{\"1\":{\"412\":1}}],[\"+usecmscompactatfullcollection\",{\"1\":{\"363\":3}}],[\"+useconcmarksweepgc\",{\"1\":{\"351\":1,\"358\":1,\"363\":6,\"392\":1}}],[\"+useparnewgc\",{\"1\":{\"363\":3}}],[\"+useparalleloldgc表示对年老代进行并行收集\",{\"1\":{\"363\":1}}],[\"+useparalleloldgc\",{\"1\":{\"351\":1,\"363\":2}}],[\"+useparallelgc此配置仅对年轻代有效\",{\"1\":{\"363\":1}}],[\"+useparallelgc\",{\"1\":{\"351\":1,\"363\":6}}],[\"+useada\",{\"1\":{\"363\":1}}],[\"+useadaptivesizepolicy\",{\"1\":{\"363\":1}}],[\"+useg1gc\",{\"1\":{\"351\":1,\"358\":1,\"361\":1,\"393\":2,\"398\":1}}],[\"+useserialoldgc\",{\"1\":{\"351\":1}}],[\"+useserialgc\",{\"1\":{\"351\":1}}],[\"+usebiasedlocking=true`参数开启偏向锁\",{\"1\":{\"137\":1}}],[\"+heapdumponoutofmemoryerror\",{\"1\":{\"369\":1,\"380\":1}}],[\"+|\",{\"1\":{\"366\":1}}],[\"+printassembly\",{\"1\":{\"412\":1}}],[\"+printheapatgc\",{\"1\":{\"363\":1}}],[\"+printgcdatestamps\",{\"1\":{\"363\":1,\"382\":1,\"390\":1}}],[\"+printgcdetails\",{\"1\":{\"363\":1,\"382\":1,\"390\":1}}],[\"+printgctimestamps\",{\"1\":{\"363\":1,\"382\":1,\"390\":1}}],[\"+printgc\",{\"1\":{\"363\":1}}],[\"+printflagsfinal\",{\"1\":{\"360\":1,\"362\":1,\"369\":1}}],[\"+或\",{\"1\":{\"358\":1}}],[\"++i\",{\"1\":{\"321\":1}}],[\"++gvars\",{\"1\":{\"137\":1}}],[\"+=\",{\"1\":{\"121\":4,\"444\":1,\"445\":1,\"446\":1,\"447\":1}}],[\"+1\",{\"1\":{\"95\":1}}],[\"+表示几次方\",{\"1\":{\"91\":1}}],[\"+\",{\"1\":{\"15\":1,\"79\":1,\"100\":1,\"112\":2,\"114\":1,\"116\":1,\"134\":2,\"140\":2,\"187\":1,\"191\":1,\"321\":2,\"358\":1,\"368\":4,\"492\":1}}],[\"ff\",{\"1\":{\"665\":3}}],[\"fffffep127\",{\"1\":{\"94\":1}}],[\"fffffep+127f\",{\"1\":{\"91\":2}}],[\"fffffe表示十六进制的小数\",{\"1\":{\"91\":1}}],[\"fffffffffffffp+1023\",{\"1\":{\"71\":1}}],[\"feignclient\",{\"1\":{\"562\":2}}],[\"feignclientnames\",{\"1\":{\"562\":4}}],[\"feign目录下编写添加feignclient\",{\"0\":{\"562\":1}}],[\"feign\",{\"1\":{\"547\":2,\"550\":2,\"551\":2,\"562\":1,\"569\":1}}],[\"feilengcui008\",{\"1\":{\"476\":1}}],[\"feature\",{\"2\":{\"425\":1}}],[\"few\",{\"1\":{\"143\":1}}],[\"fetches\",{\"1\":{\"143\":1}}],[\"fetch\",{\"1\":{\"143\":4}}],[\"fence\",{\"1\":{\"141\":1,\"143\":4}}],[\"fex技术周刊\",{\"1\":{\"16\":3}}],[\"flow\",{\"1\":{\"506\":1}}],[\"flowrule\",{\"1\":{\"506\":2}}],[\"flowrulemanager\",{\"1\":{\"506\":2}}],[\"flowrules\",{\"1\":{\"506\":3}}],[\"floattorawintbits\",{\"0\":{\"101\":1},\"1\":{\"99\":1,\"101\":1}}],[\"floattointbits\",{\"1\":{\"99\":1}}],[\"floattointbits方法\",{\"0\":{\"99\":1}}],[\"floatdemotest\",{\"1\":{\"94\":1,\"95\":1,\"98\":1}}],[\"floatconsts\",{\"1\":{\"94\":2,\"98\":1,\"99\":3}}],[\"float构造方法有3个\",{\"1\":{\"93\":1}}],[\"float构造方法\",{\"0\":{\"93\":1}}],[\"float就是java的单精度实现\",{\"1\":{\"88\":1}}],[\"float\",{\"1\":{\"85\":1,\"86\":1,\"91\":31,\"93\":6,\"94\":8,\"95\":13,\"96\":2,\"97\":2,\"98\":9,\"99\":2,\"100\":10,\"101\":4,\"102\":3,\"235\":2}}],[\"float类中的floattorawintbits\",{\"1\":{\"101\":1}}],[\"float类中的floattointbits\",{\"1\":{\"99\":1}}],[\"float类中的静态属性存储在方法区中的静态区\",{\"1\":{\"86\":1}}],[\"float类\",{\"0\":{\"84\":1}}],[\"floatingdecimal\",{\"1\":{\"75\":1,\"96\":1}}],[\"floating\",{\"1\":{\"70\":1,\"94\":1}}],[\"flag=flag\",{\"1\":{\"368\":1}}],[\"flags\",{\"1\":{\"277\":1,\"360\":1,\"366\":1}}],[\"flag\",{\"1\":{\"139\":2,\"143\":1,\"366\":3,\"368\":3}}],[\"fullpath\",{\"1\":{\"491\":1}}],[\"full\",{\"1\":{\"314\":3,\"491\":2}}],[\"future\",{\"1\":{\"137\":1}}],[\"function\",{\"1\":{\"137\":2,\"460\":1}}],[\"fallback\",{\"1\":{\"509\":1}}],[\"fallbackhandler\",{\"1\":{\"509\":1}}],[\"false\",{\"1\":{\"49\":3,\"52\":5,\"53\":2,\"54\":4,\"56\":2,\"57\":2,\"58\":4,\"59\":5,\"60\":4,\"61\":6,\"98\":3,\"137\":1,\"138\":3,\"141\":1,\"143\":5,\"185\":1,\"191\":1,\"368\":1,\"486\":1,\"491\":1,\"547\":1,\"591\":9,\"592\":4,\"593\":4}}],[\"faq\",{\"1\":{\"472\":1}}],[\"factorial方法是一种无状态确定性函数\",{\"1\":{\"439\":1}}],[\"factorial\",{\"1\":{\"439\":2}}],[\"failtonode\",{\"1\":{\"491\":1}}],[\"failure\",{\"1\":{\"363\":1,\"391\":1}}],[\"fail\",{\"1\":{\"143\":1,\"491\":1}}],[\"failed\",{\"1\":{\"137\":1}}],[\"fastl的\",{\"1\":{\"248\":1,\"249\":1,\"250\":1}}],[\"fast的\",{\"1\":{\"238\":1,\"239\":1,\"241\":1,\"242\":1,\"243\":1,\"245\":1}}],[\"fastpath\",{\"1\":{\"143\":1}}],[\"fast\",{\"1\":{\"137\":1,\"460\":1}}],[\"fasthashcode方法如下\",{\"1\":{\"137\":1}}],[\"fasthashcode方法实现\",{\"1\":{\"137\":1}}],[\"fasthashcode\",{\"1\":{\"137\":2}}],[\"faster\",{\"1\":{\"116\":1}}],[\"f\",{\"1\":{\"70\":1,\"89\":2,\"94\":5,\"95\":2,\"98\":2,\"111\":1,\"374\":1,\"439\":4,\"441\":1,\"637\":1}}],[\"fdis\",{\"1\":{\"69\":1,\"88\":1}}],[\"follower拿到readindex后\",{\"1\":{\"467\":1}}],[\"follower先向leader询问readindex\",{\"1\":{\"467\":1}}],[\"follower\",{\"1\":{\"467\":3}}],[\"following\",{\"1\":{\"137\":1,\"143\":3,\"555\":1,\"556\":1,\"557\":1}}],[\"folder\",{\"1\":{\"189\":1,\"193\":1}}],[\"foolish\",{\"1\":{\"16\":1}}],[\"foreach\",{\"1\":{\"441\":2}}],[\"forward\",{\"1\":{\"143\":1,\"467\":1}}],[\"form\",{\"1\":{\"110\":2,\"137\":1,\"143\":1}}],[\"formats>\",{\"1\":{\"690\":1}}],[\"format>\",{\"1\":{\"690\":2}}],[\"format=b\",{\"1\":{\"369\":2,\"380\":1}}],[\"format\",{\"1\":{\"99\":1,\"101\":2,\"277\":1}}],[\"for\",{\"0\":{\"10\":1},\"1\":{\"77\":1,\"95\":1,\"99\":1,\"111\":1,\"112\":1,\"124\":1,\"125\":1,\"137\":7,\"139\":2,\"141\":3,\"143\":7,\"172\":1,\"273\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"321\":1,\"439\":1,\"460\":4,\"555\":2,\"556\":2,\"557\":2}}],[\"filter>\",{\"1\":{\"552\":1}}],[\"filter\",{\"1\":{\"506\":2,\"552\":1}}],[\"filterrule\",{\"1\":{\"498\":1}}],[\"filterconditions\",{\"1\":{\"492\":2}}],[\"filemode>\",{\"1\":{\"690\":4}}],[\"file>\",{\"1\":{\"552\":2}}],[\"fileregion为0可知fileregion不影响高低水位\",{\"1\":{\"479\":1}}],[\"fileregion估算值为0\",{\"1\":{\"479\":1}}],[\"filesets>\",{\"1\":{\"690\":1}}],[\"fileset>\",{\"1\":{\"690\":2}}],[\"files\",{\"1\":{\"411\":2}}],[\"file=\",{\"1\":{\"374\":2}}],[\"file=heap\",{\"1\":{\"369\":2,\"380\":1}}],[\"filenamepattern>\",{\"1\":{\"552\":2}}],[\"filename\",{\"1\":{\"187\":7,\"188\":1,\"192\":1}}],[\"file\",{\"1\":{\"16\":1,\"172\":2,\"173\":1,\"174\":3,\"187\":1,\"191\":1,\"277\":1,\"410\":1,\"547\":3,\"548\":3,\"549\":3,\"552\":20}}],[\"first\",{\"1\":{\"174\":1}}],[\"fixme\",{\"1\":{\"143\":2}}],[\"fixed\",{\"1\":{\"143\":1}}],[\"fix\",{\"1\":{\"139\":1}}],[\"field\",{\"1\":{\"139\":2,\"277\":1,\"294\":1,\"302\":3}}],[\"fields\",{\"1\":{\"77\":1,\"99\":1,\"139\":1,\"277\":3,\"379\":2}}],[\"figure\",{\"1\":{\"119\":1,\"121\":2,\"122\":1}}],[\"finished\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"findfirst\",{\"1\":{\"486\":1,\"493\":1}}],[\"finding\",{\"1\":{\"141\":1}}],[\"findprimitiveclass函数根据int字符串获得class\",{\"1\":{\"110\":1}}],[\"finalname>\",{\"1\":{\"691\":1}}],[\"finalization\",{\"1\":{\"170\":1}}],[\"finalize方法的主要作用为\",{\"1\":{\"144\":1}}],[\"finalize方法\",{\"0\":{\"144\":1}}],[\"finalizer\",{\"1\":{\"139\":2}}],[\"finalize\",{\"1\":{\"134\":1,\"169\":2,\"402\":3}}],[\"final修饰说明不可重写\",{\"1\":{\"141\":1}}],[\"finally\",{\"1\":{\"137\":1}}],[\"final\",{\"1\":{\"49\":2,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"71\":11,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"91\":11,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"110\":5,\"111\":4,\"112\":3,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"134\":6,\"275\":1,\"294\":1,\"302\":2,\"347\":1,\"440\":2,\"441\":4,\"444\":1,\"447\":1,\"485\":2,\"486\":8,\"487\":8,\"488\":3,\"491\":5,\"492\":3,\"493\":3,\"494\":2,\"496\":2,\"497\":2,\"498\":4,\"499\":1,\"505\":1,\"506\":1,\"555\":4,\"556\":4,\"557\":4,\"569\":1}}],[\"finen\",{\"1\":{\"16\":2}}],[\"fri\",{\"1\":{\"571\":1}}],[\"freememory\",{\"1\":{\"176\":4}}],[\"freememory方法\",{\"0\":{\"176\":1}}],[\"fresh\",{\"1\":{\"143\":1}}],[\"front\",{\"1\":{\"141\":4}}],[\"fromjson\",{\"1\":{\"506\":1}}],[\"from区中还能存活的对象会有两个去处\",{\"1\":{\"311\":1}}],[\"from区中对象的年龄就会+1\",{\"1\":{\"311\":1}}],[\"fromclass\",{\"1\":{\"187\":2,\"191\":2}}],[\"from\",{\"1\":{\"15\":1,\"137\":2,\"141\":2,\"143\":5,\"294\":1,\"295\":1,\"313\":2,\"486\":2,\"493\":1,\"537\":1,\"566\":1}}],[\"frame\",{\"1\":{\"327\":1,\"379\":1}}],[\"frames\",{\"1\":{\"296\":1}}],[\"framework\",{\"1\":{\"235\":1}}],[\"fraction\",{\"1\":{\"70\":1}}],[\"frank的个人博客\",{\"1\":{\"16\":1}}],[\"frank\",{\"1\":{\"16\":2}}],[\"枫糖\",{\"1\":{\"15\":2}}],[\"六阿哥博客\",{\"1\":{\"15\":2}}],[\"笨小孩杂谈\",{\"1\":{\"15\":2}}],[\"专注于分布式事务\",{\"1\":{\"475\":1}}],[\"专注于前端技术\",{\"1\":{\"15\":1}}],[\"专注前端技术\",{\"1\":{\"15\":1}}],[\"专业书籍\",{\"0\":{\"12\":1}}],[\"yum\",{\"1\":{\"586\":1}}],[\"yuye\",{\"1\":{\"15\":2}}],[\"yyyy\",{\"1\":{\"552\":3}}],[\"yaml文件添加到nacos中\",{\"1\":{\"556\":1,\"557\":1}}],[\"yaml文件配置\",{\"0\":{\"550\":1,\"551\":1}}],[\"yaml\",{\"1\":{\"547\":5,\"548\":5,\"549\":5,\"556\":2,\"557\":2}}],[\"yml<\",{\"1\":{\"690\":1,\"691\":1}}],[\"yml配置文件如下\",{\"1\":{\"567\":1}}],[\"yml\",{\"0\":{\"547\":1,\"548\":1,\"549\":1},\"1\":{\"547\":2,\"548\":2,\"549\":2}}],[\"you\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"youremail\",{\"1\":{\"647\":1,\"677\":1}}],[\"your\",{\"1\":{\"470\":1}}],[\"young\",{\"1\":{\"363\":1,\"393\":1,\"402\":1}}],[\"young区总大小\",{\"1\":{\"391\":1}}],[\"young区回收后\",{\"1\":{\"391\":1}}],[\"young区回收前\",{\"1\":{\"391\":1}}],[\"young区复制效率比较高\",{\"1\":{\"339\":1}}],[\"young区\",{\"1\":{\"339\":1}}],[\"young区分为两大块\",{\"1\":{\"309\":1}}],[\"yoko\",{\"1\":{\"15\":2}}],[\"yet\",{\"1\":{\"143\":1}}],[\"y\",{\"1\":{\"58\":2,\"111\":1,\"121\":13,\"464\":7,\"586\":1}}],[\"yijia1949\",{\"1\":{\"3\":1}}],[\"开始喷诸葛建国\",{\"1\":{\"469\":1}}],[\"开始向下寻找\",{\"1\":{\"334\":1}}],[\"开发工具中设置比如idea\",{\"1\":{\"361\":1}}],[\"开发宅\",{\"1\":{\"15\":1}}],[\"开源之夏2023\",{\"1\":{\"4\":1}}],[\"开源角色\",{\"0\":{\"4\":1}}],[\"冰水鉴心的博客\",{\"1\":{\"15\":2}}],[\"谭升的博客\",{\"1\":{\"15\":2}}],[\"t8\",{\"1\":{\"599\":1,\"600\":4}}],[\"ttl\",{\"1\":{\"479\":1}}],[\"ttur\",{\"1\":{\"54\":1}}],[\"tcc\",{\"0\":{\"475\":1},\"1\":{\"475\":1}}],[\"tcpnodelay\",{\"1\":{\"591\":1}}],[\"tcp会主动探测空闲连接的有效性\",{\"1\":{\"479\":1}}],[\"tcp参数\",{\"1\":{\"479\":1}}],[\"tcp数据发送缓冲区大小\",{\"1\":{\"479\":1}}],[\"tcp\",{\"1\":{\"374\":1,\"479\":2,\"555\":5,\"556\":5,\"557\":5,\"591\":1}}],[\"tx\",{\"1\":{\"460\":1}}],[\"txt内容\",{\"1\":{\"665\":1}}],[\"txt文档看一下是否已经有了\",{\"1\":{\"657\":1}}],[\"txt文件添加数据\",{\"1\":{\"666\":1}}],[\"txt文件中添加数据4444444444444\",{\"1\":{\"665\":1}}],[\"txt文件中添加一行数据\",{\"1\":{\"642\":2}}],[\"txt文件修改后\",{\"1\":{\"642\":1}}],[\"txt文件\",{\"1\":{\"638\":1}}],[\"txt看看里面还有什么内容了\",{\"1\":{\"654\":1}}],[\"txt中添加信息\",{\"1\":{\"662\":1}}],[\"txt中添加一行数据\",{\"1\":{\"638\":1,\"653\":1}}],[\"txt中\",{\"1\":{\"651\":1}}],[\"txt之后\",{\"1\":{\"644\":1}}],[\"txt命令\",{\"1\":{\"644\":1}}],[\"txt命令撤销修改\",{\"1\":{\"642\":1}}],[\"txt的文件中添加数据6666666666666数据\",{\"1\":{\"672\":1}}],[\"txt的文件\",{\"1\":{\"644\":1,\"649\":1}}],[\"txt会回退到之前的一个版本\",{\"1\":{\"642\":1}}],[\"txt\",{\"0\":{\"642\":1},\"1\":{\"174\":4,\"360\":1,\"642\":3,\"644\":6,\"657\":1,\"665\":1,\"666\":1,\"672\":2,\"679\":3}}],[\"tuning\",{\"1\":{\"399\":1}}],[\"t2\",{\"1\":{\"368\":1,\"468\":3}}],[\"t2=new\",{\"1\":{\"368\":1}}],[\"t10s\",{\"1\":{\"599\":1,\"600\":4}}],[\"t1提交\",{\"1\":{\"468\":1}}],[\"t1先开始\",{\"1\":{\"468\":1}}],[\"t1\",{\"1\":{\"368\":1,\"468\":2}}],[\"t1=new\",{\"1\":{\"368\":1}}],[\"tbivm\",{\"1\":{\"143\":1}}],[\"tstates\",{\"1\":{\"143\":1}}],[\"tstate\",{\"1\":{\"143\":11}}],[\"ts\",{\"1\":{\"141\":6,\"143\":14}}],[\"t>\",{\"1\":{\"137\":2}}],[\"text\",{\"1\":{\"571\":1}}],[\"tech\",{\"1\":{\"476\":1}}],[\"technotes\",{\"1\":{\"398\":1,\"399\":1}}],[\"technologies\",{\"1\":{\"363\":1}}],[\"term\",{\"1\":{\"460\":1}}],[\"teaching\",{\"1\":{\"460\":1}}],[\"tencent\",{\"1\":{\"421\":1}}],[\"tense\",{\"1\":{\"143\":2}}],[\"tevent\",{\"1\":{\"137\":1,\"141\":2,\"143\":4}}],[\"temp\",{\"1\":{\"137\":12}}],[\"testgit\",{\"1\":{\"679\":1}}],[\"testgetinteger\",{\"1\":{\"115\":1}}],[\"testgetboolean\",{\"1\":{\"57\":1}}],[\"test02\",{\"1\":{\"644\":7,\"679\":1}}],[\"test01这个目录就是工作区\",{\"1\":{\"637\":1}}],[\"test01这个目录\",{\"1\":{\"637\":1}}],[\"testhello\",{\"1\":{\"569\":1}}],[\"testhellocontroller\",{\"1\":{\"569\":2}}],[\"testcontroller\",{\"1\":{\"558\":1}}],[\"testcompare\",{\"1\":{\"58\":1}}],[\"tests\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"testsignum\",{\"1\":{\"118\":1}}],[\"test<\",{\"1\":{\"537\":1}}],[\"testmethod\",{\"1\":{\"294\":1}}],[\"test13\",{\"1\":{\"193\":1}}],[\"test12\",{\"1\":{\"189\":1}}],[\"test10\",{\"1\":{\"178\":1}}],[\"test9\",{\"1\":{\"177\":1}}],[\"test8\",{\"1\":{\"176\":1}}],[\"test7\",{\"1\":{\"175\":1}}],[\"test6\",{\"1\":{\"174\":1}}],[\"test5\",{\"1\":{\"170\":1}}],[\"test4\",{\"1\":{\"166\":1}}],[\"test3\",{\"1\":{\"162\":1}}],[\"test2\",{\"1\":{\"158\":1,\"162\":1}}],[\"testing\",{\"1\":{\"137\":2}}],[\"testinfiniteandfinite\",{\"1\":{\"98\":1}}],[\"testreverse\",{\"1\":{\"119\":1}}],[\"testnumber\",{\"1\":{\"115\":2}}],[\"testvalueof\",{\"1\":{\"95\":1}}],[\"testtohexstring\",{\"1\":{\"94\":1}}],[\"testlogicalxor\",{\"1\":{\"61\":1}}],[\"testlogicalor\",{\"1\":{\"60\":1}}],[\"testlogicaland\",{\"1\":{\"59\":1}}],[\"testparseboolean\",{\"1\":{\"54\":1}}],[\"testboolean\",{\"1\":{\"52\":1}}],[\"test\",{\"0\":{\"548\":1,\"550\":1,\"642\":1,\"718\":1},\"1\":{\"52\":1,\"54\":1,\"57\":5,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"76\":1,\"94\":1,\"95\":1,\"98\":1,\"107\":1,\"114\":1,\"115\":3,\"118\":1,\"119\":1,\"137\":7,\"158\":1,\"162\":2,\"166\":2,\"170\":2,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"189\":1,\"193\":1,\"294\":3,\"321\":2,\"415\":2,\"437\":1,\"482\":1,\"503\":1,\"547\":1,\"550\":1,\"551\":1,\"556\":4,\"557\":1,\"558\":1,\"562\":3,\"571\":1,\"599\":1,\"600\":4,\"642\":6,\"679\":1},\"2\":{\"606\":1}}],[\"tar\",{\"1\":{\"595\":2,\"596\":2,\"690\":1}}],[\"target>\",{\"1\":{\"545\":1,\"561\":1,\"691\":1}}],[\"target>8<\",{\"1\":{\"545\":1,\"561\":1}}],[\"tars\",{\"1\":{\"482\":1}}],[\"tail\",{\"1\":{\"141\":19,\"374\":1}}],[\"taken\",{\"1\":{\"137\":1}}],[\"talk\",{\"1\":{\"15\":1}}],[\"ti\",{\"1\":{\"143\":1}}],[\"timestamp\",{\"1\":{\"460\":1}}],[\"times\",{\"1\":{\"363\":1,\"391\":1}}],[\"timed\",{\"1\":{\"143\":1}}],[\"time\",{\"0\":{\"290\":1},\"1\":{\"141\":2,\"291\":1,\"294\":4,\"295\":1,\"296\":1,\"302\":2,\"393\":4,\"571\":1}}],[\"timeouts\",{\"1\":{\"141\":1}}],[\"timeout++\",{\"1\":{\"134\":1}}],[\"timeout\",{\"1\":{\"134\":6,\"143\":8,\"467\":1}}],[\"tidb\",{\"1\":{\"467\":1}}],[\"tid\",{\"1\":{\"141\":1,\"143\":1}}],[\"tips\",{\"1\":{\"16\":1,\"637\":1,\"638\":1}}],[\"t\",{\"1\":{\"111\":1,\"137\":10,\"139\":3,\"143\":6,\"488\":2,\"494\":2,\"497\":1,\"499\":1,\"677\":1}}],[\"two\",{\"1\":{\"110\":2,\"137\":1,\"139\":2,\"443\":1}}],[\"type>\",{\"1\":{\"537\":3}}],[\"type表示执行tostring后的类型为int\",{\"1\":{\"110\":1}}],[\"type\",{\"1\":{\"110\":2,\"486\":2,\"493\":1,\"571\":1,\"592\":1,\"593\":1}}],[\"than\",{\"1\":{\"295\":1,\"296\":1,\"298\":1}}],[\"that\",{\"1\":{\"137\":1,\"139\":2,\"141\":2,\"143\":11,\"189\":1,\"193\":1,\"273\":2,\"291\":1,\"294\":1,\"295\":1,\"297\":2,\"460\":1}}],[\"threshold\",{\"1\":{\"552\":5}}],[\"three\",{\"1\":{\"443\":1}}],[\"thread2\",{\"1\":{\"442\":2}}],[\"thread1\",{\"1\":{\"442\":2}}],[\"threadb\",{\"1\":{\"441\":1}}],[\"threadblockinvm\",{\"1\":{\"143\":1}}],[\"threada\",{\"1\":{\"441\":1}}],[\"threadlocal<stateholder>\",{\"1\":{\"441\":2}}],[\"threadlocal\",{\"0\":{\"441\":1},\"1\":{\"441\":2}}],[\"threadstate\",{\"1\":{\"441\":1}}],[\"threadstacksize=100\",{\"1\":{\"359\":1}}],[\"threads\",{\"1\":{\"137\":3,\"143\":2,\"294\":1,\"295\":1,\"297\":1,\"379\":1,\"393\":1,\"555\":2,\"556\":2,\"557\":2}}],[\"thread\",{\"1\":{\"137\":11,\"139\":7,\"141\":13,\"143\":45,\"156\":1,\"158\":1,\"160\":1,\"162\":6,\"166\":5,\"291\":4,\"296\":4,\"297\":4,\"318\":1,\"319\":1,\"322\":1,\"331\":2,\"334\":1,\"368\":8,\"377\":1,\"379\":1,\"393\":3,\"441\":4,\"442\":4,\"448\":2,\"552\":1},\"2\":{\"427\":1,\"432\":1,\"433\":1,\"449\":1,\"450\":1}}],[\"throughout\",{\"1\":{\"137\":1}}],[\"thrownullpointerexception\",{\"1\":{\"136\":1}}],[\"throwable\",{\"1\":{\"134\":1,\"509\":2}}],[\"throw\",{\"1\":{\"76\":1,\"134\":2,\"139\":1,\"143\":7,\"172\":1,\"187\":1,\"191\":1,\"492\":1,\"508\":1,\"509\":1}}],[\"throws\",{\"1\":{\"73\":1,\"74\":1,\"75\":1,\"93\":1,\"95\":1,\"96\":1,\"134\":5,\"172\":6,\"174\":1,\"294\":1,\"295\":1,\"296\":2,\"318\":1,\"322\":1}}],[\"thisbits\",{\"1\":{\"79\":3}}],[\"thisval\",{\"1\":{\"79\":2}}],[\"this\",{\"1\":{\"52\":2,\"73\":1,\"93\":2,\"134\":1,\"136\":3,\"137\":8,\"139\":3,\"141\":2,\"143\":20,\"277\":1,\"368\":1,\"393\":2,\"440\":1,\"446\":1,\"447\":1,\"460\":1,\"491\":2,\"555\":1,\"556\":1,\"557\":1,\"569\":1}}],[\"these\",{\"1\":{\"291\":1}}],[\"there\",{\"1\":{\"141\":1}}],[\"them\",{\"1\":{\"139\":1}}],[\"they\",{\"1\":{\"137\":1,\"139\":2}}],[\"then\",{\"1\":{\"94\":1,\"141\":1,\"143\":3}}],[\"the\",{\"0\":{\"273\":1,\"297\":1},\"1\":{\"15\":1,\"49\":4,\"94\":1,\"110\":6,\"112\":1,\"116\":1,\"118\":3,\"119\":1,\"120\":2,\"125\":1,\"137\":34,\"139\":14,\"141\":15,\"143\":77,\"174\":1,\"187\":1,\"189\":1,\"193\":1,\"273\":6,\"291\":5,\"294\":10,\"295\":6,\"296\":7,\"297\":12,\"298\":2,\"302\":2,\"346\":2,\"379\":4,\"393\":6,\"402\":1,\"460\":11,\"486\":1,\"491\":9,\"555\":3,\"556\":3,\"557\":3,\"591\":1}}],[\"tree\",{\"1\":{\"250\":1}}],[\"treemap的iterator方法返回的迭代器是fail\",{\"1\":{\"250\":1}}],[\"treemap基于红黑树\",{\"1\":{\"250\":1}}],[\"treemap无序集合\",{\"1\":{\"250\":1}}],[\"treemap可以对元素进行排序\",{\"1\":{\"250\":1}}],[\"treemap可以插入null键\",{\"1\":{\"250\":1}}],[\"treemap不允许出现重复的key\",{\"1\":{\"250\":1}}],[\"treemap\",{\"0\":{\"250\":1,\"254\":1},\"1\":{\"250\":1}}],[\"treeset源码解析\",{\"0\":{\"254\":1}}],[\"treeset的iterator方法返回的迭代器是fail\",{\"1\":{\"243\":1}}],[\"treeset是有序的set集合\",{\"1\":{\"243\":1}}],[\"treeset继承自abstractset\",{\"1\":{\"243\":1}}],[\"treeset\",{\"0\":{\"243\":1}}],[\"tracing\",{\"1\":{\"346\":1}}],[\"tracemethodcalls\",{\"1\":{\"184\":1,\"185\":1}}],[\"tracemethodcalls方法\",{\"0\":{\"183\":1}}],[\"traceinstructions\",{\"1\":{\"181\":1,\"182\":1}}],[\"traceinstructions方法\",{\"0\":{\"180\":1}}],[\"trace\",{\"1\":{\"5\":1,\"377\":1}}],[\"transform\",{\"1\":{\"509\":2}}],[\"transfer\",{\"1\":{\"141\":1}}],[\"transferring\",{\"1\":{\"141\":1}}],[\"transition\",{\"1\":{\"143\":3}}],[\"traps\",{\"1\":{\"141\":3,\"143\":2}}],[\"traffic\",{\"1\":{\"137\":1}}],[\"trie中的缓存\",{\"1\":{\"494\":2}}],[\"trie缓存\",{\"1\":{\"493\":1}}],[\"triecachetypeenum\",{\"1\":{\"492\":6,\"494\":5}}],[\"trieeventenum\",{\"1\":{\"492\":6,\"494\":5}}],[\"trieevent\",{\"1\":{\"492\":7,\"494\":5}}],[\"triematchmodeenum\",{\"1\":{\"491\":2}}],[\"triematchrule\",{\"1\":{\"486\":1,\"493\":1}}],[\"trie\",{\"1\":{\"486\":1,\"491\":8,\"492\":2,\"493\":1,\"494\":2,\"591\":1}}],[\"trivial\",{\"1\":{\"137\":1}}],[\"tricky\",{\"1\":{\"124\":1,\"125\":1}}],[\"trying\",{\"1\":{\"143\":1}}],[\"try\",{\"1\":{\"57\":1,\"112\":1,\"115\":2}}],[\"trrue\",{\"1\":{\"52\":1}}],[\"truetime\",{\"1\":{\"461\":1}}],[\"true或boolean\",{\"1\":{\"62\":1}}],[\"true\",{\"1\":{\"49\":3,\"52\":4,\"53\":2,\"54\":3,\"56\":2,\"57\":2,\"58\":4,\"59\":4,\"60\":2,\"61\":6,\"62\":3,\"71\":8,\"76\":1,\"91\":8,\"98\":3,\"116\":1,\"138\":9,\"139\":1,\"143\":5,\"187\":1,\"318\":1,\"322\":1,\"368\":3,\"486\":1,\"491\":2,\"492\":2,\"494\":1,\"547\":3,\"548\":3,\"549\":3,\"550\":2,\"551\":2,\"567\":1,\"591\":5}}],[\"true和false\",{\"1\":{\"49\":1}}],[\"tool\",{\"2\":{\"627\":1,\"628\":1}}],[\"tools\",{\"0\":{\"719\":1},\"1\":{\"273\":1}}],[\"tomcat<\",{\"1\":{\"545\":1,\"566\":1}}],[\"tolist\",{\"1\":{\"492\":1,\"506\":2}}],[\"tos\",{\"1\":{\"479\":2}}],[\"tostring\",{\"1\":{\"56\":2,\"116\":5,\"133\":1,\"134\":1}}],[\"tostring方法\",{\"0\":{\"56\":1,\"116\":1,\"140\":1}}],[\"totalsizecap>\",{\"1\":{\"552\":2}}],[\"total\",{\"1\":{\"460\":1,\"466\":1,\"552\":4}}],[\"totalmemory\",{\"1\":{\"178\":3}}],[\"totalmemory方法\",{\"0\":{\"178\":1}}],[\"top\",{\"1\":{\"381\":2}}],[\"tobytearray\",{\"1\":{\"321\":1}}],[\"to中是空的\",{\"1\":{\"311\":1}}],[\"tokens流\",{\"1\":{\"276\":1}}],[\"toward\",{\"1\":{\"143\":1}}],[\"todo\",{\"1\":{\"143\":2}}],[\"tounsignedlong\",{\"1\":{\"123\":1,\"124\":2,\"125\":2}}],[\"tounsignedlong方法\",{\"0\":{\"123\":1}}],[\"tohexstring\",{\"1\":{\"94\":4,\"134\":1,\"140\":1}}],[\"tohexstring方法\",{\"0\":{\"94\":1}}],[\"to\",{\"1\":{\"15\":1,\"49\":2,\"94\":1,\"110\":2,\"137\":15,\"139\":1,\"141\":9,\"143\":17,\"174\":2,\"273\":1,\"294\":2,\"296\":2,\"297\":1,\"298\":1,\"302\":2,\"313\":1,\"379\":1,\"381\":1,\"460\":2,\"479\":1,\"491\":2,\"555\":3,\"556\":3,\"557\":3,\"591\":1}}],[\"技术分享\",{\"1\":{\"15\":1}}],[\"学习者的博客\",{\"1\":{\"15\":1}}],[\"赵俊的博客\",{\"1\":{\"15\":1}}],[\"赵俊\",{\"1\":{\"15\":1}}],[\"云扬四海\",{\"1\":{\"15\":2}}],[\"脚踏实地\",{\"1\":{\"15\":1}}],[\"敢一行\",{\"1\":{\"15\":1}}],[\"南瓜慢说\",{\"1\":{\"15\":2}}],[\"🖥\",{\"1\":{\"623\":1}}],[\"💬\",{\"1\":{\"623\":1}}],[\"💻\",{\"1\":{\"623\":1}}],[\"📋\",{\"1\":{\"623\":1}}],[\"📝\",{\"1\":{\"623\":1}}],[\"💯\",{\"1\":{\"15\":1}}],[\"👍👍链接\",{\"1\":{\"15\":1}}],[\"✌️✌️名称\",{\"1\":{\"15\":1}}],[\"左领右舍\",{\"0\":{\"15\":1}}],[\"友链\",{\"0\":{\"14\":1}}],[\"bfe086289312\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"b0\",{\"1\":{\"464\":1}}],[\"black\",{\"1\":{\"250\":1}}],[\"blob\",{\"1\":{\"409\":1}}],[\"blocking\",{\"1\":{\"143\":1,\"460\":1}}],[\"blocked\",{\"1\":{\"137\":1,\"143\":2}}],[\"blogspot\",{\"1\":{\"413\":1}}],[\"blogs\",{\"1\":{\"393\":1,\"398\":1}}],[\"blog\",{\"1\":{\"15\":4,\"421\":1,\"476\":2}}],[\"branch5\",{\"1\":{\"666\":1}}],[\"branch4\",{\"1\":{\"662\":1}}],[\"branch\",{\"1\":{\"662\":4,\"663\":5,\"664\":1,\"672\":3}}],[\"brpc\",{\"1\":{\"482\":1,\"503\":1}}],[\"broadcast\",{\"1\":{\"479\":1}}],[\"brief\",{\"1\":{\"143\":1}}],[\"break\",{\"1\":{\"141\":3,\"492\":3}}],[\"bs\",{\"1\":{\"139\":3}}],[\"bat<\",{\"1\":{\"690\":1}}],[\"baomidou<\",{\"1\":{\"545\":1}}],[\"babe\",{\"1\":{\"277\":1}}],[\"barrier\",{\"1\":{\"139\":1}}],[\"barrierset\",{\"1\":{\"139\":1}}],[\"bash脚本\",{\"1\":{\"692\":1}}],[\"bash\",{\"1\":{\"647\":1,\"692\":1}}],[\"basically\",{\"1\":{\"473\":1}}],[\"basic\",{\"1\":{\"457\":1},\"2\":{\"148\":1}}],[\"basiclock\",{\"1\":{\"137\":1}}],[\"basepackages\",{\"1\":{\"568\":1}}],[\"base是分布式通用理论\",{\"1\":{\"475\":1}}],[\"base是基于\",{\"1\":{\"471\":1}}],[\"base这些都只是理论\",{\"1\":{\"475\":1}}],[\"base的核心思想是即使无法做到强一致性\",{\"1\":{\"473\":1}}],[\"base理论\",{\"0\":{\"473\":1}}],[\"base理论中的\",{\"1\":{\"470\":1}}],[\"basedir\",{\"1\":{\"690\":1}}],[\"basedatacache\",{\"1\":{\"497\":4,\"498\":2,\"499\":2}}],[\"based\",{\"1\":{\"77\":1,\"99\":1}}],[\"base\",{\"1\":{\"16\":3,\"460\":1,\"471\":1,\"473\":1,\"487\":1,\"493\":1,\"555\":1,\"556\":1,\"557\":1}}],[\"b内容不变\",{\"1\":{\"138\":1}}],[\"build>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"566\":1,\"691\":1}}],[\"builder\",{\"1\":{\"486\":1}}],[\"build\",{\"1\":{\"415\":1,\"486\":1,\"545\":2,\"561\":2}}],[\"building\",{\"1\":{\"413\":1}}],[\"but\",{\"1\":{\"137\":1,\"143\":3,\"296\":1}}],[\"bug2\",{\"1\":{\"666\":1}}],[\"bug需要5个小时内完成\",{\"1\":{\"666\":1}}],[\"bug时候\",{\"1\":{\"666\":1}}],[\"bug分支\",{\"0\":{\"666\":1}}],[\"bug\",{\"1\":{\"137\":2,\"143\":1,\"666\":1}}],[\"buffer\",{\"1\":{\"143\":1,\"479\":2}}],[\"buf\",{\"1\":{\"116\":8}}],[\"boldmagenta\",{\"1\":{\"552\":1}}],[\"both\",{\"1\":{\"139\":1,\"143\":1,\"273\":1}}],[\"boundary\",{\"1\":{\"139\":1}}],[\"box\",{\"1\":{\"137\":1}}],[\"boot<\",{\"1\":{\"537\":5,\"541\":1,\"545\":6,\"566\":5,\"691\":1}}],[\"boot\",{\"1\":{\"376\":3,\"530\":1,\"531\":1,\"537\":11,\"541\":2,\"545\":7,\"555\":2,\"556\":2,\"557\":2,\"566\":5,\"568\":2,\"691\":1,\"692\":2}}],[\"bootstrap部署模式\",{\"1\":{\"589\":1}}],[\"bootstrap配置\",{\"0\":{\"582\":1}}],[\"bootstrap\",{\"0\":{\"596\":1,\"600\":1},\"1\":{\"287\":1,\"583\":1,\"596\":2}}],[\"bool\",{\"1\":{\"139\":1,\"143\":1}}],[\"boolean2\",{\"1\":{\"57\":2}}],[\"booleanvalue\",{\"1\":{\"55\":1}}],[\"booleanvalue方法\",{\"0\":{\"55\":1}}],[\"booleandemotest\",{\"1\":{\"52\":1,\"54\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1}}],[\"boolean构造方法\",{\"0\":{\"52\":1}}],[\"boolean\",{\"1\":{\"48\":1,\"49\":7,\"52\":14,\"53\":4,\"54\":6,\"55\":2,\"56\":2,\"57\":7,\"58\":7,\"59\":7,\"60\":6,\"61\":8,\"76\":3,\"97\":2,\"98\":2,\"116\":1,\"134\":1,\"160\":1,\"181\":1,\"182\":1,\"184\":1,\"185\":1,\"368\":2,\"486\":4,\"491\":2,\"492\":2,\"493\":1,\"494\":1,\"498\":1}}],[\"boolean类型\",{\"1\":{\"358\":1}}],[\"boolean类中有两个状态码\",{\"1\":{\"49\":1}}],[\"boolean类\",{\"0\":{\"47\":1}}],[\"book\",{\"0\":{\"10\":1}}],[\"by\",{\"1\":{\"112\":1,\"120\":2,\"137\":4,\"139\":2,\"141\":3,\"143\":4,\"273\":1,\"295\":1,\"297\":1,\"379\":1,\"393\":1,\"547\":1,\"550\":1,\"551\":1,\"555\":1,\"556\":1,\"557\":1}}],[\"bytebufholder和fileregion的大小\",{\"1\":{\"479\":1}}],[\"byte\",{\"1\":{\"71\":1,\"91\":1,\"110\":1,\"321\":1,\"362\":1}}],[\"bytesperlong\",{\"1\":{\"139\":1}}],[\"bytes用来表示二进制补码形式的int值的字节数\",{\"1\":{\"110\":1}}],[\"bytes\",{\"1\":{\"71\":1,\"91\":1,\"110\":2,\"571\":1}}],[\"benchmark\",{\"0\":{\"718\":1},\"2\":{\"606\":1}}],[\"benchmarks\",{\"1\":{\"409\":1}}],[\"beneath\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"bean\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"beforehalt\",{\"1\":{\"164\":1}}],[\"before\",{\"1\":{\"143\":2,\"492\":2,\"494\":1,\"644\":1}}],[\"begin\",{\"1\":{\"141\":1}}],[\"best\",{\"1\":{\"137\":1}}],[\"between\",{\"1\":{\"137\":1,\"143\":2}}],[\"being\",{\"1\":{\"137\":1,\"297\":2}}],[\"been\",{\"1\":{\"137\":1,\"143\":2}}],[\"be\",{\"1\":{\"94\":1,\"112\":3,\"137\":6,\"139\":8,\"141\":1,\"143\":12,\"294\":1,\"295\":1,\"296\":3,\"379\":1,\"460\":3}}],[\"because\",{\"1\":{\"79\":1,\"139\":1,\"143\":3}}],[\"bizinfo\",{\"1\":{\"491\":3}}],[\"biz\",{\"1\":{\"491\":1}}],[\"biginteger\",{\"1\":{\"439\":4}}],[\"bigdecimal\",{\"1\":{\"81\":5}}],[\"bin<\",{\"1\":{\"690\":1}}],[\"bind\",{\"1\":{\"558\":3,\"562\":1,\"569\":3}}],[\"bin目录下\",{\"1\":{\"411\":1}}],[\"bin\",{\"1\":{\"374\":1,\"411\":1,\"586\":1,\"595\":1,\"596\":1,\"692\":1}}],[\"binary\",{\"1\":{\"110\":2}}],[\"biased\",{\"1\":{\"137\":1}}],[\"biasedlocking\",{\"1\":{\"137\":1,\"141\":1,\"143\":1}}],[\"biases\",{\"1\":{\"137\":3,\"141\":1,\"143\":1}}],[\"bias\",{\"1\":{\"137\":5,\"141\":1,\"143\":1}}],[\"bits\",{\"1\":{\"78\":1,\"101\":1,\"110\":1}}],[\"bit\",{\"1\":{\"77\":4,\"99\":4,\"139\":1}}],[\"b5\",{\"1\":{\"52\":1}}],[\"b4\",{\"1\":{\"52\":1}}],[\"b3\",{\"1\":{\"52\":1}}],[\"b2\",{\"1\":{\"52\":1,\"463\":5,\"464\":1}}],[\"b1在c1之前\",{\"1\":{\"463\":1}}],[\"b1和c1之间的执行顺序被保留\",{\"1\":{\"463\":1}}],[\"b1\",{\"1\":{\"52\":1,\"464\":3,\"466\":4}}],[\"b\",{\"1\":{\"12\":1,\"53\":2,\"56\":2,\"59\":2,\"60\":2,\"61\":2,\"79\":6,\"81\":4,\"100\":6,\"102\":2,\"107\":3,\"111\":1,\"114\":12,\"138\":8,\"279\":1,\"310\":1,\"358\":1,\"411\":1,\"416\":1,\"436\":1,\"437\":1,\"441\":1,\"464\":4,\"467\":4,\"470\":2,\"471\":2,\"482\":1,\"491\":6,\"503\":1,\"571\":1,\"662\":1,\"663\":1,\"665\":1,\"666\":1,\"672\":2}}],[\"阅读书籍\",{\"0\":{\"11\":1}}],[\"p=1706\",{\"1\":{\"467\":1}}],[\"p2进程对变量x的读操作在p1进程对变量x的写操作之后\",{\"1\":{\"464\":1}}],[\"p2的一致性并没有冲突\",{\"1\":{\"464\":1}}],[\"pdf\",{\"1\":{\"420\":1,\"460\":1}}],[\"psy\",{\"1\":{\"413\":1}}],[\"psyounggen\",{\"1\":{\"363\":1,\"391\":1}}],[\"php\",{\"1\":{\"378\":1}}],[\"phase>\",{\"1\":{\"691\":2}}],[\"phase\",{\"1\":{\"143\":1}}],[\"pid\",{\"1\":{\"366\":4,\"367\":2,\"368\":1,\"369\":2,\"374\":1}}],[\"pic\",{\"1\":{\"16\":1}}],[\"pcregister\",{\"1\":{\"297\":1}}],[\"pc\",{\"0\":{\"297\":1},\"1\":{\"297\":3}}],[\"pull试图合并\",{\"1\":{\"672\":1}}],[\"pull\",{\"1\":{\"672\":2}}],[\"pull把最新的提交从origin\",{\"1\":{\"672\":1}}],[\"pusu\",{\"1\":{\"672\":1}}],[\"push3\",{\"1\":{\"672\":1}}],[\"push2\",{\"1\":{\"671\":1}}],[\"push\",{\"1\":{\"671\":3,\"672\":4,\"679\":3}}],[\"pub里面的密钥复制到key中\",{\"1\":{\"678\":1}}],[\"publishevent\",{\"1\":{\"492\":6,\"494\":5}}],[\"public<\",{\"1\":{\"537\":1}}],[\"publication\",{\"1\":{\"462\":1}}],[\"public\",{\"1\":{\"49\":2,\"52\":5,\"53\":3,\"54\":4,\"55\":2,\"56\":3,\"57\":4,\"58\":4,\"59\":4,\"60\":4,\"61\":4,\"71\":11,\"73\":3,\"74\":3,\"75\":2,\"76\":6,\"77\":2,\"78\":3,\"79\":5,\"91\":11,\"93\":4,\"94\":4,\"95\":5,\"96\":2,\"97\":3,\"98\":5,\"99\":2,\"100\":4,\"101\":3,\"107\":2,\"110\":5,\"112\":1,\"114\":6,\"115\":5,\"116\":4,\"117\":2,\"118\":3,\"119\":3,\"120\":5,\"121\":3,\"122\":3,\"123\":2,\"124\":2,\"125\":2,\"134\":10,\"153\":1,\"156\":1,\"158\":2,\"160\":1,\"162\":2,\"164\":1,\"166\":2,\"168\":1,\"170\":2,\"172\":7,\"174\":2,\"175\":3,\"176\":3,\"177\":3,\"178\":3,\"179\":1,\"181\":1,\"184\":1,\"187\":2,\"189\":2,\"191\":2,\"193\":2,\"275\":2,\"294\":5,\"302\":8,\"304\":1,\"318\":2,\"321\":4,\"322\":2,\"325\":4,\"368\":5,\"437\":2,\"439\":2,\"440\":2,\"441\":8,\"444\":6,\"445\":1,\"446\":1,\"447\":2,\"486\":1,\"487\":4,\"488\":2,\"491\":3,\"492\":3,\"493\":1,\"494\":2,\"497\":1,\"498\":2,\"499\":1,\"505\":1,\"506\":2,\"537\":2,\"547\":1,\"550\":1,\"551\":1,\"558\":2,\"562\":2,\"567\":1,\"568\":2,\"569\":3}}],[\"pub\",{\"1\":{\"467\":1,\"677\":1}}],[\"putfield\",{\"1\":{\"302\":2}}],[\"put\",{\"1\":{\"143\":1,\"443\":3,\"508\":1,\"509\":1}}],[\"per\",{\"1\":{\"291\":2,\"294\":1,\"379\":1,\"479\":2}}],[\"persistence\",{\"0\":{\"709\":1}}],[\"person\",{\"1\":{\"275\":2,\"276\":2,\"302\":5,\"304\":1,\"305\":1,\"318\":1}}],[\"perspective\",{\"1\":{\"143\":1}}],[\"perhaps\",{\"1\":{\"143\":1}}],[\"permitted\",{\"1\":{\"296\":1}}],[\"perm\",{\"1\":{\"137\":1}}],[\"pending\",{\"1\":{\"143\":6}}],[\"plugin进行配置分离\",{\"0\":{\"690\":1}}],[\"pluginrepositories>\",{\"1\":{\"537\":1}}],[\"pluginrepository>\",{\"1\":{\"537\":1}}],[\"plugins<\",{\"1\":{\"691\":5}}],[\"plugins>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"566\":1,\"691\":1}}],[\"pluginscenters\",{\"1\":{\"316\":1}}],[\"plugin>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"566\":1,\"691\":6}}],[\"plugin<\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"566\":1,\"691\":6}}],[\"plugindatahandler\",{\"1\":{\"506\":1}}],[\"plugindata\",{\"1\":{\"488\":6,\"494\":1,\"497\":9,\"499\":1}}],[\"plugindatasubscriber\",{\"1\":{\"488\":2,\"492\":1,\"494\":2,\"497\":1,\"499\":1}}],[\"plugin\",{\"1\":{\"485\":1,\"487\":1,\"493\":1,\"506\":2,\"555\":2,\"556\":2,\"557\":2}}],[\"pluginname\",{\"1\":{\"485\":1,\"486\":1,\"487\":2,\"488\":5,\"491\":2,\"496\":1,\"498\":1}}],[\"plus\",{\"1\":{\"273\":1,\"545\":4,\"547\":2,\"550\":2,\"551\":2}}],[\"please\",{\"1\":{\"137\":1}}],[\"plain\",{\"1\":{\"571\":1}}],[\"platform\",{\"1\":{\"297\":1}}],[\"place\",{\"1\":{\"143\":1}}],[\"places\",{\"1\":{\"137\":1}}],[\"plan\",{\"1\":{\"12\":2,\"421\":1}}],[\"ptr\",{\"1\":{\"137\":2,\"141\":2}}],[\"practice\",{\"1\":{\"141\":1}}],[\"pretty=oneline\",{\"1\":{\"638\":1,\"641\":1,\"654\":1,\"665\":1}}],[\"prepare\",{\"0\":{\"282\":1}}],[\"prepend\",{\"1\":{\"141\":3}}],[\"precedence\",{\"1\":{\"143\":1}}],[\"previously\",{\"1\":{\"143\":1}}],[\"prev\",{\"1\":{\"141\":8}}],[\"progit中文版\",{\"1\":{\"673\":1}}],[\"programs\",{\"1\":{\"462\":1}}],[\"programming\",{\"1\":{\"273\":1,\"275\":1,\"298\":1,\"302\":1}}],[\"program\",{\"1\":{\"170\":1,\"174\":1,\"189\":2,\"193\":2,\"291\":1,\"297\":1,\"411\":2}}],[\"progress\",{\"1\":{\"137\":4,\"143\":1}}],[\"proxy\",{\"1\":{\"592\":2,\"593\":2}}],[\"prod\",{\"0\":{\"549\":1,\"551\":1},\"1\":{\"557\":3}}],[\"production\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"product\",{\"1\":{\"137\":1}}],[\"prometheus\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"provider\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"provides\",{\"1\":{\"273\":1}}],[\"project\",{\"1\":{\"545\":1,\"561\":1,\"690\":4}}],[\"project>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"proc\",{\"1\":{\"479\":1}}],[\"process2\",{\"1\":{\"174\":1}}],[\"processbuilder\",{\"1\":{\"172\":1}}],[\"process\",{\"1\":{\"172\":6,\"174\":5}}],[\"processor\",{\"1\":{\"143\":1}}],[\"profile\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"profiles\",{\"0\":{\"555\":1,\"556\":1,\"557\":1},\"1\":{\"547\":2,\"548\":2,\"549\":2}}],[\"profiling\",{\"1\":{\"420\":1}}],[\"profitable\",{\"1\":{\"141\":1,\"143\":1}}],[\"protocol\",{\"1\":{\"143\":3}}],[\"protects\",{\"1\":{\"141\":1,\"143\":1}}],[\"protected\",{\"1\":{\"134\":2,\"141\":1,\"441\":1}}],[\"probably\",{\"1\":{\"137\":1}}],[\"probe\",{\"1\":{\"141\":1,\"143\":3}}],[\"probe1\",{\"1\":{\"136\":1}}],[\"probe2\",{\"1\":{\"136\":1}}],[\"properties<\",{\"1\":{\"690\":1,\"691\":1}}],[\"properties>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"property\",{\"1\":{\"112\":2,\"137\":1,\"460\":2}}],[\"propagate\",{\"1\":{\"137\":1,\"460\":1}}],[\"printstream\",{\"1\":{\"302\":2}}],[\"print\",{\"1\":{\"174\":2,\"189\":1,\"193\":1,\"376\":1,\"413\":1}}],[\"println\",{\"1\":{\"54\":4,\"57\":2,\"58\":4,\"59\":3,\"60\":2,\"61\":4,\"71\":16,\"91\":16,\"94\":1,\"95\":7,\"98\":4,\"107\":2,\"114\":3,\"118\":3,\"119\":1,\"120\":2,\"158\":1,\"162\":3,\"166\":2,\"170\":4,\"174\":2,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"189\":3,\"193\":3,\"275\":1,\"302\":2,\"325\":1,\"368\":4,\"441\":2}}],[\"priorityqueue入队出队的时间复杂度o\",{\"1\":{\"246\":1}}],[\"priorityqueue不支持null元素\",{\"1\":{\"246\":1}}],[\"priorityqueue的迭代器不具有以特定顺序访问队列元素\",{\"1\":{\"246\":1}}],[\"priorityqueue是无边界容器\",{\"1\":{\"246\":1}}],[\"priorityqueue自动扩容\",{\"1\":{\"246\":1}}],[\"priorityqueue实例化时若未指定初始容量\",{\"1\":{\"246\":1}}],[\"priorityqueue队列元素根据自然排序或者根据具体的比较器排序\",{\"1\":{\"246\":1}}],[\"priorityqueue继承自abstractqueue\",{\"1\":{\"246\":1}}],[\"priorityqueue\",{\"0\":{\"246\":1}}],[\"priority\",{\"1\":{\"143\":1}}],[\"prior\",{\"1\":{\"143\":2}}],[\"primer\",{\"1\":{\"455\":1}}],[\"prims\",{\"1\":{\"136\":1,\"137\":1}}],[\"primitive\",{\"1\":{\"49\":2,\"110\":1,\"379\":1}}],[\"private\",{\"1\":{\"112\":2,\"134\":1,\"168\":1,\"275\":4,\"296\":1,\"302\":5,\"305\":1,\"368\":1,\"437\":2,\"440\":2,\"441\":3,\"444\":2,\"447\":2,\"485\":2,\"486\":3,\"487\":2,\"488\":2,\"491\":14,\"492\":2,\"493\":1,\"494\":2,\"496\":2,\"497\":1,\"498\":1,\"499\":1,\"569\":1}}],[\"p\",{\"1\":{\"94\":2,\"111\":1,\"448\":2,\"467\":1,\"476\":1}}],[\"p表示2\",{\"1\":{\"91\":1}}],[\"pom\",{\"0\":{\"537\":1,\"541\":1,\"691\":1},\"1\":{\"537\":2,\"541\":2,\"545\":2,\"561\":2,\"566\":2,\"691\":1}}],[\"pob\",{\"1\":{\"459\":1}}],[\"pow\",{\"1\":{\"459\":1}}],[\"poonam\",{\"1\":{\"393\":1,\"398\":1}}],[\"pooled\",{\"1\":{\"591\":2}}],[\"pool\",{\"1\":{\"277\":4,\"294\":4,\"302\":2,\"592\":1,\"593\":1}}],[\"port\",{\"1\":{\"547\":1,\"548\":1,\"549\":1,\"555\":1,\"556\":1,\"557\":1,\"567\":1}}],[\"port=8998\",{\"1\":{\"374\":1}}],[\"portion\",{\"1\":{\"143\":1}}],[\"pop\",{\"1\":{\"302\":1,\"666\":1}}],[\"policy\",{\"1\":{\"141\":7}}],[\"pos\",{\"1\":{\"459\":1}}],[\"postgresql\",{\"1\":{\"473\":1}}],[\"postconditions\",{\"1\":{\"143\":1}}],[\"post\",{\"1\":{\"143\":10,\"448\":1,\"476\":1}}],[\"possible\",{\"1\":{\"137\":1,\"143\":1}}],[\"possibility\",{\"1\":{\"79\":1}}],[\"positive\",{\"1\":{\"71\":3,\"76\":1,\"91\":3,\"98\":3,\"111\":1}}],[\"pointers\",{\"1\":{\"139\":1}}],[\"pointer\",{\"1\":{\"139\":1,\"297\":1}}],[\"point\",{\"1\":{\"70\":1,\"94\":1,\"297\":1}}],[\"package<\",{\"1\":{\"691\":1}}],[\"package\",{\"1\":{\"558\":1,\"562\":2,\"568\":1,\"569\":1}}],[\"packaging>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1}}],[\"pair\",{\"1\":{\"486\":1,\"493\":1}}],[\"pair<boolean\",{\"1\":{\"486\":2,\"493\":1}}],[\"paxos协议用于保证同一个数据分片在多个副本的一致性\",{\"1\":{\"475\":1}}],[\"paxos用于解决多个副本之间的一致性问题\",{\"1\":{\"475\":1}}],[\"paxos之类的一致性算法无法对抗欺诈节点\",{\"1\":{\"459\":1}}],[\"paxos是足够用的\",{\"1\":{\"457\":1}}],[\"paxos是第一个被证明完备的共识算法\",{\"1\":{\"457\":1}}],[\"paxos是分布式系统中的一致性算法\",{\"1\":{\"456\":1}}],[\"paxos与raft\",{\"0\":{\"457\":1}}],[\"paxos\",{\"0\":{\"475\":1},\"1\":{\"454\":1,\"456\":2,\"457\":7,\"474\":1}}],[\"pause\",{\"1\":{\"363\":2,\"393\":2,\"692\":1}}],[\"password\",{\"1\":{\"374\":4,\"547\":2,\"548\":1,\"549\":1,\"550\":2,\"551\":2,\"567\":1}}],[\"passed\",{\"1\":{\"143\":1}}],[\"past\",{\"1\":{\"143\":2}}],[\"path>\",{\"1\":{\"691\":2}}],[\"pathrulecachesize\",{\"1\":{\"591\":1}}],[\"pathcache\",{\"1\":{\"491\":1}}],[\"pathvariablenode\",{\"1\":{\"491\":1}}],[\"pathvariablesize\",{\"1\":{\"591\":1}}],[\"pathvariables\",{\"1\":{\"491\":1}}],[\"pathpattern\",{\"1\":{\"491\":2}}],[\"paths\",{\"1\":{\"381\":1}}],[\"path\",{\"1\":{\"137\":1,\"143\":1,\"187\":1,\"287\":1,\"485\":2,\"486\":13,\"487\":8,\"491\":5,\"493\":4,\"547\":1,\"548\":1,\"549\":1,\"555\":1,\"556\":1,\"557\":1,\"562\":1}}],[\"pattern>\",{\"1\":{\"552\":3}}],[\"pattern\",{\"1\":{\"137\":4,\"141\":1,\"143\":1,\"552\":4}}],[\"parent>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"parent<\",{\"1\":{\"537\":5,\"541\":1}}],[\"parent初始化\",{\"0\":{\"536\":1}}],[\"parentnode\",{\"1\":{\"491\":1}}],[\"parent\",{\"1\":{\"491\":1,\"537\":1,\"566\":1}}],[\"parallelgcthreads\",{\"1\":{\"363\":1}}],[\"parallelgcthreads=20表示配置并行收集器的线程数为20个\",{\"1\":{\"363\":1}}],[\"parallelgcthreads=20\",{\"1\":{\"363\":5}}],[\"parallel\",{\"0\":{\"343\":1,\"345\":1,\"391\":1},\"1\":{\"343\":1,\"345\":1,\"348\":1,\"393\":1}}],[\"parameter\",{\"1\":{\"143\":1}}],[\"param\",{\"1\":{\"123\":1,\"124\":2,\"125\":2,\"437\":1,\"486\":2}}],[\"parnew收集器\",{\"0\":{\"342\":1}}],[\"partial\",{\"1\":{\"466\":1}}],[\"particular\",{\"1\":{\"137\":1}}],[\"part\",{\"1\":{\"143\":1,\"294\":1}}],[\"parts\",{\"1\":{\"139\":1}}],[\"parked\",{\"1\":{\"143\":1}}],[\"parkevent\",{\"1\":{\"141\":1,\"143\":6}}],[\"park\",{\"1\":{\"137\":1,\"143\":5}}],[\"parsed\",{\"1\":{\"112\":1}}],[\"parsedouble是将字符串类型转为双精度浮点数\",{\"1\":{\"75\":1}}],[\"parsedouble方法\",{\"0\":{\"75\":1}}],[\"parsedouble\",{\"1\":{\"73\":1,\"74\":1,\"75\":2}}],[\"parseint\",{\"1\":{\"112\":1}}],[\"parsefloat方法\",{\"0\":{\"96\":1}}],[\"parsefloat\",{\"1\":{\"93\":1,\"95\":1,\"96\":2}}],[\"parseboolean方法\",{\"0\":{\"54\":1}}],[\"parseboolean\",{\"1\":{\"52\":1,\"53\":1,\"54\":5,\"57\":1}}],[\"pages\",{\"1\":{\"623\":1}}],[\"page\",{\"0\":{\"9\":1}}],[\"png\",{\"1\":{\"16\":1}}],[\"pmc\",{\"1\":{\"4\":2}}],[\"icloud\",{\"1\":{\"623\":1}}],[\"iconst\",{\"1\":{\"302\":3}}],[\"iptos\",{\"1\":{\"591\":1}}],[\"ip参数\",{\"1\":{\"479\":2}}],[\"ip\",{\"1\":{\"479\":6,\"599\":1}}],[\"ipv4\",{\"1\":{\"479\":1}}],[\"ihop值如果设置合理\",{\"1\":{\"399\":1}}],[\"ihop如果阀值设置过高\",{\"1\":{\"399\":1}}],[\"ihashcode主要调用objectsynchronizer\",{\"1\":{\"137\":1}}],[\"ihashcode实现\",{\"1\":{\"137\":1}}],[\"ihashcode函数\",{\"1\":{\"135\":1}}],[\"ihashcode\",{\"1\":{\"135\":1,\"137\":3}}],[\"ii\",{\"1\":{\"302\":1}}],[\"ireturn\",{\"1\":{\"302\":1}}],[\"iadd\",{\"1\":{\"302\":1}}],[\"iax\",{\"1\":{\"143\":1}}],[\"illegalstateexception\",{\"1\":{\"492\":1}}],[\"illegalargumentexception\",{\"1\":{\"57\":1,\"115\":1,\"134\":2,\"143\":1,\"172\":1}}],[\"iload\",{\"1\":{\"302\":3}}],[\"ixxservice\",{\"1\":{\"294\":1}}],[\"id>\",{\"1\":{\"537\":6,\"690\":1,\"691\":1}}],[\"id\",{\"1\":{\"141\":1,\"677\":1}}],[\"idempotent\",{\"1\":{\"137\":1}}],[\"identityhashcode\",{\"1\":{\"137\":1}}],[\"identity\",{\"1\":{\"137\":1}}],[\"i还可以得知java层上的类型应该转为int类型\",{\"1\":{\"135\":1}}],[\"itcodemonkey\",{\"1\":{\"476\":1}}],[\"its\",{\"1\":{\"297\":1}}],[\"iterator\",{\"1\":{\"141\":37}}],[\"it\",{\"1\":{\"112\":1,\"120\":2,\"137\":6,\"139\":2,\"141\":2,\"143\":8,\"294\":2,\"393\":1,\"555\":2,\"556\":2,\"557\":2}}],[\"ignore\",{\"1\":{\"112\":1}}],[\"i+1\",{\"1\":{\"111\":1}}],[\"i++\",{\"1\":{\"111\":1,\"172\":1,\"439\":1}}],[\"i=0\",{\"1\":{\"111\":1}}],[\"i\",{\"1\":{\"111\":2,\"112\":10,\"116\":16,\"117\":5,\"118\":3,\"119\":16,\"120\":6,\"121\":22,\"122\":16,\"135\":1,\"143\":1,\"172\":2,\"302\":1,\"321\":4,\"325\":2,\"374\":3,\"439\":3,\"552\":2}}],[\"ifpresent\",{\"1\":{\"497\":3,\"499\":2}}],[\"if2\",{\"1\":{\"479\":1}}],[\"if获得obj2锁\",{\"1\":{\"368\":1}}],[\"if获得obj1锁\",{\"1\":{\"368\":1}}],[\"ifdef\",{\"1\":{\"139\":1}}],[\"ifndef\",{\"1\":{\"136\":2}}],[\"if\",{\"1\":{\"76\":1,\"77\":1,\"79\":2,\"81\":1,\"94\":1,\"99\":1,\"102\":1,\"111\":1,\"112\":3,\"115\":1,\"116\":5,\"121\":10,\"134\":3,\"136\":1,\"137\":22,\"139\":10,\"141\":19,\"143\":27,\"153\":1,\"156\":1,\"160\":1,\"164\":1,\"172\":1,\"187\":2,\"191\":2,\"294\":1,\"295\":1,\"296\":3,\"297\":2,\"368\":1,\"479\":2,\"486\":14,\"488\":13,\"491\":3,\"492\":9,\"493\":5,\"494\":8,\"497\":3,\"499\":3,\"506\":2,\"508\":1,\"509\":1}}],[\"iex\",{\"1\":{\"143\":3}}],[\"iec\",{\"1\":{\"69\":1,\"88\":1}}],[\"ieee\",{\"0\":{\"69\":1,\"70\":1,\"88\":1,\"89\":1},\"1\":{\"69\":3,\"70\":1,\"71\":1,\"88\":3,\"91\":1,\"101\":1}}],[\"init\",{\"0\":{\"648\":1},\"1\":{\"648\":1,\"679\":1}}],[\"initiatingheapoccupancypercent\",{\"1\":{\"399\":1}}],[\"initiatingheapoccupancypercent=45\",{\"1\":{\"398\":1}}],[\"initialcapacity\",{\"1\":{\"486\":3,\"591\":2}}],[\"initialvalue\",{\"1\":{\"441\":1}}],[\"initialheapsize=1000\",{\"1\":{\"359\":1}}],[\"initial\",{\"1\":{\"296\":1,\"346\":1,\"347\":1,\"591\":2}}],[\"initialization\",{\"1\":{\"294\":2,\"555\":1,\"556\":1,\"557\":1}}],[\"initialize\",{\"0\":{\"284\":1}}],[\"initializing\",{\"1\":{\"279\":1,\"555\":2,\"556\":2,\"557\":2}}],[\"inetutils\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"ineligible\",{\"1\":{\"137\":1}}],[\"inserttrienode\",{\"1\":{\"492\":1}}],[\"insert\",{\"1\":{\"492\":3,\"494\":1}}],[\"insufficient\",{\"1\":{\"296\":2}}],[\"inst\",{\"1\":{\"506\":1}}],[\"instruction\",{\"1\":{\"297\":1}}],[\"instead\",{\"1\":{\"139\":1,\"141\":2,\"143\":1}}],[\"install\",{\"1\":{\"137\":2,\"538\":1,\"563\":1,\"586\":1}}],[\"instanceof\",{\"1\":{\"488\":6,\"494\":3,\"497\":3,\"499\":3}}],[\"instanceoop\",{\"1\":{\"139\":3}}],[\"instanceklass\",{\"1\":{\"139\":1}}],[\"instances\",{\"1\":{\"137\":1,\"295\":1}}],[\"instance\",{\"1\":{\"110\":1,\"139\":3,\"294\":1,\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"index\",{\"1\":{\"273\":1,\"302\":1,\"467\":9}}],[\"indexof\",{\"1\":{\"191\":1}}],[\"induces\",{\"1\":{\"137\":1}}],[\"increascountcounter\",{\"1\":{\"446\":1}}],[\"increasingcounter\",{\"1\":{\"444\":1}}],[\"increased\",{\"1\":{\"398\":1}}],[\"incrementandget\",{\"1\":{\"444\":1}}],[\"incrementcounter\",{\"1\":{\"444\":2,\"445\":1,\"446\":1,\"447\":1}}],[\"increment\",{\"1\":{\"143\":1}}],[\"incoming\",{\"1\":{\"381\":1}}],[\"incorrect\",{\"1\":{\"139\":1}}],[\"include>\",{\"1\":{\"690\":6,\"691\":1}}],[\"includebasedirectory>\",{\"1\":{\"690\":1}}],[\"includecallerdata>\",{\"1\":{\"552\":3}}],[\"include\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"includescope>\",{\"1\":{\"691\":1}}],[\"includes>\",{\"1\":{\"690\":3,\"691\":1}}],[\"includes\",{\"1\":{\"273\":1,\"491\":1}}],[\"including\",{\"1\":{\"273\":1,\"294\":1}}],[\"invite\",{\"1\":{\"421\":1}}],[\"involves\",{\"1\":{\"139\":1}}],[\"invokestatic\",{\"1\":{\"302\":2}}],[\"invokespecial\",{\"1\":{\"302\":1,\"321\":1}}],[\"invokevirtual\",{\"1\":{\"302\":1}}],[\"invoke\",{\"1\":{\"139\":3}}],[\"invariant\",{\"1\":{\"137\":10,\"141\":6,\"143\":14}}],[\"inline\",{\"1\":{\"137\":1,\"139\":1}}],[\"infoq\",{\"1\":{\"455\":1}}],[\"information\",{\"1\":{\"379\":1,\"547\":1,\"548\":1,\"549\":1,\"567\":1}}],[\"info\",{\"1\":{\"277\":4,\"486\":2,\"491\":1,\"493\":1,\"552\":1,\"555\":18,\"556\":20,\"557\":20}}],[\"inflate\",{\"1\":{\"137\":5,\"141\":1,\"143\":1}}],[\"infinite\",{\"1\":{\"76\":1}}],[\"infinity\",{\"1\":{\"70\":1,\"71\":8,\"76\":2,\"91\":8,\"98\":4}}],[\"in\",{\"1\":{\"110\":2,\"124\":1,\"125\":1,\"137\":11,\"139\":6,\"141\":1,\"143\":10,\"162\":2,\"166\":1,\"191\":1,\"273\":2,\"294\":2,\"296\":1,\"298\":1,\"319\":1,\"393\":1,\"460\":1,\"491\":2,\"555\":3,\"556\":3,\"557\":3,\"591\":4}}],[\"input\",{\"1\":{\"95\":1}}],[\"intrinsic\",{\"1\":{\"139\":1}}],[\"intx\",{\"1\":{\"137\":1}}],[\"intptr\",{\"1\":{\"137\":5,\"143\":2}}],[\"intel\",{\"1\":{\"581\":1,\"582\":1}}],[\"intentionally\",{\"1\":{\"143\":1}}],[\"internal\",{\"1\":{\"508\":1,\"509\":1,\"537\":1}}],[\"interned\",{\"1\":{\"112\":1}}],[\"interrupted\",{\"1\":{\"143\":5}}],[\"interruptedexception\",{\"1\":{\"134\":3,\"143\":2}}],[\"interrupt\",{\"1\":{\"143\":7}}],[\"interruptible\",{\"1\":{\"143\":4}}],[\"interrupts\",{\"1\":{\"141\":1}}],[\"interfaces\",{\"1\":{\"277\":3}}],[\"interface\",{\"1\":{\"139\":1,\"294\":2,\"562\":2}}],[\"integercache中有一个低位\",{\"1\":{\"128\":1}}],[\"integercache中的cache参数存储在静态区\",{\"1\":{\"112\":1}}],[\"integercache是integer类的中的内部静态类\",{\"1\":{\"128\":1}}],[\"integercache为静态内部类\",{\"1\":{\"112\":1}}],[\"integercachehighpropvalue\",{\"1\":{\"112\":3}}],[\"integercache\",{\"1\":{\"112\":10,\"128\":1}}],[\"integercache静态内部类\",{\"0\":{\"112\":1}}],[\"integerdemotest\",{\"1\":{\"107\":1,\"114\":1}}],[\"integer\",{\"0\":{\"127\":5},\"1\":{\"106\":1,\"107\":7,\"111\":1,\"112\":9,\"114\":4,\"115\":13,\"116\":2,\"117\":1,\"118\":4,\"119\":2,\"120\":3,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"127\":4,\"128\":1,\"134\":1,\"140\":1,\"235\":1}}],[\"integer类\",{\"0\":{\"105\":1}}],[\"into\",{\"1\":{\"112\":1,\"137\":4,\"143\":3}}],[\"intbitstofloat\",{\"0\":{\"101\":1},\"1\":{\"91\":10,\"101\":2}}],[\"int\",{\"1\":{\"58\":1,\"71\":4,\"79\":1,\"91\":4,\"99\":2,\"101\":2,\"110\":10,\"111\":4,\"112\":8,\"114\":9,\"115\":1,\"116\":5,\"117\":2,\"118\":2,\"119\":2,\"120\":10,\"121\":7,\"122\":8,\"123\":1,\"124\":5,\"125\":5,\"134\":2,\"137\":1,\"139\":2,\"141\":1,\"143\":2,\"153\":1,\"164\":1,\"172\":1,\"175\":1,\"191\":1,\"235\":1,\"275\":4,\"282\":1,\"284\":1,\"302\":8,\"321\":1,\"437\":4,\"439\":2,\"444\":3,\"447\":1,\"486\":1}}],[\"ingress\",{\"1\":{\"5\":1}}],[\"io<\",{\"1\":{\"537\":2}}],[\"ioc详解\",{\"0\":{\"520\":1}}],[\"io框架图谱\",{\"0\":{\"268\":1}}],[\"ioexception\",{\"1\":{\"172\":6,\"174\":1}}],[\"io\",{\"1\":{\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"302\":2,\"316\":1,\"376\":1,\"382\":1,\"395\":1,\"476\":2,\"534\":1,\"537\":3,\"555\":2,\"556\":2,\"557\":2},\"2\":{\"269\":1}}],[\"impl\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"implementations\",{\"1\":{\"294\":1}}],[\"implementation\",{\"1\":{\"137\":1,\"298\":1,\"476\":1,\"555\":2,\"556\":2,\"557\":2}}],[\"implemented\",{\"1\":{\"137\":1}}],[\"implements\",{\"1\":{\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"71\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"91\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"368\":1,\"486\":1,\"487\":1,\"488\":2,\"491\":1,\"492\":2,\"493\":1,\"494\":2,\"497\":1,\"498\":1,\"499\":1,\"506\":1}}],[\"import\",{\"1\":{\"547\":1,\"548\":1,\"549\":1,\"558\":3,\"562\":3,\"568\":3,\"569\":4}}],[\"image\",{\"1\":{\"271\":1,\"273\":2,\"277\":1,\"278\":1,\"285\":1,\"288\":1,\"292\":2,\"294\":1,\"295\":1,\"296\":1,\"302\":2,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"309\":2,\"313\":1,\"316\":1,\"326\":1,\"336\":2,\"337\":1,\"338\":1,\"340\":1,\"341\":1,\"344\":1,\"346\":1,\"367\":2,\"368\":1,\"369\":3,\"373\":1,\"390\":1,\"395\":2,\"396\":1,\"398\":4,\"400\":1,\"402\":4,\"412\":1,\"416\":4,\"418\":1,\"419\":1}}],[\"images\",{\"1\":{\"5\":1,\"420\":1}}],[\"immortal\",{\"1\":{\"143\":1}}],[\"immutable\",{\"1\":{\"137\":1}}],[\"imsx\",{\"1\":{\"143\":1}}],[\"is2xxsuccessful\",{\"1\":{\"508\":1,\"509\":1}}],[\"iswildcard\",{\"1\":{\"491\":2}}],[\"iswritable\",{\"1\":{\"479\":1}}],[\"isuricondition\",{\"1\":{\"486\":2}}],[\"isblank\",{\"1\":{\"486\":1}}],[\"isnotempty\",{\"1\":{\"486\":2,\"492\":1,\"493\":1}}],[\"isnull\",{\"1\":{\"486\":1}}],[\"isnan方法\",{\"0\":{\"97\":1}}],[\"isnan\",{\"1\":{\"71\":1,\"76\":1,\"91\":1,\"97\":3}}],[\"istore\",{\"1\":{\"302\":2}}],[\"isabsolute\",{\"1\":{\"187\":1}}],[\"isempty\",{\"1\":{\"172\":1,\"492\":2,\"494\":1}}],[\"isfinite\",{\"1\":{\"76\":2,\"98\":4}}],[\"isinfinite与isinfinite方法\",{\"0\":{\"98\":1}}],[\"isinfinite\",{\"1\":{\"76\":5,\"98\":4}}],[\"isinfinite方法与isfinite方法\",{\"0\":{\"76\":1}}],[\"iso\",{\"1\":{\"69\":1,\"88\":1}}],[\"is\",{\"1\":{\"15\":1,\"79\":4,\"118\":3,\"119\":1,\"125\":1,\"134\":1,\"137\":11,\"139\":6,\"141\":2,\"143\":27,\"170\":1,\"174\":2,\"189\":1,\"193\":1,\"273\":2,\"291\":1,\"294\":4,\"295\":4,\"296\":2,\"297\":5,\"393\":1,\"448\":1,\"486\":2,\"491\":14,\"555\":3,\"556\":3,\"557\":3}}],[\"kubernates\",{\"2\":{\"683\":1}}],[\"kubernetes\",{\"1\":{\"5\":1}}],[\"keep\",{\"1\":{\"571\":1}}],[\"keepalive\",{\"1\":{\"479\":1,\"592\":1,\"593\":1}}],[\"key即可\",{\"1\":{\"678\":1}}],[\"key的相关信息\",{\"1\":{\"678\":1}}],[\"key就可以填充ssh\",{\"1\":{\"678\":1}}],[\"keys\",{\"1\":{\"678\":1}}],[\"keygen\",{\"1\":{\"677\":1}}],[\"keyrootmap\",{\"1\":{\"491\":2}}],[\"keyrootmap的key是selectorid\",{\"1\":{\"491\":1}}],[\"keyrootmap的key是pluginname\",{\"1\":{\"491\":1}}],[\"key为pluginname\",{\"1\":{\"485\":1}}],[\"key值能为null\",{\"1\":{\"248\":1}}],[\"key\",{\"0\":{\"677\":1},\"1\":{\"248\":1,\"491\":2,\"506\":5}}],[\"kailing\",{\"1\":{\"467\":1}}],[\"kafka\",{\"0\":{\"700\":1},\"1\":{\"5\":1},\"2\":{\"701\":1}}],[\"kv\",{\"1\":{\"464\":1}}],[\"kb\",{\"1\":{\"362\":2,\"363\":2}}],[\"knob\",{\"1\":{\"141\":1}}],[\"known\",{\"1\":{\"460\":1}}],[\"know\",{\"1\":{\"139\":1}}],[\"klasshandle\",{\"1\":{\"139\":1}}],[\"klass\",{\"1\":{\"136\":1,\"139\":11}}],[\"k++\",{\"1\":{\"112\":1}}],[\"k\",{\"1\":{\"111\":1,\"112\":3,\"136\":2}}],[\"lsof\",{\"1\":{\"374\":2}}],[\"lrumap\",{\"1\":{\"485\":2,\"487\":2}}],[\"lru\",{\"1\":{\"249\":1,\"485\":2}}],[\"ldc2\",{\"1\":{\"302\":1}}],[\"ldc\",{\"1\":{\"302\":2}}],[\"ld\",{\"1\":{\"143\":2}}],[\"ll\",{\"1\":{\"137\":2,\"143\":2}}],[\"live即存活跳数\",{\"1\":{\"479\":1}}],[\"live\",{\"1\":{\"347\":1}}],[\"limit\",{\"1\":{\"319\":1}}],[\"lib<\",{\"1\":{\"691\":1}}],[\"lib目录下\",{\"1\":{\"411\":1}}],[\"lib\",{\"1\":{\"287\":2,\"411\":1,\"691\":1}}],[\"libraries\",{\"1\":{\"273\":1}}],[\"library\",{\"1\":{\"187\":1,\"189\":3,\"191\":1,\"193\":3}}],[\"libfile\",{\"1\":{\"192\":2}}],[\"libname\",{\"1\":{\"191\":7,\"192\":1}}],[\"lifecycle\",{\"1\":{\"143\":1}}],[\"linger\",{\"1\":{\"479\":1}}],[\"linux下的软删除命令\",{\"0\":{\"644\":1}}],[\"linux平台\",{\"1\":{\"621\":1}}],[\"linux操作系统可使用命令\",{\"1\":{\"479\":1}}],[\"linux\",{\"1\":{\"413\":1,\"611\":1,\"623\":1},\"2\":{\"685\":1}}],[\"link\",{\"0\":{\"280\":1}}],[\"linking\",{\"1\":{\"279\":1,\"302\":1}}],[\"linkedhashmap的iterator方法返回的迭代器是fail\",{\"1\":{\"249\":1}}],[\"linkedhashmap维护了一个entry的双向链表\",{\"1\":{\"249\":1}}],[\"linkedhashmap继承自hashmap\",{\"1\":{\"249\":1}}],[\"linkedhashmap\",{\"0\":{\"249\":1}}],[\"linkedhashset继承自hashset\",{\"1\":{\"242\":1}}],[\"linkedhashset\",{\"0\":{\"213\":1,\"227\":1,\"242\":1,\"262\":1}}],[\"linkedlist的iterator和listiterator方法返回的迭代器是fail\",{\"1\":{\"239\":1}}],[\"linkedlist是非同步的\",{\"1\":{\"239\":1}}],[\"linkedlist是基于链表实现的\",{\"1\":{\"239\":1}}],[\"linkedlist插入和删除方面要优于arraylist\",{\"1\":{\"239\":1}}],[\"linkedlist继承自abstractsequentiallist\",{\"1\":{\"239\":1}}],[\"linkedlist源码解析\",{\"0\":{\"219\":1}}],[\"linkedlist\",{\"0\":{\"210\":1,\"224\":1,\"239\":1,\"259\":1}}],[\"linked\",{\"1\":{\"143\":1}}],[\"line\",{\"1\":{\"143\":1}}],[\"linearizable\",{\"1\":{\"476\":1}}],[\"linearizability\",{\"0\":{\"466\":1,\"468\":1},\"1\":{\"456\":1,\"465\":2,\"468\":1,\"472\":1,\"476\":1}}],[\"linear\",{\"1\":{\"141\":1,\"476\":1}}],[\"listening\",{\"1\":{\"556\":1,\"557\":1}}],[\"listutil\",{\"1\":{\"486\":1,\"493\":1}}],[\"list<degraderule>\",{\"1\":{\"506\":1}}],[\"list<flowrule>\",{\"1\":{\"506\":1}}],[\"list<selectordata>\",{\"1\":{\"498\":1}}],[\"list<selectordata>>\",{\"1\":{\"496\":1}}],[\"list<string>\",{\"1\":{\"441\":1,\"492\":1}}],[\"list<ruledata>>\",{\"1\":{\"496\":1}}],[\"list<ruledata>\",{\"1\":{\"486\":1,\"498\":1}}],[\"list<\",{\"1\":{\"486\":1,\"491\":1,\"493\":1}}],[\"list<conditiondata>\",{\"1\":{\"486\":1}}],[\"list<class<\",{\"1\":{\"321\":2,\"322\":1}}],[\"list<integer>\",{\"1\":{\"441\":1}}],[\"list<person>\",{\"1\":{\"318\":1}}],[\"list=new\",{\"1\":{\"318\":1,\"322\":1}}],[\"lists\",{\"1\":{\"143\":1}}],[\"list\",{\"0\":{\"208\":1,\"222\":1,\"237\":1,\"257\":1},\"1\":{\"141\":11,\"143\":3,\"318\":1,\"322\":1,\"666\":2}}],[\"likely\",{\"1\":{\"137\":1}}],[\"lightweight\",{\"1\":{\"137\":1}}],[\"lieu\",{\"1\":{\"124\":1,\"125\":1}}],[\"ljava\",{\"1\":{\"135\":1,\"302\":3}}],[\"lentil1016\",{\"1\":{\"476\":1}}],[\"length\",{\"1\":{\"112\":1,\"139\":2,\"141\":1,\"143\":1,\"321\":1,\"571\":2}}],[\"lease的做法相同\",{\"1\":{\"467\":1}}],[\"lease\",{\"1\":{\"467\":2}}],[\"leaseread\",{\"1\":{\"467\":1}}],[\"leader收到follower的请求后依然要通过2或3中的方法确认自己leader的身份\",{\"1\":{\"467\":1}}],[\"leader每次接到读请求后\",{\"1\":{\"467\":1}}],[\"leader接收到都请求后\",{\"1\":{\"467\":1}}],[\"leader把每次读请求作为一条日志记录\",{\"1\":{\"467\":1}}],[\"leader\",{\"1\":{\"467\":24}}],[\"leak\",{\"1\":{\"381\":1}}],[\"level=\",{\"1\":{\"552\":1}}],[\"level>\",{\"1\":{\"552\":1}}],[\"levelfilter\",{\"1\":{\"552\":1}}],[\"level\",{\"1\":{\"143\":1}}],[\"letters\",{\"1\":{\"441\":2}}],[\"let\",{\"1\":{\"139\":1}}],[\"left\",{\"1\":{\"120\":2,\"143\":1}}],[\"l\",{\"1\":{\"111\":1}}],[\"largepagesizeinbytes=128m\",{\"1\":{\"590\":1}}],[\"larger\",{\"1\":{\"79\":1,\"296\":1}}],[\"lake\",{\"1\":{\"581\":1,\"582\":1}}],[\"layout>\",{\"1\":{\"537\":2,\"691\":1}}],[\"latency\",{\"1\":{\"460\":1,\"599\":1,\"600\":4,\"602\":4,\"603\":4,\"604\":4}}],[\"lang3<\",{\"1\":{\"537\":1}}],[\"lang3\",{\"1\":{\"537\":3}}],[\"lang\",{\"1\":{\"95\":1,\"110\":1,\"112\":2,\"115\":1,\"128\":1,\"135\":3,\"136\":2,\"139\":4,\"143\":3,\"169\":1,\"173\":5,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"182\":1,\"185\":1,\"188\":1,\"192\":1,\"279\":1,\"287\":1,\"290\":1,\"295\":1,\"302\":5,\"319\":1,\"321\":2,\"323\":3,\"402\":1}}],[\"language\",{\"1\":{\"5\":1,\"273\":1,\"298\":2}}],[\"lob\",{\"1\":{\"413\":1}}],[\"lookup\",{\"1\":{\"537\":1,\"566\":1}}],[\"look\",{\"1\":{\"143\":1}}],[\"loop返回true表示关闭\",{\"1\":{\"479\":1}}],[\"loop\",{\"1\":{\"143\":1,\"479\":2}}],[\"lots\",{\"1\":{\"137\":2}}],[\"loadbalancercacheautoconfiguration$loadbalancercaffeinewarnlogger\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"loadbalancer\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"loadbalancer<\",{\"1\":{\"545\":1,\"566\":1}}],[\"loadrules\",{\"1\":{\"506\":2}}],[\"loaded\",{\"1\":{\"189\":1,\"193\":1,\"410\":1}}],[\"loading\",{\"1\":{\"189\":1,\"193\":1,\"279\":1}}],[\"loadlibrary0\",{\"1\":{\"191\":2}}],[\"loadlibrary方法\",{\"0\":{\"190\":1}}],[\"loadlibrary\",{\"1\":{\"187\":1,\"188\":1,\"191\":2,\"192\":3,\"193\":1}}],[\"loadload\",{\"1\":{\"143\":1}}],[\"load0\",{\"1\":{\"187\":2}}],[\"load方法\",{\"0\":{\"186\":1}}],[\"load\",{\"0\":{\"279\":1},\"1\":{\"137\":1,\"143\":1,\"187\":1,\"188\":3,\"189\":2,\"193\":1,\"286\":1,\"555\":2,\"556\":3,\"557\":3}}],[\"locations\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"location\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"localhost\",{\"1\":{\"319\":1,\"323\":1,\"547\":1,\"550\":1,\"551\":1,\"571\":1,\"600\":4}}],[\"local\",{\"1\":{\"136\":1,\"137\":1,\"139\":1,\"302\":2,\"379\":2,\"460\":1,\"555\":2,\"556\":2,\"557\":2,\"586\":1}}],[\"locker\",{\"1\":{\"141\":1}}],[\"lock\",{\"1\":{\"137\":2,\"141\":2,\"143\":4,\"447\":2}}],[\"locking\",{\"1\":{\"137\":1,\"143\":1}}],[\"lowestonebit\",{\"1\":{\"122\":1}}],[\"lowestonebit方法\",{\"0\":{\"122\":1}}],[\"low\",{\"1\":{\"112\":6,\"479\":1}}],[\"longs\",{\"1\":{\"139\":1}}],[\"long\",{\"1\":{\"77\":2,\"78\":2,\"79\":2,\"123\":6,\"124\":1,\"125\":1,\"134\":2,\"139\":1,\"176\":1,\"177\":2,\"178\":1,\"235\":2,\"325\":2,\"460\":1,\"486\":1,\"491\":2}}],[\"longbitstodouble\",{\"1\":{\"71\":8,\"78\":1}}],[\"log查看commit后的信息\",{\"1\":{\"664\":1}}],[\"log查看你提交的所有分支\",{\"1\":{\"638\":1}}],[\"log3\",{\"1\":{\"655\":1}}],[\"log打印所有版本\",{\"1\":{\"654\":1}}],[\"log打印日志\",{\"1\":{\"653\":1}}],[\"log4\",{\"1\":{\"638\":1}}],[\"log<\",{\"1\":{\"552\":2}}],[\"logger\",{\"1\":{\"552\":1}}],[\"logging<\",{\"1\":{\"545\":1}}],[\"logback\",{\"1\":{\"552\":10}}],[\"logutils\",{\"1\":{\"486\":1,\"493\":1}}],[\"log和g1\",{\"1\":{\"395\":1}}],[\"logs\",{\"1\":{\"363\":1,\"374\":1,\"393\":1,\"552\":1}}],[\"logic\",{\"1\":{\"143\":1}}],[\"logically\",{\"1\":{\"294\":1}}],[\"logicalxor\",{\"1\":{\"61\":5}}],[\"logicalxor方法\",{\"0\":{\"61\":1}}],[\"logicalor\",{\"1\":{\"60\":3}}],[\"logicalor方法\",{\"0\":{\"60\":1}}],[\"logicaland\",{\"1\":{\"59\":4}}],[\"logicaland方法\",{\"0\":{\"59\":1}}],[\"log\",{\"0\":{\"653\":1},\"1\":{\"5\":1,\"246\":1,\"363\":1,\"382\":1,\"390\":1,\"392\":1,\"393\":1,\"395\":1,\"486\":2,\"493\":1,\"552\":39,\"638\":1,\"641\":1,\"653\":1,\"654\":1,\"655\":1,\"665\":2}}],[\"lmcjl在线工具\",{\"1\":{\"15\":2}}],[\"lb\",{\"1\":{\"5\":1}}],[\"db\",{\"0\":{\"710\":1}}],[\"dd\",{\"1\":{\"552\":3}}],[\"drop\",{\"1\":{\"666\":1}}],[\"dropbox\",{\"1\":{\"623\":1}}],[\"drops\",{\"1\":{\"143\":1}}],[\"driver\",{\"1\":{\"545\":3,\"547\":2,\"550\":2,\"551\":2}}],[\"dpos\",{\"1\":{\"459\":1}}],[\"dylib文件放置在jdk路径下的\",{\"1\":{\"411\":1}}],[\"dylib和hsdis\",{\"0\":{\"411\":1}}],[\"dylib\",{\"0\":{\"409\":1},\"1\":{\"409\":1}}],[\"dynamic\",{\"1\":{\"302\":1}}],[\"dynamically\",{\"1\":{\"296\":1}}],[\"date\",{\"1\":{\"460\":1,\"571\":1}}],[\"dataid=module1\",{\"1\":{\"556\":2,\"557\":2}}],[\"datasource\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"datagramchannel注册的eventloop即表示已激活\",{\"1\":{\"479\":1}}],[\"datagram\",{\"1\":{\"479\":1}}],[\"data\",{\"0\":{\"290\":1,\"709\":1},\"1\":{\"143\":1,\"291\":4,\"294\":1,\"295\":1,\"347\":1,\"393\":1,\"485\":4,\"486\":7,\"487\":1,\"488\":13,\"492\":2,\"493\":1,\"494\":6,\"497\":7,\"499\":6}}],[\"data2\",{\"1\":{\"81\":2}}],[\"data1\",{\"1\":{\"81\":2}}],[\"database\",{\"1\":{\"5\":2},\"2\":{\"38\":1,\"40\":1}}],[\"dashboard\",{\"1\":{\"377\":1}}],[\"dcom\",{\"1\":{\"374\":6}}],[\"djava\",{\"1\":{\"287\":2,\"374\":1}}],[\"dll文件放置在jdk路径下\",{\"1\":{\"411\":1}}],[\"dll\",{\"0\":{\"410\":1,\"411\":1},\"1\":{\"141\":1,\"189\":1,\"193\":1}}],[\"demo\",{\"1\":{\"657\":1,\"665\":1,\"666\":1,\"672\":2,\"679\":1}}],[\"determine\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"details\",{\"1\":{\"421\":1,\"476\":1}}],[\"delete\",{\"1\":{\"663\":1}}],[\"deleted\",{\"1\":{\"139\":1}}],[\"delayingshutdownhook\",{\"1\":{\"552\":1}}],[\"dev抓下来\",{\"1\":{\"672\":1}}],[\"dev分支上推送了提交\",{\"1\":{\"672\":1}}],[\"dev模式为本地开发模式\",{\"1\":{\"555\":1}}],[\"dev\",{\"0\":{\"547\":1},\"1\":{\"547\":6,\"548\":6,\"549\":6,\"555\":1,\"622\":1,\"626\":1,\"662\":3,\"663\":2,\"665\":4,\"666\":2,\"671\":1,\"672\":9}}],[\"development\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"developing\",{\"1\":{\"273\":1}}],[\"developer\",{\"1\":{\"273\":1,\"421\":1}}],[\"dependency\",{\"1\":{\"691\":1}}],[\"dependencysets>\",{\"1\":{\"690\":1}}],[\"dependencyset>\",{\"1\":{\"690\":2}}],[\"dependencymanagement>\",{\"1\":{\"537\":1}}],[\"dependency>\",{\"1\":{\"321\":1,\"537\":9,\"545\":9,\"561\":1,\"566\":6}}],[\"dependencies>\",{\"1\":{\"537\":2,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"dependencies<\",{\"1\":{\"537\":2,\"691\":1}}],[\"degrade\",{\"1\":{\"506\":1}}],[\"degraderule\",{\"1\":{\"506\":2}}],[\"degraderulemanager\",{\"1\":{\"506\":2}}],[\"degraderules\",{\"1\":{\"506\":3}}],[\"design\",{\"0\":{\"712\":1}}],[\"designated\",{\"1\":{\"460\":1}}],[\"descriptors>\",{\"1\":{\"691\":1}}],[\"descriptor>\",{\"1\":{\"691\":1}}],[\"description>\",{\"1\":{\"537\":1,\"541\":1,\"561\":1,\"566\":1}}],[\"destroyed\",{\"1\":{\"291\":2}}],[\"debian\",{\"1\":{\"413\":1}}],[\"debuggers\",{\"1\":{\"273\":1}}],[\"deadlock\",{\"1\":{\"368\":6}}],[\"deadlockdemo\",{\"1\":{\"368\":2}}],[\"deque\",{\"0\":{\"215\":1,\"229\":1,\"264\":1},\"1\":{\"239\":1}}],[\"dequeuespecificwaiter\",{\"1\":{\"143\":1}}],[\"dequeuewaiter\",{\"1\":{\"141\":1}}],[\"dequeue\",{\"1\":{\"141\":1}}],[\"decrement\",{\"1\":{\"143\":1}}],[\"decode\",{\"1\":{\"115\":1}}],[\"definition\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"defined\",{\"1\":{\"379\":1}}],[\"defineclass1\",{\"1\":{\"323\":1}}],[\"defineclass\",{\"1\":{\"321\":1,\"323\":1}}],[\"defines\",{\"1\":{\"291\":1}}],[\"deferredinitialize\",{\"1\":{\"143\":1}}],[\"defaultmatchrule\",{\"1\":{\"486\":1}}],[\"default\",{\"1\":{\"137\":1,\"294\":1,\"479\":2,\"486\":1,\"492\":1,\"547\":3,\"548\":2,\"549\":2,\"550\":2,\"551\":2,\"555\":2,\"556\":2,\"557\":2}}],[\"dereferences\",{\"1\":{\"139\":1}}],[\"dump信息包含的内容\",{\"0\":{\"379\":1}}],[\"dump已经加载类的byte\",{\"1\":{\"377\":1}}],[\"dump\",{\"1\":{\"369\":2,\"377\":1,\"378\":1,\"380\":1}}],[\"dump出堆内存相关信息\",{\"1\":{\"369\":1}}],[\"dummy\",{\"1\":{\"143\":1}}],[\"due\",{\"1\":{\"143\":1}}],[\"during\",{\"1\":{\"137\":1,\"291\":1,\"393\":1}}],[\"dubbo\",{\"1\":{\"5\":1,\"482\":1,\"503\":1}}],[\"dtrace\",{\"1\":{\"136\":2,\"141\":1,\"143\":4}}],[\"di详解\",{\"0\":{\"517\":1}}],[\"diff就是比对文件\",{\"1\":{\"652\":1}}],[\"diff\",{\"0\":{\"652\":1},\"1\":{\"393\":3,\"652\":1,\"653\":1}}],[\"different\",{\"1\":{\"139\":2,\"460\":2}}],[\"dirs指定目录下的jar包\",{\"1\":{\"287\":1}}],[\"directory>\",{\"1\":{\"690\":2}}],[\"directory\",{\"1\":{\"172\":1,\"191\":1}}],[\"directly\",{\"1\":{\"141\":1}}],[\"dir\",{\"1\":{\"172\":4,\"173\":3,\"174\":2}}],[\"disqusjs\",{\"1\":{\"623\":1}}],[\"dispatcherservlet\",{\"1\":{\"555\":5,\"556\":5,\"557\":5}}],[\"displaced\",{\"1\":{\"137\":4}}],[\"discardingthreshold>\",{\"1\":{\"552\":3}}],[\"discarding\",{\"1\":{\"552\":5}}],[\"discovery<\",{\"1\":{\"545\":1,\"566\":1}}],[\"discovery\",{\"1\":{\"545\":1,\"547\":1,\"550\":1,\"551\":1,\"567\":1}}],[\"distributed\",{\"0\":{\"712\":1}}],[\"distributionmanagement>\",{\"1\":{\"537\":1}}],[\"distance\",{\"1\":{\"120\":6}}],[\"disabled防止歧义\",{\"1\":{\"479\":1}}],[\"disabled\",{\"1\":{\"479\":1,\"486\":1}}],[\"divisor\",{\"1\":{\"124\":3,\"125\":3}}],[\"divisor=5\",{\"1\":{\"124\":1,\"125\":1}}],[\"divideunsigned\",{\"1\":{\"124\":1}}],[\"divideunsigned方法\",{\"0\":{\"124\":1}}],[\"dividend=56\",{\"1\":{\"125\":1}}],[\"dividend=55\",{\"1\":{\"124\":1}}],[\"dividend\",{\"1\":{\"124\":3,\"125\":3}}],[\"digits数组用于表示数字的所有可能的字符\",{\"1\":{\"111\":1}}],[\"digits\",{\"1\":{\"111\":1,\"116\":2}}],[\"digitones\",{\"1\":{\"111\":1}}],[\"digittens和digitones两个数组放到一起讲更好理解\",{\"1\":{\"111\":1}}],[\"digittens\",{\"1\":{\"111\":1}}],[\"d2=new\",{\"1\":{\"368\":1}}],[\"d2\",{\"1\":{\"79\":4,\"368\":1}}],[\"d180s\",{\"1\":{\"599\":1,\"600\":4}}],[\"d1=new\",{\"1\":{\"368\":1}}],[\"d1\",{\"1\":{\"79\":4,\"368\":1}}],[\"d\",{\"1\":{\"74\":2,\"76\":2,\"107\":3,\"111\":1,\"302\":1,\"437\":1,\"441\":1,\"464\":9,\"467\":6,\"491\":2,\"552\":3,\"663\":2}}],[\"download\",{\"1\":{\"612\":1,\"633\":1}}],[\"downloads\",{\"1\":{\"378\":1}}],[\"domain\",{\"1\":{\"537\":4}}],[\"dominates\",{\"1\":{\"460\":1}}],[\"dos\",{\"1\":{\"447\":1}}],[\"don\",{\"1\":{\"143\":3}}],[\"done\",{\"1\":{\"143\":4,\"170\":1}}],[\"doubly\",{\"1\":{\"143\":1}}],[\"double等\",{\"1\":{\"235\":2}}],[\"doubles\",{\"1\":{\"139\":1}}],[\"doubletorawlongbits\",{\"0\":{\"78\":1},\"1\":{\"77\":1,\"78\":1,\"79\":1}}],[\"doubletolongbits\",{\"1\":{\"77\":1,\"79\":2,\"81\":7}}],[\"doubletolongbits方法\",{\"0\":{\"77\":1}}],[\"doubleconsts\",{\"1\":{\"76\":1,\"77\":3,\"94\":1}}],[\"double的构造方法有2哥\",{\"1\":{\"73\":1}}],[\"double构造方法\",{\"0\":{\"73\":1}}],[\"double值\",{\"1\":{\"78\":1}}],[\"double值所占用的字节数\",{\"1\":{\"71\":1}}],[\"double值的位数\",{\"1\":{\"71\":1}}],[\"double就是java的双精度实现\",{\"1\":{\"69\":1}}],[\"double\",{\"1\":{\"67\":1,\"70\":1,\"71\":32,\"73\":4,\"74\":6,\"75\":2,\"76\":5,\"77\":2,\"78\":3,\"79\":14,\"81\":10,\"93\":1,\"94\":6,\"139\":1,\"143\":1,\"302\":2}}],[\"double类型的最小指数值\",{\"1\":{\"71\":1}}],[\"double类型的最小正非零值的常量\",{\"1\":{\"71\":1}}],[\"double类型的最大可能的指数值\",{\"1\":{\"71\":1}}],[\"double类中的静态属性存储在方法区中的静态区\",{\"1\":{\"67\":1}}],[\"double类\",{\"0\":{\"65\":1}}],[\"doesn\",{\"1\":{\"139\":1}}],[\"does\",{\"1\":{\"137\":1,\"139\":1}}],[\"do\",{\"1\":{\"137\":1,\"139\":1,\"143\":1,\"162\":2,\"166\":1}}],[\"doc\",{\"1\":{\"476\":1}}],[\"docs\",{\"1\":{\"273\":2,\"277\":1,\"302\":2,\"398\":2,\"399\":2,\"534\":2,\"619\":1,\"626\":1}}],[\"docker\",{\"1\":{\"5\":1},\"2\":{\"608\":1}}],[\"document\",{\"1\":{\"5\":1}}],[\"ruleid形式的resourcename\",{\"1\":{\"505\":1}}],[\"rule的condition中有uri类型的参数时才会缓存到trie中\",{\"1\":{\"495\":1}}],[\"rulematchcacheconfig\",{\"1\":{\"488\":4,\"492\":1,\"494\":1}}],[\"rulematchconfig\",{\"1\":{\"486\":4,\"487\":1,\"493\":1}}],[\"rules\",{\"1\":{\"486\":2,\"498\":1}}],[\"ruleobj\",{\"1\":{\"486\":3,\"493\":3}}],[\"ruletrie\",{\"1\":{\"486\":1,\"493\":1}}],[\"rulecache\",{\"1\":{\"486\":1}}],[\"ruledatapair\",{\"1\":{\"486\":5,\"493\":5}}],[\"ruledata\",{\"1\":{\"486\":27,\"487\":3,\"488\":15,\"491\":1,\"492\":7,\"493\":10,\"494\":7,\"496\":1,\"497\":7,\"498\":5,\"499\":7,\"505\":4,\"506\":4}}],[\"ruledata>>\",{\"1\":{\"485\":1}}],[\"ruledata>\",{\"1\":{\"485\":1,\"486\":2,\"493\":1}}],[\"rule\",{\"1\":{\"485\":2,\"486\":16,\"491\":2,\"492\":4,\"493\":7,\"494\":5,\"496\":2,\"506\":17,\"591\":1}}],[\"runnable\",{\"1\":{\"368\":1}}],[\"running\",{\"1\":{\"170\":1,\"555\":1,\"556\":1,\"557\":1}}],[\"runfinalization0\",{\"1\":{\"168\":2}}],[\"runfinalization\",{\"1\":{\"168\":1,\"169\":3,\"170\":1}}],[\"runfinalization方法\",{\"0\":{\"167\":1}}],[\"run\",{\"0\":{\"290\":1},\"1\":{\"141\":1,\"143\":4,\"273\":1,\"291\":1,\"294\":4,\"295\":1,\"302\":2,\"368\":1,\"415\":2,\"441\":2,\"568\":1}}],[\"runtimedemo\",{\"1\":{\"158\":1,\"162\":1,\"166\":1,\"170\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"189\":1,\"193\":1}}],[\"runtimepermission\",{\"1\":{\"156\":1,\"160\":1}}],[\"runtime类\",{\"0\":{\"149\":1}}],[\"runtime\",{\"1\":{\"137\":1,\"141\":1,\"158\":1,\"162\":3,\"166\":3,\"169\":1,\"170\":1,\"172\":1,\"173\":5,\"174\":2,\"175\":1,\"176\":2,\"177\":2,\"178\":2,\"179\":1,\"182\":1,\"185\":1,\"187\":1,\"188\":2,\"189\":1,\"191\":1,\"192\":1,\"193\":1}}],[\"r3\",{\"1\":{\"476\":1}}],[\"rr\",{\"1\":{\"468\":1}}],[\"rc1\",{\"1\":{\"534\":1}}],[\"rcvbuf\",{\"1\":{\"479\":1}}],[\"rc\",{\"1\":{\"468\":1,\"532\":1}}],[\"rsa\",{\"1\":{\"677\":3,\"678\":1}}],[\"rs\",{\"1\":{\"393\":2}}],[\"rt\",{\"1\":{\"287\":1}}],[\"rm之前\",{\"1\":{\"644\":1}}],[\"rmi\",{\"1\":{\"374\":1,\"555\":5,\"556\":5,\"557\":5}}],[\"rm\",{\"0\":{\"644\":1},\"1\":{\"139\":1,\"644\":5}}],[\"rw\",{\"1\":{\"137\":1}}],[\"rng\",{\"1\":{\"137\":2}}],[\"rocketmq\",{\"0\":{\"704\":1},\"2\":{\"705\":1}}],[\"rollingpolicy>\",{\"1\":{\"552\":2}}],[\"rollingfileappender\",{\"1\":{\"552\":2}}],[\"rolling\",{\"1\":{\"552\":4}}],[\"root>\",{\"1\":{\"552\":1}}],[\"root以及原因\",{\"1\":{\"381\":1}}],[\"roots进行可达性分析\",{\"1\":{\"347\":1}}],[\"roots能够关联的对象\",{\"1\":{\"347\":1}}],[\"roots能关联到的对象\",{\"1\":{\"346\":1}}],[\"roots\",{\"1\":{\"346\":1,\"379\":1,\"381\":1,\"393\":1}}],[\"root的对象\",{\"1\":{\"334\":1}}],[\"root\",{\"1\":{\"331\":1,\"334\":1,\"393\":1,\"547\":1,\"550\":1,\"551\":1}}],[\"rookie\",{\"1\":{\"15\":1}}],[\"robust\",{\"1\":{\"139\":1}}],[\"rotating\",{\"1\":{\"120\":2}}],[\"rotateright该方法通过将指定int值a的二进制补码二进制表示形式向右旋转指定位数来返回获得的值\",{\"1\":{\"120\":1}}],[\"rotateright\",{\"1\":{\"120\":2}}],[\"rotateright方法\",{\"0\":{\"120\":1}}],[\"rotateleft该方法返回通过将指定int值的二进制补码二进制表示形式向左旋转指定数量的移位位数而获得的值\",{\"1\":{\"120\":1}}],[\"rotateleft\",{\"0\":{\"120\":1},\"1\":{\"120\":2}}],[\"ramclientauthserviceimpl\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"ram\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"581\":1,\"582\":1}}],[\"raft读请求\",{\"1\":{\"476\":1}}],[\"raft保证读请求linearizability的方法\",{\"1\":{\"467\":1}}],[\"raft算法在线可视化\",{\"1\":{\"467\":1}}],[\"raft是共识算法\",{\"1\":{\"467\":1}}],[\"raft或者\",{\"1\":{\"456\":1}}],[\"raft\",{\"0\":{\"467\":1},\"1\":{\"454\":1,\"456\":2,\"457\":2,\"467\":7,\"476\":2}}],[\"rare\",{\"1\":{\"143\":1}}],[\"race\",{\"1\":{\"137\":1}}],[\"randomaccess\",{\"1\":{\"238\":1}}],[\"random\",{\"1\":{\"137\":1}}],[\"randomly\",{\"1\":{\"137\":1}}],[\"range\",{\"1\":{\"112\":1,\"134\":1}}],[\"rawmonitors\",{\"1\":{\"143\":1}}],[\"raw\",{\"1\":{\"137\":1,\"143\":1}}],[\"radix\",{\"1\":{\"116\":10}}],[\"rabbitmq\",{\"0\":{\"702\":1},\"1\":{\"5\":1},\"2\":{\"703\":1}}],[\"requstbody\",{\"1\":{\"599\":1}}],[\"requestbody\",{\"1\":{\"600\":4}}],[\"requestmapping\",{\"1\":{\"558\":2,\"569\":2}}],[\"request2\",{\"1\":{\"465\":1}}],[\"request\",{\"1\":{\"294\":1}}],[\"requirement\",{\"1\":{\"460\":1}}],[\"required\",{\"1\":{\"273\":1}}],[\"requires\",{\"1\":{\"111\":1,\"141\":1,\"295\":1,\"296\":1}}],[\"reflog\",{\"0\":{\"656\":1},\"1\":{\"641\":1,\"644\":1,\"656\":1}}],[\"reflection\",{\"1\":{\"187\":1,\"191\":1}}],[\"ref=\",{\"1\":{\"552\":6}}],[\"ref\",{\"1\":{\"552\":6}}],[\"refresh\",{\"1\":{\"548\":1,\"549\":1,\"556\":1,\"557\":1}}],[\"refreshenabled=false\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"references\",{\"1\":{\"379\":1,\"381\":1}}],[\"reference\",{\"1\":{\"137\":1,\"139\":1,\"273\":1,\"302\":2,\"534\":1}}],[\"reentry\",{\"1\":{\"143\":1}}],[\"reenteri\",{\"1\":{\"143\":1}}],[\"reenter\",{\"1\":{\"141\":1,\"143\":3}}],[\"recommended\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"recommendations\",{\"1\":{\"399\":1}}],[\"record\",{\"1\":{\"143\":1}}],[\"recursion\",{\"1\":{\"143\":3}}],[\"recursions\",{\"1\":{\"143\":4}}],[\"rem\",{\"1\":{\"692\":5}}],[\"remote\",{\"1\":{\"670\":2,\"671\":1,\"679\":2}}],[\"removerule\",{\"1\":{\"499\":1}}],[\"removeruledatabyselector\",{\"1\":{\"488\":1}}],[\"removeruledata\",{\"1\":{\"488\":4,\"499\":1}}],[\"removetrienode\",{\"1\":{\"492\":1}}],[\"removecachedata\",{\"1\":{\"488\":1,\"494\":1,\"499\":1}}],[\"removeemptyruledata\",{\"1\":{\"488\":3}}],[\"removeemptyselectordata\",{\"1\":{\"488\":2}}],[\"removeselector\",{\"1\":{\"499\":1}}],[\"removeselectordata\",{\"1\":{\"488\":4}}],[\"removeselectdata\",{\"1\":{\"499\":1}}],[\"removeshutdownhook\",{\"1\":{\"160\":1,\"162\":1,\"166\":1}}],[\"removeshutdownhook方法\",{\"0\":{\"159\":1}}],[\"remove\",{\"1\":{\"143\":2,\"160\":1,\"488\":1,\"492\":3,\"494\":4}}],[\"remembered\",{\"1\":{\"393\":1}}],[\"remark\",{\"1\":{\"346\":1}}],[\"remain\",{\"1\":{\"137\":1}}],[\"remainderunsigned\",{\"1\":{\"125\":1}}],[\"remainderunsigned方法\",{\"0\":{\"125\":1}}],[\"re\",{\"1\":{\"141\":1,\"143\":3}}],[\"registry\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"registration\",{\"1\":{\"139\":1,\"479\":1}}],[\"registers\",{\"1\":{\"393\":1}}],[\"register\",{\"0\":{\"297\":1},\"1\":{\"139\":1,\"297\":3,\"555\":1,\"556\":1,\"557\":1}}],[\"registered\",{\"1\":{\"139\":1}}],[\"registernatives方法\",{\"0\":{\"135\":1}}],[\"registernatives\",{\"1\":{\"134\":2,\"135\":2}}],[\"region\",{\"1\":{\"139\":3,\"347\":1,\"402\":1}}],[\"releas\",{\"1\":{\"534\":2}}],[\"release\",{\"1\":{\"534\":16}}],[\"releases>\",{\"1\":{\"537\":3}}],[\"releases<\",{\"1\":{\"537\":2}}],[\"releases\",{\"1\":{\"137\":1,\"415\":1,\"537\":1}}],[\"relaxing\",{\"1\":{\"137\":2}}],[\"relation\",{\"0\":{\"273\":1},\"2\":{\"38\":1,\"40\":1}}],[\"real\",{\"1\":{\"491\":1}}],[\"real=0\",{\"1\":{\"363\":1,\"391\":1}}],[\"reachable\",{\"1\":{\"379\":1}}],[\"reacquired\",{\"1\":{\"143\":1}}],[\"reacquire\",{\"1\":{\"143\":1}}],[\"readeridletime\",{\"1\":{\"592\":1,\"593\":1}}],[\"readtimeout\",{\"1\":{\"547\":1,\"550\":1,\"551\":1,\"592\":1,\"593\":1}}],[\"read做下解释\",{\"1\":{\"467\":1}}],[\"readindex\",{\"1\":{\"467\":4}}],[\"readwrite\",{\"1\":{\"374\":1}}],[\"readonly\",{\"1\":{\"374\":1}}],[\"read\",{\"1\":{\"137\":1,\"464\":5,\"465\":1,\"468\":2,\"470\":2,\"476\":2,\"479\":1}}],[\"readstablemark\",{\"1\":{\"137\":1}}],[\"reasons\",{\"1\":{\"139\":1}}],[\"reason\",{\"1\":{\"137\":1}}],[\"red\",{\"1\":{\"250\":1,\"552\":1}}],[\"redo\",{\"1\":{\"143\":1}}],[\"redefine\",{\"1\":{\"139\":1}}],[\"redefineclasses\",{\"1\":{\"139\":1}}],[\"reduce\",{\"1\":{\"137\":1,\"141\":1}}],[\"redis知识体系\",{\"0\":{\"45\":1}}],[\"redis\",{\"0\":{\"698\":1},\"1\":{\"5\":1},\"2\":{\"46\":1,\"699\":1}}],[\"rebias\",{\"1\":{\"137\":1,\"141\":1,\"143\":1}}],[\"revoked\",{\"1\":{\"137\":1,\"141\":1,\"143\":1}}],[\"revoke\",{\"1\":{\"137\":2,\"141\":1,\"143\":1}}],[\"reverse\",{\"1\":{\"119\":2}}],[\"reverse方法\",{\"0\":{\"119\":1}}],[\"reversebytes\",{\"1\":{\"117\":1}}],[\"reversebytes方法\",{\"0\":{\"117\":1}}],[\"retained\",{\"1\":{\"381\":1}}],[\"retain\",{\"1\":{\"143\":1}}],[\"ret\",{\"1\":{\"136\":4,\"143\":4}}],[\"returned\",{\"1\":{\"460\":1}}],[\"returnaddress\",{\"1\":{\"297\":1}}],[\"returns\",{\"1\":{\"143\":1}}],[\"return\",{\"1\":{\"53\":2,\"54\":1,\"55\":1,\"56\":2,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"74\":2,\"75\":1,\"76\":3,\"77\":1,\"79\":6,\"94\":2,\"95\":2,\"96\":1,\"97\":2,\"98\":2,\"99\":1,\"100\":3,\"111\":1,\"112\":2,\"114\":3,\"115\":4,\"116\":5,\"117\":1,\"118\":1,\"119\":1,\"120\":4,\"121\":4,\"122\":2,\"123\":2,\"124\":2,\"125\":2,\"134\":2,\"136\":5,\"137\":9,\"139\":1,\"141\":2,\"143\":1,\"160\":1,\"172\":6,\"275\":1,\"302\":7,\"321\":2,\"439\":1,\"441\":2,\"444\":2,\"460\":3,\"486\":6,\"487\":3,\"492\":2,\"493\":2,\"498\":1,\"505\":1,\"509\":1,\"558\":1,\"569\":1}}],[\"responsetimeout\",{\"1\":{\"592\":1,\"593\":1}}],[\"response\",{\"1\":{\"571\":1}}],[\"responsible\",{\"1\":{\"143\":1}}],[\"research\",{\"1\":{\"462\":1}}],[\"reset\",{\"0\":{\"654\":1,\"657\":1},\"1\":{\"143\":1,\"641\":3,\"654\":2,\"657\":1,\"672\":1}}],[\"restcontroller\",{\"1\":{\"318\":1,\"322\":1,\"558\":2,\"569\":2}}],[\"restore\",{\"1\":{\"143\":1}}],[\"residual\",{\"1\":{\"143\":1}}],[\"resources\",{\"1\":{\"690\":1}}],[\"resourcename\",{\"1\":{\"509\":3}}],[\"resourcemark\",{\"1\":{\"139\":1}}],[\"resolved\",{\"1\":{\"139\":1}}],[\"resolve\",{\"0\":{\"283\":1},\"1\":{\"136\":1,\"137\":1,\"139\":1,\"141\":1,\"143\":1}}],[\"result=op1+op2\",{\"1\":{\"302\":1}}],[\"result为11\",{\"1\":{\"124\":1}}],[\"result\",{\"1\":{\"57\":3,\"77\":5,\"99\":5,\"115\":3,\"118\":3,\"119\":1,\"125\":1,\"302\":1}}],[\"repo\",{\"1\":{\"537\":1}}],[\"repositories>\",{\"1\":{\"537\":1}}],[\"repositories\",{\"1\":{\"537\":2}}],[\"repository目录下有一个\",{\"1\":{\"638\":1}}],[\"repository<\",{\"1\":{\"537\":4}}],[\"repository>\",{\"1\":{\"537\":4}}],[\"repository\",{\"0\":{\"679\":1},\"1\":{\"537\":3,\"566\":1,\"637\":1}}],[\"reports\",{\"1\":{\"381\":1}}],[\"repeatable\",{\"1\":{\"468\":1}}],[\"replication\",{\"1\":{\"473\":1}}],[\"replicated\",{\"1\":{\"458\":1}}],[\"replica\",{\"1\":{\"460\":3}}],[\"replicas\",{\"1\":{\"460\":5}}],[\"replacefirst\",{\"1\":{\"94\":1}}],[\"replace\",{\"1\":{\"94\":1}}],[\"represent\",{\"1\":{\"110\":2}}],[\"representing\",{\"1\":{\"110\":1,\"143\":1}}],[\"r\",{\"1\":{\"15\":2,\"111\":1,\"464\":16,\"506\":4}}],[\"c800\",{\"1\":{\"600\":1}}],[\"c600\",{\"1\":{\"599\":1,\"600\":1}}],[\"cd\",{\"1\":{\"586\":1,\"595\":2,\"596\":2,\"692\":1}}],[\"cdll\",{\"1\":{\"141\":1}}],[\"cyan\",{\"1\":{\"552\":1}}],[\"center\",{\"1\":{\"547\":1,\"549\":1,\"562\":1}}],[\"cj\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"c0\",{\"1\":{\"464\":1}}],[\"c1200\",{\"1\":{\"600\":1}}],[\"c1000\",{\"1\":{\"600\":1}}],[\"c1\",{\"1\":{\"463\":4,\"464\":3,\"466\":3}}],[\"c4\",{\"1\":{\"460\":1}}],[\"c3\",{\"1\":{\"460\":1}}],[\"cw\",{\"1\":{\"321\":4}}],[\"c等创建在eden区\",{\"1\":{\"310\":1}}],[\"curl\",{\"1\":{\"376\":1}}],[\"currency\",{\"1\":{\"603\":1,\"604\":1}}],[\"currentthread\",{\"1\":{\"368\":4}}],[\"currently\",{\"1\":{\"141\":1,\"297\":2,\"555\":1,\"556\":1,\"557\":1}}],[\"current\",{\"1\":{\"137\":3,\"141\":1,\"143\":7,\"297\":1,\"486\":1,\"534\":1}}],[\"currect\",{\"1\":{\"174\":1}}],[\"custom\",{\"1\":{\"287\":1,\"591\":1}}],[\"cpu\",{\"1\":{\"581\":1,\"582\":1}}],[\"cpu调度来的\",{\"1\":{\"297\":1}}],[\"cp\",{\"1\":{\"277\":1,\"356\":1,\"467\":1,\"586\":1}}],[\"cpp\",{\"1\":{\"136\":1,\"137\":2,\"141\":1}}],[\"circular\",{\"1\":{\"143\":1}}],[\"circuit\",{\"1\":{\"143\":1}}],[\"cxq\",{\"1\":{\"141\":10,\"143\":4}}],[\"crementcounter\",{\"1\":{\"445\":1}}],[\"creationcounter\",{\"1\":{\"445\":1}}],[\"createuri\",{\"1\":{\"509\":1}}],[\"createclasses\",{\"1\":{\"321\":1,\"322\":1}}],[\"created\",{\"1\":{\"291\":3,\"294\":1,\"295\":1,\"296\":1}}],[\"create\",{\"1\":{\"94\":1,\"143\":1,\"174\":3,\"296\":1}}],[\"crypt32\",{\"1\":{\"189\":1,\"193\":1}}],[\"critically\",{\"1\":{\"143\":1}}],[\"critical\",{\"1\":{\"141\":2}}],[\"crash\",{\"1\":{\"139\":1}}],[\"cms日志\",{\"0\":{\"392\":1}}],[\"cmsfullgcsbeforecompaction=5\",{\"1\":{\"363\":3}}],[\"cmsfullgcsbeforecompaction\",{\"1\":{\"363\":1}}],[\"cms\",{\"1\":{\"346\":5,\"392\":1,\"402\":1}}],[\"cms收集器的内存回收过程是与用户线程一起并发地执行的\",{\"1\":{\"346\":1}}],[\"cms收集器\",{\"0\":{\"346\":1}}],[\"cmsblogs\",{\"1\":{\"129\":1}}],[\"cmdarray\",{\"1\":{\"172\":9,\"173\":9,\"174\":5}}],[\"cmpxchg\",{\"1\":{\"137\":2,\"141\":2}}],[\"c++函数\",{\"1\":{\"135\":1}}],[\"child\",{\"1\":{\"491\":2}}],[\"childrensize\",{\"1\":{\"591\":1}}],[\"children\",{\"1\":{\"491\":2}}],[\"ch\",{\"1\":{\"476\":1,\"552\":10}}],[\"chrisnewland\",{\"1\":{\"413\":1,\"420\":1}}],[\"chmod\",{\"1\":{\"374\":1}}],[\"choose\",{\"1\":{\"294\":1}}],[\"chain\",{\"1\":{\"487\":1,\"498\":1,\"509\":2}}],[\"channel\",{\"1\":{\"479\":1}}],[\"channelhandler中的处理过程会由group中的不同线程执行\",{\"1\":{\"479\":1}}],[\"channel的iswritable\",{\"1\":{\"479\":1}}],[\"change\",{\"1\":{\"137\":1,\"143\":1}}],[\"changed\",{\"1\":{\"137\":1,\"143\":1}}],[\"chao2016\",{\"1\":{\"476\":1}}],[\"chapter\",{\"1\":{\"279\":1,\"291\":1}}],[\"charset=utf\",{\"1\":{\"571\":1}}],[\"charpos\",{\"1\":{\"116\":6}}],[\"characterencoding=utf\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"character\",{\"1\":{\"116\":2}}],[\"char\",{\"1\":{\"111\":3,\"116\":4}}],[\"checkout2\",{\"1\":{\"664\":1}}],[\"checkout\",{\"0\":{\"642\":1},\"1\":{\"642\":6,\"644\":3,\"662\":3,\"663\":2,\"665\":1,\"666\":2,\"672\":2}}],[\"checkdata\",{\"1\":{\"506\":1}}],[\"checklink\",{\"1\":{\"187\":1,\"188\":1,\"191\":1,\"192\":1}}],[\"checkpermission\",{\"1\":{\"156\":1,\"160\":1}}],[\"checkexit\",{\"1\":{\"153\":1,\"164\":1}}],[\"checked\",{\"1\":{\"137\":1,\"143\":1}}],[\"checking\",{\"1\":{\"139\":1}}],[\"check\",{\"1\":{\"77\":1,\"99\":1,\"137\":3,\"139\":5,\"141\":2,\"143\":6,\"467\":1,\"644\":1}}],[\"cheap\",{\"1\":{\"15\":1,\"457\":1}}],[\"c中有个java\",{\"1\":{\"110\":1}}],[\"c\",{\"1\":{\"107\":3,\"111\":1,\"136\":1,\"138\":1,\"174\":1,\"189\":1,\"193\":1,\"279\":1,\"298\":2,\"331\":1,\"411\":2,\"416\":1,\"437\":2,\"441\":1,\"464\":8,\"466\":1,\"467\":11,\"470\":1,\"471\":1,\"472\":1,\"491\":4,\"677\":1}}],[\"caffeinecachemanager\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"caffeine\",{\"1\":{\"555\":3,\"556\":3,\"557\":3}}],[\"cafe\",{\"1\":{\"277\":1}}],[\"cam\",{\"1\":{\"460\":1}}],[\"capacity\",{\"1\":{\"552\":4,\"591\":2}}],[\"cap理论的一致性是保证同样一个数据在所有不同服务器上的拷贝都是相同的\",{\"1\":{\"474\":1}}],[\"cap理论\",{\"0\":{\"472\":1}}],[\"cap\",{\"1\":{\"460\":1,\"466\":1,\"467\":1,\"471\":2,\"472\":7,\"473\":3,\"475\":2,\"476\":1}}],[\"cat命令\",{\"0\":{\"655\":1}}],[\"cat\",{\"1\":{\"479\":1,\"655\":1,\"657\":1,\"666\":1}}],[\"catalina\",{\"1\":{\"374\":2}}],[\"catch\",{\"1\":{\"57\":1,\"112\":1,\"115\":2}}],[\"calc\",{\"1\":{\"275\":1,\"302\":4}}],[\"called\",{\"1\":{\"298\":1}}],[\"callersensitive\",{\"1\":{\"187\":1,\"191\":1}}],[\"calls\",{\"1\":{\"137\":1}}],[\"call\",{\"1\":{\"137\":1,\"143\":2,\"379\":1}}],[\"causal\",{\"0\":{\"469\":1},\"1\":{\"460\":1,\"470\":1}}],[\"cause\",{\"1\":{\"137\":1}}],[\"caution\",{\"1\":{\"139\":1}}],[\"cascade\",{\"1\":{\"581\":1,\"582\":1}}],[\"castlist\",{\"1\":{\"486\":1,\"493\":1}}],[\"cast\",{\"1\":{\"137\":3,\"486\":1,\"493\":1}}],[\"cases\",{\"1\":{\"137\":1,\"398\":1}}],[\"case\",{\"1\":{\"137\":1,\"143\":3,\"492\":3}}],[\"can\",{\"1\":{\"110\":2,\"137\":3,\"139\":4,\"141\":1,\"143\":2,\"295\":1,\"296\":3,\"297\":1,\"460\":2,\"555\":1,\"556\":1,\"557\":1,\"591\":1}}],[\"cannot\",{\"1\":{\"79\":1,\"112\":1,\"143\":4,\"294\":1,\"555\":2,\"556\":2,\"557\":2}}],[\"cachekeyutils\",{\"1\":{\"506\":1}}],[\"cacheselectdata\",{\"1\":{\"497\":1}}],[\"cachesize\",{\"1\":{\"491\":2}}],[\"cacheplugindata\",{\"1\":{\"497\":1}}],[\"cachetypeenum\",{\"1\":{\"492\":3}}],[\"cached\",{\"1\":{\"486\":2,\"493\":2}}],[\"cacheruledata\",{\"1\":{\"486\":6,\"493\":1,\"497\":1}}],[\"cache一致性协议的\",{\"1\":{\"454\":1}}],[\"cache空间如下\",{\"1\":{\"112\":1}}],[\"cache空间为256\",{\"1\":{\"112\":1}}],[\"cache\",{\"0\":{\"721\":1},\"1\":{\"5\":1,\"112\":7,\"143\":1,\"455\":1,\"486\":5,\"488\":1,\"493\":1,\"494\":1,\"555\":5,\"556\":5,\"557\":5,\"591\":4}}],[\"clientauthservice\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"clientauthpluginmanager\",{\"1\":{\"555\":4,\"556\":4,\"557\":4}}],[\"client\",{\"1\":{\"547\":1,\"550\":1,\"551\":1,\"555\":4,\"556\":4,\"557\":4}}],[\"cl\",{\"1\":{\"460\":1}}],[\"clean\",{\"1\":{\"415\":3,\"538\":1,\"563\":1}}],[\"clear\",{\"1\":{\"139\":1}}],[\"cls\",{\"1\":{\"135\":2,\"377\":1}}],[\"closure\",{\"1\":{\"479\":1}}],[\"close\",{\"1\":{\"479\":3}}],[\"closest\",{\"1\":{\"460\":1}}],[\"clone2\",{\"1\":{\"672\":1,\"679\":1}}],[\"clonee\",{\"1\":{\"139\":1}}],[\"cloneable接口\",{\"1\":{\"242\":1}}],[\"cloneable\",{\"1\":{\"139\":12,\"238\":1,\"239\":1,\"241\":1,\"243\":1,\"248\":1,\"250\":1}}],[\"clone方法主要实现对象的克隆功能\",{\"1\":{\"139\":1}}],[\"clone方法对应的jvm方法为\",{\"1\":{\"139\":1}}],[\"clone方法\",{\"0\":{\"139\":1}}],[\"clonenotsupportedexception\",{\"1\":{\"134\":1,\"139\":1}}],[\"clone\",{\"1\":{\"133\":1,\"134\":1,\"135\":2,\"139\":5,\"586\":1,\"679\":2}}],[\"cloud<\",{\"1\":{\"537\":2,\"545\":3,\"561\":1,\"566\":2}}],[\"cloud项目\",{\"0\":{\"530\":1}}],[\"cloud\",{\"1\":{\"5\":1,\"421\":1,\"532\":1,\"533\":4,\"534\":11,\"537\":8,\"545\":3,\"547\":3,\"548\":3,\"549\":3,\"550\":1,\"551\":1,\"555\":5,\"556\":7,\"557\":7,\"561\":1,\"562\":1,\"566\":2,\"567\":1,\"568\":1}}],[\"class=\",{\"1\":{\"552\":10}}],[\"classpathprefix>\",{\"1\":{\"691\":1}}],[\"classpath\",{\"1\":{\"547\":2,\"550\":2,\"551\":2,\"555\":1,\"556\":1,\"557\":1}}],[\"classwriter\",{\"1\":{\"321\":2}}],[\"classes目录\",{\"1\":{\"416\":1}}],[\"classes\",{\"1\":{\"321\":3,\"379\":1}}],[\"class对象\",{\"1\":{\"279\":1,\"290\":1,\"295\":1}}],[\"class字节码文件\",{\"1\":{\"277\":1}}],[\"classfile\",{\"1\":{\"277\":1}}],[\"class文件中除了有类的版本\",{\"1\":{\"294\":1}}],[\"class文件\",{\"0\":{\"277\":1},\"1\":{\"276\":1}}],[\"classloader逐层检\",{\"1\":{\"289\":1}}],[\"classloader到bootstrap\",{\"1\":{\"289\":1}}],[\"classloader的子类自定义加载class\",{\"1\":{\"287\":1}}],[\"classloader\",{\"1\":{\"187\":1,\"191\":1,\"287\":4,\"321\":1,\"323\":3,\"379\":1,\"402\":1}}],[\"classic\",{\"1\":{\"137\":1,\"552\":4}}],[\"class<\",{\"1\":{\"134\":1,\"136\":1,\"187\":1,\"191\":1,\"321\":1}}],[\"class<integer>\",{\"1\":{\"110\":2}}],[\"class的getprimitiveclass是一个native方法\",{\"1\":{\"110\":1}}],[\"class\",{\"1\":{\"48\":1,\"52\":2,\"53\":1,\"54\":2,\"55\":1,\"56\":1,\"57\":2,\"58\":2,\"59\":2,\"60\":2,\"61\":2,\"71\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":2,\"77\":1,\"78\":1,\"79\":1,\"85\":1,\"91\":1,\"93\":1,\"94\":2,\"95\":2,\"96\":1,\"97\":1,\"98\":2,\"99\":1,\"100\":1,\"101\":1,\"106\":1,\"107\":1,\"110\":3,\"112\":1,\"114\":2,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"134\":1,\"139\":1,\"158\":1,\"162\":1,\"166\":1,\"170\":1,\"172\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"187\":1,\"189\":1,\"191\":1,\"193\":1,\"275\":1,\"277\":3,\"287\":1,\"294\":3,\"295\":1,\"302\":2,\"304\":1,\"305\":1,\"318\":1,\"321\":3,\"322\":1,\"325\":1,\"367\":1,\"368\":3,\"379\":2,\"381\":1,\"402\":1,\"437\":1,\"439\":1,\"440\":1,\"441\":4,\"444\":2,\"447\":1,\"486\":2,\"487\":2,\"488\":2,\"491\":2,\"492\":2,\"493\":2,\"494\":2,\"497\":1,\"498\":1,\"499\":1,\"506\":2,\"547\":1,\"550\":1,\"551\":1,\"558\":1,\"568\":2,\"569\":1,\"691\":1}}],[\"cnblogs\",{\"1\":{\"448\":1}}],[\"cn\",{\"1\":{\"16\":1,\"448\":1,\"455\":1,\"476\":1,\"555\":2,\"556\":2,\"557\":2,\"558\":1,\"562\":3,\"568\":2,\"569\":2}}],[\"csdn\",{\"1\":{\"421\":1,\"476\":1}}],[\"cs\",{\"0\":{\"708\":1},\"1\":{\"16\":3}}],[\"coding\",{\"1\":{\"623\":1}}],[\"codefever\",{\"1\":{\"476\":1}}],[\"code=17nuh698omdi4\",{\"1\":{\"421\":1}}],[\"code到特定目录\",{\"1\":{\"377\":1}}],[\"code\",{\"1\":{\"15\":1,\"49\":4,\"110\":6,\"124\":1,\"125\":1,\"137\":11,\"139\":1,\"143\":1,\"294\":1,\"297\":1,\"302\":5,\"321\":3,\"571\":1}}],[\"core\",{\"1\":{\"552\":6}}],[\"correct\",{\"1\":{\"139\":1}}],[\"correctly\",{\"1\":{\"137\":1,\"462\":1}}],[\"corresponding\",{\"1\":{\"49\":2}}],[\"coordination\",{\"1\":{\"465\":1}}],[\"cool\",{\"1\":{\"141\":1}}],[\"coherence\",{\"0\":{\"455\":1},\"1\":{\"454\":2,\"455\":2}}],[\"coherency\",{\"1\":{\"137\":1,\"455\":1}}],[\"colloquially\",{\"1\":{\"298\":1}}],[\"collectors\",{\"1\":{\"350\":1,\"492\":1,\"506\":2}}],[\"collect\",{\"0\":{\"331\":1},\"1\":{\"294\":1,\"310\":1,\"492\":1,\"506\":2}}],[\"collectionutils\",{\"1\":{\"486\":2,\"492\":3,\"493\":1,\"494\":1}}],[\"collection<integer>\",{\"1\":{\"442\":1}}],[\"collections4<\",{\"1\":{\"537\":1}}],[\"collections4\",{\"1\":{\"537\":3}}],[\"collections\",{\"1\":{\"235\":1,\"442\":1}}],[\"collection主要用于存储对象\",{\"1\":{\"206\":1,\"220\":1,\"234\":1,\"255\":1}}],[\"collection\",{\"0\":{\"207\":1,\"221\":1,\"236\":1,\"256\":1},\"1\":{\"379\":1,\"486\":5,\"493\":5},\"2\":{\"203\":1,\"204\":1,\"217\":1,\"218\":1,\"231\":1,\"232\":1,\"252\":1,\"253\":1,\"266\":1,\"267\":1}}],[\"collectedheap\",{\"1\":{\"139\":2}}],[\"course\",{\"1\":{\"143\":1}}],[\"counting\",{\"1\":{\"347\":1}}],[\"count++\",{\"1\":{\"325\":1}}],[\"count=0\",{\"1\":{\"325\":1}}],[\"counter\",{\"1\":{\"297\":1,\"444\":10,\"445\":1,\"446\":1,\"447\":3}}],[\"counttokens\",{\"1\":{\"172\":1}}],[\"count\",{\"1\":{\"143\":2,\"277\":11}}],[\"could\",{\"1\":{\"137\":1,\"141\":1,\"143\":3}}],[\"copying\",{\"0\":{\"337\":1},\"1\":{\"139\":1}}],[\"copy\",{\"1\":{\"139\":9}}],[\"connection\",{\"1\":{\"555\":5,\"556\":5,\"557\":5,\"571\":1}}],[\"connecttimeoutmillis\",{\"1\":{\"591\":2}}],[\"connecttimeout\",{\"1\":{\"547\":1,\"550\":1,\"551\":1,\"592\":1,\"593\":1}}],[\"connector\",{\"1\":{\"545\":1}}],[\"conditiondata\",{\"1\":{\"492\":1}}],[\"condition的rule\",{\"1\":{\"489\":1}}],[\"condition中只有uri\",{\"1\":{\"489\":1}}],[\"condition\",{\"1\":{\"486\":4,\"492\":2,\"493\":3,\"494\":1,\"498\":1}}],[\"conditionlist\",{\"1\":{\"486\":3}}],[\"configdata\",{\"1\":{\"556\":1,\"557\":1}}],[\"configuration>\",{\"1\":{\"552\":1,\"691\":6}}],[\"configured\",{\"1\":{\"112\":1}}],[\"config<\",{\"1\":{\"545\":1}}],[\"config\",{\"1\":{\"545\":1,\"547\":8,\"548\":4,\"549\":4,\"550\":4,\"551\":4,\"555\":1,\"556\":5,\"557\":5,\"591\":1,\"647\":2,\"691\":1}}],[\"conf\",{\"1\":{\"374\":3}}],[\"concdists\",{\"1\":{\"460\":1}}],[\"concgcthreads=n来增加标记线程的数量\",{\"1\":{\"399\":1}}],[\"concurrentmap<string\",{\"1\":{\"485\":2,\"496\":2}}],[\"concurrentmap\",{\"1\":{\"443\":4}}],[\"concurrenthashmap<>\",{\"1\":{\"443\":1}}],[\"concurrenthashmap\",{\"1\":{\"443\":2}}],[\"concurrent\",{\"1\":{\"346\":3,\"347\":1,\"443\":1}}],[\"conceivable\",{\"1\":{\"143\":1}}],[\"conventional\",{\"1\":{\"298\":1}}],[\"converting\",{\"1\":{\"141\":1}}],[\"conjoint\",{\"1\":{\"139\":1}}],[\"consoleappender\",{\"1\":{\"552\":1}}],[\"cons\",{\"1\":{\"460\":1}}],[\"consensus共识在实现机制上属于复制状态机\",{\"1\":{\"458\":1}}],[\"consensus准确的翻译是共识\",{\"1\":{\"456\":1}}],[\"consensus三个单词统一翻译为\",{\"1\":{\"454\":1}}],[\"consensus\",{\"0\":{\"456\":1},\"1\":{\"454\":1,\"456\":1}}],[\"consistencies\",{\"1\":{\"476\":1}}],[\"consistency最终一致\",{\"1\":{\"470\":1}}],[\"consistency中\",{\"1\":{\"469\":1}}],[\"consistency即顺序一致\",{\"1\":{\"465\":1}}],[\"consistency\",{\"0\":{\"460\":1,\"462\":1,\"469\":1,\"470\":1},\"1\":{\"454\":3,\"456\":1,\"460\":7,\"461\":1,\"463\":1,\"465\":2,\"470\":5,\"472\":1,\"473\":1,\"476\":1}}],[\"consistent\",{\"1\":{\"460\":1,\"476\":1}}],[\"consider\",{\"1\":{\"141\":2,\"143\":1}}],[\"considered\",{\"1\":{\"139\":1}}],[\"consumer的application\",{\"1\":{\"567\":1}}],[\"consumer的pom\",{\"0\":{\"566\":1}}],[\"consumer<\",{\"1\":{\"566\":3}}],[\"consumer<httpstatus>\",{\"1\":{\"508\":1,\"509\":1}}],[\"consumer\",{\"1\":{\"565\":1,\"567\":1,\"568\":1,\"569\":2}}],[\"consumer项目初始化\",{\"0\":{\"565\":1}}],[\"consumers\",{\"1\":{\"381\":2}}],[\"consume\",{\"1\":{\"143\":3}}],[\"construct\",{\"0\":{\"706\":1}}],[\"constructors\",{\"1\":{\"294\":1}}],[\"constsant\",{\"1\":{\"294\":1}}],[\"const\",{\"1\":{\"139\":3,\"143\":1}}],[\"constants\",{\"1\":{\"506\":2,\"508\":1,\"509\":1,\"562\":2}}],[\"constant\",{\"1\":{\"110\":2,\"141\":1,\"277\":4,\"294\":5,\"302\":2}}],[\"context\",{\"1\":{\"547\":1,\"548\":1,\"549\":1}}],[\"content\",{\"1\":{\"537\":4,\"571\":3}}],[\"contention\",{\"1\":{\"141\":1,\"143\":1}}],[\"contended\",{\"1\":{\"143\":1}}],[\"contained\",{\"1\":{\"139\":1}}],[\"contain\",{\"1\":{\"139\":1}}],[\"contains\",{\"1\":{\"137\":1,\"273\":1,\"297\":1}}],[\"controller\",{\"1\":{\"5\":1,\"558\":1,\"569\":1}}],[\"contributor\",{\"1\":{\"4\":1}}],[\"cost\",{\"1\":{\"460\":1}}],[\"cos\",{\"1\":{\"16\":1}}],[\"commons<\",{\"1\":{\"537\":2}}],[\"commons\",{\"1\":{\"537\":6,\"555\":2,\"556\":2,\"557\":2}}],[\"commonplugindatasubscriber\",{\"1\":{\"488\":2,\"492\":1,\"494\":2,\"497\":1,\"499\":1}}],[\"command\",{\"1\":{\"172\":8,\"173\":9}}],[\"commit1\",{\"1\":{\"652\":1}}],[\"commit命令\",{\"1\":{\"644\":1}}],[\"commit命令呢\",{\"1\":{\"644\":1}}],[\"commit4\",{\"1\":{\"644\":1}}],[\"commit就可以了\",{\"1\":{\"644\":1}}],[\"commit3\",{\"1\":{\"638\":1}}],[\"committed\",{\"1\":{\"467\":3,\"468\":1}}],[\"committer\",{\"1\":{\"4\":1}}],[\"commited\",{\"1\":{\"467\":4}}],[\"commit\",{\"0\":{\"650\":1},\"1\":{\"143\":2,\"467\":1,\"638\":3,\"644\":2,\"650\":1,\"651\":1,\"652\":1,\"653\":2,\"665\":2,\"672\":2,\"679\":1}}],[\"combined\",{\"1\":{\"137\":1}}],[\"computer\",{\"1\":{\"462\":1}}],[\"computation\",{\"1\":{\"295\":1,\"296\":1}}],[\"composition\",{\"1\":{\"465\":1}}],[\"compositional\",{\"1\":{\"460\":1}}],[\"components\",{\"1\":{\"273\":3}}],[\"compiler\",{\"1\":{\"545\":4,\"561\":4,\"691\":1}}],[\"compiler生成的汇编代码\",{\"1\":{\"421\":1}}],[\"compilers\",{\"1\":{\"273\":1}}],[\"compile\",{\"1\":{\"415\":2}}],[\"compact\",{\"0\":{\"338\":1},\"1\":{\"294\":1}}],[\"comparable<integer>\",{\"1\":{\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1}}],[\"comparable<float>\",{\"1\":{\"91\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1}}],[\"comparable<double>\",{\"1\":{\"71\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1}}],[\"comparable<boolean>\",{\"1\":{\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1}}],[\"compareto\",{\"1\":{\"81\":1}}],[\"compare\",{\"0\":{\"79\":1},\"1\":{\"58\":5,\"79\":1}}],[\"compare方法\",{\"0\":{\"58\":1}}],[\"completed\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"completes\",{\"1\":{\"143\":1}}],[\"complexity\",{\"1\":{\"137\":1}}],[\"complement\",{\"1\":{\"110\":2}}],[\"com\",{\"1\":{\"3\":1,\"6\":1,\"16\":2,\"129\":1,\"273\":1,\"277\":1,\"279\":1,\"291\":1,\"302\":2,\"350\":1,\"363\":1,\"375\":1,\"393\":1,\"398\":2,\"399\":1,\"409\":1,\"410\":1,\"413\":2,\"415\":2,\"420\":2,\"421\":2,\"448\":5,\"452\":1,\"462\":1,\"467\":1,\"476\":3,\"534\":1,\"537\":1,\"547\":1,\"550\":1,\"551\":1,\"555\":7,\"556\":9,\"557\":9,\"573\":1,\"585\":1,\"586\":1,\"612\":2,\"619\":1,\"622\":1,\"677\":1,\"679\":1}}],[\"svn是集中式版本控制系统\",{\"1\":{\"631\":1}}],[\"svn\",{\"0\":{\"631\":1}}],[\"ssh\",{\"1\":{\"677\":1,\"678\":3}}],[\"ss\",{\"1\":{\"552\":1}}],[\"ssl=false\",{\"1\":{\"374\":1}}],[\"sr6\",{\"1\":{\"534\":1}}],[\"sr3\",{\"1\":{\"534\":1}}],[\"sr9\",{\"1\":{\"534\":1}}],[\"sr12\",{\"1\":{\"534\":4}}],[\"src\",{\"1\":{\"136\":1,\"137\":2,\"141\":1,\"690\":1}}],[\"switch\",{\"1\":{\"492\":1,\"555\":1,\"556\":1,\"557\":1}}],[\"sweep\",{\"0\":{\"336\":1},\"1\":{\"346\":2}}],[\"sndbuf\",{\"1\":{\"479\":2}}],[\"snapshotrepository>\",{\"1\":{\"537\":1}}],[\"snapshots>\",{\"1\":{\"537\":3}}],[\"snapshots\",{\"1\":{\"537\":1}}],[\"snapshots<\",{\"1\":{\"537\":1}}],[\"snapshot<\",{\"1\":{\"537\":1,\"541\":2,\"545\":1,\"561\":2,\"566\":3}}],[\"snapshot\",{\"1\":{\"379\":1,\"537\":2}}],[\"s2\",{\"1\":{\"314\":1}}],[\"s2为什么是8\",{\"1\":{\"314\":1}}],[\"s1区为8\",{\"1\":{\"314\":1}}],[\"s1\",{\"1\":{\"314\":2}}],[\"s1=8\",{\"1\":{\"309\":1}}],[\"s0和s1只能有一个区有数据\",{\"1\":{\"311\":1}}],[\"s0和s1一样大\",{\"1\":{\"309\":1}}],[\"s0\",{\"1\":{\"309\":1}}],[\"s0+s1\",{\"1\":{\"309\":1}}],[\"smem查询其大小\",{\"1\":{\"479\":1}}],[\"sm\",{\"1\":{\"156\":3,\"160\":3,\"164\":3}}],[\"smaller\",{\"1\":{\"79\":1}}],[\"spi\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"spin\",{\"1\":{\"143\":2}}],[\"spinrelease\",{\"1\":{\"141\":1,\"143\":2}}],[\"spinacquire\",{\"1\":{\"141\":1,\"143\":2}}],[\"springwebflux\",{\"0\":{\"576\":1}}],[\"springapplication\",{\"1\":{\"568\":2}}],[\"springframework\",{\"1\":{\"537\":6,\"541\":1,\"545\":7,\"555\":8,\"556\":8,\"557\":8,\"558\":3,\"561\":1,\"562\":2,\"566\":6,\"568\":3,\"569\":3,\"691\":1}}],[\"springbootapplication<\",{\"1\":{\"691\":1}}],[\"springbootapplication\",{\"1\":{\"568\":2}}],[\"springboot版本\",{\"1\":{\"532\":1,\"533\":1,\"534\":1}}],[\"springboot\",{\"0\":{\"526\":1,\"534\":1},\"1\":{\"531\":2},\"2\":{\"527\":1}}],[\"spring知识图谱\",{\"0\":{\"523\":1}}],[\"spring\",{\"0\":{\"512\":1,\"514\":1,\"517\":1,\"520\":1,\"717\":1},\"1\":{\"532\":1,\"533\":4,\"534\":12,\"537\":6,\"547\":10,\"548\":9,\"549\":9,\"550\":2,\"551\":2,\"555\":2,\"556\":2,\"557\":2,\"567\":3},\"2\":{\"513\":1,\"515\":1,\"516\":1,\"518\":1,\"519\":1,\"521\":1,\"522\":1,\"524\":1,\"525\":1}}],[\"springcloud版本\",{\"1\":{\"532\":1,\"533\":1,\"534\":1}}],[\"springcloud\",{\"0\":{\"528\":1,\"532\":1,\"533\":1},\"1\":{\"5\":1,\"482\":1,\"503\":1,\"532\":1,\"533\":1,\"534\":1,\"573\":1},\"2\":{\"529\":1,\"574\":1,\"575\":1}}],[\"sphu\",{\"1\":{\"509\":1}}],[\"spanner\",{\"1\":{\"461\":1,\"474\":1}}],[\"space用来做方法的递归调用时压入stack\",{\"1\":{\"327\":1}}],[\"space无碎片\",{\"1\":{\"314\":1}}],[\"space是空的\",{\"1\":{\"314\":1}}],[\"space\",{\"1\":{\"294\":1}}],[\"spent\",{\"1\":{\"393\":2}}],[\"specs\",{\"1\":{\"277\":1,\"302\":2}}],[\"special\",{\"1\":{\"139\":1,\"294\":1}}],[\"specification\",{\"1\":{\"273\":1}}],[\"specific\",{\"1\":{\"137\":1,\"297\":1}}],[\"spurious\",{\"1\":{\"143\":1}}],[\"script\",{\"1\":{\"692\":1}}],[\"schemalocation=\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"scheme\",{\"1\":{\"137\":1}}],[\"schemes\",{\"1\":{\"137\":1}}],[\"sc\",{\"1\":{\"377\":1}}],[\"scanning\",{\"1\":{\"393\":2}}],[\"scanvenge\",{\"1\":{\"348\":1}}],[\"scanvenge更关注系统的吞吐量\",{\"1\":{\"343\":1}}],[\"scavenge收集器的老年代版本\",{\"1\":{\"345\":1}}],[\"scavenge收集器是一个新生代收集器\",{\"1\":{\"343\":1}}],[\"scavenge收集器\",{\"0\":{\"343\":1}}],[\"scalb\",{\"1\":{\"94\":1}}],[\"scope>\",{\"1\":{\"537\":4,\"690\":1}}],[\"scope\",{\"1\":{\"143\":1}}],[\"sleep\",{\"1\":{\"318\":1,\"322\":1}}],[\"slot\",{\"1\":{\"137\":1}}],[\"slide\",{\"0\":{\"9\":1}}],[\"skiptests>\",{\"1\":{\"691\":1}}],[\"skip\",{\"1\":{\"137\":1}}],[\"skywalking\",{\"1\":{\"5\":1}}],[\"sandbox按钮\",{\"1\":{\"416\":1}}],[\"saw\",{\"1\":{\"413\":1}}],[\"salary\",{\"1\":{\"302\":1}}],[\"salary=100\",{\"1\":{\"302\":1}}],[\"satisfy\",{\"1\":{\"294\":1}}],[\"satisfied\",{\"1\":{\"143\":1}}],[\"say\",{\"1\":{\"275\":2,\"302\":4}}],[\"safe\",{\"1\":{\"143\":1,\"448\":2}}],[\"safety\",{\"1\":{\"143\":1}}],[\"safepoints\",{\"1\":{\"143\":1}}],[\"safepointsynchronize\",{\"1\":{\"137\":2}}],[\"safepoint\",{\"1\":{\"137\":5,\"139\":1,\"143\":1,\"393\":1}}],[\"save\",{\"1\":{\"143\":2}}],[\"same\",{\"1\":{\"94\":1,\"137\":1,\"139\":2,\"143\":1,\"296\":1,\"460\":2}}],[\"suspects\",{\"1\":{\"381\":2}}],[\"suspend\",{\"1\":{\"143\":2}}],[\"suspended\",{\"1\":{\"139\":1,\"143\":1}}],[\"survivorratio=4\",{\"1\":{\"363\":1}}],[\"survivorratio=n\",{\"1\":{\"363\":1}}],[\"survivor的预筛选保证\",{\"1\":{\"314\":1}}],[\"survivor区分为两块s0和s1\",{\"1\":{\"311\":1}}],[\"survivor区详解\",{\"0\":{\"311\":1}}],[\"surefire\",{\"1\":{\"691\":1}}],[\"sure\",{\"1\":{\"137\":1}}],[\"such\",{\"1\":{\"273\":1,\"294\":1}}],[\"success\",{\"1\":{\"555\":2,\"556\":3,\"557\":3}}],[\"successfully\",{\"1\":{\"143\":1}}],[\"successor\",{\"1\":{\"143\":4}}],[\"succ\",{\"1\":{\"141\":1,\"143\":7}}],[\"super\",{\"1\":{\"277\":1,\"379\":1}}],[\"superset\",{\"1\":{\"273\":1}}],[\"support\",{\"1\":{\"297\":1,\"298\":1,\"421\":1}}],[\"supports\",{\"1\":{\"139\":1}}],[\"suppresswarnings\",{\"1\":{\"110\":1}}],[\"subsequent\",{\"1\":{\"139\":1}}],[\"subtype\",{\"1\":{\"139\":1}}],[\"subnormal\",{\"1\":{\"94\":4}}],[\"sun官方推荐配置为整个堆的3\",{\"1\":{\"363\":1}}],[\"sun\",{\"1\":{\"112\":1,\"374\":6,\"407\":1}}],[\"sum方法\",{\"0\":{\"114\":1}}],[\"sum方法是用来计算两个float值之和\",{\"1\":{\"100\":1}}],[\"sum方法是用来计算两个double值之和\",{\"1\":{\"79\":1}}],[\"sum\",{\"0\":{\"79\":1,\"100\":1},\"1\":{\"79\":1,\"100\":1,\"114\":3,\"393\":2}}],[\"s∗\",{\"1\":{\"89\":1}}],[\"simple\",{\"1\":{\"143\":1,\"294\":1}}],[\"sites\",{\"1\":{\"137\":1}}],[\"singleeventexecutorpergroup\",{\"1\":{\"591\":2}}],[\"single\",{\"1\":{\"99\":1,\"101\":2,\"297\":1,\"479\":1,\"552\":4}}],[\"since\",{\"1\":{\"71\":5,\"110\":3,\"139\":1}}],[\"sizeandtimebasedrollingpolicy\",{\"1\":{\"552\":2}}],[\"sizeof\",{\"1\":{\"135\":2}}],[\"sizetable数组主要用在判断一个int型数字对应字符串的长度\",{\"1\":{\"111\":1}}],[\"sizetable\",{\"1\":{\"111\":2}}],[\"size用来表示二进制补码形式的int值的比特数\",{\"1\":{\"110\":1}}],[\"size\",{\"1\":{\"71\":3,\"91\":4,\"110\":4,\"116\":3,\"137\":1,\"139\":7,\"479\":1,\"486\":1,\"493\":1,\"552\":9,\"591\":2}}],[\"signum\",{\"1\":{\"118\":4}}],[\"signum方法\",{\"0\":{\"118\":1}}],[\"signif\",{\"1\":{\"77\":1,\"99\":1}}],[\"significand\",{\"1\":{\"77\":1,\"99\":1}}],[\"sign\",{\"1\":{\"70\":1}}],[\"sosndbuf\",{\"1\":{\"591\":1}}],[\"solinger\",{\"1\":{\"591\":1}}],[\"sokeepalive\",{\"1\":{\"591\":1}}],[\"socketchannel\",{\"1\":{\"591\":1}}],[\"socket参数\",{\"1\":{\"479\":4}}],[\"sobacklog\",{\"1\":{\"591\":1}}],[\"soreuseaddr\",{\"1\":{\"591\":2}}],[\"sorcvbuf\",{\"1\":{\"591\":2}}],[\"sort\",{\"1\":{\"139\":1}}],[\"soft\",{\"1\":{\"473\":1}}],[\"sofatars\",{\"1\":{\"503\":1}}],[\"sofastack\",{\"1\":{\"476\":1}}],[\"sofajraft等\",{\"1\":{\"467\":1}}],[\"sofa\",{\"1\":{\"5\":1,\"476\":1,\"482\":1}}],[\"something2\",{\"1\":{\"162\":1}}],[\"something1\",{\"1\":{\"162\":1,\"166\":1}}],[\"some\",{\"1\":{\"137\":1,\"291\":1,\"460\":2}}],[\"someone\",{\"1\":{\"137\":1}}],[\"so\",{\"1\":{\"137\":3,\"139\":5,\"141\":1,\"143\":3,\"479\":5}}],[\"sourceencoding>\",{\"1\":{\"545\":1,\"561\":1}}],[\"sourceencoding>utf\",{\"1\":{\"545\":1,\"561\":1}}],[\"source>\",{\"1\":{\"545\":1,\"561\":1,\"691\":1}}],[\"source>8<\",{\"1\":{\"545\":1,\"561\":1}}],[\"source\",{\"1\":{\"492\":3},\"2\":{\"63\":1,\"64\":1,\"82\":1,\"83\":1,\"103\":1,\"104\":1,\"130\":1,\"131\":1,\"145\":1,\"146\":1,\"194\":1,\"195\":1}}],[\"sys\",{\"1\":{\"479\":1}}],[\"sysprop\",{\"1\":{\"377\":1}}],[\"sys=0\",{\"1\":{\"363\":1,\"391\":1}}],[\"system能够提供分布式系统的acid\",{\"1\":{\"474\":1}}],[\"system32\",{\"1\":{\"189\":2,\"193\":2}}],[\"systems\",{\"1\":{\"143\":1}}],[\"systemdictionary\",{\"1\":{\"139\":1}}],[\"system\",{\"1\":{\"54\":4,\"57\":5,\"58\":4,\"59\":3,\"60\":2,\"61\":4,\"71\":16,\"91\":16,\"94\":1,\"95\":7,\"98\":4,\"107\":2,\"114\":3,\"115\":3,\"118\":3,\"119\":1,\"120\":2,\"137\":1,\"141\":1,\"153\":1,\"156\":1,\"158\":1,\"160\":1,\"162\":3,\"164\":1,\"166\":2,\"169\":1,\"170\":4,\"174\":2,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"187\":1,\"188\":1,\"189\":3,\"191\":1,\"192\":2,\"193\":3,\"275\":1,\"295\":1,\"302\":2,\"325\":1,\"368\":4,\"388\":2,\"441\":2}}],[\"synccollection\",{\"1\":{\"442\":3}}],[\"syncflags\",{\"1\":{\"143\":2}}],[\"sync\",{\"1\":{\"141\":2}}],[\"synchronizedcollection\",{\"1\":{\"442\":1}}],[\"synchronized\",{\"1\":{\"187\":1,\"191\":1,\"368\":4,\"445\":2,\"446\":1,\"447\":1}}],[\"synchronizer\",{\"1\":{\"137\":1,\"141\":1}}],[\"synchronization\",{\"1\":{\"5\":1,\"137\":1}}],[\"s\",{\"1\":{\"52\":2,\"53\":2,\"54\":3,\"70\":1,\"73\":2,\"74\":2,\"75\":2,\"93\":2,\"94\":2,\"95\":2,\"96\":2,\"110\":2,\"111\":1,\"137\":2,\"139\":1,\"141\":3,\"143\":5,\"294\":3,\"297\":2,\"474\":1,\"555\":3,\"556\":3,\"557\":3}}],[\"stopped\",{\"1\":{\"393\":1}}],[\"stop\",{\"1\":{\"346\":2,\"393\":1,\"402\":1}}],[\"stores\",{\"1\":{\"294\":1,\"296\":1}}],[\"store\",{\"1\":{\"139\":1,\"143\":1}}],[\"storage\",{\"1\":{\"137\":1,\"295\":1}}],[\"still\",{\"1\":{\"143\":1}}],[\"strategy\",{\"1\":{\"486\":1,\"592\":1,\"593\":1}}],[\"stream\",{\"1\":{\"486\":3,\"492\":1,\"493\":2,\"506\":2}}],[\"strong\",{\"1\":{\"460\":1}}],[\"str\",{\"1\":{\"283\":1}}],[\"structures\",{\"1\":{\"294\":1,\"393\":1}}],[\"structure\",{\"1\":{\"143\":1,\"291\":1}}],[\"strict\",{\"1\":{\"461\":1,\"468\":1}}],[\"strictly\",{\"1\":{\"137\":1}}],[\"stringutils\",{\"1\":{\"486\":1}}],[\"string>\",{\"1\":{\"443\":1}}],[\"strings\",{\"1\":{\"174\":1}}],[\"stringsize\",{\"1\":{\"111\":1,\"116\":2}}],[\"stringtokenizer\",{\"1\":{\"172\":2,\"173\":2}}],[\"string\",{\"1\":{\"52\":1,\"53\":1,\"54\":1,\"56\":2,\"57\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"93\":1,\"94\":5,\"95\":2,\"96\":1,\"112\":1,\"115\":6,\"116\":5,\"120\":2,\"134\":1,\"172\":12,\"173\":8,\"174\":2,\"187\":2,\"188\":3,\"191\":2,\"192\":2,\"275\":3,\"283\":1,\"302\":9,\"318\":1,\"322\":1,\"325\":1,\"368\":1,\"440\":2,\"441\":1,\"486\":3,\"487\":4,\"488\":1,\"491\":4,\"493\":1,\"505\":2,\"506\":1,\"558\":1,\"562\":3,\"568\":1,\"569\":1}}],[\"st\",{\"1\":{\"143\":2,\"172\":4}}],[\"stubroutines\",{\"1\":{\"139\":1}}],[\"stwrandom\",{\"1\":{\"137\":1}}],[\"stw\",{\"1\":{\"137\":2}}],[\"stdout\",{\"1\":{\"552\":4}}],[\"std\",{\"1\":{\"69\":1,\"88\":1}}],[\"stash\",{\"1\":{\"666\":8}}],[\"standalone\",{\"1\":{\"554\":1}}],[\"standard\",{\"1\":{\"273\":2}}],[\"started\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"starter<\",{\"1\":{\"537\":1,\"545\":1,\"566\":1}}],[\"starter\",{\"1\":{\"537\":6,\"541\":1,\"545\":7,\"561\":1,\"566\":4}}],[\"startup\",{\"1\":{\"374\":1,\"554\":1,\"692\":2}}],[\"starts\",{\"1\":{\"189\":1,\"193\":1}}],[\"start\",{\"1\":{\"172\":1,\"291\":1,\"294\":1,\"295\":1,\"368\":2,\"393\":1,\"442\":2,\"555\":1,\"556\":1,\"557\":1,\"595\":1,\"596\":1}}],[\"starting\",{\"1\":{\"170\":1,\"189\":1,\"193\":1,\"555\":2,\"556\":2,\"557\":2}}],[\"stale\",{\"1\":{\"143\":2}}],[\"stalled\",{\"1\":{\"143\":4}}],[\"stage\",{\"1\":{\"139\":1}}],[\"stable\",{\"1\":{\"137\":1,\"143\":1}}],[\"stackoverflowdemo\",{\"1\":{\"325\":1}}],[\"stackoverflowerror\",{\"1\":{\"296\":2}}],[\"stacks\",{\"0\":{\"296\":1,\"298\":1},\"1\":{\"296\":1,\"298\":2,\"379\":2,\"393\":1}}],[\"stack\",{\"1\":{\"137\":2,\"139\":1,\"296\":4,\"302\":2,\"327\":1,\"377\":1}}],[\"status2\",{\"1\":{\"651\":1}}],[\"status查看信息\",{\"1\":{\"638\":1}}],[\"status\",{\"0\":{\"651\":1},\"1\":{\"153\":3,\"164\":3,\"508\":6,\"509\":6,\"638\":2,\"651\":1,\"666\":2}}],[\"stateperthread\",{\"1\":{\"441\":2}}],[\"stateholder\",{\"1\":{\"441\":5}}],[\"state\",{\"1\":{\"137\":3,\"143\":4,\"441\":1,\"458\":1,\"460\":1,\"473\":1}}],[\"static成员\",{\"1\":{\"331\":1,\"334\":1}}],[\"static\",{\"1\":{\"49\":2,\"53\":2,\"54\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"71\":10,\"74\":2,\"75\":1,\"76\":3,\"77\":1,\"78\":2,\"79\":4,\"91\":10,\"94\":1,\"95\":2,\"96\":1,\"97\":1,\"98\":2,\"99\":1,\"100\":3,\"101\":2,\"110\":5,\"111\":5,\"112\":6,\"114\":3,\"115\":3,\"116\":2,\"117\":1,\"118\":1,\"119\":1,\"120\":4,\"121\":2,\"122\":2,\"123\":1,\"124\":1,\"125\":1,\"134\":2,\"135\":1,\"137\":1,\"168\":1,\"275\":2,\"282\":1,\"284\":1,\"294\":1,\"302\":8,\"305\":1,\"321\":1,\"325\":3,\"368\":3,\"379\":1,\"437\":1,\"439\":1,\"441\":2,\"485\":2,\"491\":1,\"496\":2,\"568\":1}}],[\"stay\",{\"1\":{\"16\":2}}],[\"shell\",{\"1\":{\"692\":1}}],[\"shenyu基准测试\",{\"0\":{\"578\":1}}],[\"shenyu是一个异步的\",{\"1\":{\"579\":1}}],[\"shenyu是一款支持多语言\",{\"1\":{\"482\":1,\"503\":1}}],[\"shenyu是如何将应用资源交予sentinel管理的\",{\"0\":{\"509\":1}}],[\"shenyu是如何获取应用错误并进行流控\",{\"0\":{\"507\":1}}],[\"shenyu通过org\",{\"1\":{\"506\":1}}],[\"shenyu通过rule中获取selectorid和ruleid\",{\"1\":{\"505\":1}}],[\"shenyu中整合sentinel的源码分析\",{\"1\":{\"503\":1}}],[\"shenyu整合sentinel源码分析\",{\"0\":{\"502\":1,\"504\":1}}],[\"shenyu将会从默认缓存中删除选择器和规则的数据\",{\"1\":{\"499\":1}}],[\"shenyu将会根据pluginname删除当前插件相关的selector缓存和rule缓存\",{\"1\":{\"488\":1}}],[\"shenyu默认的缓存是在网关启动后\",{\"1\":{\"497\":1}}],[\"shenyu二级缓存只有在selector\",{\"1\":{\"495\":1}}],[\"shenyu删除前缀树主要有两种方案\",{\"1\":{\"494\":1}}],[\"shenyu前缀树的匹配逻辑大致如下\",{\"1\":{\"493\":1}}],[\"shenyutrielistener\",{\"1\":{\"492\":1}}],[\"shenyutrie\",{\"1\":{\"491\":2,\"492\":3}}],[\"shenyutrienode的数据结构设计如下\",{\"1\":{\"491\":1}}],[\"shenyutrienode>\",{\"1\":{\"491\":4}}],[\"shenyutrienode\",{\"1\":{\"486\":4,\"491\":4,\"493\":4}}],[\"shenyu不会将数据缓存到一级缓存中\",{\"1\":{\"489\":1}}],[\"shenyu的默认缓存匹配是通过spi实现的匹配\",{\"1\":{\"498\":1}}],[\"shenyu的前缀树的keyrootmap是一个map<string\",{\"1\":{\"491\":1}}],[\"shenyu的前缀树支持两种匹配模式\",{\"1\":{\"491\":1}}],[\"shenyu的前缀树主要包含了由caffeine实现的keyrootmap和匹配模式\",{\"1\":{\"491\":1}}],[\"shenyu的二级缓存是基于caffeine实现的windowlfumap实现的前缀树缓存\",{\"1\":{\"491\":1}}],[\"shenyu的一级缓存只有在rule\",{\"1\":{\"489\":1}}],[\"shenyu的匹配缓存主要由3级缓存构成\",{\"1\":{\"482\":1}}],[\"shenyu同时也会删除当前selector相关的rule缓存\",{\"1\":{\"488\":1}}],[\"shenyu会首先从sentinel中获取流控\",{\"1\":{\"506\":1}}],[\"shenyu会根据插件名称和ruleid删除当前rule相关的缓存数据\",{\"1\":{\"488\":1}}],[\"shenyu会根据插件名称和selectorid删除当前selector相关的缓存数据\",{\"1\":{\"488\":1}}],[\"shenyu会将当前selector或者rule相关的数据删除\",{\"1\":{\"488\":2}}],[\"shenyupluginchain\",{\"1\":{\"487\":1,\"498\":1}}],[\"shenyuplugin\",{\"1\":{\"486\":1,\"487\":1,\"493\":1,\"498\":1}}],[\"shenyu为selector和rule都设计了一级缓存\",{\"1\":{\"485\":1}}],[\"shenyu匹配缓存设计分析\",{\"0\":{\"481\":1}}],[\"shenyu导师\",{\"1\":{\"4\":1}}],[\"shenyu\",{\"0\":{\"579\":1,\"580\":1,\"582\":1,\"583\":1,\"715\":1},\"1\":{\"4\":1,\"486\":1,\"487\":1,\"493\":2,\"506\":2,\"583\":2,\"589\":2,\"595\":2,\"596\":2,\"597\":1},\"2\":{\"500\":1,\"501\":1,\"511\":1,\"605\":1,\"606\":1}}],[\"sh<\",{\"1\":{\"690\":1}}],[\"sh\",{\"1\":{\"374\":2,\"554\":1,\"595\":1,\"596\":1,\"692\":1}}],[\"shutdownhooks\",{\"1\":{\"156\":1,\"160\":1}}],[\"shutdown\",{\"1\":{\"153\":1,\"158\":1,\"162\":2,\"164\":2,\"166\":1}}],[\"shift\",{\"1\":{\"137\":1}}],[\"shifts++\",{\"1\":{\"120\":2}}],[\"shifts\",{\"1\":{\"120\":4}}],[\"shortest\",{\"1\":{\"381\":1}}],[\"short\",{\"1\":{\"143\":1}}],[\"should\",{\"1\":{\"137\":3,\"139\":3,\"141\":1,\"143\":6,\"174\":1,\"191\":1,\"460\":1}}],[\"show\",{\"1\":{\"15\":1}}],[\"shaded\",{\"1\":{\"416\":1}}],[\"shallow\",{\"1\":{\"139\":1,\"381\":1}}],[\"shared\",{\"1\":{\"143\":1,\"294\":1,\"295\":1}}],[\"share\",{\"1\":{\"136\":1,\"137\":2,\"141\":1}}],[\"shardingshere\",{\"1\":{\"5\":1}}],[\"shanghai\",{\"1\":{\"16\":1,\"547\":1,\"550\":1,\"551\":1}}],[\"sentinelreactortransformer<>\",{\"1\":{\"509\":3}}],[\"sentinelrulehandle\",{\"1\":{\"506\":2}}],[\"sentinelrulehandle接收插件所配置的限流\",{\"1\":{\"506\":1}}],[\"sentinelfallbackexception\",{\"1\":{\"508\":1,\"509\":1}}],[\"sentinelhandle\",{\"1\":{\"506\":18,\"509\":1}}],[\"sentinel\",{\"1\":{\"506\":4},\"2\":{\"511\":1}}],[\"sentinel加载shenyu配置的限流\",{\"0\":{\"506\":1}}],[\"sentinel是阿里巴巴开源的一款流量控制组件\",{\"1\":{\"503\":1}}],[\"sends\",{\"1\":{\"460\":1}}],[\"sensitivity\",{\"1\":{\"137\":2}}],[\"sequential\",{\"0\":{\"462\":1},\"1\":{\"460\":2,\"463\":1,\"465\":3,\"476\":1}}],[\"sequence\",{\"1\":{\"137\":1}}],[\"segmentfault\",{\"1\":{\"448\":1,\"452\":1}}],[\"session\",{\"1\":{\"377\":1,\"470\":1}}],[\"se8\",{\"1\":{\"277\":1,\"302\":2}}],[\"se\",{\"1\":{\"273\":1}}],[\"separator\",{\"1\":{\"191\":1}}],[\"separatorchar\",{\"1\":{\"191\":1}}],[\"secs\",{\"1\":{\"363\":3,\"391\":2,\"393\":1}}],[\"seconds\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"second\",{\"1\":{\"174\":1}}],[\"security\",{\"1\":{\"153\":3,\"187\":3,\"191\":3}}],[\"securitymanager\",{\"1\":{\"153\":1,\"156\":1,\"160\":1,\"164\":1,\"187\":1,\"191\":1}}],[\"section\",{\"1\":{\"118\":1,\"122\":1,\"141\":2}}],[\"see\",{\"1\":{\"139\":1,\"143\":1}}],[\"seen\",{\"1\":{\"137\":1,\"460\":1}}],[\"selectcount\",{\"1\":{\"591\":1}}],[\"selectorenabled\",{\"1\":{\"591\":1}}],[\"selectors\",{\"1\":{\"498\":1}}],[\"selector和rule都是基于concurrenthashmap实现的缓存\",{\"1\":{\"496\":1}}],[\"selectorid\",{\"1\":{\"491\":3,\"496\":1}}],[\"selectormatchconfig\",{\"1\":{\"487\":1,\"488\":3,\"492\":1,\"494\":1}}],[\"selectordata\",{\"1\":{\"486\":4,\"487\":4,\"488\":18,\"492\":7,\"493\":4,\"494\":2,\"496\":1,\"497\":7,\"498\":1,\"499\":7}}],[\"selectordata>>\",{\"1\":{\"485\":1}}],[\"selectordata>\",{\"1\":{\"485\":1,\"487\":1}}],[\"selector>>数据存入一级缓存中\",{\"1\":{\"486\":1}}],[\"selector\",{\"1\":{\"485\":2,\"487\":1,\"488\":1,\"491\":2,\"492\":4,\"494\":2,\"496\":1,\"591\":1}}],[\"select\",{\"1\":{\"137\":1}}],[\"self\",{\"1\":{\"137\":18,\"141\":2,\"143\":28}}],[\"setminrequestamount\",{\"1\":{\"506\":1}}],[\"setmaxqueueingtimems\",{\"1\":{\"506\":1}}],[\"settimewindow\",{\"1\":{\"506\":1}}],[\"setter\",{\"1\":{\"440\":1}}],[\"setwarmupperiodsec\",{\"1\":{\"506\":1}}],[\"setcontrolbehavior\",{\"1\":{\"506\":1}}],[\"setcount\",{\"1\":{\"506\":2}}],[\"setgrade\",{\"1\":{\"506\":2}}],[\"setslowratiothreshold\",{\"1\":{\"506\":1}}],[\"setstatintervalms\",{\"1\":{\"506\":1}}],[\"sets\",{\"1\":{\"393\":1}}],[\"set\",{\"0\":{\"211\":1,\"225\":1,\"240\":1,\"260\":1},\"1\":{\"137\":3,\"139\":3,\"143\":2,\"591\":1,\"672\":1}}],[\"setproperty\",{\"1\":{\"57\":2,\"115\":1}}],[\"servlet\",{\"1\":{\"555\":4,\"556\":4,\"557\":4}}],[\"serversocketchannel\",{\"1\":{\"591\":1}}],[\"servertimezone=asia\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"serverwebexchange\",{\"1\":{\"486\":2,\"487\":1,\"493\":1,\"498\":2}}],[\"serverchannel需要接受足够多的连接\",{\"1\":{\"479\":1}}],[\"server\",{\"1\":{\"356\":1,\"374\":1,\"458\":1,\"508\":1,\"509\":1,\"547\":2,\"548\":2,\"549\":2,\"550\":1,\"551\":1,\"555\":1,\"556\":1,\"557\":1,\"567\":2,\"591\":1,\"597\":1}}],[\"service字段\",{\"1\":{\"479\":1}}],[\"services\",{\"1\":{\"465\":1}}],[\"service\",{\"1\":{\"5\":1,\"547\":1,\"549\":1,\"550\":1,\"551\":1,\"562\":3,\"567\":1}}],[\"serialversionuid\",{\"1\":{\"491\":1}}],[\"serializability是数据库领域的概念\",{\"1\":{\"468\":1}}],[\"serializability\",{\"0\":{\"468\":1},\"1\":{\"468\":2,\"476\":1}}],[\"serializable的含义是\",{\"1\":{\"468\":1}}],[\"serializable接口\",{\"1\":{\"238\":1,\"239\":1,\"241\":1,\"243\":1,\"248\":1,\"250\":1}}],[\"serializable\",{\"1\":{\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"491\":1}}],[\"serial\",{\"0\":{\"344\":1},\"1\":{\"344\":1}}],[\"serial收集器是最基本\",{\"1\":{\"341\":1}}],[\"serial收集器\",{\"0\":{\"341\":1}}],[\"serence\",{\"1\":{\"15\":2}}],[\"search\",{\"1\":{\"5\":1}}],[\"md\",{\"0\":{\"707\":1}}],[\"mm\",{\"1\":{\"552\":4}}],[\"mvn目录以及其他无用文件\",{\"1\":{\"542\":1}}],[\"mvn\",{\"1\":{\"415\":1}}],[\"mb\",{\"1\":{\"362\":1,\"363\":5}}],[\"mw\",{\"1\":{\"321\":6}}],[\"ms\",{\"1\":{\"143\":4,\"363\":1,\"393\":4,\"555\":1,\"556\":1,\"557\":1,\"571\":1,\"602\":6,\"603\":6,\"604\":6}}],[\"msg\",{\"1\":{\"139\":1,\"143\":1,\"479\":1,\"552\":1}}],[\"mp\",{\"1\":{\"137\":1,\"141\":1,\"143\":1}}],[\"multicast\",{\"1\":{\"479\":8}}],[\"multiprocess\",{\"1\":{\"462\":1}}],[\"multiprocessor\",{\"1\":{\"462\":1}}],[\"multiply\",{\"1\":{\"439\":1}}],[\"multi\",{\"1\":{\"457\":3}}],[\"mutator\",{\"1\":{\"137\":1}}],[\"must\",{\"1\":{\"112\":1,\"137\":1,\"139\":2,\"143\":4,\"460\":1}}],[\"m\",{\"1\":{\"111\":1,\"139\":2,\"554\":1,\"644\":2,\"652\":1,\"665\":3,\"672\":2,\"679\":1}}],[\"mavan打包工具的使用\",{\"0\":{\"687\":1}}],[\"maven对springboot项目配置文件\",{\"0\":{\"689\":1}}],[\"maven2<\",{\"1\":{\"537\":1}}],[\"maven\",{\"0\":{\"686\":1},\"1\":{\"537\":7,\"541\":5,\"545\":7,\"561\":6,\"566\":5,\"691\":6},\"2\":{\"688\":1,\"694\":1,\"695\":1}}],[\"maven编译\",{\"1\":{\"415\":1,\"691\":1}}],[\"macos\",{\"1\":{\"623\":1}}],[\"mac\",{\"1\":{\"611\":1}}],[\"machine\",{\"0\":{\"296\":1},\"1\":{\"137\":2,\"273\":1,\"291\":4,\"294\":5,\"295\":4,\"296\":8,\"297\":6,\"298\":1,\"458\":1}}],[\"matchcache\",{\"1\":{\"591\":1}}],[\"matchstrategyfactory\",{\"1\":{\"498\":1}}],[\"matchstr\",{\"1\":{\"491\":1}}],[\"matchmode\",{\"1\":{\"491\":4,\"591\":1}}],[\"match的时候才会使用\",{\"1\":{\"489\":1}}],[\"matchrulepair\",{\"1\":{\"486\":4}}],[\"matchrule\",{\"1\":{\"486\":2,\"493\":1}}],[\"match\",{\"1\":{\"486\":4,\"488\":1,\"491\":7,\"493\":2,\"498\":1}}],[\"matchdatacache\",{\"1\":{\"486\":2,\"487\":3,\"488\":14}}],[\"mat\",{\"0\":{\"378\":1},\"1\":{\"378\":1}}],[\"mathutils\",{\"1\":{\"439\":1}}],[\"math\",{\"1\":{\"71\":4,\"76\":1,\"79\":2,\"81\":1,\"91\":3,\"94\":2,\"98\":1,\"100\":2,\"102\":1,\"112\":2,\"114\":2}}],[\"manifestentries>\",{\"1\":{\"691\":1}}],[\"manifest>\",{\"1\":{\"691\":1}}],[\"manager\",{\"1\":{\"374\":5}}],[\"management\",{\"1\":{\"295\":1,\"374\":6,\"547\":1,\"550\":1,\"551\":1}}],[\"many\",{\"1\":{\"137\":1,\"297\":1}}],[\"magic\",{\"1\":{\"277\":1}}],[\"mappers\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"mapper\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"mapping\",{\"1\":{\"491\":1}}],[\"map中的key是selectorid\",{\"1\":{\"496\":1}}],[\"map中key是pluginname\",{\"1\":{\"496\":1}}],[\"maps\",{\"1\":{\"485\":2,\"487\":1,\"496\":2}}],[\"map<string\",{\"1\":{\"443\":1,\"485\":2,\"487\":1,\"491\":4}}],[\"map\",{\"0\":{\"247\":1},\"1\":{\"443\":2,\"485\":4,\"487\":1,\"492\":1,\"496\":2}}],[\"map主要用用于存储键值对数据\",{\"1\":{\"206\":1,\"220\":1,\"234\":1,\"255\":1}}],[\"made\",{\"1\":{\"143\":2,\"294\":1,\"295\":1,\"296\":2}}],[\"mar\",{\"1\":{\"571\":1}}],[\"marsaglia\",{\"1\":{\"137\":1}}],[\"markdown\",{\"1\":{\"623\":1},\"2\":{\"628\":1}}],[\"markdown笔记工具推荐\",{\"0\":{\"609\":1}}],[\"marking\",{\"1\":{\"347\":3}}],[\"mark\",{\"0\":{\"336\":1,\"338\":1},\"1\":{\"137\":18,\"139\":2,\"141\":3,\"346\":3,\"479\":2}}],[\"markoopdesc\",{\"1\":{\"137\":2,\"143\":1}}],[\"markoop\",{\"1\":{\"137\":4,\"141\":1}}],[\"make\",{\"1\":{\"136\":1,\"137\":2,\"139\":2,\"141\":1,\"462\":1,\"586\":2}}],[\"may\",{\"1\":{\"112\":1,\"137\":1,\"139\":1,\"143\":2,\"294\":1,\"298\":1,\"460\":1}}],[\"mask\",{\"1\":{\"77\":3,\"99\":3,\"137\":1}}],[\"master推送到github\",{\"1\":{\"679\":1}}],[\"master分支是主分支\",{\"1\":{\"671\":1}}],[\"master分支数据如上\",{\"1\":{\"664\":1}}],[\"master分支\",{\"1\":{\"638\":1}}],[\"master\",{\"1\":{\"15\":1,\"409\":1,\"662\":1,\"665\":1,\"671\":1,\"679\":2}}],[\"mainclass>\",{\"1\":{\"691\":1}}],[\"main\",{\"1\":{\"76\":1,\"120\":2,\"302\":2,\"325\":1,\"368\":1,\"547\":1,\"548\":1,\"549\":1,\"555\":14,\"556\":16,\"557\":16,\"568\":1,\"690\":2,\"691\":1}}],[\"maxconnections\",{\"1\":{\"592\":1,\"593\":1}}],[\"maxidletime\",{\"1\":{\"592\":1,\"593\":1}}],[\"maxinmemorysize\",{\"1\":{\"592\":1,\"593\":1}}],[\"maximumsize\",{\"1\":{\"486\":3,\"591\":2}}],[\"maximum\",{\"1\":{\"77\":1,\"99\":1,\"110\":1}}],[\"maxhistory>\",{\"1\":{\"552\":2}}],[\"maxheapsize=1000\",{\"1\":{\"359\":1}}],[\"maxfilesize>\",{\"1\":{\"552\":2}}],[\"maxtenuringthreshold=0\",{\"1\":{\"363\":1}}],[\"maxtenuringthreshold=n\",{\"1\":{\"363\":1}}],[\"maxtest\",{\"1\":{\"114\":1}}],[\"maxpermsize=16m\",{\"1\":{\"363\":1}}],[\"maxpermsize=n\",{\"1\":{\"363\":1}}],[\"maxgcpausemillis=20\",{\"1\":{\"398\":1}}],[\"maxgcpausemillis=100设置每次年轻代垃圾回收的最长时间为100\",{\"1\":{\"363\":1}}],[\"maxgcpausemillis=100\",{\"1\":{\"363\":2}}],[\"maxgcpausemillis=500\",{\"1\":{\"358\":1}}],[\"maxgcpausemillis\",{\"1\":{\"363\":1}}],[\"maxgcpausemillis控制最大的垃圾收集停顿时间\",{\"1\":{\"343\":1}}],[\"maxmemory\",{\"1\":{\"177\":3}}],[\"maxmemory方法\",{\"0\":{\"177\":1}}],[\"max方法是用来查找两个float值的最大值\",{\"1\":{\"100\":1}}],[\"max方法是用来查找两个double值的最大值\",{\"1\":{\"79\":1}}],[\"max\",{\"0\":{\"79\":1,\"100\":1,\"114\":1},\"1\":{\"71\":8,\"76\":1,\"79\":2,\"91\":6,\"94\":1,\"98\":1,\"100\":2,\"110\":1,\"111\":1,\"112\":3,\"114\":4,\"116\":1,\"177\":1,\"393\":3,\"479\":1,\"552\":8,\"591\":2}}],[\"major\",{\"1\":{\"5\":1,\"277\":3,\"314\":2,\"402\":2}}],[\"mylock\",{\"1\":{\"368\":5}}],[\"mysql\",{\"1\":{\"473\":1,\"545\":2,\"547\":2,\"550\":2,\"551\":2},\"2\":{\"42\":1}}],[\"mysql知识体系\",{\"0\":{\"41\":1}}],[\"mybaits\",{\"2\":{\"34\":1,\"36\":1}}],[\"mybatis\",{\"0\":{\"33\":1,\"35\":1},\"1\":{\"545\":2,\"547\":4,\"550\":4,\"551\":4}}],[\"myqcloud\",{\"1\":{\"16\":1}}],[\"my\",{\"0\":{\"10\":1}}],[\"mock\",{\"1\":{\"589\":1}}],[\"mock服务器配置\",{\"0\":{\"581\":1}}],[\"motan\",{\"1\":{\"482\":1,\"503\":1}}],[\"module1下建立测试项目moremind\",{\"1\":{\"565\":1}}],[\"module1<\",{\"1\":{\"541\":3,\"545\":1,\"561\":1,\"566\":1}}],[\"module1初始化\",{\"0\":{\"540\":1}}],[\"module1\",{\"0\":{\"539\":1,\"543\":1,\"544\":1,\"545\":1,\"550\":1,\"551\":1,\"559\":1,\"560\":1,\"561\":1,\"563\":1,\"565\":1,\"566\":1},\"1\":{\"545\":1,\"547\":6,\"548\":6,\"549\":5,\"552\":1,\"555\":3,\"556\":3,\"557\":3,\"558\":1,\"561\":2,\"562\":8,\"563\":1,\"565\":1,\"566\":4,\"567\":2,\"568\":1,\"569\":2}}],[\"modular\",{\"1\":{\"465\":1}}],[\"modelversion>\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":1}}],[\"mode\",{\"1\":{\"491\":1}}],[\"modify\",{\"1\":{\"143\":1}}],[\"modifying\",{\"1\":{\"139\":1}}],[\"moment\",{\"1\":{\"379\":1}}],[\"movenotifyee\",{\"1\":{\"141\":1}}],[\"move\",{\"1\":{\"139\":1,\"141\":1}}],[\"more\",{\"1\":{\"137\":1,\"295\":1}}],[\"moremindexamplemodule1consumerapplication\",{\"1\":{\"568\":2}}],[\"moremindexamplemodule1apiapplication\",{\"1\":{\"555\":3,\"556\":3,\"557\":3}}],[\"moremind<\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"561\":1,\"566\":2}}],[\"moremind\",{\"0\":{\"540\":1,\"544\":1,\"545\":1,\"560\":1,\"561\":1,\"565\":1,\"566\":1},\"1\":{\"6\":1,\"16\":2,\"555\":4,\"556\":4,\"557\":4,\"558\":3,\"562\":3,\"567\":1,\"568\":3,\"569\":3,\"571\":1,\"573\":2,\"691\":1}}],[\"moremind的博客记录\",{\"0\":{\"1\":1}}],[\"most\",{\"1\":{\"137\":1}}],[\"mono<void>\",{\"1\":{\"487\":1,\"498\":1}}],[\"monotonic\",{\"1\":{\"470\":2}}],[\"monitors\",{\"1\":{\"143\":1}}],[\"monitornotifyall\",{\"1\":{\"135\":1}}],[\"monitornotify\",{\"1\":{\"135\":1,\"141\":3}}],[\"monitorwait\",{\"1\":{\"135\":1,\"143\":3}}],[\"monitor\",{\"1\":{\"5\":1,\"137\":13,\"141\":2,\"143\":34,\"377\":1,\"445\":1}}],[\"mongodb\",{\"1\":{\"5\":1,\"470\":1,\"472\":1}}],[\"meant\",{\"1\":{\"143\":2}}],[\"means\",{\"1\":{\"143\":3,\"491\":2}}],[\"metaspacesize=100m\",{\"1\":{\"398\":1}}],[\"metaspace\",{\"1\":{\"323\":1}}],[\"metaspaceutil\",{\"1\":{\"321\":3,\"322\":1}}],[\"metadata\",{\"1\":{\"139\":2}}],[\"methodvisitor\",{\"1\":{\"321\":1}}],[\"methodhandle\",{\"1\":{\"139\":1}}],[\"method\",{\"0\":{\"294\":1,\"298\":1},\"1\":{\"139\":10,\"277\":1,\"294\":6,\"297\":4,\"302\":4,\"323\":1,\"325\":3}}],[\"methods\",{\"1\":{\"135\":4,\"277\":3,\"294\":2,\"298\":2}}],[\"memcache\",{\"2\":{\"697\":1}}],[\"memecache\",{\"0\":{\"696\":1}}],[\"membar\",{\"1\":{\"143\":1}}],[\"member\",{\"1\":{\"139\":1}}],[\"membername\",{\"1\":{\"139\":4}}],[\"membernames\",{\"1\":{\"139\":1}}],[\"memregion\",{\"1\":{\"139\":1}}],[\"memory\",{\"1\":{\"137\":2,\"294\":1,\"295\":1,\"296\":2}}],[\"mechanism\",{\"1\":{\"137\":1}}],[\"merger\",{\"1\":{\"663\":1}}],[\"merge\",{\"1\":{\"137\":2,\"663\":3,\"664\":1,\"665\":4}}],[\"me\",{\"1\":{\"15\":1,\"448\":1}}],[\"messagesizeestimator\",{\"1\":{\"591\":2}}],[\"messages\",{\"1\":{\"460\":1,\"479\":1}}],[\"messageservice\",{\"1\":{\"440\":4}}],[\"message\",{\"0\":{\"722\":1},\"1\":{\"5\":1,\"174\":2,\"440\":4,\"479\":1}}],[\"mentor\",{\"1\":{\"4\":1}}],[\"mixedgc调优\",{\"1\":{\"399\":1}}],[\"millis\",{\"1\":{\"143\":9}}],[\"miller\",{\"1\":{\"137\":1}}],[\"misaligned\",{\"1\":{\"139\":1}}],[\"misc\",{\"1\":{\"112\":1}}],[\"middle\",{\"1\":{\"139\":1}}],[\"middleware\",{\"0\":{\"713\":1},\"1\":{\"5\":2}}],[\"might\",{\"1\":{\"137\":1,\"139\":1,\"141\":1,\"143\":1}}],[\"mirror\",{\"1\":{\"136\":1}}],[\"minor\",{\"1\":{\"277\":3,\"310\":1,\"311\":1,\"314\":1}}],[\"minobjalignmentinbytes\",{\"1\":{\"139\":1}}],[\"minimum\",{\"1\":{\"110\":1,\"139\":1}}],[\"min方法是用来查找两个float值的最小值\",{\"1\":{\"100\":1}}],[\"min方法是用来查找两个double值的最小值\",{\"1\":{\"79\":1}}],[\"min方法\",{\"0\":{\"79\":1,\"100\":1}}],[\"min\",{\"0\":{\"114\":1},\"1\":{\"71\":9,\"79\":2,\"91\":8,\"94\":4,\"100\":2,\"110\":3,\"112\":1,\"114\":4,\"116\":2,\"393\":3}}],[\"microsoft\",{\"1\":{\"462\":1}}],[\"micro\",{\"1\":{\"5\":1}}],[\"gpg\",{\"1\":{\"678\":1}}],[\"gpl\",{\"1\":{\"611\":1}}],[\"gps\",{\"1\":{\"461\":1}}],[\"gz<\",{\"1\":{\"690\":1}}],[\"gz\",{\"1\":{\"595\":1,\"596\":1,\"690\":1}}],[\"gmt\",{\"1\":{\"571\":1}}],[\"gsonutils\",{\"1\":{\"506\":1}}],[\"gsoc\",{\"1\":{\"4\":1}}],[\"gsf\",{\"1\":{\"458\":1}}],[\"gb\",{\"1\":{\"363\":1}}],[\"g1与cms的区别是什么\",{\"1\":{\"402\":1}}],[\"g1oldcsetregionthresholdpercent\",{\"1\":{\"399\":1}}],[\"g1mixedgccounttarger\",{\"1\":{\"399\":1}}],[\"g1mixedgclivethresholdpercent\",{\"1\":{\"399\":1}}],[\"g1用它来触发并发gc周期\",{\"1\":{\"398\":1}}],[\"g1调优与最佳指南\",{\"0\":{\"397\":1}}],[\"g1日志\",{\"0\":{\"393\":1}}],[\"g1收集\",{\"1\":{\"350\":1}}],[\"g1收集器在运行过程中\",{\"1\":{\"399\":1}}],[\"g1收集器\",{\"0\":{\"347\":1}}],[\"g1\",{\"1\":{\"348\":1,\"363\":1,\"393\":3,\"398\":2,\"399\":1,\"402\":2}}],[\"g1特点\",{\"1\":{\"347\":1}}],[\"griead可以自定义主题或使用在线主题\",{\"1\":{\"624\":1}}],[\"gridea的使用文档\",{\"0\":{\"626\":1}}],[\"gridea的特性\",{\"0\":{\"623\":1}}],[\"gridea在本地写好博客文件后即可预览\",{\"1\":{\"624\":1}}],[\"gridea下载\",{\"0\":{\"622\":1}}],[\"gridea\",{\"0\":{\"620\":1},\"1\":{\"621\":1,\"622\":2,\"626\":1}}],[\"green\",{\"1\":{\"552\":1}}],[\"greenwich\",{\"1\":{\"534\":2}}],[\"grep\",{\"1\":{\"374\":1}}],[\"grpc\",{\"1\":{\"482\":1,\"503\":1}}],[\"groupid\",{\"1\":{\"690\":2}}],[\"groupid>\",{\"1\":{\"321\":1,\"537\":12,\"541\":2,\"545\":12,\"561\":2,\"566\":9,\"691\":7}}],[\"group=default\",{\"1\":{\"556\":2,\"557\":2}}],[\"group=group\",{\"1\":{\"547\":2,\"548\":2,\"549\":2}}],[\"groups\",{\"1\":{\"537\":2}}],[\"group\",{\"1\":{\"479\":1,\"547\":5,\"548\":6,\"549\":6,\"555\":1,\"556\":3,\"557\":3}}],[\"graph\",{\"1\":{\"665\":1}}],[\"gradlew\",{\"1\":{\"415\":1}}],[\"gradle编译\",{\"1\":{\"415\":1}}],[\"grabbing\",{\"1\":{\"143\":1}}],[\"grabs\",{\"1\":{\"141\":1}}],[\"garbage\",{\"0\":{\"331\":1},\"1\":{\"294\":1,\"310\":1,\"379\":1}}],[\"guest\",{\"1\":{\"374\":3}}],[\"guides\",{\"1\":{\"273\":1,\"398\":1,\"399\":1}}],[\"guarantee\",{\"1\":{\"139\":3,\"141\":2,\"143\":5}}],[\"git不但会把本地的master分支内容推送的远程新的master分支\",{\"1\":{\"679\":1}}],[\"git多人合作开发操作命令\",{\"0\":{\"669\":1}}],[\"git还提供了一个stash功能\",{\"1\":{\"666\":1}}],[\"git都是用master分支作为主线\",{\"1\":{\"661\":1}}],[\"git会提示你有文件需要git\",{\"1\":{\"638\":1}}],[\"git已经为我们创建了一个master分支\",{\"1\":{\"638\":1}}],[\"git隐藏目录\",{\"1\":{\"638\":2}}],[\"git隐藏目录下并非工作区\",{\"1\":{\"637\":1}}],[\"gitrepository\",{\"1\":{\"632\":1}}],[\"gitrepository里面的文件\",{\"1\":{\"632\":1}}],[\"git是一个分布式版本控制系统\",{\"1\":{\"632\":1}}],[\"git与svn\",{\"0\":{\"630\":1}}],[\"git基本简介\",{\"0\":{\"629\":1}}],[\"gitalk\",{\"1\":{\"623\":1}}],[\"git\",{\"0\":{\"632\":1,\"636\":1,\"647\":1,\"648\":1,\"649\":1,\"650\":1,\"651\":1,\"652\":1,\"653\":1,\"654\":1,\"656\":1,\"657\":1,\"660\":1,\"676\":1},\"1\":{\"586\":3,\"633\":1,\"634\":1,\"638\":5,\"641\":5,\"642\":4,\"644\":8,\"647\":3,\"648\":2,\"649\":1,\"650\":1,\"651\":2,\"652\":4,\"653\":3,\"654\":4,\"655\":1,\"656\":1,\"657\":2,\"662\":8,\"663\":11,\"664\":3,\"665\":7,\"666\":15,\"670\":2,\"671\":5,\"672\":16,\"679\":16},\"2\":{\"635\":1,\"645\":1,\"646\":1,\"658\":1,\"659\":1,\"667\":1,\"668\":1,\"674\":1,\"675\":1,\"680\":1,\"681\":1}}],[\"github下载\",{\"1\":{\"622\":1}}],[\"github下载地址\",{\"1\":{\"612\":1}}],[\"github\",{\"1\":{\"6\":1,\"316\":1,\"375\":2,\"376\":1,\"409\":1,\"410\":1,\"415\":2,\"420\":1,\"421\":1,\"476\":2,\"534\":1,\"573\":1,\"585\":1,\"586\":1,\"612\":1,\"622\":1,\"624\":1,\"679\":1}}],[\"gives\",{\"1\":{\"393\":2}}],[\"given\",{\"1\":{\"143\":1}}],[\"gvars\",{\"1\":{\"137\":1}}],[\"globals\",{\"1\":{\"393\":1}}],[\"global\",{\"1\":{\"137\":2,\"647\":2}}],[\"gcc\",{\"1\":{\"586\":1}}],[\"gc等于young+old+metaspace的gc\",{\"1\":{\"402\":1}}],[\"gc指的是老年代的gc\",{\"1\":{\"402\":1}}],[\"gc指得是young区的gc\",{\"1\":{\"310\":1}}],[\"gc的区别\",{\"1\":{\"402\":1}}],[\"gc的发生\",{\"1\":{\"314\":1}}],[\"gc和full\",{\"1\":{\"402\":1}}],[\"gc会有stw吗\",{\"1\":{\"402\":1}}],[\"gc会一直重复这样的过程\",{\"1\":{\"311\":1}}],[\"gctuning\",{\"1\":{\"399\":1}}],[\"gctimeratio直接设置吞吐量的大小\",{\"1\":{\"343\":1}}],[\"gc线程开始相对于上面的0\",{\"1\":{\"393\":1}}],[\"gc发生的区域young\",{\"1\":{\"393\":1}}],[\"gc日志\",{\"0\":{\"391\":1}}],[\"gc日志文件分析工具\",{\"0\":{\"394\":1}}],[\"gc日志文件\",{\"0\":{\"390\":1}}],[\"gc日志分析工具\",{\"0\":{\"382\":1}}],[\"gc是由jvm自动完成的\",{\"1\":{\"388\":1}}],[\"gc优化\",{\"0\":{\"387\":1}}],[\"gcviewer\",{\"0\":{\"396\":1},\"1\":{\"382\":1}}],[\"gceasy\",{\"0\":{\"395\":1},\"1\":{\"382\":1,\"395\":1}}],[\"gc还能在新生代中存活的对象\",{\"1\":{\"314\":1}}],[\"gc所需时间减少\",{\"1\":{\"314\":1}}],[\"gc频率增加\",{\"1\":{\"314\":1}}],[\"gc频率\",{\"1\":{\"314\":1}}],[\"gc消耗的时间很长\",{\"1\":{\"314\":1}}],[\"gc消耗的时间比minor\",{\"1\":{\"314\":1}}],[\"gc长得多\",{\"1\":{\"314\":1}}],[\"gc一般伴随着minor\",{\"1\":{\"314\":1}}],[\"gc本身是会周期性的自动运行的\",{\"1\":{\"179\":1}}],[\"gc方法\",{\"0\":{\"179\":1}}],[\"gc进行垃圾回收\",{\"1\":{\"154\":1}}],[\"gc\",{\"1\":{\"137\":1,\"139\":2,\"176\":1,\"179\":5,\"310\":1,\"311\":1,\"312\":1,\"314\":11,\"316\":1,\"319\":1,\"331\":1,\"363\":3,\"367\":1,\"381\":1,\"382\":1,\"388\":3,\"390\":1,\"391\":1,\"392\":1,\"393\":5,\"395\":2,\"398\":1,\"399\":2,\"402\":1}}],[\"generate\",{\"1\":{\"137\":2}}],[\"generated\",{\"1\":{\"137\":1,\"139\":1}}],[\"generation\",{\"1\":{\"137\":1}}],[\"gen\",{\"1\":{\"137\":1}}],[\"getgridea\",{\"1\":{\"622\":1}}],[\"getfallbackuri\",{\"1\":{\"509\":1}}],[\"getflowrulewarmupperiodsec\",{\"1\":{\"506\":1}}],[\"getflowrulemaxqueueingtimems\",{\"1\":{\"506\":1}}],[\"getflowrulecontrolbehavior\",{\"1\":{\"506\":1}}],[\"getflowrulecount\",{\"1\":{\"506\":1}}],[\"getflowrulegrade\",{\"1\":{\"506\":1}}],[\"getflowruleenable\",{\"1\":{\"506\":1}}],[\"getattributes\",{\"1\":{\"508\":1,\"509\":1}}],[\"getdegraderuleslowratiothreshold\",{\"1\":{\"506\":1}}],[\"getdegraderulestatintervals\",{\"1\":{\"506\":1}}],[\"getdegraderuleminrequestamount\",{\"1\":{\"506\":1}}],[\"getdegraderuletimewindow\",{\"1\":{\"506\":1}}],[\"getdegraderulegrade\",{\"1\":{\"506\":1}}],[\"getdegraderulecount\",{\"1\":{\"506\":1}}],[\"getdegraderuleenable\",{\"1\":{\"506\":1}}],[\"gethandle\",{\"1\":{\"506\":1}}],[\"getkey\",{\"1\":{\"505\":1,\"506\":1}}],[\"getbeforeconditiondatalist\",{\"1\":{\"492\":1,\"494\":1}}],[\"getbeforeconditionlist\",{\"1\":{\"492\":1}}],[\"getboolean\",{\"1\":{\"57\":3}}],[\"getboolean方法\",{\"0\":{\"57\":1}}],[\"getleft\",{\"1\":{\"486\":3,\"493\":1}}],[\"getresource\",{\"1\":{\"506\":2}}],[\"getrules\",{\"1\":{\"506\":2}}],[\"getruntime\",{\"1\":{\"158\":1,\"162\":3,\"166\":3,\"170\":1,\"174\":2,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"188\":1,\"189\":1,\"193\":1}}],[\"getright\",{\"1\":{\"486\":2,\"493\":1}}],[\"gettrieeventenum\",{\"1\":{\"492\":1}}],[\"gettrie\",{\"1\":{\"486\":1,\"492\":2,\"493\":1,\"494\":2}}],[\"getter访问它们的线程都将获得该字段的独立初始化副本\",{\"1\":{\"441\":1}}],[\"getter\",{\"1\":{\"440\":1,\"441\":1,\"447\":1}}],[\"getpluginname\",{\"1\":{\"488\":10,\"497\":2,\"499\":2}}],[\"getparamvalue\",{\"1\":{\"492\":1}}],[\"getparamtype\",{\"1\":{\"486\":2,\"493\":1}}],[\"getpathcache\",{\"1\":{\"486\":1,\"493\":1}}],[\"getprimitiveclass方法与之对应\",{\"1\":{\"110\":1}}],[\"getprimitiveclass\",{\"1\":{\"110\":1}}],[\"getproperty\",{\"1\":{\"57\":1,\"115\":3}}],[\"getid\",{\"1\":{\"486\":3,\"488\":5,\"493\":2,\"498\":1,\"505\":1}}],[\"getinstance\",{\"1\":{\"486\":2,\"487\":2,\"488\":14,\"497\":4,\"498\":2,\"499\":2,\"506\":1}}],[\"getinitialcapacity\",{\"1\":{\"486\":1}}],[\"getinteger\",{\"1\":{\"115\":7}}],[\"getinteger方法\",{\"0\":{\"115\":1}}],[\"getmatchmode\",{\"1\":{\"498\":1}}],[\"getmatchrestful\",{\"1\":{\"486\":1}}],[\"getmaximumsize\",{\"1\":{\"486\":1}}],[\"getmapping\",{\"1\":{\"318\":1,\"322\":1,\"558\":2,\"562\":2,\"569\":2}}],[\"getenabled\",{\"1\":{\"486\":2,\"487\":2,\"488\":7,\"492\":4,\"493\":1,\"494\":3,\"498\":1}}],[\"getexponent\",{\"1\":{\"71\":4,\"91\":3}}],[\"getselectorid\",{\"1\":{\"505\":1}}],[\"getsecuritymanager\",{\"1\":{\"153\":1,\"156\":1,\"160\":1,\"164\":1,\"187\":1,\"191\":1}}],[\"getstate\",{\"1\":{\"441\":1}}],[\"getstatic\",{\"1\":{\"302\":1}}],[\"gets\",{\"1\":{\"143\":1}}],[\"getsavedproperty\",{\"1\":{\"112\":1}}],[\"get\",{\"1\":{\"137\":6,\"143\":2,\"441\":1,\"444\":1,\"486\":1,\"487\":2,\"493\":1,\"497\":3,\"499\":2,\"571\":1}}],[\"getobjectclass\",{\"1\":{\"136\":7}}],[\"getname\",{\"1\":{\"134\":1,\"140\":1,\"368\":4,\"488\":1,\"497\":2}}],[\"getconditiondatalist\",{\"1\":{\"486\":2,\"493\":1,\"498\":1}}],[\"getcounter\",{\"1\":{\"444\":2}}],[\"getcache\",{\"1\":{\"486\":3,\"487\":2,\"488\":7}}],[\"getcallerclass\",{\"1\":{\"187\":1,\"191\":1}}],[\"getclass方法调用了本地的java\",{\"1\":{\"136\":1}}],[\"getclass方法\",{\"0\":{\"136\":1},\"1\":{\"136\":1}}],[\"getclass\",{\"1\":{\"134\":2,\"136\":2,\"140\":1}}],[\"getchars\",{\"1\":{\"116\":1}}],[\"g\",{\"1\":{\"111\":1,\"112\":1,\"124\":1,\"411\":2,\"460\":1}}],[\"goals>\",{\"1\":{\"691\":2}}],[\"goal>\",{\"1\":{\"691\":2}}],[\"google\",{\"1\":{\"461\":1,\"474\":1}}],[\"gongjs\",{\"1\":{\"15\":2}}],[\"go\",{\"1\":{\"5\":1,\"143\":1}}],[\"go开发者\",{\"1\":{\"2\":1}}],[\"a在a的电脑上修改了a\",{\"1\":{\"632\":1}}],[\"aop详解\",{\"0\":{\"514\":1}}],[\"a提交的写请求request1\",{\"1\":{\"465\":1}}],[\"a0ca311\",{\"1\":{\"656\":1,\"657\":1}}],[\"a0\",{\"1\":{\"464\":3,\"466\":3}}],[\"a2\",{\"1\":{\"463\":1}}],[\"a1\",{\"1\":{\"463\":1}}],[\"amd64\",{\"0\":{\"409\":1,\"410\":1,\"411\":2},\"1\":{\"409\":1,\"411\":2,\"413\":1}}],[\"among\",{\"1\":{\"294\":1,\"295\":1}}],[\"autoread\",{\"1\":{\"591\":2}}],[\"autoconfigure\",{\"1\":{\"568\":1}}],[\"automatic\",{\"1\":{\"295\":1}}],[\"auth\",{\"1\":{\"555\":4,\"556\":4,\"557\":4}}],[\"authenticate=true\",{\"1\":{\"374\":1}}],[\"age\",{\"1\":{\"275\":1,\"302\":1}}],[\"again\",{\"1\":{\"143\":1}}],[\"availability\",{\"1\":{\"467\":1}}],[\"available\",{\"1\":{\"294\":1,\"295\":1,\"296\":2,\"350\":1,\"473\":1}}],[\"availableprocessors\",{\"1\":{\"175\":2}}],[\"availableprocessors方法\",{\"0\":{\"175\":1}}],[\"avg\",{\"1\":{\"393\":3}}],[\"avoid\",{\"1\":{\"137\":1,\"143\":1}}],[\"after\",{\"1\":{\"143\":2,\"644\":1}}],[\"abbrev\",{\"1\":{\"665\":1}}],[\"abc\",{\"1\":{\"491\":2}}],[\"about\",{\"1\":{\"143\":1,\"379\":1}}],[\"above\",{\"1\":{\"141\":1}}],[\"abstractshenyuplugin类的插件才会访二级缓存\",{\"1\":{\"493\":1}}],[\"abstractshenyuplugin类的插件才会访问一级缓存\",{\"1\":{\"487\":1}}],[\"abstractshenyuplugin\",{\"1\":{\"486\":1,\"487\":1,\"493\":1,\"498\":1}}],[\"abstract\",{\"1\":{\"486\":1,\"487\":1,\"493\":1,\"498\":1}}],[\"absolute\",{\"1\":{\"187\":1}}],[\"abs\",{\"1\":{\"76\":1,\"81\":1,\"94\":1,\"98\":1,\"102\":1}}],[\"azul\",{\"1\":{\"137\":1}}],[\"actuate\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"actuator\",{\"1\":{\"547\":1,\"550\":1,\"551\":1,\"555\":1,\"556\":1,\"557\":1}}],[\"actuator<\",{\"1\":{\"545\":1}}],[\"active=prod参数\",{\"0\":{\"557\":1}}],[\"active=test参数\",{\"0\":{\"556\":1}}],[\"active=dev参数\",{\"0\":{\"555\":1}}],[\"active\",{\"1\":{\"441\":1,\"479\":1,\"547\":2,\"548\":2,\"549\":2,\"555\":1,\"556\":1,\"557\":1}}],[\"activity\",{\"1\":{\"393\":1}}],[\"ack\",{\"1\":{\"467\":1}}],[\"achieved\",{\"1\":{\"460\":1}}],[\"ac\",{\"1\":{\"460\":1}}],[\"acid一致性是有关数据库规则\",{\"1\":{\"474\":1}}],[\"acid一致性与cap一致性的区别\",{\"0\":{\"474\":1}}],[\"acid理论\",{\"0\":{\"471\":1}}],[\"acid之类\",{\"1\":{\"460\":1}}],[\"acid\",{\"0\":{\"475\":1},\"1\":{\"454\":1,\"471\":4,\"475\":3,\"476\":1}}],[\"acquiretimeout\",{\"1\":{\"592\":1,\"593\":1}}],[\"acquiretriematch\",{\"1\":{\"491\":1}}],[\"acquire\",{\"1\":{\"143\":1}}],[\"acc\",{\"1\":{\"321\":2}}],[\"accidentally\",{\"1\":{\"143\":2}}],[\"accesslog\",{\"1\":{\"591\":1}}],[\"access和jmxremote\",{\"1\":{\"374\":1}}],[\"accessed\",{\"1\":{\"143\":1}}],[\"access\",{\"1\":{\"137\":1,\"141\":1,\"143\":2,\"277\":1,\"374\":3,\"460\":1}}],[\"acmestack\",{\"1\":{\"4\":1}}],[\"alive\",{\"1\":{\"571\":1}}],[\"aliyun\",{\"1\":{\"537\":1}}],[\"alibaba版本\",{\"1\":{\"532\":1,\"533\":1,\"534\":1}}],[\"alibaba\",{\"1\":{\"375\":1,\"376\":1,\"534\":2,\"537\":5,\"545\":4,\"555\":5,\"556\":7,\"557\":7,\"566\":2}}],[\"align\",{\"1\":{\"139\":1}}],[\"aligned\",{\"1\":{\"139\":1}}],[\"aload\",{\"1\":{\"302\":3,\"321\":1}}],[\"also\",{\"1\":{\"143\":1}}],[\"although\",{\"1\":{\"143\":2,\"294\":1}}],[\"already\",{\"1\":{\"143\":2}}],[\"almost\",{\"1\":{\"141\":1}}],[\"algorithm\",{\"1\":{\"137\":1}}],[\"allidletime\",{\"1\":{\"592\":1,\"593\":1}}],[\"all<\",{\"1\":{\"537\":1}}],[\"allmatch\",{\"1\":{\"486\":2,\"493\":1}}],[\"alloctype\",{\"1\":{\"591\":2}}],[\"allocator\",{\"1\":{\"479\":1}}],[\"allocation\",{\"1\":{\"294\":1,\"363\":1,\"391\":1}}],[\"allocated\",{\"1\":{\"294\":1,\"295\":1}}],[\"allocate\",{\"1\":{\"137\":1,\"139\":2}}],[\"allowhalfclosure\",{\"1\":{\"591\":1}}],[\"allowpublickeyretrieval=true\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"allow\",{\"1\":{\"479\":1,\"547\":1,\"548\":1,\"549\":1}}],[\"all\",{\"1\":{\"137\":1,\"139\":2,\"143\":1,\"294\":1,\"295\":2,\"379\":2,\"381\":1,\"393\":1,\"460\":5,\"491\":6}}],[\"atzhangsan\",{\"1\":{\"410\":1}}],[\"attempted\",{\"1\":{\"296\":1}}],[\"attribute\",{\"1\":{\"277\":1,\"460\":3}}],[\"attributes\",{\"1\":{\"277\":3}}],[\"atomiccounter\",{\"1\":{\"444\":1}}],[\"atomicreference\",{\"1\":{\"444\":1}}],[\"atomicboolean\",{\"1\":{\"444\":1}}],[\"atomiclong\",{\"1\":{\"444\":1}}],[\"atomicinteger\",{\"1\":{\"444\":4}}],[\"atomically\",{\"1\":{\"139\":1}}],[\"atomic\",{\"1\":{\"137\":4,\"139\":3,\"141\":2,\"472\":1}}],[\"at\",{\"1\":{\"137\":2,\"296\":1,\"297\":2,\"323\":2,\"379\":1,\"393\":1,\"460\":1}}],[\"admin部署在mock服务器上\",{\"1\":{\"589\":1}}],[\"admin\",{\"0\":{\"595\":1},\"1\":{\"547\":1,\"550\":1,\"551\":1,\"583\":1,\"595\":2}}],[\"admin或者本地模式通过接口删除选择器或规则时\",{\"1\":{\"499\":1}}],[\"admin或者本地模式添加selector或者rule数据并且是包含了uri匹配的规则时会将ruledata或者selectordata相关的数据存入对应的ruletri或者selectortrie中\",{\"1\":{\"492\":1}}],[\"adoptopenjdk\",{\"1\":{\"415\":2,\"420\":1,\"421\":1}}],[\"addclasspath>\",{\"1\":{\"691\":1}}],[\"add2\",{\"1\":{\"642\":1}}],[\"add命令提交文件到暂存区\",{\"1\":{\"642\":1}}],[\"add命令提交到暂存区\",{\"1\":{\"642\":1}}],[\"add命令对其进行提交到暂存区\",{\"1\":{\"642\":1}}],[\"add提交文件到暂存区了\",{\"1\":{\"642\":1}}],[\"adding\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"addall\",{\"1\":{\"322\":1,\"442\":2}}],[\"addshutdownhook\",{\"1\":{\"156\":1,\"158\":1,\"162\":2,\"166\":1}}],[\"addshutdownhook方法\",{\"0\":{\"155\":1}}],[\"addwaiter\",{\"1\":{\"143\":1}}],[\"add\",{\"0\":{\"649\":1},\"1\":{\"137\":2,\"141\":1,\"143\":2,\"156\":1,\"318\":1,\"321\":1,\"506\":2,\"638\":3,\"644\":1,\"649\":1,\"652\":2,\"653\":2,\"665\":2,\"672\":2,\"679\":3}}],[\"addrbits\",{\"1\":{\"137\":3}}],[\"address\",{\"1\":{\"137\":3,\"141\":1,\"143\":1,\"275\":1,\"297\":1,\"302\":3}}],[\"addr\",{\"1\":{\"137\":1,\"479\":1,\"547\":1,\"548\":1,\"549\":1,\"550\":1,\"551\":1,\"567\":1}}],[\"added\",{\"1\":{\"137\":1,\"143\":2}}],[\"adjust\",{\"1\":{\"94\":1}}],[\"asyncappender\",{\"1\":{\"552\":3}}],[\"async\",{\"1\":{\"552\":16}}],[\"asynchronously\",{\"1\":{\"137\":1,\"143\":1}}],[\"aslist\",{\"1\":{\"441\":2,\"442\":2}}],[\"asm依赖和class代码\",{\"0\":{\"321\":1}}],[\"aside\",{\"1\":{\"143\":1}}],[\"assembly<\",{\"1\":{\"691\":1}}],[\"assembly>\",{\"1\":{\"690\":1}}],[\"assembly\",{\"0\":{\"690\":1},\"1\":{\"413\":1,\"690\":1,\"691\":3}}],[\"assertion\",{\"1\":{\"137\":2}}],[\"assertions\",{\"1\":{\"115\":1}}],[\"assertequals\",{\"1\":{\"115\":1}}],[\"assert\",{\"1\":{\"112\":1,\"137\":13,\"139\":4,\"141\":5,\"143\":11}}],[\"associated\",{\"1\":{\"143\":3}}],[\"as\",{\"1\":{\"94\":1,\"137\":1,\"143\":1,\"273\":1,\"294\":1,\"296\":1,\"491\":1}}],[\"archive>\",{\"1\":{\"691\":1}}],[\"archives\",{\"1\":{\"448\":1}}],[\"arthas\",{\"0\":{\"375\":1},\"1\":{\"375\":2,\"376\":4}}],[\"artifactid\",{\"1\":{\"690\":2}}],[\"artifactid>\",{\"1\":{\"321\":1,\"537\":12,\"541\":3,\"545\":13,\"561\":3,\"566\":10,\"691\":7}}],[\"artichect\",{\"1\":{\"476\":1}}],[\"article\",{\"1\":{\"129\":1,\"421\":1,\"455\":1,\"476\":2}}],[\"argument\",{\"1\":{\"174\":2}}],[\"args\",{\"1\":{\"76\":1,\"120\":2,\"302\":1,\"325\":1,\"368\":1,\"568\":2}}],[\"around\",{\"1\":{\"143\":1}}],[\"arraydeque两端都可以操作\",{\"1\":{\"245\":1}}],[\"arraydeque的iterator方法返回的迭代器是fail\",{\"1\":{\"245\":1}}],[\"arraydeque不支持null值\",{\"1\":{\"245\":1}}],[\"arraydeque是deque的实现类\",{\"1\":{\"245\":1}}],[\"arraydeque是deque接口的一个实现\",{\"1\":{\"245\":1}}],[\"arraydeque是线程不安全的\",{\"1\":{\"245\":1}}],[\"arraydeque\",{\"0\":{\"216\":1,\"230\":1,\"245\":1,\"265\":1}}],[\"arraylist<>\",{\"1\":{\"442\":1}}],[\"arraylist<class<\",{\"1\":{\"321\":1,\"322\":1}}],[\"arraylist<person>\",{\"1\":{\"318\":1}}],[\"arraylist的iterator和listiterator方法返回的迭代器是fail\",{\"1\":{\"238\":1}}],[\"arraylist是非同步的\",{\"1\":{\"238\":1}}],[\"arraylist是支持快速访问\",{\"1\":{\"238\":1}}],[\"arraylist是什么\",{\"0\":{\"197\":1}}],[\"arraylist继承自abstractlist\",{\"1\":{\"238\":1}}],[\"arraylist简介\",{\"0\":{\"238\":1}}],[\"arraylist\",{\"0\":{\"209\":1,\"223\":1,\"258\":1},\"2\":{\"204\":1}}],[\"arraylist源码解析\",{\"0\":{\"196\":1}}],[\"arrayoop\",{\"1\":{\"139\":1}}],[\"arrays\",{\"1\":{\"139\":3,\"295\":1,\"441\":2,\"442\":2}}],[\"array\",{\"1\":{\"139\":3,\"174\":1}}],[\"arithmetic\",{\"1\":{\"124\":1,\"125\":1}}],[\"area\",{\"0\":{\"294\":1},\"1\":{\"294\":5,\"295\":1}}],[\"areas\",{\"0\":{\"290\":1},\"1\":{\"291\":4}}],[\"are\",{\"1\":{\"79\":1,\"139\":3,\"143\":2,\"291\":5,\"393\":1}}],[\"annotation\",{\"1\":{\"558\":3,\"562\":1,\"569\":3}}],[\"antpathmatch\",{\"1\":{\"491\":2,\"591\":1}}],[\"antpathmatch支持路径中待通配符访问\",{\"1\":{\"491\":1}}],[\"ant\",{\"1\":{\"415\":1}}],[\"ant编译\",{\"1\":{\"415\":1}}],[\"antup\",{\"1\":{\"374\":1}}],[\"another\",{\"1\":{\"139\":1,\"143\":1,\"174\":1}}],[\"anotherbits\",{\"1\":{\"79\":3}}],[\"any\",{\"1\":{\"137\":2,\"143\":3,\"297\":1}}],[\"an\",{\"1\":{\"110\":3,\"112\":1,\"137\":1,\"139\":3,\"141\":1,\"143\":3,\"187\":1,\"294\":2,\"295\":1,\"296\":1,\"298\":1,\"460\":2}}],[\"ansi\",{\"1\":{\"69\":1,\"88\":1}}],[\"and\",{\"1\":{\"5\":1,\"77\":1,\"99\":1,\"137\":5,\"139\":6,\"141\":4,\"143\":11,\"174\":4,\"273\":6,\"279\":1,\"291\":2,\"294\":5,\"295\":1,\"296\":1,\"347\":1,\"379\":3,\"393\":2,\"476\":1,\"491\":2,\"555\":2,\"556\":2,\"557\":2,\"678\":1}}],[\"api服务\",{\"1\":{\"555\":1}}],[\"api\",{\"0\":{\"550\":1,\"551\":1,\"561\":1,\"563\":1},\"1\":{\"547\":6,\"548\":6,\"549\":5,\"552\":1,\"555\":3,\"556\":6,\"557\":6,\"558\":1,\"561\":3,\"562\":7,\"563\":1,\"566\":1,\"569\":1,\"579\":1}}],[\"api<\",{\"1\":{\"545\":1}}],[\"api的pom文件\",{\"0\":{\"545\":1}}],[\"api初始化\",{\"0\":{\"544\":1}}],[\"api模块\",{\"0\":{\"543\":1}}],[\"app\",{\"1\":{\"287\":1,\"552\":6,\"691\":1}}],[\"apply\",{\"1\":{\"467\":4,\"666\":1}}],[\"applicationlistener<trieevent>\",{\"1\":{\"492\":1}}],[\"application\",{\"1\":{\"393\":1,\"547\":5,\"548\":4,\"549\":4,\"550\":1,\"551\":1,\"567\":2}}],[\"applications\",{\"1\":{\"273\":2}}],[\"applicationshutdownhooks\",{\"1\":{\"156\":1,\"160\":1}}],[\"applets\",{\"1\":{\"273\":2}}],[\"appear\",{\"1\":{\"143\":1,\"191\":1}}],[\"append>\",{\"1\":{\"552\":1}}],[\"appender>\",{\"1\":{\"552\":6}}],[\"append\",{\"1\":{\"141\":2}}],[\"ap\",{\"1\":{\"16\":1}}],[\"apache\",{\"0\":{\"481\":1,\"502\":1,\"504\":1,\"578\":1,\"580\":1,\"582\":1},\"1\":{\"3\":1,\"4\":3,\"476\":1,\"482\":2,\"487\":1,\"493\":1,\"503\":1,\"506\":2,\"537\":6,\"541\":3,\"545\":3,\"561\":3,\"566\":3,\"579\":1,\"589\":2,\"595\":2,\"596\":2,\"691\":5},\"2\":{\"501\":1,\"511\":1,\"605\":1,\"606\":1}}],[\"a\",{\"0\":{\"127\":3},\"1\":{\"12\":1,\"59\":2,\"60\":2,\"61\":2,\"70\":1,\"79\":6,\"81\":4,\"97\":1,\"100\":6,\"101\":1,\"102\":2,\"107\":4,\"110\":3,\"111\":1,\"114\":12,\"120\":8,\"127\":1,\"137\":12,\"138\":7,\"139\":5,\"141\":4,\"143\":17,\"174\":5,\"189\":1,\"193\":1,\"273\":1,\"279\":1,\"291\":2,\"294\":1,\"295\":2,\"296\":6,\"297\":3,\"298\":1,\"302\":2,\"358\":1,\"393\":2,\"411\":1,\"416\":1,\"436\":1,\"437\":1,\"441\":1,\"448\":1,\"452\":1,\"460\":2,\"464\":4,\"467\":17,\"470\":2,\"471\":2,\"482\":1,\"491\":10,\"503\":1}}],[\"efficiency\",{\"0\":{\"720\":1}}],[\"effect\",{\"1\":{\"296\":1}}],[\"echo\",{\"1\":{\"692\":1}}],[\"eclipse\",{\"1\":{\"361\":1,\"378\":1}}],[\"erz的一个项目\",{\"1\":{\"611\":1}}],[\"error\",{\"1\":{\"508\":1,\"509\":1,\"552\":6}}],[\"estimator\",{\"1\":{\"479\":1}}],[\"etcd是基于raft来实现的\",{\"1\":{\"467\":1}}],[\"etcd读写都做了线性一致\",{\"1\":{\"467\":1}}],[\"etcd这种之所以叫\",{\"1\":{\"459\":1}}],[\"etcd\",{\"0\":{\"467\":1},\"1\":{\"453\":1,\"458\":1,\"467\":3,\"475\":1}}],[\"etc\",{\"1\":{\"374\":1}}],[\"eden和survivor各有一些存活对象\",{\"1\":{\"314\":1}}],[\"eden中的存活对象就会被移动survivor区\",{\"1\":{\"314\":1}}],[\"eden区每进行一次minor\",{\"1\":{\"314\":1}}],[\"eden\",{\"1\":{\"309\":1}}],[\"each\",{\"1\":{\"294\":1,\"296\":1,\"297\":2,\"393\":2}}],[\"epilog\",{\"1\":{\"143\":1}}],[\"either\",{\"1\":{\"143\":1,\"294\":1}}],[\"equivalent\",{\"1\":{\"143\":1}}],[\"equal方法是一个简单的设计\",{\"1\":{\"138\":1}}],[\"equal\",{\"1\":{\"79\":1,\"138\":8}}],[\"equals方法的注意事项\",{\"1\":{\"138\":1}}],[\"equals方法如何使用hashcode\",{\"1\":{\"138\":1}}],[\"equals方法\",{\"0\":{\"138\":1}}],[\"equals\",{\"1\":{\"62\":1,\"133\":1,\"134\":1,\"138\":4,\"486\":4,\"492\":2,\"493\":1,\"494\":1,\"506\":2}}],[\"equalsignorecase\",{\"1\":{\"54\":1}}],[\"evolvedmicrobe\",{\"1\":{\"409\":1}}],[\"evacuation\",{\"1\":{\"347\":1,\"363\":1,\"393\":1}}],[\"ev\",{\"1\":{\"141\":2}}],[\"eventenum\",{\"1\":{\"492\":1}}],[\"eventexecutor\",{\"1\":{\"479\":1}}],[\"eventpublisher\",{\"1\":{\"492\":6,\"494\":5}}],[\"eventual\",{\"0\":{\"470\":1},\"1\":{\"460\":1,\"473\":1}}],[\"eventjavamonitorwait\",{\"1\":{\"143\":1}}],[\"event\",{\"1\":{\"141\":1,\"143\":19,\"492\":2}}],[\"eventmesh\",{\"1\":{\"4\":1}}],[\"even\",{\"1\":{\"137\":1,\"143\":2}}],[\"everything\",{\"1\":{\"273\":1}}],[\"ever\",{\"1\":{\"137\":1}}],[\"embedded\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"emptyruledata\",{\"1\":{\"486\":2}}],[\"empty\",{\"1\":{\"141\":1,\"143\":1,\"172\":1,\"486\":1}}],[\"email\",{\"1\":{\"3\":1,\"647\":1}}],[\"e−127\",{\"1\":{\"89\":1}}],[\"exists<\",{\"1\":{\"691\":2}}],[\"exists\",{\"1\":{\"491\":1}}],[\"exist\",{\"1\":{\"486\":1,\"493\":1}}],[\"exits\",{\"1\":{\"291\":2}}],[\"exitsuspendequivalent\",{\"1\":{\"143\":1}}],[\"exit允许的情况下启动回收完成\",{\"1\":{\"154\":1}}],[\"exit方法\",{\"0\":{\"152\":1}}],[\"exit\",{\"1\":{\"143\":4,\"153\":2,\"154\":2}}],[\"excludes>\",{\"1\":{\"690\":1,\"691\":1}}],[\"exclude>\",{\"1\":{\"690\":1,\"691\":3}}],[\"exclusions>\",{\"1\":{\"545\":1,\"566\":1}}],[\"exclusion>\",{\"1\":{\"545\":1,\"566\":1}}],[\"exchange\",{\"1\":{\"486\":4,\"487\":1,\"493\":2,\"498\":3,\"508\":1,\"509\":4}}],[\"exceeded\",{\"1\":{\"319\":1}}],[\"except\",{\"1\":{\"143\":1}}],[\"exceptionally\",{\"1\":{\"143\":1}}],[\"exception\",{\"1\":{\"141\":1,\"143\":3,\"318\":1,\"319\":1,\"322\":1}}],[\"ext\",{\"1\":{\"287\":1,\"393\":1}}],[\"extension\",{\"1\":{\"287\":1,\"547\":3,\"548\":3,\"549\":3}}],[\"extends\",{\"1\":{\"71\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"91\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"136\":1,\"321\":1,\"441\":2}}],[\"externally\",{\"1\":{\"143\":1}}],[\"examples\",{\"1\":{\"597\":1}}],[\"exampleclass\",{\"1\":{\"321\":2}}],[\"example\",{\"0\":{\"539\":1,\"540\":1,\"543\":1,\"544\":1,\"545\":1,\"559\":1,\"560\":1,\"561\":1,\"563\":1,\"565\":1,\"566\":1},\"1\":{\"174\":3,\"537\":3,\"541\":4,\"545\":2,\"555\":2,\"556\":2,\"557\":2,\"558\":1,\"561\":3,\"562\":3,\"563\":1,\"565\":2,\"566\":5,\"567\":1,\"568\":1,\"569\":2,\"573\":1,\"677\":1}}],[\"exe\",{\"1\":{\"174\":4}}],[\"executions>\",{\"1\":{\"691\":2}}],[\"execution>\",{\"1\":{\"691\":2}}],[\"execution\",{\"1\":{\"291\":1,\"297\":1}}],[\"executing\",{\"1\":{\"174\":1,\"297\":1}}],[\"executes\",{\"1\":{\"462\":1}}],[\"executed\",{\"1\":{\"297\":2}}],[\"execute\",{\"1\":{\"174\":2,\"487\":1,\"498\":1,\"509\":2}}],[\"executors\",{\"1\":{\"158\":1}}],[\"executorservice\",{\"1\":{\"158\":1}}],[\"executor\",{\"1\":{\"158\":2}}],[\"exec\",{\"1\":{\"172\":11,\"173\":15,\"174\":2,\"319\":1,\"415\":1}}],[\"exec方法\",{\"0\":{\"171\":1}}],[\"exposing\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"exposure\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"exponent\",{\"1\":{\"70\":1,\"71\":6,\"77\":1,\"91\":5,\"94\":5,\"99\":1}}],[\"expansion\",{\"1\":{\"296\":2}}],[\"expanded\",{\"1\":{\"296\":1}}],[\"expecting\",{\"1\":{\"187\":1}}],[\"expect\",{\"1\":{\"137\":1}}],[\"exp\",{\"1\":{\"77\":2,\"99\":2}}],[\"e\",{\"1\":{\"57\":1,\"70\":1,\"89\":2,\"111\":1,\"112\":1,\"115\":2,\"124\":1,\"143\":1,\"411\":2,\"441\":1,\"460\":1,\"467\":6,\"470\":1}}],[\"elastic\",{\"1\":{\"592\":2,\"593\":2}}],[\"elasticsearch知识体系\",{\"0\":{\"43\":1}}],[\"elasticsearch\",{\"1\":{\"5\":1},\"2\":{\"44\":1}}],[\"election\",{\"1\":{\"467\":1}}],[\"elements\",{\"1\":{\"143\":1}}],[\"else\",{\"1\":{\"94\":1,\"136\":3,\"137\":7,\"139\":2,\"141\":8,\"143\":3,\"368\":1,\"486\":2,\"488\":4,\"492\":4,\"493\":1,\"494\":4,\"497\":2,\"499\":2}}],[\"elk\",{\"1\":{\"5\":1}}],[\"encoding=\",{\"1\":{\"537\":1,\"541\":1,\"545\":1,\"552\":1,\"561\":1,\"566\":1,\"690\":1}}],[\"encoder>\",{\"1\":{\"552\":3}}],[\"encode\",{\"1\":{\"143\":1}}],[\"enablefeignclients\",{\"1\":{\"568\":2}}],[\"enabled\",{\"1\":{\"547\":3,\"548\":2,\"549\":2,\"550\":2,\"551\":2,\"567\":1,\"591\":1}}],[\"enabled>\",{\"1\":{\"537\":6}}],[\"enable\",{\"1\":{\"506\":2}}],[\"enough\",{\"1\":{\"297\":1}}],[\"ensures\",{\"1\":{\"460\":1}}],[\"ensure\",{\"1\":{\"143\":1}}],[\"entering\",{\"1\":{\"143\":1}}],[\"enter\",{\"1\":{\"141\":2,\"143\":7}}],[\"entire\",{\"1\":{\"139\":1}}],[\"entrylist\",{\"1\":{\"141\":11,\"143\":3}}],[\"entrylist队列中\",{\"1\":{\"141\":1}}],[\"entry\",{\"1\":{\"136\":3,\"137\":1,\"139\":1,\"141\":1,\"143\":1,\"509\":2}}],[\"en\",{\"1\":{\"137\":1,\"460\":1,\"462\":1,\"463\":1,\"476\":3,\"619\":1}}],[\"endpointlinksresolver\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"endpoint\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"endpoints\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"endofpath\",{\"1\":{\"491\":1}}],[\"end\",{\"1\":{\"136\":1,\"137\":1,\"139\":2,\"141\":1,\"143\":2}}],[\"endif\",{\"1\":{\"136\":2,\"139\":1}}],[\"environment\",{\"1\":{\"172\":1,\"174\":1}}],[\"envp\",{\"1\":{\"172\":8,\"173\":9}}],[\"env\",{\"1\":{\"135\":3,\"136\":8,\"137\":1,\"139\":2,\"141\":1,\"143\":1}}],[\"envcd\",{\"1\":{\"4\":1}}],[\"engine\",{\"1\":{\"5\":1}}],[\"hh\",{\"1\":{\"552\":1}}],[\"hutool<\",{\"1\":{\"537\":1}}],[\"hutool\",{\"1\":{\"537\":2}}],[\"hungry\",{\"1\":{\"16\":1}}],[\"hsdis\",{\"1\":{\"409\":1,\"413\":1}}],[\"hsdis环境准备\",{\"0\":{\"408\":1}}],[\"hprof\",{\"1\":{\"369\":3,\"380\":2}}],[\"hpp文件\",{\"1\":{\"137\":1}}],[\"httpclient\",{\"1\":{\"592\":1,\"593\":1}}],[\"http\",{\"1\":{\"319\":1,\"382\":1,\"413\":2,\"448\":1,\"467\":2,\"476\":1,\"508\":1,\"509\":1,\"537\":3,\"541\":3,\"545\":4,\"555\":1,\"556\":1,\"557\":1,\"561\":4,\"566\":3,\"571\":2,\"589\":1,\"591\":1,\"597\":1,\"599\":1,\"600\":8}}],[\"httpstatus\",{\"1\":{\"508\":1,\"509\":1}}],[\"https\",{\"1\":{\"6\":1,\"16\":2,\"129\":1,\"137\":1,\"273\":1,\"277\":1,\"302\":2,\"316\":1,\"363\":1,\"375\":1,\"376\":1,\"378\":1,\"393\":1,\"395\":1,\"398\":2,\"399\":1,\"409\":1,\"410\":1,\"415\":2,\"420\":2,\"421\":3,\"448\":6,\"452\":1,\"460\":3,\"462\":1,\"463\":1,\"476\":11,\"534\":2,\"537\":1,\"541\":1,\"566\":1,\"573\":1,\"585\":1,\"586\":1,\"612\":2,\"619\":1,\"622\":2,\"626\":1,\"679\":1}}],[\"html\",{\"1\":{\"273\":1,\"277\":2,\"302\":4,\"316\":1,\"363\":1,\"398\":1,\"399\":1,\"413\":1,\"448\":1,\"467\":1,\"476\":3,\"534\":1}}],[\"hcsequence\",{\"1\":{\"137\":1}}],[\"hard\",{\"0\":{\"654\":1,\"657\":1},\"1\":{\"641\":3,\"654\":3,\"657\":2,\"672\":1}}],[\"hardcoded\",{\"1\":{\"137\":1}}],[\"half\",{\"1\":{\"479\":1}}],[\"halt\",{\"1\":{\"164\":2,\"166\":1}}],[\"halt方法\",{\"0\":{\"163\":1}}],[\"happened\",{\"1\":{\"143\":1}}],[\"hanging\",{\"1\":{\"143\":1}}],[\"handling\",{\"1\":{\"139\":1}}],[\"handlerrule方法将规则加载到sentinel中\",{\"1\":{\"506\":1}}],[\"handlerrule\",{\"1\":{\"497\":1,\"506\":1}}],[\"handlerselector\",{\"1\":{\"497\":1}}],[\"handlerplugin\",{\"1\":{\"497\":1}}],[\"handlermap\",{\"1\":{\"497\":3,\"499\":2}}],[\"handler\",{\"1\":{\"143\":3,\"497\":6,\"499\":4,\"506\":2}}],[\"handle\",{\"1\":{\"137\":5,\"139\":6,\"141\":4,\"143\":5}}],[\"hasmoretokens\",{\"1\":{\"172\":1}}],[\"has\",{\"1\":{\"137\":3,\"143\":7,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"492\":2,\"494\":1}}],[\"hashtable中的映射不是有序的\",{\"1\":{\"251\":1}}],[\"hashtable的key\",{\"1\":{\"251\":1}}],[\"hashtable的函数都是同步的\",{\"1\":{\"251\":1}}],[\"hashtable也是一个散列表\",{\"1\":{\"251\":1}}],[\"hashtable\",{\"0\":{\"251\":1}}],[\"hashmap的iterator方法返回的迭代器是fail\",{\"1\":{\"248\":1}}],[\"hashmap继承自abstractmap\",{\"1\":{\"248\":1}}],[\"hashmap\",{\"0\":{\"248\":1},\"1\":{\"248\":4}}],[\"hashset的iterator方法返回的迭代器是fail\",{\"1\":{\"241\":1,\"242\":1}}],[\"hashset是非同步的\",{\"1\":{\"241\":1}}],[\"hashset是根据对象的哈希值来确定元素在集合中的存储位置\",{\"1\":{\"241\":1}}],[\"hashset没有下标选取\",{\"1\":{\"241\":1}}],[\"hashset中元素都是无序的\",{\"1\":{\"241\":1}}],[\"hashset继承自abstractset\",{\"1\":{\"241\":1}}],[\"hashset\",{\"0\":{\"212\":1,\"226\":1,\"241\":1,\"261\":1}}],[\"hashset源码解析\",{\"0\":{\"205\":1}}],[\"hashstatew\",{\"1\":{\"137\":3}}],[\"hashstatez\",{\"1\":{\"137\":2}}],[\"hashstatey\",{\"1\":{\"137\":2}}],[\"hashstatex\",{\"1\":{\"137\":2}}],[\"hash值会存在标记字中\",{\"1\":{\"137\":1}}],[\"hash生成hashcode的方法有6种\",{\"1\":{\"137\":1}}],[\"hash来生成hash值\",{\"1\":{\"137\":1}}],[\"hash\",{\"1\":{\"137\":39}}],[\"hashcode与equals方法\",{\"1\":{\"241\":1}}],[\"hashcode=4来修改默认的hash方法实现\",{\"1\":{\"137\":1}}],[\"hashcode=0或者其他数可以设置生成对象的hashcode的策略\",{\"1\":{\"137\":1}}],[\"hashcode方法和system\",{\"1\":{\"137\":1}}],[\"hashcode方法对应的函数为jvm\",{\"1\":{\"137\":1}}],[\"hashcode方法必须一致地返回相同的整数\",{\"1\":{\"137\":1}}],[\"hashcode方法一般约定为\",{\"1\":{\"137\":1}}],[\"hashcode方法\",{\"0\":{\"137\":1}}],[\"hashcode\",{\"1\":{\"133\":1,\"134\":2,\"135\":1,\"137\":9,\"138\":2,\"140\":1}}],[\"have\",{\"1\":{\"110\":2,\"137\":3,\"139\":1,\"143\":1}}],[\"hdfs\",{\"1\":{\"458\":1}}],[\"hd\",{\"1\":{\"118\":1,\"119\":1,\"121\":2,\"122\":2}}],[\"hircodd\",{\"1\":{\"679\":1}}],[\"hikaripool\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"hikaridatasource\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"hikari\",{\"1\":{\"555\":2,\"556\":2,\"557\":2}}],[\"history\",{\"1\":{\"552\":4}}],[\"histogram可以列出内存中的对象\",{\"1\":{\"381\":1}}],[\"histogram\",{\"1\":{\"381\":1}}],[\"highlight\",{\"1\":{\"552\":1}}],[\"highly\",{\"1\":{\"143\":1}}],[\"highestonebit\",{\"0\":{\"122\":1},\"1\":{\"122\":1}}],[\"high=xxx进行调整\",{\"1\":{\"112\":1,\"128\":1}}],[\"high\",{\"1\":{\"112\":8,\"123\":1,\"460\":1,\"479\":1}}],[\"hibernate\",{\"0\":{\"29\":1},\"2\":{\"30\":1}}],[\"h\",{\"1\":{\"111\":1,\"112\":3,\"376\":1}}],[\"hengyunabc\",{\"1\":{\"421\":1}}],[\"help\",{\"1\":{\"356\":1,\"377\":1}}],[\"helper\",{\"1\":{\"137\":1}}],[\"hellofeignservice\",{\"1\":{\"562\":1,\"569\":8}}],[\"helloworld\",{\"1\":{\"509\":1}}],[\"hello\",{\"1\":{\"162\":1,\"166\":1,\"558\":3,\"562\":2,\"569\":2,\"571\":2}}],[\"head~50\",{\"1\":{\"654\":1}}],[\"head~\",{\"1\":{\"641\":1}}],[\"head^\",{\"0\":{\"654\":1},\"1\":{\"641\":1,\"654\":1}}],[\"header\",{\"1\":{\"137\":11,\"139\":1}}],[\"health\",{\"1\":{\"547\":1,\"550\":1,\"551\":1}}],[\"heartbeat\",{\"1\":{\"467\":5}}],[\"heavier\",{\"1\":{\"143\":1}}],[\"heavyweight\",{\"1\":{\"137\":1}}],[\"heavy\",{\"1\":{\"137\":1,\"143\":1}}],[\"heap的总和\",{\"1\":{\"381\":1}}],[\"heapdumppath=heap\",{\"1\":{\"369\":1,\"380\":1}}],[\"heapcontroller\",{\"1\":{\"318\":1}}],[\"heapword\",{\"1\":{\"139\":1}}],[\"heapwordsperlong\",{\"1\":{\"139\":1}}],[\"heap\",{\"0\":{\"295\":1},\"1\":{\"137\":1,\"139\":1,\"294\":2,\"295\":4,\"318\":2,\"319\":1,\"322\":1,\"369\":2,\"378\":1,\"381\":2,\"398\":1}}],[\"here\",{\"1\":{\"137\":3,\"143\":1}}],[\"hexadecimal\",{\"1\":{\"94\":1}}],[\"hefengen\",{\"1\":{\"3\":2,\"16\":1}}],[\"hoxton\",{\"1\":{\"534\":7}}],[\"hoohack\",{\"1\":{\"448\":1}}],[\"hook2\",{\"1\":{\"162\":1}}],[\"hook\",{\"1\":{\"156\":2,\"160\":2,\"162\":1,\"166\":1,\"552\":1}}],[\"hollischuang\",{\"1\":{\"448\":1}}],[\"hold\",{\"1\":{\"297\":1}}],[\"holder\",{\"1\":{\"139\":1}}],[\"holding\",{\"1\":{\"110\":2}}],[\"hosts\",{\"1\":{\"374\":1}}],[\"hostname\",{\"1\":{\"374\":1,\"555\":2,\"556\":2,\"557\":2}}],[\"hostname=31\",{\"1\":{\"374\":1}}],[\"hobby=\",{\"1\":{\"275\":1,\"302\":1}}],[\"hobj\",{\"1\":{\"137\":3}}],[\"however\",{\"1\":{\"137\":1}}],[\"hotspot\",{\"1\":{\"136\":5,\"137\":2,\"141\":1,\"420\":1}}],[\"hotmail\",{\"1\":{\"3\":1,\"16\":1}}],[\"home中\",{\"1\":{\"287\":2}}],[\"home\",{\"0\":{\"0\":1},\"1\":{\"552\":6,\"692\":3}}],[\"我找到啦\",{\"1\":{\"469\":2}}],[\"我戒指丢了\",{\"1\":{\"469\":3}}],[\"我生活了20年\",{\"1\":{\"313\":1}}],[\"我在这里也认识了很多人\",{\"1\":{\"313\":1}}],[\"我就开始漂了\",{\"1\":{\"313\":1}}],[\"我就被迫去了survivor区的\",{\"1\":{\"313\":1}}],[\"我出生在eden区\",{\"1\":{\"313\":1}}],[\"我是一个普通的java对象\",{\"1\":{\"313\":1}}],[\"我是一名普通的java\",{\"1\":{\"2\":1}}],[\"我们第一次推送master分支时\",{\"1\":{\"679\":1}}],[\"我们继续回到dev分支下\",{\"1\":{\"666\":1}}],[\"我们还无法提交\",{\"1\":{\"666\":1}}],[\"我们将目前分支切换到master主分支\",{\"1\":{\"662\":1}}],[\"我们将在后面介绍内在锁定\",{\"1\":{\"442\":1}}],[\"我们添加一行数据\",{\"1\":{\"662\":1}}],[\"我们在dev目录下添加内容\",{\"1\":{\"662\":1}}],[\"我们在刚刚的demo\",{\"1\":{\"651\":1}}],[\"我们在eden区中玩了挺长时间\",{\"1\":{\"313\":1}}],[\"我们从\",{\"1\":{\"467\":1}}],[\"我们需要\",{\"1\":{\"467\":1}}],[\"我们无法比较诸如\",{\"1\":{\"466\":1}}],[\"我们来看consistency一致性\",{\"1\":{\"460\":1}}],[\"我们来模拟一下流程\",{\"1\":{\"314\":1}}],[\"我们使用一个普通的\",{\"1\":{\"447\":1}}],[\"我们尽可能只同步方法的相关部分\",{\"1\":{\"446\":1}}],[\"我们仅通过将相关的状态修改部分包装在一个同步块中来对其进行同步\",{\"1\":{\"446\":1}}],[\"我们通过与前缀的方法签名创建一个同步方法\",{\"1\":{\"445\":1}}],[\"我们可以创建一个404分支来修复它\",{\"1\":{\"666\":1}}],[\"我们可以在\",{\"1\":{\"467\":1}}],[\"我们可以在实例方法\",{\"1\":{\"445\":1}}],[\"我们可以通过使它成为同步方法\",{\"1\":{\"445\":1}}],[\"我们可以通过将另一个对象用作监视器锁定\",{\"1\":{\"447\":1}}],[\"我们可以通过将\",{\"1\":{\"441\":1}}],[\"我们可以使用rm\",{\"1\":{\"644\":1}}],[\"我们可以使用并发集合来创建线程安全的集合\",{\"1\":{\"443\":1}}],[\"我们可以使用以下同步包装之一来创建线程安全的集合\",{\"1\":{\"442\":1}}],[\"我们可以轻松地创建线程安全的collections\",{\"1\":{\"442\":1}}],[\"我们可以轻松创建其字段为线程局部的类\",{\"1\":{\"441\":1}}],[\"我们可以很容易地使其成为线程局部\",{\"1\":{\"441\":1}}],[\"我们可以定义一个存储整数数组的\",{\"1\":{\"441\":1}}],[\"我们可以手动进行垃圾回收\",{\"1\":{\"388\":1}}],[\"我们要研究的第一种方法是\",{\"1\":{\"439\":1}}],[\"我们知道了必须设置survivor区\",{\"1\":{\"314\":1}}],[\"我们知道eden区中所有存活的对象会被复制到to区\",{\"1\":{\"311\":1}}],[\"我们都知道一个jvm进程中有多个线程在执行\",{\"1\":{\"297\":1}}],[\"我们都知道从十进制转成其他进制时就是不断地除于进制数得到余数\",{\"1\":{\"116\":1}}],[\"我们常见的类的对象的属性如果是原始类型则会克隆值\",{\"1\":{\"139\":1}}],[\"我们举个例子来看\",{\"1\":{\"89\":1}}],[\"我的博客即将同步至腾讯云+社区\",{\"1\":{\"421\":1}}],[\"我的个人链接\",{\"1\":{\"16\":1}}],[\"我的github提交排行榜\",{\"0\":{\"8\":1}}],[\"我的github贡献数据\",{\"0\":{\"7\":1}}],[\"我的github地址\",{\"0\":{\"6\":1}}],[\"我的技能点\",{\"0\":{\"5\":1}}],[\"我将及时添加您的博客\",{\"1\":{\"2\":1}}],[\"欢迎留言提交互加友链\",{\"1\":{\"16\":1}}],[\"欢迎到friend提交您的链接\",{\"1\":{\"2\":1}}],[\"欢迎来到moremind的博客\",{\"1\":{\"2\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
