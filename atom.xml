<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://www.moremind.cn/</id>
  <title>Moremind's Blog</title>
  <subtitle>Stay Hungry, Stay Foolish!</subtitle>
  <author>
    <name>Moremind</name>
  </author>
  <updated>2022-02-25T06:53:57.228Z</updated>
  <generator>@mr-hope/vuepress-plugin-feed</generator>
  <link rel="self" href="https://www.moremind.cn/atom.xml"/>
  <link rel="alternate" href="https://www.moremind.cn/"/>
  <rights>Copyright © 2017-present By Finen | Vuepress Theme By vuepress-theme-hope</rights>
  <category term="jvm"/>
  <category term="Hibernate"/>
  <category term="JPA"/>
  <category term="Mybaits"/>
  <category term="Relation-Database"/>
  <category term="MySQL"/>
  <category term="Elasticsearch"/>
  <category term="Redis"/>
  <category term="Java-Basic"/>
  <category term="Java-Collection"/>
  <category term="Java-IO"/>
  <category term="Java-New-Feature"/>
  <category term="Java-Thread"/>
  <category term="Memcache"/>
  <category term="Kafka"/>
  <category term="RabbitMQ"/>
  <category term="RocketMQ"/>
  <category term="Spring"/>
  <category term="SpringBoot"/>
  <category term="SpringCloud"/>
  <category term="Docker"/>
  <category term="Git"/>
  <category term="Kubernates"/>
  <category term="Linux"/>
  <category term="Maven"/>
  <contributor>
    <name>Moremind</name>
  </contributor>
  <contributor>
    <name>finen</name>
  </contributor>
  <contributor>
    <name>moremind</name>
  </contributor>
  <entry>
    <title type="html">My Book For 2022</title>
    <id>https://www.moremind.cn/book/</id>
    <link href="https://www.moremind.cn/book/"/>
    <updated>2022-01-18T16:47:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="_2022-阅读书籍"> 2022 阅读书籍</h2>
<h3 id="专业书籍"> 专业书籍</h3>
<ul>
<li><input type="checkbox"  disabled="disabled" id="task-item-0"><label for="task-item-0"> Plan A</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-1"><label for="task-item-1"> Plan B</label></li>
</ul>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-01T00:00:00.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">友链</title>
    <id>https://www.moremind.cn/friends/</id>
    <link href="https://www.moremind.cn/friends/"/>
    <updated>2022-01-18T16:47:42.000Z</updated>
    <content type="html"><![CDATA[<h3 id="左领右舍"> 左领右舍</h3>
<table>
<thead>
<tr>
<th>✌️✌️名称</th>
<th style="text-align:left">👍👍链接</th>
<th style="text-align:center">简介🎉 💯</th>
</tr>
</thead>
<tbody>
<tr>
<td>赵俊</td>
<td style="text-align:left"><a href="http://www.zhaojun.im/" target="_blank" rel="noopener noreferrer">赵俊的博客</a></td>
<td style="text-align:center">一个 Java 学习者的博客</td>
</tr>
<tr>
<td>R'Blog</td>
<td style="text-align:left"><a href="http://bolg.rvich.com/" target="_blank" rel="noopener noreferrer">R'Blog</a></td>
<td style="text-align:center">分享资源</td>
</tr>
<tr>
<td>随遇而安</td>
<td style="text-align:left"><a href="https://www.iszy.cc/" target="_blank" rel="noopener noreferrer">随遇而安</a></td>
<td style="text-align:center">技术分享&amp;生活吐槽</td>
</tr>
<tr>
<td>GongJS</td>
<td style="text-align:left"><a href="https://gongjs.github.io/" target="_blank" rel="noopener noreferrer">GongJS</a></td>
<td style="text-align:center">Talk is cheap,show me the code.</td>
</tr>
<tr>
<td>谭升的博客</td>
<td style="text-align:left"><a href="https://face2ai.com" target="_blank" rel="noopener noreferrer">谭升的博客</a></td>
<td style="text-align:center">人工智能算法，数学基础类原创博客</td>
</tr>
<tr>
<td>冰水鉴心的博客</td>
<td style="text-align:left"><a href="https://xq773939719.github.io/" target="_blank" rel="noopener noreferrer">冰水鉴心的博客</a></td>
<td style="text-align:center">.软工渣.编程痴.开发宅.系统迷.强迫症</td>
</tr>
<tr>
<td>LmCjl在线工具</td>
<td style="text-align:left"><a href="https://www.lmcjl.com" target="_blank" rel="noopener noreferrer">LmCjl在线工具</a></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>YuYe</td>
<td style="text-align:left"><a href="https://chenyeah.com/" target="_blank" rel="noopener noreferrer">YuYe</a></td>
<td style="text-align:center">专注于前端技术</td>
</tr>
<tr>
<td>笨小孩杂谈</td>
<td style="text-align:left"><a href="https://rocky-191.github.io/" target="_blank" rel="noopener noreferrer">笨小孩杂谈</a></td>
<td style="text-align:center">专注前端技术</td>
</tr>
<tr>
<td>yoko blog</td>
<td style="text-align:left"><a href="https://pengrl.com" target="_blank" rel="noopener noreferrer">yoko blog</a></td>
<td style="text-align:center">目前主要写些c++和Go语言方面的博客</td>
</tr>
<tr>
<td>六阿哥博客</td>
<td style="text-align:left"><a href="https://blog.6ag.cn/" target="_blank" rel="noopener noreferrer">六阿哥博客</a></td>
<td style="text-align:center">记录一个程序员的成长历程</td>
</tr>
<tr>
<td>枫糖</td>
<td style="text-align:left"><a href="https://blog.maplesugar.top" target="_blank" rel="noopener noreferrer">枫糖</a></td>
<td style="text-align:center">From rookie to master</td>
</tr>
<tr>
<td>Serence</td>
<td style="text-align:left"><a href="https://blog.blinkstar.cn" target="_blank" rel="noopener noreferrer">Serence</a></td>
<td style="text-align:center">一个程序员 + 文艺青年的博客</td>
</tr>
<tr>
<td>羽叶丶</td>
<td style="text-align:left"><a href="https://yuye.fun" target="_blank" rel="noopener noreferrer">羽叶丶</a></td>
<td style="text-align:center">羽叶丶的个人博客</td>
</tr>
<tr>
<td>飞跃高山和大洋的🐟</td>
<td style="text-align:left"><a href="https://timspan.github.io/" target="_blank" rel="noopener noreferrer">飞跃高山和大洋的🐟</a></td>
<td style="text-align:center">前端</td>
</tr>
</tbody>
</table>
<h3 id="优秀技术博客"> 优秀技术博客</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:left">链接</th>
<th style="text-align:center">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>美团技术团队</td>
<td style="text-align:left"><a href="https://tech.meituan.com/" target="_blank" rel="noopener noreferrer">美团技术团队</a></td>
<td style="text-align:center">美团技术团队相关文档</td>
</tr>
<tr>
<td>FEX技术周刊</td>
<td style="text-align:left"><a href="http://fex.baidu.com/" target="_blank" rel="noopener noreferrer">FEX技术周刊</a></td>
<td style="text-align:center">FEX技术周刊</td>
</tr>
<tr>
<td>前端精读周刊</td>
<td style="text-align:left"><a href="https://github.com/dt-fe/weekly" target="_blank" rel="noopener noreferrer">前端精读周刊</a></td>
<td style="text-align:center">前端精读周刊</td>
</tr>
<tr>
<td>前端资源汇总仓库</td>
<td style="text-align:left"><a href="https://github.com/helloqingfeng/Awsome-Front-End-learning-resource" target="_blank" rel="noopener noreferrer">前端资源汇总仓库</a></td>
<td style="text-align:center">前端资源汇总仓库</td>
</tr>
<tr>
<td>后端架构师技术图谱</td>
<td style="text-align:left"><a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="noopener noreferrer">后端架构师技术图谱</a></td>
<td style="text-align:center">后端架构师技术图谱</td>
</tr>
<tr>
<td>CS-NOTES</td>
<td style="text-align:left"><a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener noreferrer">CS-NOTES</a></td>
<td style="text-align:center">CS-NOTES</td>
</tr>
<tr>
<td>JAVA-进阶</td>
<td style="text-align:left"><a href="https://doocs.gitee.io/advanced-java/#/" target="_blank" rel="noopener noreferrer">JAVA-进阶</a></td>
<td style="text-align:center">JAVA-进阶</td>
</tr>
<tr>
<td>经典编程书籍大全</td>
<td style="text-align:left"><a href="https://github.com/jobbole/awesome-programming-books" target="_blank" rel="noopener noreferrer">经典编程书籍大全</a></td>
<td style="text-align:center">经典编程书籍大全</td>
</tr>
<tr>
<td>代码日志</td>
<td style="text-align:left"><a href="https://codeday.me/" target="_blank" rel="noopener noreferrer">代码日志</a></td>
<td style="text-align:center">代码日志</td>
</tr>
<tr>
<td>阿里中间件团队博客</td>
<td style="text-align:left"><a href="http://jm.taobao.org/" target="_blank" rel="noopener noreferrer">阿里中间件团队博客</a></td>
<td style="text-align:center">阿里中间件团队博客</td>
</tr>
<tr>
<td>自然语言处理</td>
<td style="text-align:left"><a href="http://www.hankcs.com/" target="_blank" rel="noopener noreferrer">自然语言处理</a></td>
<td style="text-align:center">自然语言处理</td>
</tr>
<tr>
<td>崔庆才的个人博客</td>
<td style="text-align:left"><a href="https://cuiqingcai.com/" target="_blank" rel="noopener noreferrer">崔庆才的个人博客</a></td>
<td style="text-align:center">崔庆才的个人博客</td>
</tr>
<tr>
<td>Frank</td>
<td style="text-align:left"><a href="https://www.frankfeekr.cn/" target="_blank" rel="noopener noreferrer">Frank</a></td>
<td style="text-align:center">Frank的个人博客</td>
</tr>
<tr>
<td>并发编程网</td>
<td style="text-align:left"><a href="http://ifeve.com/" target="_blank" rel="noopener noreferrer">并发编程网</a></td>
<td style="text-align:center">并发编程网</td>
</tr>
<tr>
<td>java与cs-base</td>
<td style="text-align:left"><a href="http://java.isture.com/" target="_blank" rel="noopener noreferrer">java与cs-base</a></td>
<td style="text-align:center">java与cs-base</td>
</tr>
</tbody>
</table>
<div><p>提示</p>
<p>欢迎留言提交互加友链!最好提供你网站的简介哟<br>
如果您需要更改您的链接或者链接有错误，请联系我: <a href="mailto:hefengen@hotmail.com">hefengen@hotmail.com</a></p>
</div>
<div><p>我的个人链接</p>
<p>昵称：Finen<br>
链接：https://www.finen.top/<br>
头像链接：https://finen-1251602255.cos.ap-shanghai.myqcloud.com/file/pic/finen.png<br>
介绍：Stay Hungry! Stay Foolish!</p>
</div>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2018-04-28T00:00:00.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Project home</title>
    <id>https://www.moremind.cn/home/</id>
    <link href="https://www.moremind.cn/home/"/>
    <updated>2022-01-12T12:29:41.000Z</updated>
    <content type="html"><![CDATA[<p>This is an example of a normal homepage. You can place your main content here.</p>
<p>To use this layout, you need to set <code>home: true</code> in the page front matter.</p>
<p>For related descriptions of configuration items, please see <a href="https://vuepress-theme-hope.github.io/guide/layout/home/" target="_blank" rel="noopener noreferrer">Project HomePage Layout Config</a>.</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-12T12:29:41.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Intro Page</title>
    <id>https://www.moremind.cn/intro/</id>
    <link href="https://www.moremind.cn/intro/"/>
    <updated>2022-01-14T09:08:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="intro-page"> Intro Page</h1>
<p>Place your introducation and profile here.</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-12T12:29:41.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">算法</title>
    <id>https://www.moremind.cn/md/construct/construct/</id>
    <link href="https://www.moremind.cn/md/construct/construct/"/>
    <updated>2022-01-13T16:50:45.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="jvm"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">算法</title>
    <id>https://www.moremind.cn/md/construct/design/</id>
    <link href="https://www.moremind.cn/md/construct/design/"/>
    <updated>2022-01-13T16:50:45.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="jvm"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">算法</title>
    <id>https://www.moremind.cn/md/cs/alg/</id>
    <link href="https://www.moremind.cn/md/cs/alg/"/>
    <updated>2022-01-13T16:50:45.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="jvm"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">数据结构</title>
    <id>https://www.moremind.cn/md/cs/datastructure/</id>
    <link href="https://www.moremind.cn/md/cs/datastructure/"/>
    <updated>2022-01-13T16:50:45.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图
JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="jvm"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">计算机网络</title>
    <id>https://www.moremind.cn/md/cs/network/</id>
    <link href="https://www.moremind.cn/md/cs/network/"/>
    <updated>2022-01-13T16:50:45.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="jvm"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">操作系统</title>
    <id>https://www.moremind.cn/md/cs/os/</id>
    <link href="https://www.moremind.cn/md/cs/os/"/>
    <updated>2022-01-13T16:50:45.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="jvm"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">hibernate</title>
    <id>https://www.moremind.cn/md/data-persistence/hibernate/</id>
    <link href="https://www.moremind.cn/md/data-persistence/hibernate/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Hibernate"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">jpa</title>
    <id>https://www.moremind.cn/md/data-persistence/jpa/</id>
    <link href="https://www.moremind.cn/md/data-persistence/jpa/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="JPA"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">mybatis-进阶</title>
    <id>https://www.moremind.cn/md/data-persistence/mybatis-advance/</id>
    <link href="https://www.moremind.cn/md/data-persistence/mybatis-advance/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Mybaits"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-21T15:41:02.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">mybatis</title>
    <id>https://www.moremind.cn/md/data-persistence/mybatis/</id>
    <link href="https://www.moremind.cn/md/data-persistence/mybatis/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Mybaits"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">数据库进阶</title>
    <id>https://www.moremind.cn/md/db/db-advance/</id>
    <link href="https://www.moremind.cn/md/db/db-advance/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Relation-Database"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-14T17:15:37.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">数据库知识体系</title>
    <id>https://www.moremind.cn/md/db/db-basic/</id>
    <link href="https://www.moremind.cn/md/db/db-basic/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>数据库基础知识体系</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Relation-Database"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-14T17:15:37.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">MySQL知识体系</title>
    <id>https://www.moremind.cn/md/db/db-mysql/</id>
    <link href="https://www.moremind.cn/md/db/db-mysql/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="MySQL"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-21T15:41:02.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Elasticsearch知识体系</title>
    <id>https://www.moremind.cn/md/db/db-nosql-elasticsearch/</id>
    <link href="https://www.moremind.cn/md/db/db-nosql-elasticsearch/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Elasticsearch"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-21T15:41:02.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Redis知识体系</title>
    <id>https://www.moremind.cn/md/db/db-nosql-redis/</id>
    <link href="https://www.moremind.cn/md/db/db-nosql-redis/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Redis"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-21T15:41:02.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">java基础</title>
    <id>https://www.moremind.cn/md/java/basic/</id>
    <link href="https://www.moremind.cn/md/java/basic/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Java-Basic"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">ArrayList源码解析</title>
    <id>https://www.moremind.cn/md/java/collection/ArrayList-Source/</id>
    <link href="https://www.moremind.cn/md/java/collection/ArrayList-Source/"/>
    <updated>2022-02-25T04:20:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="集合关系图谱"> 集合关系图谱</h2>
<blockquote>
<p>Java集合框架包括Collection和Map，Collection主要用于存储对象，Map主要用用于存储键值对数据。
<img src="https://gitee.com/forge-logic/images-lib/raw/master/img/Java-collection-cheat-sheet.PNG" alt="Java-Collection" /></p>
</blockquote>
<h2 id="介绍"> 介绍</h2>
<p>容器，就是可以容纳其他Java对象的对象。*Java Collections Framework(JCF)*为Java开发者提供了通用的容器，其始于JDK 1.2，优点是:</p>
<ul>
<li>降低编程难度</li>
<li>提高程序性能</li>
<li>提高API间的互操作性</li>
<li>降低学习难度</li>
<li>降低设计和实现相关API的难度</li>
<li>增加程序的重用性
Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Double等)才能放到容器里。很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。</li>
</ul>
<h2 id="collection"> Collection</h2>
<h3 id="list"> List</h3>
<h4 id="arraylist简介"> ArrayList简介</h4>
<p>ArrayList继承自<code>AbstractList</code>，实现了 List 接口。底层基于数组实现容量大小动态变化。允许 null 的存在。同时还实现了<code>RandomAccess</code>、<code>Cloneable</code>、<code>Serializable</code> 接口，所以ArrayList 是支持快速访问、复制、序列化的。基于动态数组实现，支持随机访问。</p>
<h4 id="linkedlist"> LinkedList</h4>
<h3 id="set"> Set</h3>
<h4 id="hashset"> Hashset</h4>
<h4 id="linkedhashset"> LinkedHashSet</h4>
<h3 id="queue"> Queue</h3>
<h4 id="deque"> Deque</h4>
<h4 id="arraydeque"> ArrayDeque</h4>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Java-Collection"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-02-24T09:46:27.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">LinkedList源码解析</title>
    <id>https://www.moremind.cn/md/java/collection/LinkedList-Source/</id>
    <link href="https://www.moremind.cn/md/java/collection/LinkedList-Source/"/>
    <updated>2022-02-25T06:53:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="集合关系图谱"> 集合关系图谱</h2>
<blockquote>
<p>Java集合框架包括Collection和Map，Collection主要用于存储对象，Map主要用用于存储键值对数据。</p>
</blockquote>
<h2 id="collection"> Collection</h2>
<h3 id="list"> List</h3>
<h4 id="arraylist"> ArrayList</h4>
<h4 id="linkedlist"> LinkedList</h4>
<h3 id="set"> Set</h3>
<h4 id="hashset"> Hashset</h4>
<h4 id="linkedhashset"> LinkedHashSet</h4>
<h3 id="queue"> Queue</h3>
<h4 id="deque"> Deque</h4>
<h4 id="arraydeque"> ArrayDeque</h4>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Java-Collection"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-02-24T09:46:27.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">java集合框架知识图谱</title>
    <id>https://www.moremind.cn/md/java/collection/</id>
    <link href="https://www.moremind.cn/md/java/collection/"/>
    <updated>2022-02-25T06:53:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="集合关系图谱"> 集合关系图谱</h2>
<blockquote>
<p>Java集合框架包括Collection和Map，Collection主要用于存储对象，Map主要用用于存储键值对数据。
<img src="https://gitee.com/forge-logic/images-lib/raw/master/img/Java-collection-cheat-sheet.PNG" alt="Java-Collection" /></p>
</blockquote>
<h2 id="介绍"> 介绍</h2>
<p>容器，就是可以容纳其他Java对象的对象。*Java Collections Framework(JCF)*为Java开发者提供了通用的容器，其始于JDK 1.2，优点是:</p>
<ul>
<li>降低编程难度</li>
<li>提高程序性能</li>
<li>提高API间的互操作性</li>
<li>降低学习难度</li>
<li>降低设计和实现相关API的难度</li>
<li>增加程序的重用性
Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Double等)才能放到容器里。很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。</li>
</ul>
<h2 id="collection"> Collection</h2>
<h3 id="list"> List</h3>
<h4 id="arraylist简介"> ArrayList简介</h4>
<p>1.ArrayList继承自<code>AbstractList</code>，实现了<code>List</code>、<code>RandomAccess</code>、<code>Cloneable</code>、<code>Serializable</code>接口。</p>
<p>2.底层基于动态数组实现容量大小动态变化（容量可自动增长）。</p>
<p>3.允许<code>null</code>的存在。</p>
<p>4.ArrayList是支持快速访问、复制、序列化的。基于动态数组实现，支持。</p>
<p>5.ArrayList是非同步的。</p>
<p>6.ArrayList的iterator和listIterator方法返回的迭代器是fail-fast的。</p>
<h4 id="linkedlist"> LinkedList</h4>
<p>1.LinkedList继承自<code>AbstractSequentialList</code>，实现了<code>List</code>、<code>Deque</code>、<code>Cloneable</code>、<code>Serializable</code>接口，LinkedList是基于链表实现的，只能顺序访问。</p>
<p>2.<code>LinkedList</code>插入和删除方面要优于<code>ArrayList</code>。</p>
<p>3.LinkedList是非同步的。</p>
<p>4.LinkedList的iterator和listIterator方法返回的迭代器是fail-fast的。</p>
<h3 id="set"> Set</h3>
<h4 id="hashset"> Hashset</h4>
<p>1.HashSet继承自<code>AbstractSet</code>,实现了<code>Set</code>、<code>Cloneable</code>、<code>Serializable</code>接口,底层是一个HashMap。</p>
<p>2.HashSet是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于：hashCode与equals方法。</p>
<p>3.HashSet中元素都是无序的(即存取顺序不一致)；</p>
<p>4.HashSet没有下标选取，只能通过增强for循环或者迭代器取出元素；</p>
<p>5.HashSet是非同步的；</p>
<p>6.HashSet的iterator方法返回的迭代器是fail-fast的。</p>
<h4 id="linkedhashset"> LinkedHashSet</h4>
<p>1.LinkedHashSet继承自<code>HashSet</code>，实现了<code>Set</code>、<code>Cloneable</code>接口，底层其实是一个LinkedHashMap。</p>
<p>2.不能保证插入和输出的顺序一致。</p>
<p>3.不允许重复的元素插入，可以插入null。</p>
<p>4.HashSet的iterator方法返回的迭代器是fail-fast的。</p>
<h4 id="treeset"> TreeSet</h4>
<h3 id="queue"> Queue</h3>
<h4 id="deque"> Deque</h4>
<h4 id="arraydeque"> ArrayDeque</h4>
<h2 id="map"> Map</h2>
<h3 id="hashmap"> HashMap</h3>
<p>1.HashMap 基于哈希表的Map接口实现，是以 key-value 存储形式存在，即主要用来存放键值对</p>
<p>2.HashMap 的实现不是同步的，这意味着它不是线程安全的</p>
<p>3.HashMap 中的映射不是有序的(即存取顺序不一致)</p>
<p>4.实现结构是 数组+链表+红黑树</p>
<h3 id="linkedhashmap"> LinkedHashMap</h3>
<h3 id="hashtable"> HashTable</h3>
<p>1.与HashMap一样，Hashtable也是一个散列表，是以key-value存储形式存在，即主要用来存放键值对；</p>
<p>2.与HashMap不同，Hashtable的函数都是同步的，这意味着它是线程安全的；</p>
<p>3.Hashtable的key、value都不可以为null，并且，Hashtable中的映射不是有序的；</p>
<p>4.实现结构是数组+单向链表。</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Java-Collection"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Java IO框架图谱</title>
    <id>https://www.moremind.cn/md/java/io/</id>
    <link href="https://www.moremind.cn/md/java/io/"/>
    <updated>2022-01-17T14:28:59.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Java-IO"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">JVM内存图谱</title>
    <id>https://www.moremind.cn/md/java/jvm/</id>
    <link href="https://www.moremind.cn/md/java/jvm/"/>
    <updated>2022-01-14T09:08:36.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="jvm"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Java 字节码反编译成汇编-使用JITWatch</title>
    <id>https://www.moremind.cn/md/java/jvm/java-jitwatch/</id>
    <link href="https://www.moremind.cn/md/java/jvm/java-jitwatch/"/>
    <updated>2022-01-13T09:49:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="java-字节码反编译成汇编"> Java 字节码反编译成汇编</h1>
<blockquote>
<p>本位以windows环境为前提，JDK版本为Oracle Sun JDK8-64位</p>
</blockquote>
<h2 id="hsdis环境准备"> Hsdis环境准备</h2>
<h3 id="_1-下载hsdis-amd64-dylib"> 1.下载hsdis-amd64.dylib</h3>
<blockquote>
<p>下载地址如下：https://github.com/evolvedmicrobe/benchmarks/blob/master/hsdis-amd64.dylib</p>
</blockquote>
<h3 id="_2-下载hsdis-amd64-dll"> 2.下载hsdis-amd64.dll</h3>
<blockquote>
<p>下载地址如下：https://github.com/atzhangsan/file_loaded</p>
</blockquote>
<h3 id="_3-配置hsdis-amd64-dylib和hsdis-amd64-dll"> 3.配置hsdis-amd64.dylib和hsdis-amd64.dll</h3>
<p>a.将下载好的hsdis-amd64.dll文件放置在JDK路径下<code>\jre\bin</code>目录下。</p>
<blockquote>
<p>e.g. C:\Program Files\Java\jdk1.8.0_161\jre\bin</p>
</blockquote>
<p>b.将下载好的hsdis-amd64.dylib文件放置在JDK路径下的<code>\jre\lib</code>目录下。</p>
<blockquote>
<p>e.g. C:\Program Files\Java\jdk1.8.0_161\jre\lib</p>
</blockquote>
<h3 id="_4-测试验证是否配置成功"> 4.测试验证是否配置成功</h3>
<p>使用命令<code>java -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -version</code>验证是否配置成功。如果出现如下所示则说明配置成功。</p>
<p><img src="https://gitee.com/forge-logic/images-lib/raw/master/img/image-20210414230849483.png" alt="image-20210414230849483" /></p>
<h3 id="_5-自行构建hsdis-如果你有兴趣的话"> 5.自行构建hsdis(如果你有兴趣的话)</h3>
<p>如果你有兴趣自行编译hsdis的话，可以参考如下的几个链接，然后把编译好的文件放在jdk的jre目录下的如上所<code>3</code>述路径。</p>
<p>1.http://www.chrisnewland.com/building-hsdis-on-linux-amd64-on-debian-369</p>
<p>2.http://psy-lob-saw.blogspot.com/2013/01/java-print-assembly.html</p>
<h2 id="jitwatch环境"> JITWatch环境</h2>
<h3 id="_1-下载jitwatch"> 1.下载JITWatch</h3>
<blockquote>
<p>下载路径如下：https://github.com/AdoptOpenJDK/jitwatch/releases</p>
</blockquote>
<p>如果你有兴趣的话，当然也可以参考官方文档进行编译。</p>
<p>JITWatch链接如下：</p>
<blockquote>
<p>https://github.com/AdoptOpenJDK/jitwatch</p>
</blockquote>
<p>编译命令如下：</p>
<div><pre><code>ant编译：
ant clean compile <span>test</span> run
maven编译：
mvn clean compile <span>test</span> exec:java
gradle编译：
gradlew clean build run
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="_2-配置运行jitwatch"> 2.配置运行JITWatch</h3>
<p>a.启动，使用<code>java -jar jitwatch-ui-1.4.0-shaded-win.jar</code>启动jitwatch，启动成功后如下所示</p>
<p><img src="https://gitee.com/forge-logic/images-lib/raw/master/img/image-20210414232505669.png" alt="image-20210414232505669" /></p>
<p>b.配置，点击<code>sandbox</code>按钮打开窗口，再点击<code>Configure Sandbox</code>按钮，配置如下几个参数</p>
<blockquote>
<p>1.java classes目录</p>
<p>2.java 运行目录为你本地的配置使用的JDK路径</p>
<p>3.java运行参数，添加hsdis的运行参数配置</p>
</blockquote>
<p><img src="https://gitee.com/forge-logic/images-lib/raw/master/img/image-20210414233652204.png" alt="image-20210414233652204" /></p>
<p>c.运行，点击<code>open</code>按钮打开需要编译的java代码，点击<code>Run</code>按钮运行得到下图所示</p>
<p><img src="https://gitee.com/forge-logic/images-lib/raw/master/img/image-20210414232726380.png" alt="image-20210414232726380" /></p>
<p><img src="https://gitee.com/forge-logic/images-lib/raw/master/img/image-20210414234418226.png" alt="image-20210414234418226" /></p>
<h3 id="_3-jitwatch简单使用"> 3.JITwatch简单使用</h3>
<h4 id="模块化查看字节码和汇编码"> 模块化查看字节码和汇编码</h4>
<p><img src="https://gitee.com/forge-logic/images-lib/raw/master/img/image-20210414234700267.png" alt="image-20210414234700267" /></p>
<h4 id="使用toplist查看资源占用率"> 使用topList查看资源占用率</h4>
<p>在JITWatch窗口点击<code>TopList</code>按钮，即可查看资源占用率。</p>
<p><img src="https://gitee.com/forge-logic/images-lib/raw/master/img/image-20210414235239556.png" alt="image-20210414235239556" /></p>
<h4 id="更多资料"> 更多资料</h4>
<p>1.https://www.chrisnewland.com/images/jitwatch/HotSpot_Profiling_Using_JITWatch.pdf</p>
<p>2.https://github.com/AdoptOpenJDK/jitwatch/wiki</p>
<h2 id="参考文章"> 参考文章</h2>
<p>1.利用hsdis和JITWatch查看分析HotSpot JIT compiler生成的汇编代码.https://blog.csdn.net/hengyunabc/article/details/26898657</p>
<p>2.JITWatch Wiki.https://github.com/AdoptOpenJDK/jitwatch/wiki</p>
<blockquote>
<p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=17nuh698omdi4</p>
</blockquote>
]]></content>
    <author>
      <name>finen</name>
    </author>
    <contributor>
      <name>finen</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by finen</rights>
  </entry>
  <entry>
    <title type="html">Java新特性</title>
    <id>https://www.moremind.cn/md/java/new-feature/</id>
    <link href="https://www.moremind.cn/md/java/new-feature/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Java-New-Feature"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">java基础</title>
    <id>https://www.moremind.cn/md/java/thread/</id>
    <link href="https://www.moremind.cn/md/java/thread/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Java-Thread"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">到底什么是线程安全和线程不安全？</title>
    <id>https://www.moremind.cn/md/java/thread/thread-safety/</id>
    <link href="https://www.moremind.cn/md/java/thread/thread-safety/"/>
    <updated>2022-01-17T15:11:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="_1-什么是线程安全"> 1.什么是线程安全？</h2>
<p>维基百科给出的定义如下：</p>
<blockquote>
<p>线程安全是程式设计中的术语，指<strong>某个函数、函数库</strong>在<strong>多线程环境</strong>中被调用时，能够正确地处理多个线程之间的<strong>共享变量</strong>，使程序功能正确完成。</p>
</blockquote>
<p>在《Java并发编程实战》一书中给出如下定义：</p>
<blockquote>
<p>一个对象是否需要是线程安全的，取决于它是否被多个线程访问。<strong>这只和对象在程序中是以何种方式被使用的有关，和对象本身具体是做什么的无关。</strong></p>
</blockquote>
<p>在《深入Java虚拟机》一书中给出如下定义：</p>
<blockquote>
<p>当多个线程访问同一个对象时，**如果不用考虑这些线程在运行时环境下的调度和交替运行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，**调用这个对象的行为都可以获取正确的结果，那这个对象是线程安全的。</p>
</blockquote>
<p>线程安全：在多线程同时访问一个资源时，线程间依照某种方式访问资源时，访问的结果总是能获取到正确的结果。</p>
<h2 id="_2-java内存模型-jmm"> 2.Java内存模型-JMM</h2>
<p><img src="https://gitee.com/forge-logic/images-lib/raw/master/img/16bf62d8c174d776.jpg" alt="16bf62d8c174d776" /></p>
<p>上图描述了一个多线程执行场景。 线程 A 和线程 B 分别对主内存的<code>变量</code>进行读写操作。其中<strong>主内存</strong>中的<code>变量</code>为<code>共享变量</code>,也就是说此变量只此一份，多个线程间共享。但是线程不能直接读写主内存的<code>共享变量</code>，每个线程都有自己的<strong>工作内存</strong>，线程需要读写主内存的<code>共享变量</code>时需要先将该变量拷贝一份副本到自己的工作内存，然后在自己的工作内存中对该变量进行所有操作，线程工作内存对变量副本完成操作之后需要将结果同步至主内存。</p>
<blockquote>
<p>线程的工作内存是线程私有内存，线程间无法互相访问对方的工作内存。</p>
</blockquote>
<h2 id="_3-共享变量-共享资源"> 3.共享变量(共享资源)</h2>
<p>所谓共享变量，指的是多个线程都可以操作的变量。进程是分配资源的基本单位，线程是执行的基本单位。所以，多个线程之间是可以共享一部分进程中的数据的。在JVM中，Java堆和方法区的区域是多个线程共享的数据区域。也就是说，多个线程可以操作保存在堆或者方法区中的同一个数据。那么，<strong>保存在堆和方法区中的变量就是Java中的共享变量。</strong></p>
<p>那么，Java中哪些变量是存放在堆中，哪些变量是存放在方法区中，又有哪些变量是存放在栈中的呢？</p>
<p>Java中共有三种变量，<strong>分别是类变量、成员变量和局部变量。他们分别存放在JVM的方法区、堆内存和栈内存中。</strong>（栈内存是程序线程独占空间）</p>
<div><pre><code><span>public</span> <span>class</span> <span>Variables</span> <span>{</span>

    <span>/**
     * 类变量
     */</span>
    <span>private</span> <span>static</span> <span>int</span> a<span>;</span>

    <span>/**
     * 成员变量
     */</span>
    <span>private</span> <span>int</span> b<span>;</span>

    <span>/**
     * 局部变量
     * @param c
     */</span>
    <span>public</span> <span>void</span> <span>test</span><span>(</span><span>int</span> c<span>)</span><span>{</span>
        <span>int</span> d<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>上面定义的三个变量中，变量a就是类变量，变量b就是成员变量，而变量c和d是局部变量。</p>
<p>所以，变量a和b是共享变量，变量c和d是非共享变量。所以如果遇到多线程场景，对于变量a和b的操作是需要考虑线程安全的，而对于线程c和d的操作是不需要考虑线程安全的。</p>
<h2 id="_4-线程安全的实现"> 4.线程安全的实现</h2>
<h3 id="_4-1-无状态实现"> 4.1 无状态实现</h3>
<p>在大多数情况下，多线程应用中的错误是错误地在多个线程之间共享状态的结果。</p>
<p>因此，我们要研究的第一种方法是 <strong>使用无状态实现</strong>来实现线程安全。</p>
<p>为了更好地理解这种方法，让我们考虑一个带有静态方法的简单工具类，该方法可以计算数字的阶乘：</p>
<div><pre><code><span>public</span> <span>class</span> <span>MathUtils</span> <span>{</span>
    
    <span>public</span> <span>static</span> <span>BigInteger</span> <span>factorial</span><span>(</span><span>int</span> number<span>)</span> <span>{</span>
        <span>BigInteger</span> f <span>=</span> <span>new</span> <span>BigInteger</span><span>(</span><span>"1"</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>2</span><span>;</span> i <span>&lt;=</span> number<span>;</span> i<span>++</span><span>)</span> <span>{</span>
            f <span>=</span> f<span>.</span><span>multiply</span><span>(</span><span>BigInteger</span><span>.</span><span>valueOf</span><span>(</span>i<span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> f<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><strong><code>factorial</code>方法是一种无状态确定性函数。</strong> 确定性是指：给定特定的输入，它将始终产生相同的输出。</p>
<p>该方法<strong>既不依赖外部状态，也不维护自身的状态</strong>。因此，它被认为是线程安全的，并且可以同时被多个线程安全地调用。</p>
<p>所有线程都可以安全地调用 <code>factorial</code> 方法，并且将获得预期结果，而不会互相干扰，也不会更改该方法为其他线程生成的输出。</p>
<p>因此，<strong>无状态实现是实现线程安全的最简单方法</strong>。</p>
<h3 id="_4-2-不可变的实现"> 4.2  不可变的实现</h3>
<p><strong>如果我们需要在不同线程之间共享状态，则可以通过使它们成为不可变对象来创建线程安全类</strong>。</p>
<p>不变性是一个功能强大，与语言无关的概念，在Java中相当容易实现。</p>
<p><strong>当类实例的内部状态在构造之后无法修改时，它是不可变的</strong>。</p>
<p>在Java中创建不可变类的最简单方法是声明所有字段为 <em>private</em> 和 <em>final</em> ，且不提供 setter：</p>
<div><pre><code><span>public</span> <span>class</span> <span>MessageService</span> <span>{</span>
    
    <span>private</span> <span>final</span> <span>String</span> message<span>;</span>
 
    <span>public</span> <span>MessageService</span><span>(</span><span>String</span> message<span>)</span> <span>{</span>
        <span>this</span><span>.</span>message <span>=</span> message<span>;</span>
    <span>}</span>
    
    <span>// 标准 getter</span>
    
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>一个 <em>MessageService</em> 对象实际上是不可变的，因为它的状态在构造之后不能更改。因此，它是线程安全的。</p>
<p>此外，如果 <em>MessageService</em> 实际上是<strong>可变</strong>的，但是多个线程仅对其具有<strong>只读</strong>访问权限，那么它也是线程安全的。</p>
<p>因此，<strong>不变性是实现线程安全的另一种方法</strong>。</p>
<h3 id="_4-3-线程私有-threadlocal-字段"> 4.3 线程私有 (ThreadLocal) 字段</h3>
<p>在面向对象编程（OOP）中，对象实际上需要通过字段维护状态并通过一种或多种方法来实现行为。</p>
<p>如果我们确实需要维护状态，<strong>则可以通过使它们的字段成为线程局部的来创建不在线程之间共享状态的线程安全类。</strong></p>
<p>通过简单地在 <em><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html" target="_blank" rel="noopener noreferrer">Thread</a></em> 类中定义私有字段，我们可以轻松创建其字段为线程局部的类。</p>
<p>例如，我们可以定义一个存储整数数组的 <em>Thread</em> 类：</p>
<div><pre><code><span>public</span> <span>class</span> <span>ThreadA</span> <span>extends</span> <span>Thread</span> <span>{</span>
    
    <span>private</span> <span>final</span> <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> numbers <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>)</span><span>;</span>
    
    <span>@Override</span>
    <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
        numbers<span>.</span><span>forEach</span><span>(</span><span>System</span><span>.</span>out<span>::</span><span>println</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>而另一个类可能拥有一个字符串数组：</p>
<div><pre><code><span>public</span> <span>class</span> <span>ThreadB</span> <span>extends</span> <span>Thread</span> <span>{</span>
    
    <span>private</span> <span>final</span> <span>List</span><span><span>&lt;</span><span>String</span><span>></span></span> letters <span>=</span> <span>Arrays</span><span>.</span><span>asList</span><span>(</span><span>"a"</span><span>,</span> <span>"b"</span><span>,</span> <span>"c"</span><span>,</span> <span>"d"</span><span>,</span> <span>"e"</span><span>,</span> <span>"f"</span><span>)</span><span>;</span>
    
    <span>@Override</span>
    <span>public</span> <span>void</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
        letters<span>.</span><span>forEach</span><span>(</span><span>System</span><span>.</span>out<span>::</span><span>println</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p><strong>在这两种实现中，这些类都有其自己的状态，但是不与其他线程共享。因此，这些类是线程安全的。</strong></p>
<p>同样，我们可以通过将 <em><a href="https://www.baeldung.com/java-threadlocal" target="_blank" rel="noopener noreferrer">ThreadLocal</a></em> 实例分配给一个字段来创建线程私有字段。</p>
<p>例如，让我们考虑以下 <em>StateHolder</em> 类：</p>
<div><pre><code><span>public</span> <span>class</span> <span>StateHolder</span> <span>{</span>
    
    <span>private</span> <span>final</span> <span>String</span> state<span>;</span>
 
    <span>// 标准的构造函数和 getter</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>我们可以很容易地使其成为线程局部（ThreadLocal）变量，如下所示：</p>
<div><pre><code><span>public</span> <span>class</span> <span>ThreadState</span> <span>{</span>
    
    <span>public</span> <span>static</span> <span>final</span> <span>ThreadLocal</span><span><span>&lt;</span><span>StateHolder</span><span>></span></span> statePerThread <span>=</span> <span>new</span> <span>ThreadLocal</span><span><span>&lt;</span><span>StateHolder</span><span>></span></span><span>(</span><span>)</span> <span>{</span>
        
        <span>@Override</span>
        <span>protected</span> <span>StateHolder</span> <span>initialValue</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>new</span> <span>StateHolder</span><span>(</span><span>"active"</span><span>)</span><span>;</span>  
        <span>}</span>
    <span>}</span><span>;</span>
 
    <span>public</span> <span>static</span> <span>StateHolder</span> <span>getState</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> statePerThread<span>.</span><span>get</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>线程局部字段与普通类字段非常相似，不同之处在于，每个通过setter / getter访问它们的线程都将获得该字段的独立初始化副本，以便每个线程都有自己的状态。</p>
<h3 id="_4-4-同步集合类"> 4.4 同步集合类</h3>
<p>通过使用<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html" target="_blank" rel="noopener noreferrer">collections框架</a> 中包含的一组同步包装器，我们可以轻松地创建线程安全的<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html" target="_blank" rel="noopener noreferrer">collections</a>。</p>
<p>例如，我们可以使用以下<a href="https://www.baeldung.com/java-synchronized-collections" target="_blank" rel="noopener noreferrer">同步包装之一</a>来创建线程安全的集合：</p>
<div><pre><code>Collection&lt;Integer&gt; syncCollection = Collections.synchronizedCollection(new ArrayList&lt;&gt;());
Thread thread1 = new Thread(() -&gt; syncCollection.addAll(Arrays.asList(1, 2, 3, 4, 5, 6)));
Thread thread2 = new Thread(() -&gt; syncCollection.addAll(Arrays.asList(7, 8, 9, 10, 11, 12)));
thread1.start();
thread2.start();
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>让我们记住，同步集合在每种方法中都使用内在锁定（我们将在后面介绍内在锁定）。</p>
<p>这意味着<strong>该方法一次只能由一个线程访问，而其他线程将被阻塞，直到该方法被第一个线程解锁。</strong></p>
<p>因此，由于同步访问的基本逻辑，同步会对性能造成不利影响。</p>
<h3 id="_4-5-支持并发的集合"> 4.5 支持并发的集合</h3>
<p>除了同步集合，我们可以使用并发集合来创建线程安全的集合。</p>
<p>Java提供了 <em><a href="https://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/package-summary.html" target="_blank" rel="noopener noreferrer">java.util.concurrent</a></em> 包，其中包含多个并发集合，例如 <em><a href="https://docs.oracle.com/javase/8/docs/api/?java/util/concurrent/package-summary.html" target="_blank" rel="noopener noreferrer">ConcurrentHashMap</a></em> ：</p>
<div><pre><code>Map&lt;String,String&gt; concurrentMap = new ConcurrentHashMap&lt;&gt;();
concurrentMap.put(&quot;1&quot;, &quot;one&quot;);
concurrentMap.put(&quot;2&quot;, &quot;two&quot;);
concurrentMap.put(&quot;3&quot;, &quot;three&quot;);
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>与同步对象不同，<strong>并发集合通过将其数据划分为段来实现线程安全</strong>。例如，在 <em>ConcurrentHashMap</em> 中，多个线程可以获取不同 Map 段上的锁，因此多个线程可以同时访问 <em>Map</em> 。</p>
<p>由于并发线程访问的先天优势，<strong>并发集合类</strong>具备<strong>远超同步集合类更好的性能</strong>。</p>
<p>值得一提的是，<strong>同步集合和并发集合仅使集合本身具有线程安全性，而不使content变得线程安全</strong>。</p>
<h3 id="_4-6-原子化对象"> 4.6 原子化对象</h3>
<p>使用Java提供的一组<a href="https://www.baeldung.com/java-atomic-variables" target="_blank" rel="noopener noreferrer">原子类</a>（包括 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html" target="_blank" rel="noopener noreferrer">AtomicInteger</a>，<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html" target="_blank" rel="noopener noreferrer">AtomicLong</a>，<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html" target="_blank" rel="noopener noreferrer">AtomicBoolean</a> 和 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html" target="_blank" rel="noopener noreferrer">AtomicReference</a> )也可以实现线程安全。</p>
<p><strong>原子类使我们能够执行安全的原子操作，而无需使用同步</strong>。原子操作在单个机器级别的操作中执行。</p>
<p>要了解解决的问题，让我们看下面的 <em>Counter</em> 类：</p>
<div><pre><code><span>public</span> <span>class</span> <span>Counter</span> <span>{</span>
    
    <span>private</span> <span>int</span> counter <span>=</span> <span>0</span><span>;</span>
    
    <span>public</span> <span>void</span> <span>incrementCounter</span><span>(</span><span>)</span> <span>{</span>
        counter <span>+=</span> <span>1</span><span>;</span>
    <span>}</span>
    
    <span>public</span> <span>int</span> <span>getCounter</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> counter<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><strong>让我们假设在竞争条件下，两个线程同时访问 <code>increasingCounter()</code> 方法。</strong></p>
<p>从理论上讲， <em>counter</em> 字段的最终值为2。但是我们不确定结果如何，因为线程在同一时间执行同一代码块，并且增量不是原子的。</p>
<p>让我们使用 <em>AtomicInteger</em> 对象创建 <em>Counter</em> 类的线程安全实现：</p>
<div><pre><code><span>public</span> <span>class</span> <span>AtomicCounter</span> <span>{</span>
    
    <span>private</span> <span>final</span> <span>AtomicInteger</span> counter <span>=</span> <span>new</span> <span>AtomicInteger</span><span>(</span><span>)</span><span>;</span>
    
    <span>public</span> <span>void</span> <span>incrementCounter</span><span>(</span><span>)</span> <span>{</span>
        counter<span>.</span><span>incrementAndGet</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
    
    <span>public</span> <span>int</span> <span>getCounter</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> counter<span>.</span><span>get</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><strong>这是线程安全的，因为在++增量执行多个操作的同时， <code>增量和获取</code> 是原子的</strong>。</p>
<h3 id="_4-7-同步方法"> 4.7 同步方法</h3>
<p>尽管较早的方法对于集合和基元非常有用，但有时我们需要的控制权要强于此。</p>
<p>因此，可用于实现线程安全的另一种常见方法是实现同步方法。</p>
<p>简而言之，<strong>一次只能有一个线程可以访问同步方法，同时阻止其他线程对该方法的访问</strong>。其他线程将保持阻塞状态，直到第一个线程完成或该方法引发异常。</p>
<p>我们可以通过使它成为同步方法，以另一种方式创建线程安全版本的 <em>creationCounter()</em> ：</p>
<div><pre><code>public synchronized void incrementCounter() {
    counter += 1;
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>我们通过与前缀的方法签名创建一个同步方法 synchronized 关键字。</p>
<p>由于一次一个线程可以访问一个同步方法，因此一个线程将执行 <em>crementCounter()</em> 方法，而其他线程将执行相同的操作。任何重叠的执行都不会发生。</p>
<p><strong>同步方法依赖于“内部锁”或“监视器锁”的使用</strong>。固有锁是与特定类实例关联的隐式内部实体。</p>
<p>在多线程上下文中，术语 <em>monitor</em> 是指对关联对象执行锁的角色，因为它强制对一组指定的方法或语句进行排他访问。</p>
<p><strong>当线程调用同步方法时，它将获取内部锁</strong>。线程完成执行方法后，它将释放锁，从而允许其他线程获取锁并获得对方法的访问。</p>
<p>我们可以在实例方法，静态方法和语句（已同步的语句）中实现同步。</p>
<h3 id="_4-8-同步语句"> 4.8  同步语句</h3>
<p>有时，如果我们只需要使方法的一部分成为线程安全的，那么同步整个方法可能就显得过分了。</p>
<p>为了说明这个用例，让我们重构 <em>increascountCounter</em> 方法：</p>
<div><pre><code>public void incrementCounter() {
    // 此处可有额外不需同步的操作
    // ...
    synchronized(this) {
        counter += 1; 
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>该示例很简单，但是它显示了如何创建同步语句。假设该方法现在执行了一些不需要同步的附加操作，我们仅通过将相关的状态修改部分包装在一个<strong>同步</strong>块中来对其进行<strong>同步</strong>。</p>
<p>与同步方法不同，同步语句必须指定提供内部锁的对象，通常是<code>this</code>引用。</p>
<p><strong>同步非常昂贵，因此使用此选项，我们尽可能只同步方法的相关部分</strong>。</p>
<h3 id="_4-8-其他对象作为锁"> 4.8 其他对象作为锁</h3>
<p>我们可以通过将另一个对象用作监视器锁定，来稍微改善 <em>Counter</em> 类 的线程安全实现。</p>
<p>这不仅可以在多线程环境中提供对共享资源的协调访问，<strong>还可以使用外部实体来强制对资源进行独占访问</strong>：</p>
<div><pre><code>public class ObjectLockCounter {
 
    private int counter = 0;
    private final Object lock = new Object();
    
    public void incrementCounter() {
        synchronized(lock) {
            counter += 1;
        }
    }
    
    // 标准 getter
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>我们使用一个普通的 Object 实例来强制相互排斥。此实现稍好一些，因为它可以提高锁定级别的安全性。</p>
<p>将 this 用于内部锁定时，<strong>攻击者可能会通过获取内部锁定并触发拒绝服务（DoS）条件来导致死锁。</strong></p>
<p>相反，在使用其他对象时， <strong>无法从外部访问该私有实体</strong>。这使得攻击者更难获得锁定并导致死锁。</p>
<h2 id="_5-参考文章"> 5.参考文章</h2>
<p>1.什么是线程安全?.https://www.jianshu.com/p/44831d1d10d3</p>
<p>2.深入理解Java并发编程（一）：到底什么是线程安全.https://www.hollischuang.com/archives/3060</p>
<p>3.Java 并发基础——线程安全性.https://www.cnblogs.com/NeilZhang/p/8682266.html</p>
<p>4.什么是线程安全以及如何实现？https://segmentfault.com/a/1190000023187634</p>
<p>5.你真的知道什么是线程安全吗？.https://www.hoohack.me/2020/09/01/what-is-thread-safe</p>
<p>6.(解释的比较清楚，透彻的)图解 Java 线程安全.https://juejin.cn/post/6844903890224152584</p>
<p>7.Java进阶（二）当我们说线程安全时，到底在说什么.http://www.jasongj.com/java/thread_safe/</p>
]]></content>
    <author>
      <name>moremind</name>
    </author>
    <category term="Java-Thread"/>
    <contributor>
      <name>moremind</name>
    </contributor>
    <published>2022-01-17T14:28:59.000Z</published>
    <rights>Copyright by moremind</rights>
  </entry>
  <entry>
    <title type="html">Memecache</title>
    <id>https://www.moremind.cn/md/middleware/cache/memcache/</id>
    <link href="https://www.moremind.cn/md/middleware/cache/memcache/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Memcache"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Redis</title>
    <id>https://www.moremind.cn/md/middleware/cache/redis/</id>
    <link href="https://www.moremind.cn/md/middleware/cache/redis/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Redis"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Kafka</title>
    <id>https://www.moremind.cn/md/middleware/message/kafka/</id>
    <link href="https://www.moremind.cn/md/middleware/message/kafka/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Kafka"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">RabbitMQ</title>
    <id>https://www.moremind.cn/md/middleware/message/rabbitmq/</id>
    <link href="https://www.moremind.cn/md/middleware/message/rabbitmq/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="RabbitMQ"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">RocketMQ</title>
    <id>https://www.moremind.cn/md/middleware/message/rocketmq/</id>
    <link href="https://www.moremind.cn/md/middleware/message/rocketmq/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="RocketMQ"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T16:50:45.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">spring 知识图谱</title>
    <id>https://www.moremind.cn/md/spring/spring-framework/</id>
    <link href="https://www.moremind.cn/md/spring/spring-framework/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Spring"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Spring AOP详解</title>
    <id>https://www.moremind.cn/md/spring/spring-framework/spring-aop/</id>
    <link href="https://www.moremind.cn/md/spring/spring-framework/spring-aop/"/>
    <updated>2022-01-17T15:11:57.000Z</updated>
    <author>
      <name>moremind</name>
    </author>
    <category term="Spring"/>
    <contributor>
      <name>moremind</name>
    </contributor>
    <published>2021-03-26T00:00:00.000Z</published>
    <rights>Copyright by moremind</rights>
  </entry>
  <entry>
    <title type="html">Spring DI详解</title>
    <id>https://www.moremind.cn/md/spring/spring-framework/spring-di/</id>
    <link href="https://www.moremind.cn/md/spring/spring-framework/spring-di/"/>
    <updated>2022-01-17T15:11:57.000Z</updated>
    <author>
      <name>moremind</name>
    </author>
    <category term="Spring"/>
    <contributor>
      <name>moremind</name>
    </contributor>
    <published>2021-03-26T00:00:00.000Z</published>
    <rights>Copyright by moremind</rights>
  </entry>
  <entry>
    <title type="html">Spring IOC详解</title>
    <id>https://www.moremind.cn/md/spring/spring-framework/spring-ioc/</id>
    <link href="https://www.moremind.cn/md/spring/spring-framework/spring-ioc/"/>
    <updated>2022-01-17T15:11:57.000Z</updated>
    <author>
      <name>moremind</name>
    </author>
    <category term="Spring"/>
    <contributor>
      <name>moremind</name>
    </contributor>
    <published>2021-03-26T00:00:00.000Z</published>
    <rights>Copyright by moremind</rights>
  </entry>
  <entry>
    <title type="html">springboot</title>
    <id>https://www.moremind.cn/md/spring/springboot/</id>
    <link href="https://www.moremind.cn/md/spring/springboot/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="SpringBoot"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">springcloud</title>
    <id>https://www.moremind.cn/md/spring/springcloud/</id>
    <link href="https://www.moremind.cn/md/spring/springcloud/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="SpringCloud"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">springwebflux</title>
    <id>https://www.moremind.cn/md/spring/springwebflux/</id>
    <link href="https://www.moremind.cn/md/spring/springwebflux/"/>
    <updated>2022-01-14T09:08:36.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="jvm"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-13T09:49:12.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">算法</title>
    <id>https://www.moremind.cn/md/tools/docker/</id>
    <link href="https://www.moremind.cn/md/tools/docker/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Docker"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-14T10:01:55.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Git基本简介</title>
    <id>https://www.moremind.cn/md/tools/git/</id>
    <link href="https://www.moremind.cn/md/tools/git/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[
<h1 id="git与svn的基本介绍"> git与svn的基本介绍</h1>
<h2 id="git与svn"> git与svn</h2>
<h3 id="svn"> svn</h3>
<p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。一般公司用svn的比较多，至于原因,嘿嘿嘿....</p>
<h3 id="git"> git</h3>
<p>git是一个分布式版本控制系统，没有中心服务器，每个人的电脑就是一个版本库，你的电脑上的Gitrepository就是你的版本库，那多人之间是如何合作的呢？这样，</p>
<blockquote>
<p>A在A的电脑上修改了A.Gitrepository里面的文件,而B在B的电脑上修改了clone过来的A.Gitrepository，你们两个只要把各自的修改推送给对方就行了，这就是为什么你就是没有网络也能使用版本控制。</p>
</blockquote>
<h1 id="下载"> 下载</h1>
<h2 id="网址"> 网址</h2>
<p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener noreferrer">git-download</a></p>
<h2 id="选择你的os版本即可"> 选择你的OS版本即可</h2>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git.png" alt="git" /></p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Git"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-14T10:01:55.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">git 进阶操作命令</title>
    <id>https://www.moremind.cn/md/tools/git/git-advanced-command/</id>
    <link href="https://www.moremind.cn/md/tools/git/git-advanced-command/"/>
    <updated>2022-01-14T10:01:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="工作区与暂存区"> 工作区与暂存区</h1>
<h2 id="工作区"> 工作区</h2>
<div><p>提示</p>
<p>工作区就是在你电脑上的Repository下的某一个工作目录，比如：F:\Repository\test01这个目录。test01这个目录就是工作区，或者你新建的任何一个目录，都是工作区（.git隐藏目录下并非工作区）</p>
</div>

<h2 id="暂存区"> 暂存区</h2>
<p>Repository目录下有一个（.git隐藏目录），这个就是控制版本的版本控制库。</p>
<div><p>提示</p>
<p>（.git隐藏目录）存储了Git为我们创建的各种信息，包括版本信息，暂存区（这是最重要的），还有分支信息（Git已经为我们创建了一个master分支），还有一些配置信息等。</p>
</div>
<p>接下来在Repository目录下新建一个test.txt文件，在里面写入123456，然后进行下面的这些操作。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_add_commit3.png" alt="git_add_commit3" /></p>
<p>继续在test.txt中添加一行数据，然后使用git status查看信息。git会提示你有文件需要git add 并且git commit。</p>
<p>继续下面的操作！---把同一个文件提交到同一个暂存区中，并且使用commit提交到一个分支中。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_status_add_commit.png" alt="git_status_add_commit" /></p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_status_commit.png" alt="git_status_commit" /></p>
<p>这次将所有文件提交到一个分支（master分支）中了，可以使用git log查看你提交的所有分支。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_log4.png" alt="git_log4" /></p>
<p>这样看起来很碍眼，而且版本较多的话，看起来的确不方便，所有推荐使用</p>
<div><pre><code>git log --pretty=oneline
</code></pre>
<div><span>1</span><br></div></div><p>接下来，你可以使用<a href="https://finen.top/git-basic-command/#more" target="_blank" rel="noopener noreferrer">上一篇git基础教程</a>讲过的方法对版本进行操作。基本命令请点击链接去查看...</p>
<h1 id="撤销修改与删除文件操作"> 撤销修改与删除文件操作</h1>
<h2 id="撤销修改"> 撤销修改</h2>
<h3 id="最简单的方法-手动修改"> 最简单的方法：手动修改</h3>
<p>在你记得你修改了那些地方的情况下，直接手动撤销那些你不要的东西即可。</p>
<h3 id="使用之前所使用的命令进行版本回滚"> 使用之前所使用的命令进行版本回滚</h3>
<p>具体命令如下：</p>
<div><pre><code>git log --pretty=oneline

git reset --hard HEAD^

git reset --hard HEAD~*

git reflog

git reset --hard 版本号
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>你可以使用这些办法进行你所需要的回滚。</p>
<h3 id="使用git-checkout-test-txt-一点要带文件名-不然会创建分支"> 使用git checkout -- test.txt <font color="red">一点要带文件名</font>，不然会创建分支！</h3>
<p>git checkout --test.txt 分为两种状态</p>
<div><pre><code>git checkout --test.txt
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<ol>
<li>test.txt文件修改后，你没有使用git add命令对其进行提交到暂存区。使用git checkout --test.txt会回退到之前的一个版本。<strong>相当于回滚到你最后提交的那个版本。而刚刚修改的内容也将全部丢失。</strong></li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>另一种情况就是你已经使用git add提交文件到暂存区了。那这样使用git checkout --test.txt 就会<strong>保存已经在暂存区的内容。而没有写入暂存区的内容则会全部丢失。</strong></li>
</ol>
</blockquote>
<p>接下来使用git进行操作查看。</p>
<p>首先在test.txt文件中添加一行数据 654321，然后使用git add命令提交到暂存区。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_add2.png" alt="git_add2" /></p>
<p>接着再在test.txt文件中添加一行数据 222222，然后我们不使用git add命令提交文件到暂存区。</p>
<p>最后我们使用git checkout --test.txt命令撤销修改，在查看文件。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_checkout.png" alt="git_checkout" /></p>
<p>跟上面的结论是一样的。</p>
<h2 id="删除文件"> 删除文件</h2>
<h3 id="rm-命令-linux下的软删除命令"> rm 命令（linux下的软删除命令）</h3>
<p>假如有人提交了tesxt02.txt的文件，但是这个文件缺失不需要的，我们可以使用rm test02.txt，然后在git commit就可以了。</p>
<div><pre><code>新建一个test02.txt 文件
git add test02.txt
git commit -m &quot;提交test02文件&quot;
rm test02.txt
git commit -m &quot;删除test02文件&quot;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_add_commit4.png" alt="git_commit4" /></p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/rm.png" alt="rm" /></p>
<p>说明已经删除了文件并且已经commit了，当然假如你删除错误的话，你也可以回滚版本。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_reflog2.png" alt="git_reflog" /></p>
<p>假如你已经使用rm test02.txt命令，但是却没有使用git commit命令呢？又改如何恢复文件？你可以使用下面的命令:</p>
<div><pre><code>git checkout --test02.txt
</code></pre>
<div><span>1</span><br></div></div><p>rm之前：</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_rm.png" alt="rm_before" /></p>
<p>rm 之后：</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_rm2.png" alt="git_rm_after" /></p>
<p>然后我们不使用git commit命令，使用git checkout -- test02.txt</p>
<p>使用git checkout -- test02.txt之后</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_rm_after.png" alt="git_check_out" /></p>
<p>文件又恢复了，恢复多个文件也是同理。</p>
<hr>
<div><pre><code> 下面会涉及删除与撤销的操作!请继续浏览！
</code></pre>
</div><hr>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Git"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2018-03-28T00:00:00.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">git 基本操作命令</title>
    <id>https://www.moremind.cn/md/tools/git/git-basic-command/</id>
    <link href="https://www.moremind.cn/md/tools/git/git-basic-command/"/>
    <updated>2022-01-14T10:01:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="git基本命令"> git基本命令</h1>
<p>0.你必须安装了git才能继续往下看。
1.新建一个目录(在你磁盘空闲较多的地方，新建一个目录(名称Repository))===&gt;这个Repository就是上面说的你的本地仓库，然后右键选择Git Bash(Git 命令行)，在目录下输入以下命令：</p>
<div><pre><code>git config <span>-</span><span>-</span>global user.name "username"

git config <span>-</span><span>-</span>global user.email "youremail"
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<p>这里的<font color="red">username</font>就是你刚刚注册的用户名，<font color="red">email</font>就是刚刚注册邮箱。</p>
</blockquote>
<h2 id="git-init"> git init</h2>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_init.png" alt="git_init" /></p>
<p>此时，你就创建了一个本地仓库了。可以在你的本地查看一下：</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_intit2.png" alt="git" /></p>
<h2 id="git-add-把项目提交到git仓库"> git add （把项目提交到git仓库）</h2>
<p>新建一个demo.txt的文件，并且在里面写入123456789</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_add.png" alt="git_add" /></p>
<p>这样就说明你已经把文件提交到文件暂存区了，接下来使用下一个命令你就可以在本地仓库看到了。</p>
<h2 id="git-commit"> git commit</h2>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_commit.png" alt="git_commit" /></p>
<blockquote>
<p>这里的<font color="red"> -m</font>就是你提交的注释，记得以后写一定要使用注释！这是一个好习惯！</p>
</blockquote>
<h2 id="git-status-查看状态"> git status ---查看状态</h2>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_status.png" alt="git_status" /></p>
<blockquote>
<p>没有什么东西需要提交，别急，我们在刚刚的demo.txt中<font color ="red">追加一个0000</font>,记得保存文件。</p>
</blockquote>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_status_1.png" alt="git_status2" /></p>
<blockquote>
<p>修改之后就已经有了文件修改的信息，并且git提示你需要commit！所以你需要使用上面的git commit 提交！</p>
</blockquote>
<h2 id="git-diff"> git diff</h2>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_diff.png" alt="git_diff" /></p>
<blockquote>
<p>git diff就是比对文件，红色的是告诉你，那是原来的，绿色的就是告诉添加了信息。</p>
</blockquote>
<blockquote>
<p>之后你就可以放心的提交你的版本了。</p>
</blockquote>
<p><strong>你需要执行git add， git commit -m &quot;xxxx&quot;</strong>，必须通过add提交到文件暂存区。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_add_commit.png" alt="git_add_commit1" /></p>
<h1 id="版本控制-回退"> 版本控制---回退</h1>
<h2 id="git-log"> git log</h2>
<p>在使用git的时候一定要会使用日志功能。</p>
<p>首先我们在demo.txt中添加一行数据<font color="red">0000123456789</font>,然后git add ，git commit.</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_add_commit2.png" alt="git_diff_add_commit" /></p>
<p>接下来使用git log打印日志</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_log.png" alt="git_log" /></p>
<h2 id="版本回滚-git-reset-hard-head"> 版本回滚---git reset --hard HEAD^</h2>
<p>上面提到使用git log打印所有版本，其实有更简单的办法。</p>
<div><pre><code>git log --pretty=oneline
</code></pre>
<div><span>1</span><br></div></div><p>这个可以自己去尝试哟，这个只会提示你的<font color="red">版本号</font>跟<font color="red">提交的信息</font>。</p>
<div><pre><code>git reset --hard HEAD^
</code></pre>
<div><span>1</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_hard.png" alt="git_hard" /></p>
<blockquote>
<p>现在可以打开你的demo.txt看看里面还有什么内容了。是不是少了最后添加的一行数据，只有一行数据了。回滚到添加0000的版本了。</p>
</blockquote>
<p><strong>超级回滚：</strong></p>
<p>你需要回滚50个版本，总不能输入50个^号，所以有下面这种更简单的办法。</p>
<div><pre><code>git reset --hard HEAD~50
</code></pre>
<div><span>1</span><br></div></div><h2 id="cat命令"> cat命令</h2>
<p>使用cat查看内容。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/cat.png" alt="cat" /></p>
<p>然后你可以使用git log 查看一下存在的版本</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_log3.png" alt="git_log3" /></p>
<p>加入你要回滚到添加了<font color="red">0000123456789</font>的版本该怎么办呢？使用下一个命令+下下个命令！！！</p>
<h2 id="git-reflog"> git reflog</h2>
<blockquote>
<p>这个命令是告诉你所有操作的版本信息</p>
</blockquote>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_reflog.png" alt="git_reflog" /></p>
<p>看到版本号了---a0ca311，接下来就可以使用这个版本号进行回滚到添加<font color="red">0000123456789</font>的那个版本了。</p>
<h2 id="git-reset-hard-版本号"> git reset --hard 版本号</h2>
<p>下面是回滚到我的版本</p>
<div><pre><code>git reset --hard a0ca311
</code></pre>
<div><span>1</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_hard.png" alt="git_hard" /></p>
<p>接下来，打开你的demo.txt文档看一下是否已经有<font color="red">0000123456789</font>了。</p>
<p>或者你可以使用以下命令</p>
<div><pre><code>cat demo.txt
</code></pre>
<div><span>1</span><br></div></div><hr>
<div><pre><code> 下面会涉及删除与撤销的操作!请继续浏览！
</code></pre>
</div><hr>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Git"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2018-03-28T00:00:00.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">git 分支操作命令</title>
    <id>https://www.moremind.cn/md/tools/git/git-branch-command/</id>
    <link href="https://www.moremind.cn/md/tools/git/git-branch-command/"/>
    <updated>2022-01-14T10:01:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="git分支操作"> git分支操作</h1>
<h2 id="创建与合并分支"> 创建与合并分支</h2>
<p>在版本回滚与更新中，git都是用master分支作为主线，通过时间顺序进行更新或者回滚。</p>
<h3 id="创建分支"> 创建分支</h3>
<div><pre><code>git checkout -b dev 
==（相当于）
git branch dev
git checkout dev
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>查看分支信息：</p>
<div><pre><code>git branch
</code></pre>
<div><span>1</span><br></div></div>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_branch.png" alt="git_branch" /></p>
<p>现在已经在dev分支目录下，接下来可以在demo.txt中添加信息，我们添加一行数据：1111111111111</p>
<p>此时，我们在dev目录下添加内容，并且提交到暂存区，然后commit。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_branch3.png" alt="git_branch" /></p>
<p>接着，我们将目前分支切换到master主分支，查看文件新添加的内容是否存在。使用以下命令：</p>
<div><pre><code>git checkout master
</code></pre>
<div><span>1</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_branch4.png" alt="git_branch4" /></p>
<p>然后，发现master分支上并没有我们想要看到的内容，所以我们需要合并两个分支。</p>
<h3 id="合并分支"> 合并分支</h3>
<div><pre><code>git merge 分支名
</code></pre>
<div><span>1</span><br></div></div><p>在master分之下合并分dev分支。使用以下命令：</p>
<div><pre><code>git merger dev
</code></pre>
<div><span>1</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_merge.png" alt="git_merge" /></p>
<p>合并完成后即可删除没有用的额分支了，使用以下命令进行删除分支：</p>
<div><pre><code>git branch -d dev
</code></pre>
<div><span>1</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_delete.png" alt="git_branch_delete" /></p>
<p>所有命令总结：</p>
<div><pre><code>查看分支：git branch
创建分支：git branch name
切换分支：git checkout name
创建+切换分支：git checkout -b name
合并某个分支到当前分支：git merge name
删除某个分支：git branch -d name
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="处理分支矛盾"> 处理分支矛盾</h3>
<p>新建一个分支，并且other中添加数据：2222222222222，并且检查文件。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_branch_other.png" alt="git_branch_other" /></p>
<p>切换分支到master之中，并且master分支中增加内容：3333333333333，在增加之前使用cat命令，查看master坟之中是否存在2222222222222，增加后是否存在3333333333333。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_checkout1.png" alt="git_checkout2" /></p>
<p>master分支数据如上，接下来我们继续合并分支。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_merge2.png" alt="git_merge" /></p>
<p>由于我之前在master分支写了一个2222222的信息，，所以这有一个2222222222222222222/33333333333333333这样的信息。不过这样的错误信息也不影响分支是错误。<font color="red">Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;&lt;HEAD是指主分支修改的内容，&gt;&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存。修改后就是上面的最后一个图。</font></p>
<p>然后我们就可以git log查看commit后的信息，在此我就截图了哈。</p>
<h3 id="分支策略"> 分支策略</h3>
<div><pre><code>1.创建一个dev分支。
2.修改demo.txt内容。
3.添加到暂存区。
4.切换回主分支(master)。
5.合并dev分支，使用命令 git merge –no-ff -m &quot;注释&quot; dev
6.查看历史记录
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>具体命令如下：</p>
<div><pre><code>git checkout -b dev
在demo.txt文件中添加数据4444444444444
git add demo.txt
git commit -m &quot;add merge&quot;
git merge --no-ff -m &quot;merge with no-ff&quot; dev
git log 或者git log --graph --pretty=oneline --abbrev-commit
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_dev.png" alt="git_dev" /></p>
<p><strong>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</strong></p>
<h2 id="bug分支"> Bug分支</h2>
<p>在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p>
<p>比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。命令如下：</p>
<div><pre><code>git checkout -b dev 
修改demo.txt文件添加数据：5555555555555
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_branch5.png" alt="git_branch5" /></p>
<p>并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。</p>
<p>隐藏分支：</p>
<div><pre><code>git stash
git status
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_stash.png" alt="git_stash" /></p>
<p>首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_bug.png" alt="git_bug" /></p>
<p>修改后合并分支，然后删除bug分支即可。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_bug2.png" alt="git_bug2" /></p>
<p>接着，我们继续回到dev分支下：</p>
<div><pre><code>git checkout dev
git status
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>发现并没有文件，是因为stash隐藏了，所以我们需要从stash恢复。恢复命令如下：</p>
<div><pre><code>git stash list
git stash apply
git stash drop
cat demo.txt
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>或者：</p>
<div><pre><code>git stash list
git stash pop
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_stash3.png" alt="git_stash" /></p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Git"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2018-03-28T00:00:00.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">git多人合作开发操作命令</title>
    <id>https://www.moremind.cn/md/tools/git/git-cooperate-develop-command/</id>
    <link href="https://www.moremind.cn/md/tools/git/git-cooperate-develop-command/"/>
    <updated>2022-01-14T10:01:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="git远程分支操作"> git远程分支操作</h1>
<h2 id="查看远程仓库信息"> 查看远程仓库信息</h2>
<div><pre><code>git remote
git remote -v
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div>
<h2 id="推送分支"> 推送分支</h2>
<div><pre><code>git push origin master
</code></pre>
<div><span>1</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_remote3.png" alt="git_remote" /></p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_push.png" alt="git_push" /></p>
<p>也可以推送到其他分支：</p>
<div><pre><code>git push origin dev
</code></pre>
<div><span>1</span><br></div></div><p>那么一般情况下，那些分支要推送呢？</p>
<blockquote>
<ol>
<li>master分支是主分支，因此要时刻与远程同步。</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</li>
</ol>
</blockquote>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_push2.png" alt="git_push2" /></p>
<h2 id="抓取分支"> 抓取分支</h2>
<p>多人协作时，大家都会往master分支上推送各自的修改。新建一个目录名字叫testgit3。</p>
<p>现在我们的伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_clone2.png" alt="git_clone2" /></p>
<div><pre><code>git checkout –b dev 
git reset --hard origin/dev
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>在dev下重置起点，即可，git checkout -b dev origin/dev 错误的。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_checkout3.png" alt="git" /></p>
<p>接下来在demo.txt的文件中添加数据6666666666666数据，然后提交到分支即可。</p>
<div><pre><code>git add demo.txt
git commit -m &quot;添加666的数据&quot;
git pusu origin dev
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_push4.png" alt="git_push3" /></p>
<p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改,添加了数据6666666666666，也试图推送到远程库:</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_push_dev.png" alt="git_push_dev" /></p>
<p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。</p>
<div><pre><code>git pull
git branch --set-upstream dev origin/dev
git pull
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>然后此时会出现冲突，所以需要解决冲突，使用前面讲过的分支策略进行解决。然后在执行：</p>
<div><pre><code>git add demo.txt
git commit -m &quot;****&quot;
git push origin dev
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>多人协作工作模式一般是这样的：</p>
<ol>
<li>
<p>首先，可以试图用git push origin branch-name推送自己的修改.</p>
</li>
<li>
<p>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。</p>
</li>
<li>
<p>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</p>
</li>
</ol>
<h2 id="推荐阅读"> 推荐阅读</h2>
<p><strong><a href="https://www.gitbook.com/book/bingohuang/progit2/details" target="_blank" rel="noopener noreferrer">ProGit中文版</a></strong></p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Git"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2018-03-28T00:00:00.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">git 远端操作命令</title>
    <id>https://www.moremind.cn/md/tools/git/git-remote-command/</id>
    <link href="https://www.moremind.cn/md/tools/git/git-remote-command/"/>
    <updated>2022-01-14T10:01:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="git远程仓库-github"> git远程仓库-github</h1>
<h2 id="配置远程仓库-创建ssh-key-检查用户目录"> 配置远程仓库-创建SSH Key-检查用户目录</h2>
<p>检查用户目录下有没有id_rsa 和 id_rsa.pub，如果没有这两个文件就使用下面的这个命令生成密钥。</p>
<div><pre><code>ssh-keygen -t rsa –C &quot;youremail@example.com&quot;
</code></pre>
<div><span>1</span><br></div></div>
<h2 id="在github中设置ssh"> 在github中设置ssh</h2>
<p>登录github，打开settings的SSH and GPG keys，选择New SSH key就可以填充SSH key的相关信息。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/ssh.png" alt="ssh" /></p>
<p>填写title，然后将id_rsa.pub里面的密钥复制到Key中，然后点击Add SSH key即可。</p>
<h2 id="选择new-repository-添加仓库"> 选择New Repository(添加仓库)</h2>
<p>新建一个目录TestGit,将所有文件复制到TestGit目录下。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_1.png" alt="git_1" /></p>
<p>然年使用命令创建一个一个本地仓库</p>
<div><pre><code>git init
git add demo.txt
git add test.txt
git test02.txt

git commit -m &quot;新建文件&quot;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_remote.png" alt="git_remote" /></p>
<p>现在把你的目录推送到TestGit远程仓库中</p>
<div><pre><code>git remote add origin https://github.com/hirCodd/TestGit.git

git push -u origin master
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_upload.png" alt="git_3" /></p>
<p>由于远程库是空的，我们第一次推送master分支时，加上了<font color="red"> –u参数</font>，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。使用</p>
<div><pre><code>git push origin master
</code></pre>
<div><span>1</span><br></div></div><p>现在查看远端仓库，如下，已经有相关的文件了。</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_2.png" alt="git_3" /></p>
<p>以后你修改了bug，就可以使用git push origin master推送到github，这样你就拥有分布式版本仓库了。</p>
<h1 id="从远端仓库克隆"> 从远端仓库克隆</h1>
<p>使用以下命令：</p>
<div><pre><code>git clone url
</code></pre>
<div><span>1</span><br></div></div><p>首先现在远端创建一个仓库</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_clone.png" alt="git_clone" /></p>
<p>使用命令即可从远端clone文件下来</p>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_clone2.png" alt="git_clone2" /></p>
<hr>
<div><pre><code> 下面会涉及删除与撤销的操作!请继续浏览！
</code></pre>
</div><hr>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Git"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2018-03-28T00:00:00.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">算法</title>
    <id>https://www.moremind.cn/md/tools/k8s/</id>
    <link href="https://www.moremind.cn/md/tools/k8s/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Kubernates"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-14T10:01:55.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">算法</title>
    <id>https://www.moremind.cn/md/tools/linux/</id>
    <link href="https://www.moremind.cn/md/tools/linux/"/>
    <updated>2022-01-21T15:41:02.000Z</updated>
    <content type="html"><![CDATA[<p>JVM 内存分析图</p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-14T10:01:55.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Maven</title>
    <id>https://www.moremind.cn/md/tools/maven/</id>
    <link href="https://www.moremind.cn/md/tools/maven/"/>
    <updated>2022-01-21T16:14:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="maven知识点"> Maven知识点</h1>
<h2 id="mavan打包工具的使用"> Mavan打包工具的使用</h2>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Maven"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-21T15:41:02.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Maven对Springboot项目配置文件、依赖分离打包</title>
    <id>https://www.moremind.cn/md/tools/maven/maven-assembly/</id>
    <link href="https://www.moremind.cn/md/tools/maven/maven-assembly/"/>
    <updated>2022-01-21T16:14:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="maven对springboot项目配置文件、依赖分离打包"> Maven对Springboot项目配置文件、依赖分离打包</h1>
<h2 id="_1-使用maven-assembly-plugin进行配置分离"> 1.使用maven-assembly-plugin进行配置分离</h2>
<blockquote>
<p>assembly.xml配置文件</p>
</blockquote>
<div><pre><code><span>&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span><span><span>&lt;</span>assembly</span><span>></span></span>
    <span>&lt;!-- 可自定义，这里指定的是项目环境 --></span>
    <span>&lt;!-- xxx.tar.gz  --></span>
    <span><span><span>&lt;</span>id</span><span>></span></span>${name}<span><span><span>&lt;/</span>id</span><span>></span></span>

    <span>&lt;!-- 打包的类型，如果有N个，将会打N个类型的包 --></span>
    <span><span><span>&lt;</span>formats</span><span>></span></span>
        <span><span><span>&lt;</span>format</span><span>></span></span>tar.gz<span><span><span>&lt;/</span>format</span><span>></span></span>
        <span><span><span>&lt;</span>format</span><span>></span></span>zip<span><span><span>&lt;/</span>format</span><span>></span></span>
    <span><span><span>&lt;/</span>formats</span><span>></span></span>

    <span><span><span>&lt;</span>includeBaseDirectory</span><span>></span></span>true<span><span><span>&lt;/</span>includeBaseDirectory</span><span>></span></span>

    <span><span><span>&lt;</span>fileSets</span><span>></span></span>
        <span>&lt;!-- 配置文件打包-打包至config目录下 --></span>
        <span><span><span>&lt;</span>fileSet</span><span>></span></span>
            <span><span><span>&lt;</span>directory</span><span>></span></span>src/main/resources/<span><span><span>&lt;/</span>directory</span><span>></span></span>
            <span><span><span>&lt;</span>outputDirectory</span><span>></span></span>config<span><span><span>&lt;/</span>outputDirectory</span><span>></span></span>
            <span><span><span>&lt;</span>fileMode</span><span>></span></span>0644<span><span><span>&lt;/</span>fileMode</span><span>></span></span>
            <span><span><span>&lt;</span>includes</span><span>></span></span>
                <span><span><span>&lt;</span>include</span><span>></span></span>application.yml<span><span><span>&lt;/</span>include</span><span>></span></span>
                <span><span><span>&lt;</span>include</span><span>></span></span>*.xml<span><span><span>&lt;/</span>include</span><span>></span></span>
                <span><span><span>&lt;</span>include</span><span>></span></span>*.properties<span><span><span>&lt;/</span>include</span><span>></span></span>
            <span><span><span>&lt;/</span>includes</span><span>></span></span>
        <span><span><span>&lt;/</span>fileSet</span><span>></span></span>
        <span>&lt;!-- 启动文件目录 --></span>
        <span><span><span>&lt;</span>fileSet</span><span>></span></span>
            <span><span><span>&lt;</span>directory</span><span>></span></span>${basedir}/src/main/bin<span><span><span>&lt;/</span>directory</span><span>></span></span>
            <span><span><span>&lt;</span>outputDirectory</span><span>></span></span>bin<span><span><span>&lt;/</span>outputDirectory</span><span>></span></span>
            <span><span><span>&lt;</span>fileMode</span><span>></span></span>0755<span><span><span>&lt;/</span>fileMode</span><span>></span></span>
            <span><span><span>&lt;</span>includes</span><span>></span></span>
                <span><span><span>&lt;</span>include</span><span>></span></span>**.sh<span><span><span>&lt;/</span>include</span><span>></span></span>
                <span><span><span>&lt;</span>include</span><span>></span></span>**.bat<span><span><span>&lt;/</span>include</span><span>></span></span>
            <span><span><span>&lt;/</span>includes</span><span>></span></span>
        <span><span><span>&lt;/</span>fileSet</span><span>></span></span>
    <span><span><span>&lt;/</span>fileSets</span><span>></span></span>

    <span><span><span>&lt;</span>dependencySets</span><span>></span></span>
        <span><span><span>&lt;</span>dependencySet</span><span>></span></span>
            <span>&lt;!-- 依赖库 --></span>
            <span><span><span>&lt;</span>outputDirectory</span><span>></span></span>lib<span><span><span>&lt;/</span>outputDirectory</span><span>></span></span>
            <span><span><span>&lt;</span>scope</span><span>></span></span>runtime<span><span><span>&lt;/</span>scope</span><span>></span></span>
            <span><span><span>&lt;</span>fileMode</span><span>></span></span>0755<span><span><span>&lt;/</span>fileMode</span><span>></span></span>
            <span><span><span>&lt;</span>excludes</span><span>></span></span>
                <span><span><span>&lt;</span>exclude</span><span>></span></span>${project.groupId}:${project.artifactId}<span><span><span>&lt;/</span>exclude</span><span>></span></span>
            <span><span><span>&lt;/</span>excludes</span><span>></span></span>
        <span><span><span>&lt;/</span>dependencySet</span><span>></span></span>
        <span><span><span>&lt;</span>dependencySet</span><span>></span></span>
            <span><span><span>&lt;</span>outputDirectory</span><span>></span></span>boot<span><span><span>&lt;/</span>outputDirectory</span><span>></span></span>
            <span><span><span>&lt;</span>fileMode</span><span>></span></span>0755<span><span><span>&lt;/</span>fileMode</span><span>></span></span>
            <span><span><span>&lt;</span>includes</span><span>></span></span>
                <span><span><span>&lt;</span>include</span><span>></span></span>${project.groupId}:${project.artifactId}<span><span><span>&lt;/</span>include</span><span>></span></span>
            <span><span><span>&lt;/</span>includes</span><span>></span></span>
        <span><span><span>&lt;/</span>dependencySet</span><span>></span></span>
    <span><span><span>&lt;/</span>dependencySets</span><span>></span></span>
<span><span><span>&lt;/</span>assembly</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br></div></div><h2 id="_2-pom-xml文件build节点的配置"> 2.pom.xml文件build节点的配置</h2>
<blockquote>
<p>pom.xml配置文件</p>
</blockquote>
<div><pre><code>    <span><span><span>&lt;</span>build</span><span>></span></span>
        <span>&lt;!-- 打包后的启动jar名称 --></span>
        <span><span><span>&lt;</span>finalName</span><span>></span></span>app-name<span><span><span>&lt;/</span>finalName</span><span>></span></span>
        <span><span><span>&lt;</span>plugins</span><span>></span></span>
            <span>&lt;!-- 用于排除jar中依赖包 --></span>
            <span><span><span>&lt;</span>plugin</span><span>></span></span>
                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.springframework.boot<span><span><span>&lt;/</span>groupId</span><span>></span></span>
                <span><span><span>&lt;</span>artifactId</span><span>></span></span>spring-boot-maven-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
                <span><span><span>&lt;</span>configuration</span><span>></span></span>
                    <span><span><span>&lt;</span>layout</span><span>></span></span>ZIP<span><span><span>&lt;/</span>layout</span><span>></span></span>
                    <span><span><span>&lt;</span>includes</span><span>></span></span>
                        <span>&lt;!-- 项目启动jar包中排除依赖包 --></span>
                        <span><span><span>&lt;</span>include</span><span>></span></span>
                            <span><span><span>&lt;</span>groupId</span><span>></span></span>non-exists<span><span><span>&lt;/</span>groupId</span><span>></span></span>
                            <span><span><span>&lt;</span>artifactId</span><span>></span></span>non-exists<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
                        <span><span><span>&lt;/</span>include</span><span>></span></span>
                    <span><span><span>&lt;/</span>includes</span><span>></span></span>
                <span><span><span>&lt;/</span>configuration</span><span>></span></span>
            <span><span><span>&lt;/</span>plugin</span><span>></span></span>

            <span>&lt;!-- 将依赖cp到lib目录下 --></span>
            <span><span><span>&lt;</span>plugin</span><span>></span></span>
                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>
                <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-dependency-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
                <span><span><span>&lt;</span>version</span><span>></span></span>3.1.0<span><span><span>&lt;/</span>version</span><span>></span></span>
                <span><span><span>&lt;</span>executions</span><span>></span></span>
                    <span><span><span>&lt;</span>execution</span><span>></span></span>
                        <span><span><span>&lt;</span>phase</span><span>></span></span>prepare-package<span><span><span>&lt;/</span>phase</span><span>></span></span>
                        <span><span><span>&lt;</span>goals</span><span>></span></span>
                            <span><span><span>&lt;</span>goal</span><span>></span></span>copy-dependencies<span><span><span>&lt;/</span>goal</span><span>></span></span>
                        <span><span><span>&lt;/</span>goals</span><span>></span></span>
                        <span><span><span>&lt;</span>configuration</span><span>></span></span>
                            <span>&lt;!--依赖输出目录--></span>
                            <span><span><span>&lt;</span>outputDirectory</span><span>></span></span>target/lib<span><span><span>&lt;/</span>outputDirectory</span><span>></span></span>
                            <span><span><span>&lt;</span>overWriteReleases</span><span>></span></span>false<span><span><span>&lt;/</span>overWriteReleases</span><span>></span></span>
                            <span><span><span>&lt;</span>overWriteSnapshots</span><span>></span></span>false<span><span><span>&lt;/</span>overWriteSnapshots</span><span>></span></span>
                            <span><span><span>&lt;</span>overWriteIfNewer</span><span>></span></span>true<span><span><span>&lt;/</span>overWriteIfNewer</span><span>></span></span>
                            <span><span><span>&lt;</span>includeScope</span><span>></span></span>compile<span><span><span>&lt;/</span>includeScope</span><span>></span></span>
                        <span><span><span>&lt;/</span>configuration</span><span>></span></span>
                    <span><span><span>&lt;/</span>execution</span><span>></span></span>
                <span><span><span>&lt;/</span>executions</span><span>></span></span>
            <span><span><span>&lt;/</span>plugin</span><span>></span></span>

            <span>&lt;!-- maven编译 --></span>
            <span><span><span>&lt;</span>plugin</span><span>></span></span>
                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>
                <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-compiler-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
                <span><span><span>&lt;</span>configuration</span><span>></span></span>
                    <span>&lt;!-- 不同版本需要制定具体的版本进行编译 --></span>
                    <span><span><span>&lt;</span>source</span><span>></span></span>${java.version}<span><span><span>&lt;/</span>source</span><span>></span></span>
                    <span><span><span>&lt;</span>target</span><span>></span></span>${java.version}<span><span><span>&lt;/</span>target</span><span>></span></span>
                <span><span><span>&lt;/</span>configuration</span><span>></span></span>
            <span><span><span>&lt;/</span>plugin</span><span>></span></span>

            <span>&lt;!-- 打包时跳过测试 --></span>
            <span><span><span>&lt;</span>plugin</span><span>></span></span>
                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>
                <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-surefire-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
                <span><span><span>&lt;</span>version</span><span>></span></span>2.22.1<span><span><span>&lt;/</span>version</span><span>></span></span>
                <span><span><span>&lt;</span>configuration</span><span>></span></span>
                    <span><span><span>&lt;</span>skipTests</span><span>></span></span>true<span><span><span>&lt;/</span>skipTests</span><span>></span></span>
                <span><span><span>&lt;/</span>configuration</span><span>></span></span>
            <span><span><span>&lt;/</span>plugin</span><span>></span></span>

            <span>&lt;!-- 将项目中代码文件打成jar包 --></span>
            <span><span><span>&lt;</span>plugin</span><span>></span></span>
                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>
                <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-jar-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
                <span><span><span>&lt;</span>version</span><span>></span></span>3.1.2<span><span><span>&lt;/</span>version</span><span>></span></span>
                <span><span><span>&lt;</span>configuration</span><span>></span></span>
                    <span><span><span>&lt;</span>excludes</span><span>></span></span>
                        <span>&lt;!-- 打包后的jar包中不包括配置文件 --></span>
                        <span>&lt;!-- 通常是指classpath下目录下的文件，这样可以避免编写时的找不到相应文件 --></span>
                        <span><span><span>&lt;</span>exclude</span><span>></span></span>*.xml<span><span><span>&lt;/</span>exclude</span><span>></span></span>
                        <span><span><span>&lt;</span>exclude</span><span>></span></span>*.properties<span><span><span>&lt;/</span>exclude</span><span>></span></span>
                        <span><span><span>&lt;</span>exclude</span><span>></span></span>*.yml<span><span><span>&lt;/</span>exclude</span><span>></span></span>
                    <span><span><span>&lt;/</span>excludes</span><span>></span></span>
                    <span><span><span>&lt;</span>archive</span><span>></span></span>
                        <span><span><span>&lt;</span>manifest</span><span>></span></span>
                            <span>&lt;!-- 项目启动类 --></span>
                            <span><span><span>&lt;</span>mainClass</span><span>></span></span>cn.moremind.app.SpringBootApplication<span><span><span>&lt;/</span>mainClass</span><span>></span></span>
                            <span>&lt;!-- 依赖的jar的目录前缀 --></span>
                            <span><span><span>&lt;</span>classpathPrefix</span><span>></span></span>../lib/<span><span><span>&lt;/</span>classpathPrefix</span><span>></span></span>
                            <span><span><span>&lt;</span>addClasspath</span><span>></span></span>true<span><span><span>&lt;/</span>addClasspath</span><span>></span></span>
                        <span><span><span>&lt;/</span>manifest</span><span>></span></span>
                        <span>&lt;!-- 将config目录加入classpath目录 --></span>
                        <span><span><span>&lt;</span>manifestEntries</span><span>></span></span>
                            <span><span><span>&lt;</span>Class-Path</span><span>></span></span>../config/<span><span><span>&lt;/</span>Class-Path</span><span>></span></span>
                        <span><span><span>&lt;/</span>manifestEntries</span><span>></span></span>
                    <span><span><span>&lt;/</span>archive</span><span>></span></span>
                <span><span><span>&lt;/</span>configuration</span><span>></span></span>
            <span><span><span>&lt;/</span>plugin</span><span>></span></span>

            <span>&lt;!-- 打包插件 --></span>
            <span><span><span>&lt;</span>plugin</span><span>></span></span>
                <span><span><span>&lt;</span>groupId</span><span>></span></span>org.apache.maven.plugins<span><span><span>&lt;/</span>groupId</span><span>></span></span>
                <span><span><span>&lt;</span>artifactId</span><span>></span></span>maven-assembly-plugin<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
                <span><span><span>&lt;</span>version</span><span>></span></span>3.1.0<span><span><span>&lt;/</span>version</span><span>></span></span>
                <span><span><span>&lt;</span>configuration</span><span>></span></span>
                    <span><span><span>&lt;</span>descriptors</span><span>></span></span>
                        <span><span><span>&lt;</span>descriptor</span><span>></span></span>src/main/assembly/assembly.xml<span><span><span>&lt;/</span>descriptor</span><span>></span></span>
                    <span><span><span>&lt;/</span>descriptors</span><span>></span></span>
                <span><span><span>&lt;/</span>configuration</span><span>></span></span>
                <span><span><span>&lt;</span>executions</span><span>></span></span>
                    <span><span><span>&lt;</span>execution</span><span>></span></span>
                        <span><span><span>&lt;</span>id</span><span>></span></span>make-assembly<span><span><span>&lt;/</span>id</span><span>></span></span>
                        <span><span><span>&lt;</span>phase</span><span>></span></span>package<span><span><span>&lt;/</span>phase</span><span>></span></span>
                        <span><span><span>&lt;</span>goals</span><span>></span></span>
                            <span><span><span>&lt;</span>goal</span><span>></span></span>single<span><span><span>&lt;/</span>goal</span><span>></span></span>
                        <span><span><span>&lt;/</span>goals</span><span>></span></span>
                    <span><span><span>&lt;/</span>execution</span><span>></span></span>
                <span><span><span>&lt;/</span>executions</span><span>></span></span>
            <span><span><span>&lt;/</span>plugin</span><span>></span></span>
        <span><span><span>&lt;/</span>plugins</span><span>></span></span>
    <span><span><span>&lt;/</span>build</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br></div></div><h2 id="_3-编写shell脚本或者bat脚本"> 3.编写shell脚本或者bat脚本</h2>
<p>1.直接运行 java -jar xxxx.jar即可</p>
<p>2.编写shell/bash脚本</p>
<p>在bin目录下编写脚本文件如下：</p>
<p>shell</p>
<div><pre><code><span>#! /bin/sh</span>

<span>HOME</span> <span>=</span> <span>'/opt/xxx/boot'</span>
JAR_HOME <span>=</span> <span>'xxx.jar'</span>

<span>cd</span> <span>$HOME</span>
<span>nohup</span> java -jar <span>$JAR_HOME</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>bash</p>
<div><pre><code>@echo off
rem <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span>
rem windows startup script
rem
rem <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span>
rem startup jar

java -jar <span>..</span>/boot/xxx.jar

pause
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_4-项目目录如下"> 4.项目目录如下</h2>
<p><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/blog/images/maven/1565327770486.png" alt="1565327770486" /></p>
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <category term="Maven"/>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-21T16:14:37.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
  <entry>
    <title type="html">Blog Home</title>
    <id>https://www.moremind.cn/</id>
    <link href="https://www.moremind.cn/"/>
    <updated>2022-01-18T16:47:42.000Z</updated>
    <content type="html"><![CDATA[
]]></content>
    <author>
      <name>Moremind</name>
    </author>
    <contributor>
      <name>Moremind</name>
    </contributor>
    <published>2022-01-12T12:29:41.000Z</published>
    <rights>Copyright by Moremind</rights>
  </entry>
</feed>