import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as n,b as e,d as l,e as s,f as d}from"./app-9c62f8e6.js";const t={},h=d('<h1 id="一条sql如何执行的" tabindex="-1"><a class="header-anchor" href="#一条sql如何执行的" aria-hidden="true">#</a> 一条sql如何执行的</h1><h2 id="_1-mysql基础架构逻辑图" tabindex="-1"><a class="header-anchor" href="#_1-mysql基础架构逻辑图" aria-hidden="true">#</a> 1.mysql基础架构逻辑图</h2><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/mysql逻辑图.png" alt="mysql逻辑图" tabindex="0" loading="lazy"><figcaption>mysql逻辑图</figcaption></figure><h3 id="_1-1-mysql-分析器" tabindex="-1"><a class="header-anchor" href="#_1-1-mysql-分析器" aria-hidden="true">#</a> 1.1 mysql 分析器</h3><p>mysql是在分析阶段判断语句是否正确，表是否存在，列是否存在等。</p><h3 id="_1-2-mysql优化器" tabindex="-1"><a class="header-anchor" href="#_1-2-mysql优化器" aria-hidden="true">#</a> 1.2 mysql优化器</h3><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。</p><h3 id="_1-3-mysql-执行器" tabindex="-1"><a class="header-anchor" href="#_1-3-mysql-执行器" aria-hidden="true">#</a> 1.3 mysql 执行器</h3><ol><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><h2 id="_2-mysql执行的流程" tabindex="-1"><a class="header-anchor" href="#_2-mysql执行的流程" aria-hidden="true">#</a> 2.mysql执行的流程</h2><h3 id="_2-1-重要的日志模块-redo-log" tabindex="-1"><a class="header-anchor" href="#_2-1-重要的日志模块-redo-log" aria-hidden="true">#</a> 2.1 重要的日志模块：redo log</h3><p>redo log 是 InnoDB 引擎特有的日志，mysql使用WAL机制来提升更新效率， <strong>WAL的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘</strong>当有一条记录需要更新的时候， <strong>InnoDB 引擎就会先把记录写到 redo log（粉板）里面，并更新内存，这个时候更新就算完成了。</strong> 同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20210325132141803.png" alt="mysql-redo log逻辑结构" tabindex="0" loading="lazy"><figcaption>mysql-redo log逻辑结构</figcaption></figure><p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>write pos 和 checkpoint 之间的是“粉板”上还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为<strong>crash-safe</strong>。</p><h3 id="_2-2-重要的日志模块-binlog" tabindex="-1"><a class="header-anchor" href="#_2-2-重要的日志模块-binlog" aria-hidden="true">#</a> 2.2 重要的日志模块：binlog</h3><p>Server层自己的日志则为binlog（归档日志），只依靠 binlog 是没有 crash-safe 能力的，，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力</p><h4 id="_2-2-1-redo-log与binlog区别" tabindex="-1"><a class="header-anchor" href="#_2-2-1-redo-log与binlog区别" aria-hidden="true">#</a> 2.2.1 redo log与binlog区别</h4><ol><li><strong>redo log 是<code>InnoDB</code>引擎特有的；binlog 是<code>MySQL的Server层</code>实现的，所有引擎都可以使用</strong>。</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</li><li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><h4 id="_2-2-2-innodb执行update的流程" tabindex="-1"><a class="header-anchor" href="#_2-2-2-innodb执行update的流程" aria-hidden="true">#</a> 2.2.2 innodb执行update的流程</h4><ol><li>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</li></ol><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20210325145635413.png" alt="image-20210325145635413" tabindex="0" loading="lazy"><figcaption>image-20210325145635413</figcaption></figure><h2 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结" aria-hidden="true">#</a> 3.小结</h2><p>redo log 用于保证 crash-safe 能力。<strong>innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</strong></p><p><strong>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</strong></p><h2 id="_4-参考文章" tabindex="-1"><a class="header-anchor" href="#_4-参考文章" aria-hidden="true">#</a> 4.参考文章</h2>',27),c={href:"https://mp.weixin.qq.com/s/5i9wmJs4_Er7RaYfNnETyA",target:"_blank",rel:"noopener noreferrer"};function g(_,m){const a=i("ExternalLinkIcon");return r(),n("div",null,[h,e("p",null,[e("a",c,[l("MySQL 的 crash-safe 原理解析"),s(a)])])])}const b=o(t,[["render",g],["__file","1.mysql-一条sql语句如何执行.html.vue"]]);export{b as default};
