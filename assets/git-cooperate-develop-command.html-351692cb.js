import{_ as t,W as n,X as d,Y as s,Z as e,$ as o,a0 as l,a1 as i,C as g}from"./framework-a4c02b8f.js";const r={},c=i(`<h1 id="git远程分支操作" tabindex="-1"><a class="header-anchor" href="#git远程分支操作" aria-hidden="true">#</a> git远程分支操作</h1><h2 id="查看远程仓库信息" tabindex="-1"><a class="header-anchor" href="#查看远程仓库信息" aria-hidden="true">#</a> 查看远程仓库信息</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git remote
git remote -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),u=i(`<h2 id="推送分支" tabindex="-1"><a class="header-anchor" href="#推送分支" aria-hidden="true">#</a> 推送分支</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_remote3.png" alt="git_remote" tabindex="0" loading="lazy"><figcaption>git_remote</figcaption></figure><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_push.png" alt="git_push" tabindex="0" loading="lazy"><figcaption>git_push</figcaption></figure><p>也可以推送到其他分支：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push origin dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么一般情况下，那些分支要推送呢？</p><blockquote><ol><li>master分支是主分支，因此要时刻与远程同步。</li></ol></blockquote><blockquote><ol start="2"><li>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</li></ol></blockquote><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_push2.png" alt="git_push2" tabindex="0" loading="lazy"><figcaption>git_push2</figcaption></figure><h2 id="抓取分支" tabindex="-1"><a class="header-anchor" href="#抓取分支" aria-hidden="true">#</a> 抓取分支</h2><p>多人协作时，大家都会往master分支上推送各自的修改。新建一个目录名字叫testgit3。</p><p>现在我们的伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：</p><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_clone2.png" alt="git_clone2" tabindex="0" loading="lazy"><figcaption>git_clone2</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout –b dev 
git reset --hard origin/dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在dev下重置起点，即可，git checkout -b dev origin/dev 错误的。</p><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_checkout3.png" alt="git" tabindex="0" loading="lazy"><figcaption>git</figcaption></figure><p>接下来在demo.txt的文件中添加数据6666666666666数据，然后提交到分支即可。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add demo.txt
git commit -m &quot;添加666的数据&quot;
git pusu origin dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_push4.png" alt="git_push3" tabindex="0" loading="lazy"><figcaption>git_push3</figcaption></figure><p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改,添加了数据6666666666666，也试图推送到远程库:</p><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_push_dev.png" alt="git_push_dev" tabindex="0" loading="lazy"><figcaption>git_push_dev</figcaption></figure><p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git pull
git branch --set-upstream dev origin/dev
git pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后此时会出现冲突，所以需要解决冲突，使用前面讲过的分支策略进行解决。然后在执行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add demo.txt
git commit -m &quot;****&quot;
git push origin dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多人协作工作模式一般是这样的：</p><ol><li><p>首先，可以试图用git push origin branch-name推送自己的修改.</p></li><li><p>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。</p></li><li><p>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</p></li></ol><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,29),p={href:"https://www.gitbook.com/book/bingohuang/progit2/details",target:"_blank",rel:"noopener noreferrer"};function m(h,v){const a=g("ExternalLinkIcon");return n(),d("div",null,[c,s("more"),u,e("p",null,[e("strong",null,[e("a",p,[o("ProGit中文版"),l(a)])])])])}const f=t(r,[["render",m],["__file","git-cooperate-develop-command.html.vue"]]);export{f as default};
