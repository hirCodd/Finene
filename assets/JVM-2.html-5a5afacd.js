import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as n,d as s,e,f as t}from"./app-9b1c5904.js";const i={},u=n("h2",{id:"_1-结合字节码指令理解java虚拟机栈和栈帧",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-结合字节码指令理解java虚拟机栈和栈帧","aria-hidden":"true"},"#"),s(" 1 结合字节码指令理解Java虚拟机栈和栈帧")],-1),r={href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.6",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"栈帧：每个栈帧对应一个被调用的方法，可以理解为一个方法的运行空间。",-1),k=t(`<p>每个栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向运行时常量池的引用(A reference to the run-time constant pool)、方法返回地址(Return Address)和附加信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>每个栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向运行时常量池的引用(A reference to the run-time constant pool)、方法返回地址(Return Address)和附加信息。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>操作数栈:以压栈和出栈的方式存储操作数的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>动态链接:每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接(Dynamic Linking)。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>方法返回地址:当一个方法开始执行后,只有两种方式可以退出，一种是遇到方法返回的字节码指令；一种是遇见异常，并且这个异常没有在方法体内得到处理。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309223600414.png" alt="image-20220309223600414" tabindex="0" loading="lazy"><figcaption>image-20220309223600414</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> salary<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> hobby<span class="token operator">=</span><span class="token string">&quot;Programming&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;person say...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> op1<span class="token punctuation">,</span><span class="token keyword">int</span> op2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        op1<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result<span class="token operator">=</span>op1<span class="token operator">+</span>op2<span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),v=n("p",null,"此时你需要一个能够看懂反编译指令的宝典",-1),m={href:"https://docs.oracle.com/javase/specs/jvms/se8/html/index.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> aload_0
       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span><span class="token operator">:</span> aload_0
       <span class="token number">5</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String Jack</span>
       <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">3</span>                  <span class="token comment">// Field name:Ljava/lang/String;</span>
      <span class="token number">10</span><span class="token operator">:</span> aload_0
      <span class="token number">11</span><span class="token operator">:</span> ldc2_w        #<span class="token number">4</span>                  <span class="token comment">// double 100.0d</span>
      <span class="token number">14</span><span class="token operator">:</span> putfield      #<span class="token number">6</span>                  <span class="token comment">// Field salary:D</span>
      <span class="token number">17</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">7</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
       <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">8</span>                  <span class="token comment">// String person say...</span>
       <span class="token number">5</span><span class="token operator">:</span> invokevirtual #<span class="token number">9</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
       <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> iconst_3  <span class="token comment">//将int类型常量3压入[操作数栈]</span>
       <span class="token number">1</span><span class="token operator">:</span> istore_0  <span class="token comment">//将int类型值存入局部变量表[局部变量0] ==&gt; op = 3</span>
       <span class="token number">2</span><span class="token operator">:</span> iload_0   <span class="token comment">//从[局部变量0]中装载int类型值入栈</span>
       <span class="token number">3</span><span class="token operator">:</span> iload_1   <span class="token comment">//从[局部变量1]中装载int类型值入栈</span>
       <span class="token number">4</span><span class="token operator">:</span> iadd      <span class="token comment">//将栈顶元素弹出栈，执行int类型的加法，结果入栈</span>
       <span class="token number">5</span><span class="token operator">:</span> istore_2  <span class="token comment">//将栈顶int类型值保存到[局部变量2]中</span>
       <span class="token number">6</span><span class="token operator">:</span> iload_2   <span class="token comment">//从[局部变量2]中装载int类型值入栈</span>
       <span class="token number">7</span><span class="token operator">:</span> ireturn   <span class="token comment">//从方法中返回int类型的数据</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> iconst_1
       <span class="token number">1</span><span class="token operator">:</span> iconst_2
       <span class="token number">2</span><span class="token operator">:</span> invokestatic  #<span class="token number">10</span>                 <span class="token comment">// Method calc:(II)I</span>
       <span class="token number">5</span><span class="token operator">:</span> pop
       <span class="token number">6</span><span class="token operator">:</span> invokestatic  #<span class="token number">11</span>                 <span class="token comment">// Method order:()V</span>
       <span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309223510002.png" alt="image-20220309223510002" tabindex="0" loading="lazy"><figcaption>image-20220309223510002</figcaption></figure><h2 id="_2-折腾一下" tabindex="-1"><a class="header-anchor" href="#_2-折腾一下" aria-hidden="true">#</a> 2 折腾一下</h2><h3 id="_2-1栈指向堆" tabindex="-1"><a class="header-anchor" href="#_2-1栈指向堆" aria-hidden="true">#</a> 2.1栈指向堆</h3><p>如果在栈帧中有一个变量，类型为引用类型，比如Object obj=new Object()，这时候就是典型的栈中元素指向堆中的对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309230040459.png" alt="image-20220309230040459" tabindex="0" loading="lazy"><figcaption>image-20220309230040459</figcaption></figure><h3 id="_2-2-方法区指向堆" tabindex="-1"><a class="header-anchor" href="#_2-2-方法区指向堆" aria-hidden="true">#</a> 2.2 方法区指向堆</h3><p>方法区中会存放静态变量，常量等数据。如果是下面这种情况，就是典型的方法区中元素指向堆中的对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法区指向堆</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309230410111.png" alt="image-20220309230410111" tabindex="0" loading="lazy"><figcaption>image-20220309230410111</figcaption></figure><h3 id="_2-3-堆指向方法区" tabindex="-1"><a class="header-anchor" href="#_2-3-堆指向方法区" aria-hidden="true">#</a> 2.3 堆指向方法区</h3><p>方法区中会包含类的信息，堆中会有对象，那怎么知道对象是哪个类创建的呢？</p><p>思考 ：一个对象怎么知道它是由哪个类创建出来的？怎么记录？这就需要了解一个Java对象的具体信息咯。</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309230858070.png" alt="image-20220309230858070" tabindex="0" loading="lazy"><figcaption>image-20220309230858070</figcaption></figure><h3 id="_2-4-java对象内存布局" tabindex="-1"><a class="header-anchor" href="#_2-4-java对象内存布局" aria-hidden="true">#</a> 2.4 Java对象内存布局</h3><p>一个Java对象在内存中包括3个部分：对象头、实例数据和对齐填充</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309230913143.png" alt="image-20220309230913143" tabindex="0" loading="lazy"><figcaption>image-20220309230913143</figcaption></figure><h2 id="_3-内存模型" tabindex="-1"><a class="header-anchor" href="#_3-内存模型" aria-hidden="true">#</a> 3 内存模型</h2><h3 id="_3-1-图解" tabindex="-1"><a class="header-anchor" href="#_3-1-图解" aria-hidden="true">#</a> 3.1 图解</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>一块是非堆区，一块是堆区。
堆区分为两大块，一个是Old区，一个是Young区。
Young区分为两大块，一个是Survivor区（S0+S1），一块是Eden区。 Eden:S0:S1=8:1:1
S0和S1一样大，也可以叫From和To。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309233401625.png" alt="image-20220309233401625" tabindex="0" loading="lazy"><figcaption>image-20220309233401625</figcaption></figure><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309233506458.png" alt="image-20220309233506458" tabindex="0" loading="lazy"><figcaption>image-20220309233506458</figcaption></figure><p>根据之前对于Heap的介绍可以知道，一般对象和数组的创建会在堆中分配内存空间，关键是堆中有这么多区 域，那一个对象的创建到底在哪个区域呢？</p><h3 id="_3-2-对象创建所在区域" tabindex="-1"><a class="header-anchor" href="#_3-2-对象创建所在区域" aria-hidden="true">#</a> 3.2 对象创建所在区域</h3><p>一般情况下，新创建的对象都会被分配到Eden区，一些特殊的大的对象会直接分配到Old区。</p><blockquote><p>比如有对象A，B，C等创建在Eden区，但是Eden区的内存空间肯定有限，比如有100M，假如已经使用了 100M或者达到一个设定的临界值，这时候就需要对Eden内存空间进行清理，即垃圾收集(Garbage Collect)， 这样的GC我们称之为Minor GC，Minor GC指得是Young区的GC。 经过GC之后，有些对象就会被清理掉，有些对象可能还存活着，对于存活着的对象需要将其复制到Survivor 区，然后再清空Eden区中的这些对象。</p></blockquote><h3 id="_3-3-survivor区详解" tabindex="-1"><a class="header-anchor" href="#_3-3-survivor区详解" aria-hidden="true">#</a> 3.3 Survivor区详解</h3><p>由图解可以看出，Survivor区分为两块S0和S1，也可以叫做From和To。</p><p>在同一个时间点上，S0和S1只能有一个区有数据，另外一个是空的。</p><blockquote><p>接着上面的GC来说，比如一开始只有Eden区和From中有对象，To中是空的。</p><p>此时进行一次GC操作，From区中对象的年龄就会+1，我们知道Eden区中所有存活的对象会被复制到To区， From区中还能存活的对象会有两个去处。</p><p>若对象年龄达到之前设置好的年龄阈值，此时对象会被移动到Old区，如果Eden区和From区没有达到阈值的</p><p>对象会被复制到To区。 此时Eden区和From区已经被清空(被GC的对象肯定没了，没有被GC的对象都有了各 自的去处)</p><p>这时候From和To交换角色，之前的From变成了To，之前的To变成了From。</p><p>也就是说无论如何都要保证名为To的Survivor区域是空的。</p><p>Minor GC会一直重复这样的过程，直到To区被填满，然后会将所有对象复制到老年代中。</p></blockquote><p>从上面的分析可以看出，一般Old区都是年龄比较大的对象，或者相对超过了某个阈值的对象。</p><p>在Old区也会有GC的操作，Old区的GC我们称作为Major GC。</p><h3 id="_3-4-old区详解" tabindex="-1"><a class="header-anchor" href="#_3-4-old区详解" aria-hidden="true">#</a> 3.4 Old区详解</h3><p>从上面的分析可以看出，一般Old区都是年龄比较大的对象，或者相对超过了某个阈值的对象。 在Old区也会有GC的操作，Old区的GC我们称作为Major GC。</p><h3 id="_3-5-对象的一辈子理解" tabindex="-1"><a class="header-anchor" href="#_3-5-对象的一辈子理解" aria-hidden="true">#</a> 3.5 对象的一辈子理解</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>我是一个普通的Java对象,我出生在Eden区,在Eden区我还看到和我长的很像的小兄弟,我们在Eden区中玩了挺长时间。有一天Eden区中的人实在是太多了,我就被迫去了Survivor区的“From”区,自从去了Survivor区,我就开始漂了,有时候在Survivor的“From”区,有时候在Survivor的“To”区,居无定所。直到我18岁的时候,爸爸说我成人了,该去社会上闯闯了。
于是我就去了年老代那边,年老代里,人很多,并且年龄都挺大的,我在这里也认识了很多人。在年老代里,我生活了20年(每次GC加一岁),然后被回收。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309235221230.png" alt="image-20220309235221230" tabindex="0" loading="lazy"><figcaption>image-20220309235221230</figcaption></figure><h3 id="_3-6-常见问题" tabindex="-1"><a class="header-anchor" href="#_3-6-常见问题" aria-hidden="true">#</a> 3.6 常见问题</h3><ul><li><p>如何理解Minor/Major/Full GC</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Minor GC:新生代
Major GC:老年代
Full GC:新生代+老年代
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>为什么需要Survivor区?只有Eden不行吗？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>如果没有Survivor,Eden区每进行一次Minor GC,并且没有年龄限制的话，存活的对象就会被送到老年代。
这样一来，老年代很快被填满,触发Major GC(因为Major GC一般伴随着Minor GC,也可以看做触发了Full GC)。
老年代的内存空间远大于新生代,进行一次Full GC消耗的时间比Minor GC长得多。
执行时间长有什么坏处?频发的Full GC消耗的时间很长,会影响大型程序的执行和响应速度。

可能你会说，那就对老年代的空间进行增加或者较少咯。
假如增加老年代空间，更多存活对象才能填满老年代。虽然降低Full GC频率，但是随着老年代空间加大,一旦发生Full GC,执行所需要的时间更长。
假如减少老年代空间，虽然Full GC所需时间减少，但是老年代很快被存活对象填满,Full GC频率增加。

所以Survivor的存在意义,就是减少被送到老年代的对象,进而减少Full GC的发生,Survivor的预筛选保证,只有经历16次Minor GC还能在新生代中存活的对象,才会被送到老年代。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>为什么需要两个Survivor区?</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>最大的好处就是解决了碎片化。也就是说为什么一个Survivor区不行?第一部分中,我们知道了必须设置Survivor区。假设现在只有一个Survivor区,我们来模拟一下流程:
刚刚新建的对象在Eden中,一旦Eden满了,触发一次Minor GC,Eden中的存活对象就会被移动Survivor区。这样继续循环下去,下一次Eden满了的时候,问题来了,此时进行Minor GC,Eden和Survivor各有一些存活对象,如果此时把Eden区的存活对象硬放到Survivor区,很明显这两部分对象所占有的内存是不连续的,也就导致了内存碎片化。
永远有一个Survivor space是空的,另一个非空的Survivor space无碎片。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新生代中Eden:S1:S2为什么是8:1:1？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>新生代中的可用内存：复制算法用来担保的内存为9：1
可用内存中Eden：S1区为8：1
即新生代中Eden:S1:S2 = 8：1：1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4-体验与验证" tabindex="-1"><a class="header-anchor" href="#_4-体验与验证" aria-hidden="true">#</a> 4 体验与验证</h2><h3 id="_4-1-使用jvisualvm查看" tabindex="-1"><a class="header-anchor" href="#_4-1-使用jvisualvm查看" aria-hidden="true">#</a> 4.1 使用jvisualvm查看</h3>`,42),g={href:"https://visualvm.github.io/pluginscenters.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310000015238.png" alt="image-20220310000015238" tabindex="0" loading="lazy"><figcaption>image-20220310000015238</figcaption></figure><h3 id="_4-1-堆内存溢出" tabindex="-1"><a class="header-anchor" href="#_4-1-堆内存溢出" aria-hidden="true">#</a> 4.1 堆内存溢出</h3><h4 id="_4-1-1-代码" tabindex="-1"><a class="header-anchor" href="#_4-1-1-代码" aria-hidden="true">#</a> 4.1.1 代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapController</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/heap&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>记得设置参数比如-Xmx20M -Xms20M</p></blockquote><h4 id="_4-1-2-运行结果" tabindex="-1"><a class="header-anchor" href="#_4-1-2-运行结果" aria-hidden="true">#</a> 4.1.2 运行结果</h4>`,6),f={href:"http://localhost:8080/heap",target:"_blank",rel:"noopener noreferrer"},y=t(`<blockquote><p>Exception in thread &quot;http-nio-8080-exec-2&quot; java.lang.OutOfMemoryError: GC overhead limit exceeded</p></blockquote><h3 id="_4-2-方法区内存溢出" tabindex="-1"><a class="header-anchor" href="#_4-2-方法区内存溢出" aria-hidden="true">#</a> 4.2 方法区内存溢出</h3><blockquote><p>比如向方法区中添加Class的信息</p></blockquote><h4 id="_4-2-1-asm依赖和class代码" tabindex="-1"><a class="header-anchor" href="#_4-2-1-asm依赖和class代码" aria-hidden="true">#</a> 4.2.1 asm依赖和Class代码</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetaspaceUtil</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">createClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cw<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">V1_1</span><span class="token punctuation">,</span> <span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token string">&quot;Class&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;java/lang/Object&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MethodVisitor</span> mw <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;init&gt;&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mw<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mw<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">INVOKESPECIAL</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Object&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;&lt;init&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()V&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mw<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">RETURN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mw<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mw<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MetaspaceUtil</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MetaspaceUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> exampleClass <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">&quot;Class&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>exampleClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> classes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-代码" tabindex="-1"><a class="header-anchor" href="#_4-2-2-代码" aria-hidden="true">#</a> 4.2.2 代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonHeapController</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/nonheap&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">MetaspaceUtil</span><span class="token punctuation">.</span><span class="token function">createClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-3-运行结果" tabindex="-1"><a class="header-anchor" href="#_4-2-3-运行结果" aria-hidden="true">#</a> 4.2.3 运行结果</h4>`,9),w={href:"http://localhost:8080/nonheap",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java.lang.OutOfMemoryError: Metaspace
at java.lang.ClassLoader.defineClass1(Native Method) ~[na:1.8.0_191]
at java.lang.ClassLoader.defineClass(ClassLoader.java:763) ~[na:1.8.0_191]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_4-3-虚拟机栈" aria-hidden="true">#</a> 4.3 虚拟机栈</h3><h4 id="_4-3-1-代码演示stackoverflow" tabindex="-1"><a class="header-anchor" href="#_4-3-1-代码演示stackoverflow" aria-hidden="true">#</a> 4.3.1 代码演示StackOverFlow</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackOverFlowDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-2-运行结果" tabindex="-1"><a class="header-anchor" href="#_4-3-2-运行结果" aria-hidden="true">#</a> 4.3.2 运行结果</h4><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310000555900.png" alt="image-20220310000555900" tabindex="0" loading="lazy"><figcaption>image-20220310000555900</figcaption></figure><h4 id="_4-3-3-理解和说明" tabindex="-1"><a class="header-anchor" href="#_4-3-3-理解和说明" aria-hidden="true">#</a> 4.3.3 理解和说明</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Stack Space用来做方法的递归调用时压入Stack Frame(栈帧)。所以当递归调用太深的时候，就有可能耗尽StackSpace，爆出StackOverflow的错误。

-Xss128k：设置每个线程的堆栈大小。JDK 5以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。根据应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。

线程栈的大小是个双刃剑，如果设置过小，可能会出现栈溢出，特别是在该线程内有递归、大的循环时出现溢出的可能性更大，如果该值设置过大，就有影响到创建栈的数量，如果是多线程的应用，就会出现内存溢出的错误。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function _(C,j){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("官网 ："),n("a",r,[s("https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.6"),e(a)])]),d]),k,n("blockquote",null,[v,n("p",null,[s("比如官网的："),n("a",m,[s("https://docs.oracle.com/javase/specs/jvms/se8/html/index.html"),e(a)])])]),b,n("p",null,[s("visualgc插件下载链接 ： "),n("a",g,[s("https://visualvm.github.io/pluginscenters.html"),e(a)]),s(" --->选择对应版本链接--->Tools--->Visual GC")]),h,n("p",null,[s("访问->"),n("a",f,[s("http://localhost:8080/heap"),e(a)])]),y,n("blockquote",null,[n("p",null,[s("访问->"),n("a",w,[s("http://localhost:8080/nonheap"),e(a)])])]),x])}const G=p(i,[["render",_],["__file","JVM-2.html.vue"]]);export{G as default};
