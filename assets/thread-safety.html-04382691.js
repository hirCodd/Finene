const e=JSON.parse(`{"key":"v-35a5f41b","path":"/md/java/thread/thread-safety.html","title":"到底什么是线程安全和线程不安全？","lang":"en-US","frontmatter":{"author":"moremind","title":"到底什么是线程安全和线程不安全？","date":"2021-03-26T00:00:00.000Z","category":"Java-Thread","tag":"Java-Thread","description":"1.什么是线程安全？ 维基百科给出的定义如下： 线程安全是程式设计中的术语，指某个函数、函数库在多线程环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。","head":[["meta",{"property":"og:url","content":"https://www.moremind.cn/md/java/thread/thread-safety.html"}],["meta",{"property":"og:site_name","content":"Moremind's Blog"}],["meta",{"property":"og:title","content":"到底什么是线程安全和线程不安全？"}],["meta",{"property":"og:description","content":"1.什么是线程安全？ 维基百科给出的定义如下： 线程安全是程式设计中的术语，指某个函数、函数库在多线程环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-03-21T06:09:44.000Z"}],["meta",{"property":"article:author","content":"moremind"}],["meta",{"property":"article:tag","content":"Java-Thread"}],["meta",{"property":"article:published_time","content":"2021-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-21T06:09:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"到底什么是线程安全和线程不安全？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-21T06:09:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moremind\\"}]}"]]},"headers":[{"level":2,"title":"1.什么是线程安全？","slug":"_1-什么是线程安全","link":"#_1-什么是线程安全","children":[]},{"level":2,"title":"2.Java内存模型-JMM","slug":"_2-java内存模型-jmm","link":"#_2-java内存模型-jmm","children":[]},{"level":2,"title":"3.共享变量(共享资源)","slug":"_3-共享变量-共享资源","link":"#_3-共享变量-共享资源","children":[]},{"level":2,"title":"4.线程安全的实现","slug":"_4-线程安全的实现","link":"#_4-线程安全的实现","children":[{"level":3,"title":"4.1 无状态实现","slug":"_4-1-无状态实现","link":"#_4-1-无状态实现","children":[]},{"level":3,"title":"4.2  不可变的实现","slug":"_4-2-不可变的实现","link":"#_4-2-不可变的实现","children":[]},{"level":3,"title":"4.3 线程私有 (ThreadLocal) 字段","slug":"_4-3-线程私有-threadlocal-字段","link":"#_4-3-线程私有-threadlocal-字段","children":[]},{"level":3,"title":"4.4 同步集合类","slug":"_4-4-同步集合类","link":"#_4-4-同步集合类","children":[]},{"level":3,"title":"4.5 支持并发的集合","slug":"_4-5-支持并发的集合","link":"#_4-5-支持并发的集合","children":[]},{"level":3,"title":"4.6 原子化对象","slug":"_4-6-原子化对象","link":"#_4-6-原子化对象","children":[]},{"level":3,"title":"4.7 同步方法","slug":"_4-7-同步方法","link":"#_4-7-同步方法","children":[]},{"level":3,"title":"4.8  同步语句","slug":"_4-8-同步语句","link":"#_4-8-同步语句","children":[]},{"level":3,"title":"4.8 其他对象作为锁","slug":"_4-8-其他对象作为锁","link":"#_4-8-其他对象作为锁","children":[]}]},{"level":2,"title":"5.参考文章","slug":"_5-参考文章","link":"#_5-参考文章","children":[]}],"git":{"createdTime":1679378984000,"updatedTime":1679378984000,"contributors":[{"name":"moremind","email":"hefengen@apache.org","commits":1}]},"readingTime":{"minutes":11.93,"words":3579},"filePathRelative":"md/java/thread/thread-safety.md","localizedDate":"March 26, 2021","excerpt":"<h2> 1.什么是线程安全？</h2>\\n<p>维基百科给出的定义如下：</p>\\n<blockquote>\\n<p>线程安全是程式设计中的术语，指<strong>某个函数、函数库</strong>在<strong>多线程环境</strong>中被调用时，能够正确地处理多个线程之间的<strong>共享变量</strong>，使程序功能正确完成。</p>\\n</blockquote>","autoDesc":true}`);export{e as data};
