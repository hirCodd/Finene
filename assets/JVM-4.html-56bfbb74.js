import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c,b as a,d as e,e as s,f as t}from"./app-297e668d.js";const o={},p=t(`<h1 id="_1-jvm实战篇" tabindex="-1"><a class="header-anchor" href="#_1-jvm实战篇" aria-hidden="true">#</a> 1 JVM实战篇</h1><h2 id="_1-1-jvm参数" tabindex="-1"><a class="header-anchor" href="#_1-1-jvm参数" aria-hidden="true">#</a> 1.1 JVM参数</h2><h4 id="_1-1-1-标准参数" tabindex="-1"><a class="header-anchor" href="#_1-1-1-标准参数" aria-hidden="true">#</a> 1.1.1 标准参数</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-version
-help
-server
-cp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-2-x参数" tabindex="-1"><a class="header-anchor" href="#_1-1-2-x参数" aria-hidden="true">#</a> 1.1.2 -X参数</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xint 解释执行
-Xcomp 第一次使用就编译成本地代码
-Xmixed 混合模式，JVM自己来决定
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-3-xx参数" tabindex="-1"><a class="header-anchor" href="#_1-1-3-xx参数" aria-hidden="true">#</a> 1.1.3 -XX参数</h4><blockquote><p>使用得最多的参数类型 非标准化参数，相对不稳定，主要用于JVM调优和Debug</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a.Boolean类型
格式：-XX:[+-]&lt;name&gt; +或-表示启用或者禁用name属性
比如：-XX:+UseConcMarkSweepGC 表示启用CMS类型的垃圾回收器
	 -XX:+UseG1GC 表示启用G1类型的垃圾回收器

** b.非Boolean类型
格式：-XX&lt;name&gt;=&lt;value&gt;表示name属性的值是value
比如：-XX:MaxGCPauseMillis=500
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-4-其他参数" tabindex="-1"><a class="header-anchor" href="#_1-1-4-其他参数" aria-hidden="true">#</a> 1.1.4 其他参数</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xms1000等价于-XX:InitialHeapSize=1000
-Xmx1000等价于-XX:MaxHeapSize=1000
-Xss100等价于-XX:ThreadStackSize=100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-5-查看参数" tabindex="-1"><a class="header-anchor" href="#_1-1-5-查看参数" aria-hidden="true">#</a> 1.1.5 查看参数</h4><blockquote><p><strong>java -XX:+PrintFlagsFinal -version &gt; flags.txt</strong></p></blockquote><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310215001216.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-1-6-设置参数的方式" tabindex="-1"><a class="header-anchor" href="#_1-1-6-设置参数的方式" aria-hidden="true">#</a> 1.1.6 设置参数的方式</h4><ul><li><p>开发工具中设置比如IDEA，eclipse</p></li><li><p>运行jar包的时候:java -XX:+UseG1GC xxx.jar</p></li><li><p>web容器比如tomcat，可以在脚本中的进行设置</p></li><li><p><strong>通过jinfo实时调整某个java进程的参数(参数只有被标记为manageable的flags可以被实时修改)</strong></p></li></ul><h4 id="_1-1-7-实践和单位换算" tabindex="-1"><a class="header-anchor" href="#_1-1-7-实践和单位换算" aria-hidden="true">#</a> 1.1.7 实践和单位换算</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1Byte(字节)=8bit(位)
1KB=1024Byte(字节)
1MB=1024KB
1GB=1024MB
1TB=1024GB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(1)设置堆内存大小和参数打印
	-Xmx100M -Xms100M -XX:+PrintFlagsFinal
(2)查询+PrintFlagsFinal的值
	:=true
(3)查询堆内存大小MaxHeapSize
	:= 104857600
(4)换算
104857600(Byte)/1024=102400(KB)
102400(KB)/1024=100(MB)
(5)结论
	104857600是字节单位
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-8-常用参数含义" tabindex="-1"><a class="header-anchor" href="#_1-1-8-常用参数含义" aria-hidden="true">#</a> 1.1.8 常用参数含义</h4>`,20),r={href:"https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html",target:"_blank",rel:"noopener noreferrer"},u=t('<ul><li>调优堆栈内存-堆栈大小典型配置参数</li></ul><table><thead><tr><th style="text-align:left;">配置参数</th><th style="text-align:left;">说明</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>-Xmx</code></td><td style="text-align:left;">设置最大堆大小。</td><td style="text-align:left;"><code>-Xmx3550m</code>，设置JVM最大可用内存为3550 MB。</td></tr><tr><td style="text-align:left;"><code>-Xms</code></td><td style="text-align:left;">设置JVM初始内存。</td><td style="text-align:left;"><code>-Xms3550m</code>，设置JVM初始内存为3550 MB。此值建议与<code>-Xmx</code>相同，避免每次垃圾回收完成后JVM重新分配内存。</td></tr><tr><td style="text-align:left;"><code>-Xmn</code></td><td style="text-align:left;">设置年轻代大小。</td><td style="text-align:left;"><code>-Xmn2g</code>，设置年轻代大小为2 GB。整个JVM内存大小=年轻代大小+年老代大小+持久代大小。持久代一般固定大小为64 MB，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。</td></tr><tr><td style="text-align:left;"><code>-Xss</code></td><td style="text-align:left;">设置线程的栈大小。</td><td style="text-align:left;"><code>-Xss128k</code>，设置每个线程的栈大小为128 KB。<strong>说明</strong> JDK 5.0版本以后每个线程栈大小为1 MB，JDK 5.0以前版本每个线程栈大小为256 KB。请依据应用的线程所需内存大小进行调整。在相同物理内存下，减小该值可以生成更多的线程。但是操作系统对一个进程内的线程个数有一定的限制，无法无限生成，一般在3000个~5000个。</td></tr><tr><td style="text-align:left;"><code>-XX:NewRatio=n</code></td><td style="text-align:left;">设置年轻代和年老代的比值。</td><td style="text-align:left;"><code>-XX:NewRatio=4</code>，设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。如果设置为4，那么年轻代与年老代所占比值为1:4，年轻代占整个堆栈的1/5。</td></tr><tr><td style="text-align:left;"><code>-XX:SurvivorRatio=n</code></td><td style="text-align:left;">年轻代中Eden区与两个Survivor区的比值。</td><td style="text-align:left;"><code>-XX:SurvivorRatio=4</code>，设置年轻代中Eden区与Survivor区的大小比值。如果设置为4，那么两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6。</td></tr><tr><td style="text-align:left;"><code>-XX:MaxPermSize=n</code></td><td style="text-align:left;">设置持久代大小。</td><td style="text-align:left;"><code>-XX:MaxPermSize=16m</code>，设置持久代大小为16 MB。</td></tr><tr><td style="text-align:left;"><code>-XX:MaxTenuringThreshold=n</code></td><td style="text-align:left;">设置垃圾最大年龄。</td><td style="text-align:left;"><code>-XX:MaxTenuringThreshold=0</code>，设置垃圾最大年龄。如果设置为0，那么年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，提高了效率。如果将此值设置为较大值，那么年轻代对象会在Survivor区进行多次复制，增加了对象在年轻代的存活时间，增加在年轻代即被回收的概率。</td></tr></tbody></table><ul><li>调优回收器GC-吞吐量优先的GC典型配置参数</li></ul><table><thead><tr><th style="text-align:left;">配置参数</th><th style="text-align:left;">说明</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>-XX:+UseParallelGC</code></td><td style="text-align:left;">选择垃圾收集器为并行收集器。</td><td style="text-align:left;"><code>-Xmx3800m -Xms3800m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20</code>，<code>-XX:+UseParallelGC</code>此配置仅对年轻代有效，即在示例配置下，年轻代使用并发收集，而年老代仍旧使用串行收集。</td></tr><tr><td style="text-align:left;"><code>-XX:ParallelGCThreads</code></td><td style="text-align:left;">配置并行收集器的线程数，即同时多少个线程一起进行垃圾回收。<strong>说明</strong> 此值建议配置与处理器数目相等。</td><td style="text-align:left;"><code>-Xmx3800m -Xms3800m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20</code>，<code>-XX:ParallelGCThreads=20</code>表示配置并行收集器的线程数为20个。</td></tr><tr><td style="text-align:left;"><code>-XX:+UseParallelOldGC</code></td><td style="text-align:left;">配置年老代垃圾收集方式为并行收集。<strong>说明</strong> JDK 6.0支持对年老代并行收集。</td><td style="text-align:left;"><code>-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20 -XX:+UseParallelOldGC</code>，<code>-XX:+UseParallelOldGC</code>表示对年老代进行并行收集。</td></tr><tr><td style="text-align:left;"><code>-XX:MaxGCPauseMillis</code></td><td style="text-align:left;">设置每次年轻代垃圾回收的最长时间，如果无法满足此时间，JVM会自动调整年轻代大小，以满足此值。</td><td style="text-align:left;"><code>-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:MaxGCPauseMillis=100</code>，<code>-XX:MaxGCPauseMillis=100</code>设置每次年轻代垃圾回收的最长时间为100 ms。</td></tr><tr><td style="text-align:left;"><code>-XX:+UseAdaptiveSizePolicy</code></td><td style="text-align:left;">设置此选项后，并行收集器自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低响应时该间或者收集频率，该值建议使用并行收集器时，并且一直打开。</td><td style="text-align:left;"><code>-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:MaxGCPauseMillis=100 -XX:+UseAda</code></td></tr></tbody></table><ul><li>响应时间优先的GC典型配置参数</li></ul><table><thead><tr><th style="text-align:left;">配置参数</th><th style="text-align:left;">说明</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>-XX:+UseConcMarkSweepGC</code></td><td style="text-align:left;">设置年老代为并发收集。<strong>说明</strong> 配置了<code>-XX:+UseConcMarkSweepGC</code>，建议年轻代大小使用<code>-Xmn</code>设置。</td><td style="text-align:left;"><code>-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:ParallelGCThreads=20 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC</code></td></tr><tr><td style="text-align:left;"><code>-XX:+UseParNewGC</code></td><td style="text-align:left;">设置年轻代为并行收集。可与CMS收集同时使用。JDK 5.0以上版本，JVM根据系统配置自行设置，无需再设置此值。</td><td style="text-align:left;"><code>-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:ParallelGCThreads=20 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC</code></td></tr><tr><td style="text-align:left;"><code>-XX:CMSFullGCsBeforeCompaction</code></td><td style="text-align:left;">由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩、整理。</td><td style="text-align:left;"><code>-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection</code>，<code>-XX:CMSFullGCsBeforeCompaction=5</code>，表示运行GC5次后对内存空间进行压缩、整理。</td></tr><tr><td style="text-align:left;"><code>-XX:+UseCMSCompactAtFullCollection</code></td><td style="text-align:left;">打开对年老代的压缩。<strong>说明</strong> 该值可能会影响性能，但是可以消除碎片。</td><td style="text-align:left;"><code>-Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection</code></td></tr></tbody></table><ul><li>用于辅助的GC典型配置参数</li></ul><table><thead><tr><th style="text-align:left;">配置参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>-XX:+PrintGC</code></td><td style="text-align:left;">用于输出GC日志。</td></tr><tr><td style="text-align:left;"><code>-XX:+PrintGCDetails</code></td><td style="text-align:left;">用于输出GC日志。</td></tr><tr><td style="text-align:left;"><code>-XX:+PrintGCTimeStamps</code></td><td style="text-align:left;">用于输出GC时间戳（JVM启动到当前日期的总时长的时间戳形式）。示例如下：<code>0.855: [GC (Allocation Failure) [PSYoungGen: 33280K-&gt;5118K(38400K)] 33280K-&gt;5663K(125952K), 0.0067629 secs] [Times: user=0.01 sys=0.01, real=0.00 secs]</code></td></tr><tr><td style="text-align:left;"><code>-XX:+PrintGCDateStamps</code></td><td style="text-align:left;">用于输出GC时间戳（日期形式）。示例如下：<code>2022-01-27T16:22:20.885+0800: 0.299: [GC pause (G1 Evacuation Pause) (young), 0.0036685 secs]</code></td></tr><tr><td style="text-align:left;"><code>-XX:+PrintHeapAtGC</code></td><td style="text-align:left;">在进行GC前后打印出堆的信息。</td></tr><tr><td style="text-align:left;"><code>-Xloggc:../logs/gc.log</code></td><td style="text-align:left;">日志文件的输出路径。</td></tr></tbody></table>',8),m={href:"https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html",target:"_blank",rel:"noopener noreferrer"},v=a("br",null,null,-1),g=a("img",{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309162923416.png",alt:"image-20220309162923416",loading:"lazy"},null,-1),h=t(`<h2 id="_1-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_1-2-常用命令" aria-hidden="true">#</a> 1.2 常用命令</h2><h3 id="_1-2-1-jps" tabindex="-1"><a class="header-anchor" href="#_1-2-1-jps" aria-hidden="true">#</a> 1.2.1 jps</h3><blockquote><p>查看java进程</p></blockquote><h3 id="_1-2-2-jinfo" tabindex="-1"><a class="header-anchor" href="#_1-2-2-jinfo" aria-hidden="true">#</a> 1.2.2 jinfo</h3><p>(1)实时查看和调整JVM配置参数</p><p>(2)查看</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jinfo -flag name PID 查看某个java进程的name属性的值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(3)修改</p><blockquote><p>参数只有被标记为manageable的flags可以被实时修改</p><p>jinfo -flag [+|-] PID</p><p>jinfo -flag = PID</p></blockquote><p>(4)查看曾经赋过值的一些参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jinfo -flags PID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-3-jstat" tabindex="-1"><a class="header-anchor" href="#_1-2-3-jstat" aria-hidden="true">#</a> 1.2.3 jstat</h3><p>(1)查看虚拟机性能统计信息</p><p>(2)查看类装载信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jstat -class PID 1000 10 查看某个java进程的类装载信息，每1000毫秒输出一次，共输出10次
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310220302064.png" alt="image-20220310220302064" tabindex="0" loading="lazy"><figcaption>image-20220310220302064</figcaption></figure><p>(3)查看垃圾收集信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jstat -gc PID 1000 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310220241447.png" alt="image-20220310220241447" tabindex="0" loading="lazy"><figcaption>image-20220310220241447</figcaption></figure><h3 id="_1-2-4-jstack" tabindex="-1"><a class="header-anchor" href="#_1-2-4-jstack" aria-hidden="true">#</a> 1.2.4 jstack</h3><p>(1)查看线程堆栈信息</p><p>(2)用法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jstack PID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(3) 排查死锁</p><ul><li>DeadLockDemo</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//运行主类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockDemo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">DeadLock</span> d1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DeadLock</span> d2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//定义锁对象</span>
<span class="token keyword">class</span> <span class="token class-name">MyLock</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//死锁代码</span>
<span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>
    <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token operator">=</span>flag<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">MyLock</span><span class="token punctuation">.</span>obj1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;----if获得obj1锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">MyLock</span><span class="token punctuation">.</span>obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;----if获得obj2锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">MyLock</span><span class="token punctuation">.</span>obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;----否则获得obj2锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">MyLock</span><span class="token punctuation">.</span>obj1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;----否则获得obj1锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>jstack 分析</li></ul><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310220950543.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310221042830.png" alt="image-20220310221042830" tabindex="0" loading="lazy"><figcaption>image-20220310221042830</figcaption></figure><h3 id="_1-2-5-jmap" tabindex="-1"><a class="header-anchor" href="#_1-2-5-jmap" aria-hidden="true">#</a> 1.2.5 jmap</h3><p>(1)生成堆转储快照</p><p>(2)打印出堆内存相关信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.设置：-XX:+PrintFlagsFinal -Xms300M -Xmx300M
2.查看jmap -heap PID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310221505262.png" alt="image-20220310221505262" tabindex="0" loading="lazy"><figcaption>image-20220310221505262</figcaption></figure><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310221521362.png" alt="image-20220310221521362" tabindex="0" loading="lazy"><figcaption>image-20220310221521362</figcaption></figure><p>(3)dump出堆内存相关信息、</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jmap -dump:format=b,file=heap.hprof PID
jmap -dump:format=b,file=heap.hprof 44808
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310221914338.png" alt="image-20220310221914338" tabindex="0" loading="lazy"><figcaption>image-20220310221914338</figcaption></figure><p>(4)要是在发生堆内存溢出的时候，能自动dump出该文件就好了</p><blockquote><p>一般在开发中，JVM参数可以加上下面两句，这样内存溢出时，会自动dump出该文件</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=heap.hprof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>设置堆内存大小: -Xms20M -Xmx20M
启动，然后访问localhost:9090/heap，使得堆内存溢出
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>(5)关于dump下来的文件</p><p>一般dump下来的文件可以结合工具来分析</p><h2 id="_1-3-常用工具" tabindex="-1"><a class="header-anchor" href="#_1-3-常用工具" aria-hidden="true">#</a> 1.3 常用工具</h2><h3 id="_1-3-1-jconsole" tabindex="-1"><a class="header-anchor" href="#_1-3-1-jconsole" aria-hidden="true">#</a> 1.3.1 jconsole</h3><p>JConsole工具是JDK自带的可视化监控工具。查看java应用程序的运行概况、监控堆信息、永久区使用 情况、类加载情况等。</p><blockquote><p>启动命令：jconsole</p></blockquote><h3 id="_1-3-2-jvisualvm" tabindex="-1"><a class="header-anchor" href="#_1-3-2-jvisualvm" aria-hidden="true">#</a> 1.3.2 jvisualvm</h3><blockquote><p>启动命令：jvisualvm</p></blockquote><h4 id="_1-3-2-1-监控本地java进程" tabindex="-1"><a class="header-anchor" href="#_1-3-2-1-监控本地java进程" aria-hidden="true">#</a> 1.3.2.1 监控本地Java进程</h4><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310222954259.png" alt="image-20220310222954259" tabindex="0" loading="lazy"><figcaption>image-20220310222954259</figcaption></figure><h4 id="_1-3-2-2-监控远端java进程" tabindex="-1"><a class="header-anchor" href="#_1-3-2-2-监控远端java进程" aria-hidden="true">#</a> 1.3.2.2 监控远端Java进程</h4><blockquote><p>比如监控远端tomcat，演示部署在阿里云服务器上的tomcat</p></blockquote><p>(1)在visualvm中选中“远程”，右击“添加”</p><p>(2)主机名上写服务器的ip地址，比如31.100.39.63，然后点击“确定”</p><p>(3)右击该主机“31.100.39.63”，添加“JMX”[也就是通过JMX技术具体监控远端服务器哪个Java进程]</p><p>(4)要想让服务器上的tomcat被连接，需要改一下 bin/catalina.sh 这个文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$JAVA_OPTS</span> -Dcom.sun.management.jmxremote -
Djava.rmi.server.hostname=31.100.39.63 -Dcom.sun.management.jmxremote.port=8998
-Dcom.sun.management.jmxremote.ssl=false -
Dcom.sun.management.jmxremote.authenticate=true -
Dcom.sun.management.jmxremote.access.file=../conf/jmxremote.access -
Dcom.sun.management.jmxremote.password.file=../conf/jmxremote.password&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(5)在 ../conf 文件中添加两个文件jmxremote.access和jmxremote.password</p><blockquote><p>jmxremote.access 文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>guest readonly
manager readwrite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>jmxremote.password 文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>guest guest
manager manager
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>授予权限 : chmod 600 * jmxremot *</p><p>(6)将连接服务器地址改为公网ip地址</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hostname -i 查看输出情况
172.26.225.240 172.17.0.1
vim /etc/hosts
172.26.255.240 31.100.39.63
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(7)设置上述端口对应的阿里云安全策略和防火墙策略</p><p>(8)启动tomcat，来到bin目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./startup.sh	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(9)查看tomcat启动日志以及端口监听</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tail</span> <span class="token parameter variable">-f</span> <span class="token punctuation">..</span>/logs/catalina.out
<span class="token function">lsof</span> <span class="token parameter variable">-i</span> tcp:8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>(10)查看8998监听情况，可以发现多开了几个端口</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lsof -i:8998 得到PID
netstat -antup | grep PID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>(11)在刚才的JMX中输入8998端口，并且输入用户名和密码则登录成功</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>端口:8998
用户名:manager
密码:manager
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-3-arthas" tabindex="-1"><a class="header-anchor" href="#_1-3-3-arthas" aria-hidden="true">#</a> 1.3.3 Arthas</h3>`,75),b={href:"https://github.com/alibaba/arthas",target:"_blank",rel:"noopener noreferrer"},k=t(`<blockquote><p>Arthas 是Alibaba开源的Java诊断工具，采用命令行交互模式，是排查jvm相关问题的利器。</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310224532713.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><h4 id="_1-3-3-1-下载安装" tabindex="-1"><a class="header-anchor" href="#_1-3-3-1-下载安装" aria-hidden="true">#</a> 1.3.3.1 下载安装</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -O https://alibaba.github.io/arthas/arthas-boot.jar
java -jar arthas-boot.jar
# 然后可以选择一个Java进程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Print usage</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar arthas-boot.jar -h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-3-3-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_1-3-3-2-常用命令" aria-hidden="true">#</a> 1.3.3.2 常用命令</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>version:查看arthas版本号
help:查看命名帮助信息
cls:清空屏幕
session:查看当前会话信息
quit:退出arthas客户端
---
dashboard:当前进程的实时数据面板
thread:当前JVM的线程堆栈信息
jvm:查看当前JVM的信息
sysprop:查看JVM的系统属性
---
sc:查看JVM已经加载的类信息
dump:dump已经加载类的byte code到特定目录
jad:反编译指定已加载类的源码
---
monitor:方法执行监控
watch:方法执行数据观测
trace:方法内部调用路径，并输出方法路径上的每个节点上耗时
stack:输出当前方法被调用的调用路径

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-4-mat" tabindex="-1"><a class="header-anchor" href="#_1-3-4-mat" aria-hidden="true">#</a> 1.3.4 MAT</h3>`,8),x=a("br",null,null,-1),f=a("br",null,null,-1),X={href:"https://www.eclipse.org/mat/downloads.php",target:"_blank",rel:"noopener noreferrer"},y=t(`<h4 id="_1-3-4-1-dump信息包含的内容" tabindex="-1"><a class="header-anchor" href="#_1-3-4-1-dump信息包含的内容" aria-hidden="true">#</a> 1.3.4.1 Dump信息包含的内容</h4><ul><li>All Objects</li></ul><p>Class, fields, primitive values and references</p><ul><li>All Classes</li></ul><p>Classloader, name, super class, static fields</p><ul><li>Garbage Collection Roots</li></ul><p>Objects defined to be reachable by the JVM</p><ul><li>Thread Stacks and Local Variables</li></ul><p>The call-stacks of threads at the moment of the snapshot, and per-frame information about local objects</p><h4 id="_1-3-4-2-获取dump文件" tabindex="-1"><a class="header-anchor" href="#_1-3-4-2-获取dump文件" aria-hidden="true">#</a> 1.3.4.2 获取Dump文件</h4><ul><li>手动</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jmap -dump:format=b,file=heap.hprof 44808
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>自动</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=heap.hprof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-3-4-3-使用" tabindex="-1"><a class="header-anchor" href="#_1-3-4-3-使用" aria-hidden="true">#</a> 1.3.4.3 使用</h4><ul><li>Histogram</li></ul><blockquote><p>Histogram可以列出内存中的对象，对象的个数及其大小</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Class Name:类名称，java类名
Objects:类的对象的数量，这个对象被创建了多少个
Shallow Heap:一个对象内存的消耗大小，不包含对其他对象的引用
Retained Heap:是shallow Heap的总和，即该对象被GC之后所能回收到内存的总和
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>右击类名---&gt;List Objects---&gt;with incoming references---&gt;列出该类的实例
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>右击Java对象名---&gt;Merge Shortest Paths to GC Roots---&gt;exclude all ...---&gt;找到GC Root以及原因
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Leak Suspects</li></ul><blockquote><p>查找并分析内存泄漏的可能原因</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Reports---&gt;Leak Suspects---&gt;Details
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Top Consumers</li></ul><blockquote><p>Top Consumers</p></blockquote><h3 id="_1-3-5-gc日志分析工具" tabindex="-1"><a class="header-anchor" href="#_1-3-5-gc日志分析工具" aria-hidden="true">#</a> 1.3.5 GC日志分析工具</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps
-Xloggc:gc.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,27),j={href:"http://gceasy.io",target:"_blank",rel:"noopener noreferrer"},_=a("li",null,[a("p",null,[a("strong",null,"GCViewer")])],-1);function C(w,M){const n=i("ExternalLinkIcon");return d(),c("div",null,[p,a("p",null,[e("JVM参数说明："),a("a",r,[e("JVM参数"),s(n)])]),u,a("p",null,[e("全部参数查看："),a("a",m,[e("https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html"),s(n)]),v,g]),h,a("blockquote",null,[a("p",null,[e("github ："),a("a",b,[e("https://github.com/alibaba/arthas"),s(n)])])]),k,a("blockquote",null,[a("p",null,[e("Java堆分析器，用于查找内存泄漏"),x,e(" Heap Dump，称为堆转储文件，是Java进程在某个时间内的快照"),f,e(" 下载地址 ："),a("a",X,[e("https://www.eclipse.org/mat/downloads.php"),s(n)])])]),y,a("ul",null,[a("li",null,[a("p",null,[e("在线 "),a("a",j,[e("http://gceasy.io"),s(n)])])]),_])])}const S=l(o,[["render",C],["__file","JVM-4.html.vue"]]);export{S as default};
