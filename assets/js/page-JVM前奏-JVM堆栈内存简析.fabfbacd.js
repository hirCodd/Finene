(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{547:function(a,s,t){"use strict";t.r(s);var e=t(1),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"_1-官网"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-官网"}},[a._v("#")]),a._v(" 1 官网")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310000943157.png",alt:"image-20220310000943157"}})]),a._v(" "),t("h3",{attrs:{id:"_1-1-jdk8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-jdk8"}},[a._v("#")]),a._v(" 1.1 JDK8")]),a._v(" "),t("h3",{attrs:{id:"_1-2-the-relation-of-jdk-jre-jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-the-relation-of-jdk-jre-jvm"}},[a._v("#")]),a._v(" 1.2 The relation of JDK/JRE/JVM")]),a._v(" "),t("p",[a._v("Reference -> Developer Guides -> 定位到:https://docs.oracle.com/javase/8/docs/index.html")]),a._v(" "),t("blockquote",[t("p",[a._v("JDK 8 is a superset of JRE 8, and contains everything that is in JRE 8, plus tools such as the compilers and debuggers necessary for developing applets and applications. JRE 8 provides the libraries, the Java Virtual Machine (JVM), and other components to run applets and applications written in the Java programming language. Note that the JRE includes components not required by the Java SE specification, including both standard and non-standard Java components.")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309202058012.png",alt:"image-20220309202058012"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309203220133.png",alt:"image-20220309203220133"}})]),a._v(" "),t("h2",{attrs:{id:"_2-源码到类文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-源码到类文件"}},[a._v("#")]),a._v(" 2 源码到类文件")]),a._v(" "),t("h3",{attrs:{id:"_2-1-源码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-源码"}},[a._v("#")]),a._v(" 2.1 源码")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" address"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" hobby"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Programming"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("say")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"person say..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("calc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" op1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" op2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" op1"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("op2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br")])]),t("h3",{attrs:{id:"_2-2-编译过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-编译过程"}},[a._v("#")]),a._v(" 2.2 编译过程")]),a._v(" "),t("blockquote",[t("p",[a._v("Person.java -> 词法分析器 -> tokens流 -> 语法分析器 -> 语法树/抽象语法树 -> 语义分析器 -> 注解抽象语法树 -> 字节码生成器 -> Person.class文件")])]),a._v(" "),t("h3",{attrs:{id:"_2-3-类文件-class文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-类文件-class文件"}},[a._v("#")]),a._v(" 2.3 类文件(Class文件)")]),a._v(" "),t("p",[a._v("官网The class File Format :https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("cafe babe 0000 0034 0027 0a00 0600 1809\n0019 001a 0800 1b0a 001c 001d 0700 1e07\n001f 0100 046e 616d 6501 0012 4c6a 6176\n612f 6c61 6e67 2f53 7472 696e 673b 0100\n0361 6765 0100 0149 0100 0761 6464 7265\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309204252776.png",alt:"image-20220309204252776"}})]),a._v(" "),t("p",[t("strong",[a._v("minor_version, major_version")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("minor_version, major_version\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[t("strong",[a._v("constant_pool_count")])]),a._v(" "),t("p",[a._v("0027 对应十进制27，代表常量池中27个常量")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("ClassFile {\n    u4             magic;\n    u2             minor_version;\n    u2             major_version;\n    u2             constant_pool_count;\n    cp_info        constant_pool[constant_pool_count-1];\n    u2             access_flags;\n    u2             this_class;\n    u2             super_class;\n    u2             interfaces_count;\n    u2             interfaces[interfaces_count];\n    u2             fields_count;\n    field_info     fields[fields_count];\n    u2             methods_count;\n    method_info    methods[methods_count];\n    u2             attributes_count;\n    attribute_info attributes[attributes_count];\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br")])]),t("p",[t("strong",[a._v(".class字节码文件")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("魔数与class文件版本\n常量池\n访问标志\n类索引、父类索引、接口索引\n字段表集合\n方法表集合\n属性表集合\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("h2",{attrs:{id:"_3-类文件到虚拟机-类加载机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-类文件到虚拟机-类加载机制"}},[a._v("#")]),a._v(" 3 类文件到虚拟机(类加载机制)")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309204625348.png",alt:"image-20220309204625348"}})]),a._v(" "),t("h3",{attrs:{id:"_3-1-装载-load"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-装载-load"}},[a._v("#")]),a._v(" 3.1 装载(Load)")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Chapter 5. Loading, Linking, and Initializing (oracle.com)"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("a.找到类文件所在的位置---:磁盘--\x3e类装载器ClassLoader --\x3e 寻找类")]),a._v(" "),t("p",[a._v("b.类文件的信息交给JVM  --\x3e 类文件字节码流静态存储结构 --\x3e JVM里卖弄的某一块区域")]),a._v(" "),t("p",[a._v("c.类文件所对应的对象Class ---\x3e JVM")]),a._v(" "),t("p",[a._v("查找和导入class文件 --\x3e JVM --\x3e 堆")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("(1)通过一个类的全限定名获取定义此类的二进制字节流\n(2)将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\n(3)在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h3",{attrs:{id:"_3-2-链接-link"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-链接-link"}},[a._v("#")]),a._v(" 3.2 链接(Link)")]),a._v(" "),t("h4",{attrs:{id:"_3-2-1-验证-verify-保证被加载类的正确性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-验证-verify-保证被加载类的正确性"}},[a._v("#")]),a._v(" 3.2.1 验证(Verify):保证被加载类的正确性")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("文件格式验证")])]),a._v(" "),t("li",[t("p",[a._v("元数据验证")])]),a._v(" "),t("li",[t("p",[a._v("字节码验证")])]),a._v(" "),t("li",[t("p",[a._v("符号引用验证")])])]),a._v(" "),t("h4",{attrs:{id:"_3-2-2-准备-prepare"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-准备-prepare"}},[a._v("#")]),a._v(" 3.2.2 准备(Prepare)")]),a._v(" "),t("p",[t("strong",[a._v("为类的静态变量分配内存，并将其初始化为默认值")])]),a._v(" "),t("p",[a._v("static int num = 10; // 在准备阶段为num分配内存空间，并初始化其值为0")]),a._v(" "),t("h4",{attrs:{id:"_3-2-3-解析-resolve"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-解析-resolve"}},[a._v("#")]),a._v(" 3.2.3 解析(Resolve)")]),a._v(" "),t("p",[t("strong",[a._v("把类中的符号引用转换为直接引用")])]),a._v(" "),t("p",[a._v("地址：String str =地址是什么，直接对应到内存中某个地址指向。")]),a._v(" "),t("h3",{attrs:{id:"_3-3-初始化-initialize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-初始化-initialize"}},[a._v("#")]),a._v(" 3.3 初始化(Initialize)")]),a._v(" "),t("p",[a._v("对类的静态变量，静态代码块执行初始化操作")]),a._v(" "),t("p",[a._v("static int num = 10; // 此时，num才会被真正的赋值为10")]),a._v(" "),t("h3",{attrs:{id:"_3-4-类加载机制图解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-类加载机制图解"}},[a._v("#")]),a._v(" 3.4 类加载机制图解")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309205334127.png",alt:"image-20220309205334127"}})]),a._v(" "),t("h2",{attrs:{id:"_4-类装载器classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-类装载器classloader"}},[a._v("#")]),a._v(" 4 类装载器ClassLoader")]),a._v(" "),t("p",[a._v("在装载(Load)阶段，其中第(1)步:通过类的全限定名获取其定义的二进制字节流，需要借助类装载 器完成，顾名思义，就是用来装载Class文件的。")]),a._v(" "),t("p",[a._v("(1)通过一个类的全限定名获取定义此类的二进制字节流。")]),a._v(" "),t("h3",{attrs:{id:"_4-1-分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-分类"}},[a._v("#")]),a._v(" 4.1 分类")]),a._v(" "),t("p",[a._v("1）Bootstrap ClassLoader 负责加载$JAVA_HOME中 jre/lib/rt.jar 里所有的class或 Xbootclassoath选项指定的jar包。由C++实现，不是ClassLoader子类。")]),a._v(" "),t("p",[a._v("2）Extension ClassLoader 负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中 jre/lib/*.jar 或 -Djava.ext.dirs指定目录下的jar包。")]),a._v(" "),t("p",[a._v("3）App ClassLoader 负责加载classpath中指定的jar包及 Djava.class.path 所指定目录下的类和 jar包。")]),a._v(" "),t("p",[a._v("4）Custom ClassLoader 通过java.lang.ClassLoader的子类自定义加载class，属于应用程序根据 自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现ClassLoader。")]),a._v(" "),t("h3",{attrs:{id:"_4-2-图解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-图解"}},[a._v("#")]),a._v(" 4.2 图解")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309205433326.png",alt:"image-20220309205433326"}})]),a._v(" "),t("h3",{attrs:{id:"_4-3-加载原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-加载原则"}},[a._v("#")]),a._v(" 4.3 加载原则")]),a._v(" "),t("p",[t("strong",[a._v("检查某个类是否已经加载：顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检 查，只要某个Classloader已加载，就视为已加载此类，保证此类只所有ClassLoader加载一次。")])]),a._v(" "),t("p",[t("strong",[a._v("加载的顺序：加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。")])]),a._v(" "),t("p",[t("strong",[a._v("双亲委派机制：")])]),a._v(" "),t("blockquote",[t("p",[a._v("定义：如果一个类加载器在接到加载类的请求时，它首先不会自己尝试去加载这个类，而是把 这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成类加载任务，就 成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。")])]),a._v(" "),t("blockquote",[t("p",[a._v("优势：Java类随着加载它的类加载器一起具备了一种带有优先级的层次关系。比如，Java中的 Object类，它存放在rt.jar之中,无论哪一个类加载器要加载这个类，最终都是委派给处于模型 最顶端的启动类加载器进行加载，因此Object在各种类加载环境中都是同一个类。如果不采用 双亲委派模型，那么由各个类加载器自己取加载的话，那么系统中会存在多种不同的Object 类。")])]),a._v(" "),t("blockquote",[t("p",[a._v("破坏：可以继承ClassLoader类，然后重写其中的loadClass方法，其他方式大家可以自己了解 拓展一下。")])]),a._v(" "),t("h2",{attrs:{id:"_5-运行时数据区-run-time-data-areas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-运行时数据区-run-time-data-areas"}},[a._v("#")]),a._v(" 5 运行时数据区(Run-Time Data Areas)")]),a._v(" "),t("p",[a._v("在装载阶段的第(2),(3)步可以发现有运行时数据，堆，方法区等名词")]),a._v(" "),t("p",[a._v("(2)将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构")]),a._v(" "),t("p",[a._v("(3)在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口")]),a._v(" "),t("p",[a._v("说白了就是类文件被类装载器装载进来之后，类中的内容(比如变量，常量，方法，对象等这些数 据得要有个去处，也就是要存储起来，存储的位置肯定是在JVM中有对应的空间)")]),a._v(" "),t("h3",{attrs:{id:"_5-1-官网概括"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-官网概括"}},[a._v("#")]),a._v(" 5.1 官网概括")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5",target:"_blank",rel:"noopener noreferrer"}},[a._v("Chapter 2. The Structure of the Java Virtual Machine (oracle.com)"),t("OutboundLink")],1)]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("The Java Virtual Machine defines various run-time data areas that are used during execution of a program. Some of these data areas are created on Java Virtual Machine start-up and are destroyed only when the Java Virtual Machine exits. Other data areas are per thread. Per-thread data areas are created when a thread is created and destroyed when the thread exits\n\n>>> Java 虚拟机定义了在程序执行期间使用的各种运行时数据区域。 其中一些数据区是在 Java 虚拟机启动时创建的，只有在 Java 虚拟机退出时才会被销毁。 其他数据区域是每个线程。 每线程数据区在创建线程时创建，在线程退出时销毁\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h3",{attrs:{id:"_5-2-图解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-图解"}},[a._v("#")]),a._v(" 5.2 图解")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309213359201.png",alt:"image-20220309213359201"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309211847128.png",alt:"image-20220309211847128"}})]),a._v(" "),t("h3",{attrs:{id:"_5-3-常规理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-常规理解"}},[a._v("#")]),a._v(" 5.3 常规理解")]),a._v(" "),t("h4",{attrs:{id:"_5-3-1-method-area-方法区-类信息、常量、静态变量、即使编译器编译之后的代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-1-method-area-方法区-类信息、常量、静态变量、即使编译器编译之后的代码"}},[a._v("#")]),a._v(" 5.3.1 Method Area(方法区):类信息、常量、静态变量、即使编译器编译之后的代码")]),a._v(" "),t("blockquote",[t("p",[a._v("在JDK1.8中，方法区存放运行时常量池、方法数据、方法的代码和构造方法，包括类中的实例化方法和接口初始化方法。\n存放如下数据：")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 该类型数据存放在方法区")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" CONSTSANT "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"constant"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 方法区存放方法以及方法的代码")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 该方法存放在方法区")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   \n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 该方法存放在方法区")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("testMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IXXService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 该方法存放在方法区")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" test "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n       \n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("The Java Virtual Machine has a method area that is shared among all Java Virtual\nMachine threads.\n>> 方法区只有一个，线程共享的内存区域【线程非安全】，生命周期是跟虚拟机一样的。\n\nIt stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors, including the special methods (§2.9) used in class and instance initialization and interface initialization.\n>> 类信息、常量、静态变量、即使编译器编译之后的代码。\n\nThe method area is created on virtual machine start-up.\n\nAlthough the method area is logically part of the heap【逻辑上是属于堆的一部分】, simple implementations may choose not to either garbage collect or compact it.\n垃圾回收不太会讨论方法区的垃圾回收\n\nIf memory in the method area cannot be made available to satisfy an allocation request, the Java Virtual Machine throws an OutOfMemoryError.\n>> OOM\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br")])]),t("p",[t("strong",[a._v("方法区是各个线程共享的内存区域，在虚拟机启动时创建。")])]),a._v(" "),t("p",[t("strong",[a._v("用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")])]),a._v(" "),t("p",[t("strong",[a._v("虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却又一个别名叫做Non-Heap(非堆)，目 的是与Java堆区分开来。")])]),a._v(" "),t("p",[t("strong",[a._v("当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。")])]),a._v(" "),t("blockquote",[t("p",[a._v("此时回看装载阶段的第2步：(2)将这个字节流所代表的静态存储结构转化为方法区的运行时数据 结构")])]),a._v(" "),t("p",[a._v("如果这时候把从Class文件到装载的第(1)和(2)步合并起来理解的话，可以画个图")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309211440247.png",alt:"image-20220309211440247"}})]),a._v(" "),t("p",[t("strong",[a._v("(1)方法区在JDK 8中就是Metaspace，在JDK6或7中就是Perm Space (2)Run-Time Constant Pool")])]),a._v(" "),t("p",[t("strong",[a._v("(2)Run-Time Constant Pool")])]),a._v(" "),t("p",[a._v("Class文件中除了有类的版本、字段、方法、接口等描述信息外，")]),a._v(" "),t("p",[a._v("还有一项信息就是常量池，用于存放编译时期生成的各种字面量和符号引用，这部分内容将在 类加载后进 入方法区的运行时常量池中存放。")]),a._v(" "),t("blockquote",[t("p",[a._v("Each run-time constant pool is allocated from the Java Virtual Machine's method area (§2.5.4).s")]),a._v(" "),t("p",[a._v("每个运行时常量池都是从 Java 虚拟机的方法中分配的区域 (§2.5.4).s")])]),a._v(" "),t("h4",{attrs:{id:"_5-3-2-heap-堆-对象或者数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-2-heap-堆-对象或者数组"}},[a._v("#")]),a._v(" 5.3.2 Heap(堆):对象或者数组")]),a._v(" "),t("p",[a._v("Java堆是Java虚拟机所管理内存中最大的一块，在虚拟机启动时创建，被所有线程共享。")]),a._v(" "),t("p",[a._v("Java对象实例以及数组都在堆上分配。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("The Java Virtual Machine has a heap that is shared among all Java Virtual Machine threads. \n堆只有一个，线程共享内存区域的【线程非安全】，生命周期跟虚拟机一样。\n\nThe heap is the run-time data area from which memory for all class instances and arrays is allocated.\n存储数据包括：对象或者数组\n\nThe heap is created on virtual machine start-up. \n\nIf a computation requires more heap than can be made available by the automatic storage management system, the Java Virtual Machine throws an OutOfMemoryError.\n【如果内存不够，也会发生OOM】\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("此时回看装载阶段的第3步：(3)在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方 法区中这些数据的访问入口")]),a._v(" "),t("p",[a._v("此时装载(1)(2)(3)的图可以改动一下")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309211847128.png",alt:"image-20220309211847128"}})]),a._v(" "),t("h4",{attrs:{id:"_5-3-3-java-virtual-machine-stacks-虚拟机栈-局部变量、操作数、返回数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-3-java-virtual-machine-stacks-虚拟机栈-局部变量、操作数、返回数"}},[a._v("#")]),a._v(" 5.3.3 Java Virtual Machine Stacks(虚拟机栈):局部变量、操作数、返回数")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Each Java Virtual Machine thread has a private Java Virtual Machine stack,\ncreated at the same time as the thread. A Java Virtual Machine stack stores\nframes (§2.6)\n【每个线程独有的线程栈】\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("一个线程的创建代表一个栈，每个方法被当前线程调用了，就代表一个栈帧。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220309220003612.png",alt:"image-20220309220003612"}})]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("If the computation in a thread requires a larger Java Virtual Machine stack than is permitted, the Java Virtual Machine throws a StackOverflowError.\n【StackOverflowError】\n\nIf Java Virtual Machine stacks can be dynamically expanded, and expansion is attempted but insufficient memory can be made available to effect the expansion, or if insufficient memory can be made available to create the initial Java Virtual Machine stack for a new thread, the Java Virtual Machine throws an OutOfMemoryError.\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("blockquote",[t("p",[a._v("经过上面的分析，类加载机制的装载过程已经完成，后续的链接，初始化也会相应的生效。")]),a._v(" "),t("p",[a._v("假如目前的阶段是初始化完成了，后续做啥呢？肯定是Use使用咯，不用的话这样折腾来折腾去 有什么意义？那怎样才能被使用到？换句话说里面内容怎样才能被执行？比如通过主函数main调 用其他方法，这种方式实际上是main线程执行之后调用的方法，即要想使用里面的各种内容，得 要以线程为单位，执行相应的方法才行。")]),a._v(" "),t("p",[a._v("那一个线程执行的状态如何维护？一个线程可以执行多少个方法？这样的关系怎么维护呢？")])]),a._v(" "),t("p",[a._v("虚拟机栈是一个线程执行的区域，保存着一个线程中方法的调用状态。换句话说，一个Java线程的运行 状态，由一个虚拟机栈来保存，所以虚拟机栈肯定是线程私有的，独有的，随着线程的创建而创建。")]),a._v(" "),t("p",[a._v("每一个被线程执行的方法，为该栈中的栈帧，即每个方法对应一个栈帧。")]),a._v(" "),t("p",[a._v("调用一个方法，就会向栈中压入一个栈帧；一个方法调用完成，就会把该栈帧从栈中弹出。")]),a._v(" "),t("h4",{attrs:{id:"_5-3-4-the-pc-register-程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-4-the-pc-register-程序计数器"}},[a._v("#")]),a._v(" 5.3.4 The pc Register(程序计数器)")]),a._v(" "),t("blockquote",[t("p",[a._v("我们都知道一个JVM进程中有多个线程在执行，而线程中的内容是否能够拥有执行权，是根据 CPU调度来的。")]),a._v(" "),t("p",[a._v("假如线程A正在执行到某个地方，突然失去了CPU的执行权，切换到线程B了，然后当线程A再获 得CPU执行权的时候，怎么能继续执行呢？这就是需要在线程中维护一个变量，记录线程执行到 的位置。")])]),a._v(" "),t("p",[a._v("程序计数器占用的内存空间很小，由于Java虚拟机的多线程是通过线程轮流切换，并分配处理器执行时 间的方式来实现的，在任意时刻，一个处理器只会执行一条线程中的指令。因此，为了线程切换后能够 恢复到正确的执行位置，每条线程需要有一个独立的程序计数器(线程私有)。")]),a._v(" "),t("p",[a._v("如果线程正在执行Java方法，则计数器记录的是正在执行的虚拟机字节码指令的地址；")]),a._v(" "),t("p",[a._v("如果正在执行的是Native方法，则这个计数器为空。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("The Java Virtual Machine can support many threads of execution at once (JLS §17). Each Java Virtual Machine thread has its own pc (program counter)register. At any point, each Java Virtual Machine thread is executing the code of a single method, namely the current method (§2.6) for that thread. If that method is not native, the pc register contains the address of the Java Virtual Machine instruction currently being executed. If the method currently being executed by the thread is native, the value of the Java Virtual Machine's pcregister is undefined. The Java Virtual Machine's pc register is wide enough to hold a returnAddress or a native pointer on the specific platform\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"_5-3-5-native-method-stacks-本地方法栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-5-native-method-stacks-本地方法栈"}},[a._v("#")]),a._v(" 5.3.5 Native Method Stacks(本地方法栈)")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('An implementation of the Java Virtual Machine may use conventional stacks, colloquially called "C stacks," to support native methods (methods written in a language other than the Java programming language).\n\n>> Java 虚拟机的实现可以使用传统的堆栈，通俗地称为“C 堆栈”，以支持本地方法（以 Java 编程语言以外的语言编写的方法）\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("如果当前线程执行的方法是Native类型的，这些方法就会在本地方法栈中执行。")])])}),[],!1,null,null,null);s.default=n.exports}}]);