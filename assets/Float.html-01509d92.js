import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-9a54eb83.js";const e={},p=t(`<h2 id="_1-类图" tabindex="-1"><a class="header-anchor" href="#_1-类图" aria-hidden="true">#</a> 1.类图</h2><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/Float.png" alt="Float-Class" tabindex="0" loading="lazy"><figcaption>Float-Class</figcaption></figure><h2 id="_2-存储位置" tabindex="-1"><a class="header-anchor" href="#_2-存储位置" aria-hidden="true">#</a> 2.存储位置</h2><ul><li>Float类中的静态属性存储在方法区中的静态区。</li><li>通过new Float()方法创建出来的对象存储在堆区。</li></ul><h2 id="_3-了解ieee-754" tabindex="-1"><a class="header-anchor" href="#_3-了解ieee-754" aria-hidden="true">#</a> 3.了解IEEE 754</h2><h3 id="_3-1-ieee-754简介" tabindex="-1"><a class="header-anchor" href="#_3-1-ieee-754简介" aria-hidden="true">#</a> 3.1 IEEE 754简介</h3><p>在看Float前需要先了解IEEE 754标准，该标准定义了浮点数的格式还有一些特殊值，它规定了计算机中二进制与十进制浮点数转换的格式及方法。规定了四种表示浮点数值的方法，单精确度（32位）、双精确度（64位）、延伸单精确度（43位以上）与延伸双精确度（79位以上）。<br> 多数编程语言支持单精确度和双精确度，该标准的全称为IEEE二进制浮点数算术标准（ANSI/IEEE Std 754-1985），又称IEC 60559:1989，微处理器系统的二进制浮点数算术（本来的编号是IEC 559:1989）。后来还有“与基数无关的浮点数”的“IEEE 854-1987标准”，有规定基数为2跟10的状况。最新标准是“ISO/IEC/IEEE FDIS 60559:2010”。<br> Float就是Java的单精度实现。</p><h3 id="_3-2-ieee-754单精度浮点数表示" tabindex="-1"><a class="header-anchor" href="#_3-2-ieee-754单精度浮点数表示" aria-hidden="true">#</a> 3.2 IEEE 754单精度浮点数表示</h3><p>浮点数由三部分组成，分别是符号位s、指数e和尾数f。</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/1668009317049.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在IEEE754标准中，一个规格化的32位浮点数x的真值表示为<br> x = (−1)s∗(1.f)∗2(e−127)<br> e = E - 127</p><p>其中尾数域所表示的值是1.f。由于规格化的浮点数的尾数域最左位（最高有效位）总是1，故这一位经常不予存储，而认为隐藏在小数点的左边。于是用23位字段可以存储24位有效数。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>我们举个例子来看，二进制的“01000001001101100000000000000000”表示的浮点数是啥？

符号位为0，表示正数。
指数为“10000010”，减去127后为3。
尾数对应的值为“1.011011”。
于是最终得到浮点数为“1011.011”，转成十进制为“11.375”。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-源码解读" tabindex="-1"><a class="header-anchor" href="#_4-源码解读" aria-hidden="true">#</a> 4.源码解读</h2><h3 id="_4-1-属性说明" tabindex="-1"><a class="header-anchor" href="#_4-1-属性说明" aria-hidden="true">#</a> 4.1 属性说明</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Float</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// System.out.println(Float.POSITIVE_INFINITY == Float.intBitsToFloat(0x7f800000)); // true</span>
    <span class="token comment">// System.out.println(Float.POSITIVE_INFINITY);  ==&gt; Infinity</span>
    <span class="token comment">//  用来表示正无穷大，按照IEEE 754浮点标准规定，任何有限正数除以0为正无穷大，正无穷的值为0x7f800000。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">POSITIVE_INFINITY</span> <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>

    <span class="token comment">// System.out.println(Float.NEGATIVE_INFINITY == Float.intBitsToFloat(0xff800000)); // true</span>
    <span class="token comment">// System.out.println(Float.NEGATIVE_INFINITY); // -Infinity</span>
    <span class="token comment">// 用来表示负无穷大，任何有限负数除以0为负无穷的，负无穷的值为0xff800000。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">NEGATIVE_INFINITY</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>

    <span class="token comment">// System.out.println(Float.isNaN(Float.intBitsToFloat(0x7fc00000))); // true</span>
    <span class="token comment">// System.out.println(Float.intBitsToFloat(0x7fc00000)); // NaN</span>
    <span class="token comment">// NaN 用来表示处理计算中出现的错误情况，比如0除以0或负数平方根。对于单精度浮点数，IEEE 标准规定 NaN 的指数域全为 1，且尾数域不等于零的浮点数。它并没有要求具体的尾数域，所以 NaN 实际上不非是一个，而是一族。Java这里定义的值为0x7fc00000。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token class-name">NaN</span> <span class="token operator">=</span> <span class="token number">0.0f</span> <span class="token operator">/</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    
    <span class="token comment">// System.out.println(Float.MAX_VALUE == Float.intBitsToFloat(0x7f7fffff)); // true</span>
    <span class="token comment">// System.out.println(Float.intBitsToFloat(0x7f7fffff)); // 3.4028235E38</span>
    <span class="token comment">// 用来表示最大的浮点数值，它定义为0x1.fffffeP+127f，这里0x表示十六进制，1.fffffe表示十六进制的小数，P表示2，+表示几次方，这里就是2的127次方，最后的f是转成浮点型。所以最后最大值为3.4028235E38。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">MAX_VALUE</span> <span class="token operator">=</span> <span class="token number">0x1.fffffeP+127f</span><span class="token punctuation">;</span> <span class="token comment">// 3.4028235e+38f</span>
    
    <span class="token comment">// System.out.println(Float.MIN_NORMAL == Float.intBitsToFloat(0x00800000)); // true</span>
    <span class="token comment">// System.out.println(Float.intBitsToFloat(0x00800000)); // 1.17549435E-38</span>
    <span class="token comment">// 1.6开始存在</span>
    <span class="token comment">// 用来表示最小标准值，它定义为0x1.0p-126f，这里其实就是2的-126次方的了，值为1.17549435E-38f。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">MIN_NORMAL</span> <span class="token operator">=</span> <span class="token number">0x1.0p-126f</span><span class="token punctuation">;</span> <span class="token comment">// 1.17549435E-38f</span>

    <span class="token comment">// System.out.println(Float.MIN_VALUE == Float.intBitsToFloat(0x1)); // true</span>
    <span class="token comment">// System.out.println(Float.intBitsToFloat(0x1)); // 1.4E-45</span>
    <span class="token comment">// 用来表示浮点数最小值，它定义为0x0.000002P-126f，最后的值为1.4e-45f</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">MIN_VALUE</span> <span class="token operator">=</span> <span class="token number">0x0.000002P-126f</span><span class="token punctuation">;</span> <span class="token comment">// 1.4e-45f</span>
    
    <span class="token comment">// System.out.println(Math.getExponent(Float.MAX_VALUE) == Float.MAX_EXPONENT); // true</span>
    <span class="token comment">// System.out.println(Math.getExponent(Float.MAX_VALUE)); // 127</span>
    <span class="token comment">// 1.6开始</span>
    <span class="token comment">// 用来表示指数的最大值，这里定为127，这个也是按照IEEE 754浮点标准的规定。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_EXPONENT</span> <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
    
    <span class="token comment">// System.out.println(Math.getExponent(Float.MIN_NORMAL) == Float.MIN_EXPONENT); // true</span>
    <span class="token comment">// System.out.println(Float.MIN_EXPONENT); // -126</span>
    <span class="token comment">// 1.6开始</span>
    <span class="token comment">// 用来表示指数的最小值，按照IEEE 754浮点标准的规定，它为-126。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_EXPONENT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">126</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 用来表示二进制float值的比特数，值为32，静态变量且不可变。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SIZE</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 用来表示二进制float值的字节数，值为SIZE除于Byte.SIZE，结果为4字节，表示存储一个Float类型的变量占用4字节。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BYTES</span> <span class="token operator">=</span> <span class="token constant">SIZE</span> <span class="token operator">/</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token constant">SIZE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-方法说明" tabindex="-1"><a class="header-anchor" href="#_4-2-方法说明" aria-hidden="true">#</a> 4.2 方法说明</h3><h3 id="float构造方法" tabindex="-1"><a class="header-anchor" href="#float构造方法" aria-hidden="true">#</a> Float构造方法</h3><p>Float构造方法有3个，第一个是将float但精度浮点数转为Float值，第二个是将double值的双精度浮点数转为单精度浮点数，该转化可能出现精度丢失的情况。<br> 第三个构造方法是将字符串转为单精度浮点数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Float</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token keyword">float</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tohexstring方法" tabindex="-1"><a class="header-anchor" href="#tohexstring方法" aria-hidden="true">#</a> toHexString方法</h4><ul><li>该方法是将浮点数转为16进制数的字符串</li></ul><table><thead><tr><th>Floating-point Value</th><th>Hexadecimal String</th></tr></thead><tbody><tr><td>1.0</td><td>0x1.0p0</td></tr><tr><td>0.25</td><td>0x1.0p-2</td></tr><tr><td>Float.MAX_VALUE</td><td>0x1.fffffep127</td></tr><tr><td>Float.MIN_VALUE</td><td>0x0.000002p-126</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Float</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">FloatConsts</span><span class="token punctuation">.</span><span class="token constant">MIN_NORMAL</span>
                <span class="token operator">&amp;&amp;</span>  f <span class="token operator">!=</span> <span class="token number">0.0f</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// float subnormal</span>
            <span class="token comment">// Adjust exponent to create subnormal double, then</span>
            <span class="token comment">// replace subnormal double exponent with subnormal float</span>
            <span class="token comment">// exponent</span>
            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">scalb</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>f<span class="token punctuation">,</span>
                    <span class="token comment">/* -1022+126 */</span>
                    <span class="token class-name">DoubleConsts</span><span class="token punctuation">.</span><span class="token constant">MIN_EXPONENT</span><span class="token operator">-</span>
                            <span class="token class-name">FloatConsts</span><span class="token punctuation">.</span><span class="token constant">MIN_EXPONENT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">&quot;p-1022$&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;p-126&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token comment">// double string will be the same as float string</span>
            <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FloatDemoTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testToHexString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0x1.0p0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="valueof方法" tabindex="-1"><a class="header-anchor" href="#valueof方法" aria-hidden="true">#</a> valueOf方法</h4><p>改方法有两个，一个是将字符串转为单精度浮点数，一个是将float值转化为Float对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Float</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Float</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Float</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FloatDemoTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testValueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1.01f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.01</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;1.01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.01</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;+1.01f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.01</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;-1.01f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1.01</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;1.01F&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.01</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;1.01d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.01</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;1.01I&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// java.lang.NumberFormatException: For input string: &quot;1.01I&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parsefloat方法" tabindex="-1"><a class="header-anchor" href="#parsefloat方法" aria-hidden="true">#</a> parseFloat方法</h4><p>该是Java中的内置方法，该方法返回一个新的float，该新float初始化为指定的String表示的值，这由Float类的valueOf方法完成。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Float</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">FloatingDecimal</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="isnan方法" tabindex="-1"><a class="header-anchor" href="#isnan方法" aria-hidden="true">#</a> isNaN方法</h4><ul><li>该方法是判断是否是非数字的值(NAN)， NaN是Not a Number的缩写。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Float</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">float</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="isinfinite与isinfinite方法" tabindex="-1"><a class="header-anchor" href="#isinfinite与isinfinite方法" aria-hidden="true">#</a> isInfinite与isInfinite方法</h4><ul><li><p>isInfinite()方法用于检查此Float对象的无穷大(即正无穷大或负无穷大)</p></li><li><p>isFinite() 方法如果传递的参数是有限浮点数，则返回 true，否则返回 false(在 NaN 和无穷大参数的情况下)。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Float</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isInfinite</span><span class="token punctuation">(</span><span class="token keyword">float</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NEGATIVE_INFINITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token class-name">FloatConsts</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FloatDemoTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInfiniteAndFinite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isInfinite</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isInfinite</span><span class="token punctuation">(</span><span class="token number">0.05f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">0.05f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="floattointbits方法" tabindex="-1"><a class="header-anchor" href="#floattointbits方法" aria-hidden="true">#</a> floatToIntBits方法</h4><p>Float类中的floatToIntBits()方法是Java中的内置函数，它根据IEEE 754浮点“single format”位布局返回指定浮点值的表示形式。</p><p>返回值：该函数返回表示浮点数的整数位。以下是特殊情况：</p><ul><li>如果参数为正无穷大，则结果为0x7f800000。</li><li>如果参数为负无穷大，则结果为0xff800000。</li><li>如果参数为NaN，则结果为0x7fc00000。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Float</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">floatToIntBits</span><span class="token punctuation">(</span><span class="token keyword">float</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">floatToRawIntBits</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check for NaN based on values of bit fields, maximum</span>
        <span class="token comment">// exponent and nonzero significand.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">&amp;</span> <span class="token class-name">FloatConsts</span><span class="token punctuation">.</span><span class="token constant">EXP_BIT_MASK</span><span class="token punctuation">)</span> <span class="token operator">==</span>
                <span class="token class-name">FloatConsts</span><span class="token punctuation">.</span><span class="token constant">EXP_BIT_MASK</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span>result <span class="token operator">&amp;</span> <span class="token class-name">FloatConsts</span><span class="token punctuation">.</span><span class="token constant">SIGNIF_BIT_MASK</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            result <span class="token operator">=</span> <span class="token number">0x7fc00000</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sum-max-min方法" tabindex="-1"><a class="header-anchor" href="#sum-max-min方法" aria-hidden="true">#</a> sum/max/min方法</h4><ul><li>sum方法是用来计算两个float值之和。</li><li>max方法是用来查找两个float值的最大值。</li><li>min方法是用来查找两个float值的最小值。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Float</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="floattorawintbits-intbitstofloat-native方法" tabindex="-1"><a class="header-anchor" href="#floattorawintbits-intbitstofloat-native方法" aria-hidden="true">#</a> floatToRawIntBits/intBitsToFloat native方法()</h4><ul><li>Float类中的floatToRawIntBits()方法是Java中的内置函数，该函数根据IEEE 754浮点“single format”位布局返回指定浮点值的表示形式，并保留Not-a-Number(NaN)值。</li></ul><p>返回值：该函数返回代表浮点数的位。但是，有3种特殊情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>* 如果参数为正无穷大，则结果为0x7f800000。
* 如果参数为负无穷大，则结果为0xff800000。
* 如果参数为NaN，则结果为0x7fc00000。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Java Float 类的 intBitsToFloat() 方法返回与给定位表示相关的浮点值。根据 IEEE 754 浮点 &#39;single format&#39; 位布局，传递的参数被视为浮点值的表示。</li></ul><p>此方法返回具有相同位模式的浮点值。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>* 如果传递的参数为 0X7f800000，则返回的结果为正无穷大。
* 如果传递的参数为 0Xff800000，则返回的结果为负无穷大。
* 如果传递的参数在 0x7f800001 到 0x7fffffff 之间的范围内或在 0xff800001 到 0xffffffff 之间的范围内，则返回的结果为 Nan。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Float</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">floatToRawIntBits</span><span class="token punctuation">(</span><span class="token keyword">float</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">float</span> <span class="token function">intBitsToFloat</span><span class="token punctuation">(</span><span class="token keyword">int</span> bits<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-说明" tabindex="-1"><a class="header-anchor" href="#_5-说明" aria-hidden="true">#</a> 5.说明</h2><ul><li>需要精确计算时不要使用float和double，如果需要精度计算，请使用BigDecimal</li><li>不能用浮点数作为循环变量,浮点数不能为循环因子，精度问题会导致 (float)2000000000 == 2000000050为true</li><li>浮点型数据判断相等不能直接使用,应采用如下方式</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span> a <span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> b <span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1E-6f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","Float.html.vue"]]);export{d as default};
