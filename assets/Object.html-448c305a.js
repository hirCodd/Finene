import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,b as n,d as s,e as i,f as a}from"./app-297e668d.js";const l={},u=a(`<h2 id="_1-类图" tabindex="-1"><a class="header-anchor" href="#_1-类图" aria-hidden="true">#</a> 1. 类图</h2><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/Object.png" alt="Object" tabindex="0" loading="lazy"><figcaption>Object</figcaption></figure><p>Java的Object是所有其他类的父类，从继承的层次来看它就是最顶层根，所以它也是唯一一个没有父类的类。它包含了对象常用的一些方法，比如getClass、hashCode、equals、clone、toString、notify、wait等常用方法。所以其他类继承了Object后就可以不用重复实现这些方法。这些方法大多数是native方法。</p><h2 id="_2-核心代码" tabindex="-1"><a class="header-anchor" href="#_2-核心代码" aria-hidden="true">#</a> 2.核心代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">registerNatives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token function">registerNatives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">protected</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;timeout value is negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nanos <span class="token operator">&gt;</span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;nanosecond timeout value out of range&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timeout<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token function">wait</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-registernatives方法" tabindex="-1"><a class="header-anchor" href="#_2-1-registernatives方法" aria-hidden="true">#</a> 2.1 registerNatives方法</h3><p>由于registerNatives方法被static块修饰，所以在加载Object类时就会执行该方法，对应的本地方法为Java_java_lang_Object_registerNatives，如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> JNINativeMethod methods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;hashCode&quot;</span><span class="token punctuation">,</span>    <span class="token string">&quot;()I&quot;</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_IHashCode<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;wait&quot;</span><span class="token punctuation">,</span>        <span class="token string">&quot;(J)V&quot;</span><span class="token punctuation">,</span>                   <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_MonitorWait<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;notify&quot;</span><span class="token punctuation">,</span>      <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_MonitorNotify<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;notifyAll&quot;</span><span class="token punctuation">,</span>   <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_MonitorNotifyAll<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;clone&quot;</span><span class="token punctuation">,</span>       <span class="token string">&quot;()Ljava/lang/Object;&quot;</span><span class="token punctuation">,</span>   <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_Clone<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

JNIEXPORT <span class="token keyword">void</span> JNICALL
<span class="token function">Java_java_lang_Object_registerNatives</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jclass cls<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">RegisterNatives</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> cls<span class="token punctuation">,</span>
                            methods<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>methods<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它干的事大概就是将Java层的方法名和本地函数对应起来，方便执行引擎在执行字节码时根据这些对应关系表来调用C/C++函数，如下面，将这些方法进行注册，执行引擎执行到hashCode方法时就可以通过关系表来查找到JVM的JVM_IHashCode函数，其中()I还可以得知Java层上的类型应该转为int类型。这个映射其实就可以看成将字符串映射到函数指针。</p><h3 id="_2-2-getclass方法" tabindex="-1"><a class="header-anchor" href="#_2-2-getclass方法" aria-hidden="true">#</a> 2.2 getClass方法</h3><p>返回此对象的运行时类。返回的Class对象是被所表示类的静态同步方法锁定的对象。</p><p>getClass方法调用了本地的Java_java_lang_Object_getClass方法，如果该对象为<code>NULL</code>则直接抛出空指针，否则就就调用<code>GetObjectClass</code>方法，所以真正获取对象的方法为：<code>GetObjectClass</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>JNIEXPORT jclass JNICALL
<span class="token function">Java_java_lang_Object_getClass</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject this<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>this <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">JNU_ThrowNullPointerException</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetObjectClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> this<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java层的Class在C++层与之对应的则是Kclass，所以关于类的元数据和方法信息可以通过它获得，源码目录为：hotspot/src/share/vm/prims/jni.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">JNI_ENTRY</span><span class="token punctuation">(</span>jclass<span class="token punctuation">,</span> <span class="token function">jni_GetObjectClass</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">JNIWrapper</span><span class="token punctuation">(</span><span class="token string">&quot;GetObjectClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">USDT2</span></span>
  <span class="token function">DTRACE_PROBE2</span><span class="token punctuation">(</span>hotspot_jni<span class="token punctuation">,</span> GetObjectClass__entry<span class="token punctuation">,</span> env<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">/* USDT2 */</span></span>
  <span class="token function">HOTSPOT_JNI_GETOBJECTCLASS_ENTRY</span><span class="token punctuation">(</span>
                                   env<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* USDT2 */</span></span>
  Klass<span class="token operator">*</span> k <span class="token operator">=</span> <span class="token class-name">JNIHandles</span><span class="token double-colon punctuation">::</span><span class="token function">resolve_non_null</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">klass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  jclass ret <span class="token operator">=</span>
    <span class="token punctuation">(</span>jclass<span class="token punctuation">)</span> <span class="token class-name">JNIHandles</span><span class="token double-colon punctuation">::</span><span class="token function">make_local</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> k<span class="token operator">-&gt;</span><span class="token function">java_mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">USDT2</span></span>
  <span class="token function">DTRACE_PROBE1</span><span class="token punctuation">(</span>hotspot_jni<span class="token punctuation">,</span> GetObjectClass__return<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">/* USDT2 */</span></span>
  <span class="token function">HOTSPOT_JNI_GETOBJECTCLASS_RETURN</span><span class="token punctuation">(</span>
                                    ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* USDT2 */</span></span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
JNI_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Number</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-hashcode方法" tabindex="-1"><a class="header-anchor" href="#_2-3-hashcode方法" aria-hidden="true">#</a> 2.3 hashCode方法</h3><p>hashCode方法一般约定为：</p><ul><li>在Java应用程序的执行过程中，只要在同一个对象上多次调用hashCode方法，hashCode方法必须一致地返回相同的整数，前提是该对象上的等号比较中使用的信息没有被修改。这个整数不需要在应用程序的一次执行和同一应用程序的另一次执行之间保持一致。</li><li>如果根据equals(Object)方法，两个对象相等，那么在这两个对象上调用hashCode方法必须产生相同的整数结果。</li><li>如果根据equals(Object)方法，两个对象是不相等的，那么对每个对象调用hashCode方法必须产生不同的整数结果，这是不要求的。然而，程序员应该意识到，为不相等的对象生成不同的整数结果可能会提高哈希表的性能。<br> 在合理实用的情况下，类Object定义的hashCode方法确实为不同的对象返回不同的整数。(这通常是通过将对象的内部地址转换为整数来实现的，但是Java™编程语言并不需要这种实现技术。)</li></ul><p>hashCode方法对应的函数为JVM_IHashCode,源码目录为：hotspot/src/share/vm/prims/jvm.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">JVM_ENTRY</span><span class="token punctuation">(</span>jint<span class="token punctuation">,</span> <span class="token function">JVM_IHashCode</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject handle<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">JVMWrapper</span><span class="token punctuation">(</span><span class="token string">&quot;JVM_IHashCode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// as implemented in the classic virtual machine; return 0 if object is NULL</span>
  <span class="token keyword">return</span> handle <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token class-name">ObjectSynchronizer</span><span class="token double-colon punctuation">::</span><span class="token function">FastHashCode</span> <span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> <span class="token class-name">JNIHandles</span><span class="token double-colon punctuation">::</span><span class="token function">resolve_non_null</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
JVM_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java的hashCode主要有JVM_IHashCode实现，而JVM_IHashCode主要调用ObjectSynchronizer::FastHashCode方法实现(该方法源码目录为：hotspot/src/share/vm/runtime/synchronizer.cpp),FastHashCode方法如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>intptr_t <span class="token class-name">ObjectSynchronizer</span><span class="token double-colon punctuation">::</span><span class="token function">FastHashCode</span> <span class="token punctuation">(</span>Thread <span class="token operator">*</span> Self<span class="token punctuation">,</span> oop obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断是否开启偏向锁，可以使用\`-XX:+UseBiasedLocking=true\`参数开启偏向锁</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>UseBiasedLocking<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// NOTE: many places throughout the JVM do not expect a safepoint</span>
    <span class="token comment">// to be taken here, in particular most operations on perm gen</span>
    <span class="token comment">// objects. However, we only ever bias Java instances and all of</span>
    <span class="token comment">// the call sites of identity_hash that might revoke biases have</span>
    <span class="token comment">// been checked to make sure they can handle a safepoint. The</span>
    <span class="token comment">// added check of the bias pattern is to avoid useless calls to</span>
    <span class="token comment">// thread-local storage.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">has_bias_pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Box and unbox the raw reference just in case we cause a STW safepoint.</span>
      Handle <span class="token function">hobj</span> <span class="token punctuation">(</span>Self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">;</span>
      <span class="token comment">// Relaxing assertion for bug 6320749.</span>
      <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token class-name">Universe</span><span class="token double-colon punctuation">::</span><span class="token function">verify_in_progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
              <span class="token operator">!</span><span class="token class-name">SafepointSynchronize</span><span class="token double-colon punctuation">::</span><span class="token function">is_at_safepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token string">&quot;biases should not be seen by VM thread here&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">BiasedLocking</span><span class="token double-colon punctuation">::</span><span class="token function">revoke_and_rebias</span><span class="token punctuation">(</span>hobj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">JavaThread</span><span class="token double-colon punctuation">::</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      obj <span class="token operator">=</span> <span class="token function">hobj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
      <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token operator">-&gt;</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">has_bias_pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;biases should be revoked by now&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// hashCode() is a heap mutator ...</span>
  <span class="token comment">// Relaxing assertion for bug 6320749.</span>
  <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token class-name">Universe</span><span class="token double-colon punctuation">::</span><span class="token function">verify_in_progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
          <span class="token operator">!</span><span class="token class-name">SafepointSynchronize</span><span class="token double-colon punctuation">::</span><span class="token function">is_at_safepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
  <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token class-name">Universe</span><span class="token double-colon punctuation">::</span><span class="token function">verify_in_progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
          Self<span class="token operator">-&gt;</span><span class="token function">is_Java_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
  <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token class-name">Universe</span><span class="token double-colon punctuation">::</span><span class="token function">verify_in_progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
         <span class="token punctuation">(</span><span class="token punctuation">(</span>JavaThread <span class="token operator">*</span><span class="token punctuation">)</span>Self<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">thread_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> _thread_blocked<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

  ObjectMonitor<span class="token operator">*</span> monitor <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  markOop temp<span class="token punctuation">,</span> test<span class="token punctuation">;</span>
  intptr_t hash<span class="token punctuation">;</span>
  <span class="token comment">// 生成针对该对象的标记</span>
  markOop mark <span class="token operator">=</span> <span class="token function">ReadStableMark</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// object should remain ineligible for biased locking</span>
  <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token operator">-&gt;</span><span class="token function">has_bias_pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

  <span class="token comment">// 如果该对象有正常的对象头，并且已经有hashcode就直接返回该hashcode</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token operator">-&gt;</span><span class="token function">is_neutral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hash <span class="token operator">=</span> mark<span class="token operator">-&gt;</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// this is a normal header</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token comment">// if it has hash, just return it</span>
      <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 对于没有hashcode的对象则需要重新生成一个对象头</span>
    hash <span class="token operator">=</span> <span class="token function">get_next_hash</span><span class="token punctuation">(</span>Self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// allocate a new hash code</span>
    <span class="token comment">// 将生成的hash值放回对象头中</span>
    temp <span class="token operator">=</span> mark<span class="token operator">-&gt;</span><span class="token function">copy_set_hash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// merge the hash code into header</span>
    <span class="token comment">// use (machine word version) atomic operation to install the hash</span>
    <span class="token comment">// 对对象进行原子操作标记，如果能够生成markOop对象标记则直接返回当前对象的hash值</span>
    test <span class="token operator">=</span> <span class="token punctuation">(</span>markOop<span class="token punctuation">)</span> <span class="token class-name">Atomic</span><span class="token double-colon punctuation">::</span><span class="token function">cmpxchg_ptr</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> obj<span class="token operator">-&gt;</span><span class="token function">mark_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mark<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token operator">==</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// If atomic operation failed, we must inflate the header</span>
    <span class="token comment">// into heavy weight monitor. We could add more code here</span>
    <span class="token comment">// for fast path, but it does not worth the complexity.</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token operator">-&gt;</span><span class="token function">has_monitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 原子操作失败，对对象加重量级锁，这里跟synchronized一样，加重量锁用来生成hash值</span>
    monitor <span class="token operator">=</span> mark<span class="token operator">-&gt;</span><span class="token function">monitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    temp <span class="token operator">=</span> monitor<span class="token operator">-&gt;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span><span class="token function">is_neutral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    hash <span class="token operator">=</span> temp<span class="token operator">-&gt;</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Skip to the following code to reduce code size</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Self<span class="token operator">-&gt;</span><span class="token function">is_lock_owned</span><span class="token punctuation">(</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>mark<span class="token operator">-&gt;</span><span class="token function">locker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp <span class="token operator">=</span> mark<span class="token operator">-&gt;</span><span class="token function">displaced_mark_helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this is a lightweight monitor owned</span>
    <span class="token function">assert</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span><span class="token function">is_neutral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    hash <span class="token operator">=</span> temp<span class="token operator">-&gt;</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// by current thread, check if the displaced</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token comment">// header contains hash code</span>
      <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// WARNING:</span>
    <span class="token comment">//   The displaced header is strictly immutable.</span>
    <span class="token comment">// It can NOT be changed in ANY cases. So we have</span>
    <span class="token comment">// to inflate the header into heavyweight monitor</span>
    <span class="token comment">// even the current thread owns the lock. The reason</span>
    <span class="token comment">// is the BasicLock (stack slot) will be asynchronously</span>
    <span class="token comment">// read by other threads during the inflate() function.</span>
    <span class="token comment">// Any change to stack may not propagate to other threads</span>
    <span class="token comment">// correctly.</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Inflate the monitor to set hash code</span>
  <span class="token comment">// 利用monitor机制在对象头设置hash值</span>
  monitor <span class="token operator">=</span> <span class="token class-name">ObjectSynchronizer</span><span class="token double-colon punctuation">::</span><span class="token function">inflate</span><span class="token punctuation">(</span>Self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Load displaced header and check it has hash code</span>
  mark <span class="token operator">=</span> monitor<span class="token operator">-&gt;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert</span> <span class="token punctuation">(</span>mark<span class="token operator">-&gt;</span><span class="token function">is_neutral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
  hash <span class="token operator">=</span> mark<span class="token operator">-&gt;</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果hash值为0，重新调用get_next_hash来生成hash值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hash <span class="token operator">=</span> <span class="token function">get_next_hash</span><span class="token punctuation">(</span>Self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    temp <span class="token operator">=</span> mark<span class="token operator">-&gt;</span><span class="token function">copy_set_hash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// merge hash code into header</span>
    <span class="token function">assert</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span><span class="token function">is_neutral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    test <span class="token operator">=</span> <span class="token punctuation">(</span>markOop<span class="token punctuation">)</span> <span class="token class-name">Atomic</span><span class="token double-colon punctuation">::</span><span class="token function">cmpxchg_ptr</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> monitor<span class="token punctuation">,</span> mark<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token operator">!=</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// The only update to the header in the monitor (outside GC)</span>
      <span class="token comment">// is install the hash code. If someone add new usage of</span>
      <span class="token comment">// displaced header, please update this code</span>
      hash <span class="token operator">=</span> test<span class="token operator">-&gt;</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">assert</span> <span class="token punctuation">(</span>test<span class="token operator">-&gt;</span><span class="token function">is_neutral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
      <span class="token function">assert</span> <span class="token punctuation">(</span>hash <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Trivial unexpected object/monitor header usage.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// We finally get the hash</span>
  <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而生成hashCode的主要方法为：<code>get_next_hash</code>,该方法源码如下：</p><p>get_next_hash生成hashcode的方法有6种，分别为：</p>`,26),k=a('<li><ol><li>A randomly generated number.</li></ol></li><li><ol start="2"><li>A function of memory address of the object.</li></ol></li><li><ol start="3"><li>A hardcoded 1 (used for sensitivity testing.)</li></ol></li><li><ol start="4"><li>A sequence.</li></ol></li><li><ol start="5"><li>The memory address of the object, cast to int.</li></ol></li>',5),r={start:"6"},d={href:"https://en.wikipedia.org/wiki/Xorshift",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>根据globals.hpp文件，OpenJDK8默认采用第五种方法。而<code>OpenJDK7</code> 和<code>OpenJDK6</code>都是使用第一种方法，即随机数生成器。当然你也可以使用命令<code>-XX:hashCode=0或者其他数</code>可以设置生成对象的hashcode的策略。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  <span class="token function">product</span><span class="token punctuation">(</span>intx<span class="token punctuation">,</span> hashCode<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>                                                \\
          <span class="token string">&quot;(Unstable) select hashCode generation algorithm&quot;</span><span class="token punctuation">)</span>                \\
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> intptr_t <span class="token function">get_next_hash</span><span class="token punctuation">(</span>Thread <span class="token operator">*</span> Self<span class="token punctuation">,</span> oop obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  intptr_t value <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// This form uses an unguarded global Park-Miller RNG,</span>
     <span class="token comment">// so it&#39;s possible for two threads to race and generate the same RNG.</span>
     <span class="token comment">// On MP system we&#39;ll have lots of RW access to a global, so the</span>
     <span class="token comment">// mechanism induces lots of coherency traffic.</span>
     value <span class="token operator">=</span> os<span class="token double-colon punctuation">::</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// This variation has the property of being stable (idempotent)</span>
     <span class="token comment">// between STW operations.  This can be useful in some of the 1-0</span>
     <span class="token comment">// synchronization schemes.</span>
     intptr_t addrBits <span class="token operator">=</span> <span class="token generic-function"><span class="token function">cast_from_oop</span><span class="token generic class-name"><span class="token operator">&lt;</span>intptr_t<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span> <span class="token punctuation">;</span>
     value <span class="token operator">=</span> addrBits <span class="token operator">^</span> <span class="token punctuation">(</span>addrBits <span class="token operator">&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> GVars<span class="token punctuation">.</span>stwRandom <span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     value <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>            <span class="token comment">// for sensitivity testing</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     value <span class="token operator">=</span> <span class="token operator">++</span>GVars<span class="token punctuation">.</span>hcSequence <span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     value <span class="token operator">=</span> <span class="token generic-function"><span class="token function">cast_from_oop</span><span class="token generic class-name"><span class="token operator">&lt;</span>intptr_t<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token comment">// Marsaglia&#39;s xor-shift scheme with thread-specific state</span>
     <span class="token comment">// This is probably the best overall implementation -- we&#39;ll</span>
     <span class="token comment">// likely make this the default in future releases.</span>
     <span class="token keyword">unsigned</span> t <span class="token operator">=</span> Self<span class="token operator">-&gt;</span>_hashStateX <span class="token punctuation">;</span>
     t <span class="token operator">^=</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     Self<span class="token operator">-&gt;</span>_hashStateX <span class="token operator">=</span> Self<span class="token operator">-&gt;</span>_hashStateY <span class="token punctuation">;</span>
     Self<span class="token operator">-&gt;</span>_hashStateY <span class="token operator">=</span> Self<span class="token operator">-&gt;</span>_hashStateZ <span class="token punctuation">;</span>
     Self<span class="token operator">-&gt;</span>_hashStateZ <span class="token operator">=</span> Self<span class="token operator">-&gt;</span>_hashStateW <span class="token punctuation">;</span>
     <span class="token keyword">unsigned</span> v <span class="token operator">=</span> Self<span class="token operator">-&gt;</span>_hashStateW <span class="token punctuation">;</span>
     v <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">^</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>t <span class="token operator">^</span> <span class="token punctuation">(</span>t <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     Self<span class="token operator">-&gt;</span>_hashStateW <span class="token operator">=</span> v <span class="token punctuation">;</span>
     value <span class="token operator">=</span> v <span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  value <span class="token operator">&amp;=</span> markOopDesc<span class="token double-colon punctuation">::</span>hash_mask<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> value <span class="token operator">=</span> <span class="token number">0xBAD</span> <span class="token punctuation">;</span>
  <span class="token function">assert</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> markOopDesc<span class="token double-colon punctuation">::</span>no_hash<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
  <span class="token function">TEVENT</span> <span class="token punctuation">(</span>hashCode<span class="token operator">:</span> GENERATE<span class="token punctuation">)</span> <span class="token punctuation">;</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对象头中偏向锁和hashcode的冲突</li></ul><blockquote><p>normal object和biased object分别存放的是hashcode和java的线程id。因此也就是说如果调用了本地方法hashCode，就会占用偏向锁对象使用的位置，偏向锁将会失效，晋升为轻量级锁。</p></blockquote><ul><li>总结</li></ul><blockquote><ul><li>OpenJDK默认的hashCode方法实现和对象内存地址无关，在版本6和7中，它是随机生成的数字，在版本8中，它是基于线程状态的数字。（AZUL-ZING的hashcode是基于地址的）</li><li>在Hotspot中，hash值会存在标记字中。</li><li>hashCode方法和System.identityHashCode()会让对象不能使用偏向锁，所以如果想使用偏向锁，那就最好重写hashCode方法。</li><li>如果大量对象跨线程使用，可以禁用偏向锁。</li><li>使用-XX:hashCode=4来修改默认的hash方法实现。</li></ul></blockquote><h3 id="_2-4-equals方法" tabindex="-1"><a class="header-anchor" href="#_2-4-equals方法" aria-hidden="true">#</a> 2.4 equals方法</h3><p>equal方法是一个简单的设计，就是<code>==</code>的比较</p><ul><li>equals方法如何使用hashcode</li></ul><blockquote><ul><li>对称性。若 a.equal(b) 返回”true”, 则 b.equal(a) 也必须返回 “true”.</li><li>反射性。a.equal(a) 必须返回”true”.</li><li>传递性。若a.equal(b) 返回 “true”, 且 b.equal(c)返回 “true”, 则c.equal(a)必返回”true”.</li><li>一致性。若a.equal(b) 返回”true”, 只要a, b内容不变，不管重复多少次a.equal(b)必须返回”true”.</li><li>任何情况下，a.equals(null)，永远返回是“false”；a.equals(和a不同类型的对象)永远返回是“false”.hashCode()的返回值和equals()的关系.</li></ul></blockquote><ul><li>hashCode()的返回值和equals()的关系.</li></ul><blockquote><ul><li>如果a.equals(b)返回“true”，那么a和b的hashCode()必须相等。</li><li>如果a.equals(b)返回“false”，那么a和b的hashCode()有可能相等，也有可能不等。</li></ul></blockquote><ul><li>equals方法的注意事项：</li></ul><blockquote><p>每当重写hashCode方法时，通常都需要重写equals方法，以便维护hashCode方法的一般契约，该契约规定相等的对象必须具有相等的散列码。</p></blockquote><h3 id="_2-5-clone方法" tabindex="-1"><a class="header-anchor" href="#_2-5-clone方法" aria-hidden="true">#</a> 2.5 clone方法</h3><p>由元数据数据方法可知，clone方法对应的jvm方法为：<code>JVM_Clone</code>,<br> clone方法主要实现对象的克隆功能，根据该对象生成一个相同的新对象（我们常见的类的对象的属性如果是原始类型则会克隆值，但如果是对象则会克隆对象的地址）。<br> Java的类要实现克隆则需要实现Cloneable接口，if (!klass-&gt;is_cloneable())这里会校验是否有实现该接口。然后判断是否是数组分两种情况分配内存空间，新对象为new_obj，接着对new_obj进行copy及C++层数据结构的设置。最后再转成jobject类型方便转成Java层的Object类型。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">JVM_ENTRY</span><span class="token punctuation">(</span>jobject<span class="token punctuation">,</span> <span class="token function">JVM_Clone</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject handle<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">JVMWrapper</span><span class="token punctuation">(</span><span class="token string">&quot;JVM_Clone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Handle <span class="token function">obj</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> <span class="token class-name">JNIHandles</span><span class="token double-colon punctuation">::</span><span class="token function">resolve_non_null</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> KlassHandle <span class="token function">klass</span> <span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> obj<span class="token operator">-&gt;</span><span class="token function">klass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  JvmtiVMObjectAllocEventCollector oam<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">ASSERT</span></span>
  <span class="token comment">// Just checking that the cloneable flag is set correct</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">guarantee</span><span class="token punctuation">(</span>klass<span class="token operator">-&gt;</span><span class="token function">is_cloneable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;all arrays are cloneable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">guarantee</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span><span class="token function">is_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;should be instanceOop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> cloneable <span class="token operator">=</span> klass<span class="token operator">-&gt;</span><span class="token function">is_subtype_of</span><span class="token punctuation">(</span><span class="token class-name">SystemDictionary</span><span class="token double-colon punctuation">::</span><span class="token function">Cloneable_klass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">guarantee</span><span class="token punctuation">(</span>cloneable <span class="token operator">==</span> klass<span class="token operator">-&gt;</span><span class="token function">is_cloneable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;incorrect cloneable flag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

  <span class="token comment">// Check if class of obj supports the Cloneable interface.</span>
  <span class="token comment">// All arrays are considered to be cloneable (See JLS 20.1.5)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>klass<span class="token operator">-&gt;</span><span class="token function">is_cloneable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ResourceMark <span class="token function">rm</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">THROW_MSG_0</span><span class="token punctuation">(</span>vmSymbols<span class="token double-colon punctuation">::</span><span class="token function">java_lang_CloneNotSupportedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> klass<span class="token operator">-&gt;</span><span class="token function">external_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Make shallow object copy</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> obj<span class="token operator">-&gt;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  oop new_obj_oop <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arrayOop<span class="token punctuation">)</span><span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_obj_oop <span class="token operator">=</span> <span class="token class-name">CollectedHeap</span><span class="token double-colon punctuation">::</span><span class="token function">array_allocate</span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span> size<span class="token punctuation">,</span> length<span class="token punctuation">,</span> CHECK_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    new_obj_oop <span class="token operator">=</span> <span class="token class-name">CollectedHeap</span><span class="token double-colon punctuation">::</span><span class="token function">obj_allocate</span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span> size<span class="token punctuation">,</span> CHECK_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 4839641 (4840070): We must do an oop-atomic copy, because if another thread</span>
  <span class="token comment">// is modifying a reference field in the clonee, a non-oop-atomic copy might</span>
  <span class="token comment">// be suspended in the middle of copying the pointer and end up with parts</span>
  <span class="token comment">// of two different pointers in the field.  Subsequent dereferences will crash.</span>
  <span class="token comment">// 4846409: an oop-copy of objects with long or double fields or arrays of same</span>
  <span class="token comment">// won&#39;t copy the longs/doubles atomically in 32-bit vm&#39;s, so we copy jlongs instead</span>
  <span class="token comment">// of oops.  We know objects are aligned on a minimum of an jlong boundary.</span>
  <span class="token comment">// The same is true of StubRoutines::object_copy and the various oop_copy</span>
  <span class="token comment">// variants, and of the code generated by the inline_native_clone intrinsic.</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>MinObjAlignmentInBytes <span class="token operator">&gt;=</span> BytesPerLong<span class="token punctuation">,</span> <span class="token string">&quot;objects misaligned&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Copy</span><span class="token double-colon punctuation">::</span><span class="token function">conjoint_jlongs_atomic</span><span class="token punctuation">(</span><span class="token punctuation">(</span>jlong<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>jlong<span class="token operator">*</span><span class="token punctuation">)</span>new_obj_oop<span class="token punctuation">,</span>
                               <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token function">align_object_size</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">/</span> HeapWordsPerLong<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Clear the header</span>
  new_obj_oop<span class="token operator">-&gt;</span><span class="token function">init_mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Store check (mark entire object and let gc sort it out)</span>
  BarrierSet<span class="token operator">*</span> bs <span class="token operator">=</span> <span class="token class-name">Universe</span><span class="token double-colon punctuation">::</span><span class="token function">heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">barrier_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>bs<span class="token operator">-&gt;</span><span class="token function">has_write_region_opt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Barrier set does not have write_region&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bs<span class="token operator">-&gt;</span><span class="token function">write_region</span><span class="token punctuation">(</span><span class="token function">MemRegion</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HeapWord<span class="token operator">*</span><span class="token punctuation">)</span>new_obj_oop<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  Handle <span class="token function">new_obj</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> new_obj_oop<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Special handling for MemberNames.  Since they contain Method* metadata, they</span>
  <span class="token comment">// must be registered so that RedefineClasses can fix metadata contained in them.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>java_lang_invoke_MemberName<span class="token double-colon punctuation">::</span><span class="token function">is_instance</span><span class="token punctuation">(</span><span class="token function">new_obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      java_lang_invoke_MemberName<span class="token double-colon punctuation">::</span><span class="token function">is_method</span><span class="token punctuation">(</span><span class="token function">new_obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Method<span class="token operator">*</span> method <span class="token operator">=</span> <span class="token punctuation">(</span>Method<span class="token operator">*</span><span class="token punctuation">)</span>java_lang_invoke_MemberName<span class="token double-colon punctuation">::</span><span class="token function">vmtarget</span><span class="token punctuation">(</span><span class="token function">new_obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// MemberName may be unresolved, so doesn&#39;t need registration until resolved.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      methodHandle <span class="token function">m</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// This can safepoint and redefine method, so need both new_obj and method</span>
      <span class="token comment">// in a handle, for two different reasons.  new_obj can move, method can be</span>
      <span class="token comment">// deleted if nothing is using it on the stack.</span>
      m<span class="token operator">-&gt;</span><span class="token function">method_holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">add_member_name</span><span class="token punctuation">(</span><span class="token function">new_obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Caution: this involves a java upcall, so the clone should be</span>
  <span class="token comment">// &quot;gc-robust&quot; by this stage.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>klass<span class="token operator">-&gt;</span><span class="token function">has_finalizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span><span class="token function">is_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;should be instanceOop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_obj_oop <span class="token operator">=</span> <span class="token class-name">InstanceKlass</span><span class="token double-colon punctuation">::</span><span class="token function">register_finalizer</span><span class="token punctuation">(</span><span class="token function">instanceOop</span><span class="token punctuation">(</span><span class="token function">new_obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CHECK_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_obj <span class="token operator">=</span> <span class="token function">Handle</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> new_obj_oop<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token class-name">JNIHandles</span><span class="token double-colon punctuation">::</span><span class="token function">make_local</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">new_obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JVM_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-tostring方法" tabindex="-1"><a class="header-anchor" href="#_2-6-tostring方法" aria-hidden="true">#</a> 2.6 toString方法</h3><p>实现:<code>getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</code>,获取class名称加上@再加上十六进制的hashCode。</p><h3 id="_2-7-notify方法" tabindex="-1"><a class="header-anchor" href="#_2-7-notify方法" aria-hidden="true">#</a> 2.7 notify方法</h3><p>此方法主要是用来唤醒线程，final修饰说明不可重写。与之对应的本地方法为<code>JVM_MonitorNotify</code>,<code>ObjectSynchronizer::notify</code>最终会调用<code>ObjectMonitor::notify(TRAPS)</code>，<br> 这个过程是ObjectSynchronizer会尝试当前线程获取free ObjectMonitor对象，不成功则尝试从全局中获取。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">JVM_ENTRY</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token function">JVM_MonitorNotify</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject handle<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">JVMWrapper</span><span class="token punctuation">(</span><span class="token string">&quot;JVM_MonitorNotify&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Handle <span class="token function">obj</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> <span class="token class-name">JNIHandles</span><span class="token double-colon punctuation">::</span><span class="token function">resolve_non_null</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ObjectSynchronizer</span><span class="token double-colon punctuation">::</span><span class="token function">notify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> CHECK<span class="token punctuation">)</span><span class="token punctuation">;</span>
JVM_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ObjectSynchronizer::notify</code>方法源码在:hotspot/src/share/vm/runtime/synchronizer.cpp,源码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">ObjectSynchronizer</span><span class="token double-colon punctuation">::</span><span class="token function">notify</span><span class="token punctuation">(</span>Handle obj<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 如果使用偏向锁</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>UseBiasedLocking<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BiasedLocking</span><span class="token double-colon punctuation">::</span><span class="token function">revoke_and_rebias</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token operator">-&gt;</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">has_bias_pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;biases should be revoked by now&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  markOop mark <span class="token operator">=</span> obj<span class="token operator">-&gt;</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token operator">-&gt;</span><span class="token function">has_locker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> THREAD<span class="token operator">-&gt;</span><span class="token function">is_lock_owned</span><span class="token punctuation">(</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>mark<span class="token operator">-&gt;</span><span class="token function">locker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">ObjectSynchronizer</span><span class="token double-colon punctuation">::</span><span class="token function">inflate</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">notify</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ObjectMonitor对象包含一个_WaitSet队列对象，此对象保存着所有处于wait状态的线程，用ObjectWaiter对象表示。notify要做的事是先获取_WaitSet队列锁，<br> 再取出_WaitSet队列中第一个ObjectWaiter对象，再根据不同策略处理该对象，比如把它加入到_EntryList队列中。然后再释放_WaitSet队列锁。它并没有释放synchronized对应的锁，所以锁只能等到synchronized同步块结束时才释放。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Consider:</span>
<span class="token comment">// If the lock is cool (cxq == null &amp;&amp; succ == null) and we&#39;re on an MP system</span>
<span class="token comment">// then instead of transferring a thread from the WaitSet to the EntryList</span>
<span class="token comment">// we might just dequeue a thread from the WaitSet and directly unpark() it.</span>

<span class="token keyword">void</span> <span class="token class-name">ObjectMonitor</span><span class="token double-colon punctuation">::</span><span class="token function">notify</span><span class="token punctuation">(</span>TRAPS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">CHECK_OWNER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>_WaitSet <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">TEVENT</span> <span class="token punctuation">(</span>Empty<span class="token operator">-</span>Notify<span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">DTRACE_MONITOR_PROBE</span><span class="token punctuation">(</span>notify<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> Policy <span class="token operator">=</span> Knob_MoveNotifyee <span class="token punctuation">;</span>

  <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">SpinAcquire</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>_WaitSetLock<span class="token punctuation">,</span> <span class="token string">&quot;WaitSet - notify&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
  ObjectWaiter <span class="token operator">*</span> iterator <span class="token operator">=</span> <span class="token function">DequeueWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">TEVENT</span> <span class="token punctuation">(</span>Notify1 <span class="token operator">-</span> Transfer<span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token function">guarantee</span> <span class="token punctuation">(</span>iterator<span class="token operator">-&gt;</span>TState <span class="token operator">==</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_WAIT<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token function">guarantee</span> <span class="token punctuation">(</span>iterator<span class="token operator">-&gt;</span>_notified <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>Policy <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        iterator<span class="token operator">-&gt;</span>TState <span class="token operator">=</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_ENTER <span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     iterator<span class="token operator">-&gt;</span>_notified <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>
     Thread <span class="token operator">*</span> Self <span class="token operator">=</span> THREAD<span class="token punctuation">;</span>
     iterator<span class="token operator">-&gt;</span>_notifier_tid <span class="token operator">=</span> Self<span class="token operator">-&gt;</span><span class="token function">osthread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">thread_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     ObjectWaiter <span class="token operator">*</span> List <span class="token operator">=</span> _EntryList <span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>List <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assert</span> <span class="token punctuation">(</span>List<span class="token operator">-&gt;</span>_prev <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token function">assert</span> <span class="token punctuation">(</span>List<span class="token operator">-&gt;</span>TState <span class="token operator">==</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_ENTER<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token function">assert</span> <span class="token punctuation">(</span>List <span class="token operator">!=</span> iterator<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token keyword">if</span> <span class="token punctuation">(</span>Policy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// prepend to EntryList</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>List <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             iterator<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> iterator<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
             _EntryList <span class="token operator">=</span> iterator <span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
             List<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> iterator <span class="token punctuation">;</span>
             iterator<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> List <span class="token punctuation">;</span>
             iterator<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
             _EntryList <span class="token operator">=</span> iterator <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>Policy <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// append to EntryList</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>List <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             iterator<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> iterator<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
             _EntryList <span class="token operator">=</span> iterator <span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// CONSIDER:  finding the tail currently requires a linear-time walk of</span>
            <span class="token comment">// the EntryList.  We can make tail access constant-time by converting to</span>
            <span class="token comment">// a CDLL instead of using our current DLL.</span>
            ObjectWaiter <span class="token operator">*</span> Tail <span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>Tail <span class="token operator">=</span> List <span class="token punctuation">;</span> Tail<span class="token operator">-&gt;</span>_next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span> Tail <span class="token operator">=</span> Tail<span class="token operator">-&gt;</span>_next<span class="token punctuation">)</span> <span class="token punctuation">;</span>
            <span class="token function">assert</span> <span class="token punctuation">(</span>Tail <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> Tail<span class="token operator">-&gt;</span>_next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
            Tail<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> iterator <span class="token punctuation">;</span>
            iterator<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> Tail <span class="token punctuation">;</span>
            iterator<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>Policy <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// prepend to cxq</span>
         <span class="token comment">// prepend to cxq</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>List <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             iterator<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> iterator<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
             _EntryList <span class="token operator">=</span> iterator <span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            iterator<span class="token operator">-&gt;</span>TState <span class="token operator">=</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_CXQ <span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ObjectWaiter <span class="token operator">*</span> Front <span class="token operator">=</span> _cxq <span class="token punctuation">;</span>
                iterator<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> Front <span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Atomic</span><span class="token double-colon punctuation">::</span><span class="token function">cmpxchg_ptr</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">,</span> <span class="token operator">&amp;</span>_cxq<span class="token punctuation">,</span> Front<span class="token punctuation">)</span> <span class="token operator">==</span> Front<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span> <span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>Policy <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// append to cxq</span>
        iterator<span class="token operator">-&gt;</span>TState <span class="token operator">=</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_CXQ <span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ObjectWaiter <span class="token operator">*</span> Tail <span class="token punctuation">;</span>
            Tail <span class="token operator">=</span> _cxq <span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Tail <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                iterator<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Atomic</span><span class="token double-colon punctuation">::</span><span class="token function">cmpxchg_ptr</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">,</span> <span class="token operator">&amp;</span>_cxq<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                   <span class="token keyword">break</span> <span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>Tail<span class="token operator">-&gt;</span>_next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> Tail <span class="token operator">=</span> Tail<span class="token operator">-&gt;</span>_next <span class="token punctuation">;</span>
                Tail<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> iterator <span class="token punctuation">;</span>
                iterator<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> Tail <span class="token punctuation">;</span>
                iterator<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
                <span class="token keyword">break</span> <span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        ParkEvent <span class="token operator">*</span> ev <span class="token operator">=</span> iterator<span class="token operator">-&gt;</span>_event <span class="token punctuation">;</span>
        iterator<span class="token operator">-&gt;</span>TState <span class="token operator">=</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_RUN <span class="token punctuation">;</span>
        <span class="token class-name">OrderAccess</span><span class="token double-colon punctuation">::</span><span class="token function">fence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        ev<span class="token operator">-&gt;</span><span class="token function">unpark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token keyword">if</span> <span class="token punctuation">(</span>Policy <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       iterator<span class="token operator">-&gt;</span><span class="token function">wait_reenter_begin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token comment">// _WaitSetLock protects the wait queue, not the EntryList.  We could</span>
     <span class="token comment">// move the add-to-EntryList operation, above, outside the critical section</span>
     <span class="token comment">// protected by _WaitSetLock.  In practice that&#39;s not useful.  With the</span>
     <span class="token comment">// exception of  wait() timeouts and interrupts the monitor owner</span>
     <span class="token comment">// is the only thread that grabs _WaitSetLock.  There&#39;s almost no contention</span>
     <span class="token comment">// on _WaitSetLock so it&#39;s not profitable to reduce the length of the</span>
     <span class="token comment">// critical section.</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">SpinRelease</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>_WaitSetLock<span class="token punctuation">)</span> <span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> ObjectMonitor<span class="token double-colon punctuation">::</span>_sync_Notifications <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     ObjectMonitor<span class="token double-colon punctuation">::</span>_sync_Notifications<span class="token operator">-&gt;</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-notifyall方法" tabindex="-1"><a class="header-anchor" href="#_2-8-notifyall方法" aria-hidden="true">#</a> 2.8 notifyAll方法</h3><p>与notify方法类似，只是在取_WaitSet队列时不是取第一个而是取所有。</p><h3 id="_2-9-wait方法" tabindex="-1"><a class="header-anchor" href="#_2-9-wait方法" aria-hidden="true">#</a> 2.9 wait方法</h3><p>wait方法是让线程等待，它对应的本地方法是JVM_MonitorWait，间接调用了ObjectSynchronizer::wait，</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">JVM_ENTRY</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token function">JVM_MonitorWait</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject handle<span class="token punctuation">,</span> jlong ms<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">JVMWrapper</span><span class="token punctuation">(</span><span class="token string">&quot;JVM_MonitorWait&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Handle <span class="token function">obj</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> <span class="token class-name">JNIHandles</span><span class="token double-colon punctuation">::</span><span class="token function">resolve_non_null</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  JavaThreadInObjectWaitState <span class="token function">jtiows</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> ms <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">JvmtiExport</span><span class="token double-colon punctuation">::</span><span class="token function">should_post_monitor_wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">JvmtiExport</span><span class="token double-colon punctuation">::</span><span class="token function">post_monitor_wait</span><span class="token punctuation">(</span><span class="token punctuation">(</span>JavaThread <span class="token operator">*</span><span class="token punctuation">)</span>THREAD<span class="token punctuation">,</span> <span class="token punctuation">(</span>oop<span class="token punctuation">)</span><span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// The current thread already owns the monitor and it has not yet</span>
    <span class="token comment">// been added to the wait queue so the current thread cannot be</span>
    <span class="token comment">// made the successor. This means that the JVMTI_EVENT_MONITOR_WAIT</span>
    <span class="token comment">// event handler cannot accidentally consume an unpark() meant for</span>
    <span class="token comment">// the ParkEvent associated with this ObjectMonitor.</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">ObjectSynchronizer</span><span class="token double-colon punctuation">::</span><span class="token function">wait</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> CHECK<span class="token punctuation">)</span><span class="token punctuation">;</span>
JVM_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ObjectSynchronizer::wait</code>源码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//  Wait/Notify/NotifyAll</span>
<span class="token comment">// NOTE: must use heavy weight monitor to handle wait()</span>
<span class="token keyword">void</span> <span class="token class-name">ObjectSynchronizer</span><span class="token double-colon punctuation">::</span><span class="token function">wait</span><span class="token punctuation">(</span>Handle obj<span class="token punctuation">,</span> jlong millis<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>UseBiasedLocking<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BiasedLocking</span><span class="token double-colon punctuation">::</span><span class="token function">revoke_and_rebias</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token operator">-&gt;</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">has_bias_pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;biases should be revoked by now&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">TEVENT</span> <span class="token punctuation">(</span>wait <span class="token operator">-</span> <span class="token keyword">throw</span> IAX<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token function">THROW_MSG</span><span class="token punctuation">(</span>vmSymbols<span class="token double-colon punctuation">::</span><span class="token function">java_lang_IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;timeout value is negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 调用ObjectMonitor::wait方法，用来获取Monitor对象</span>
  ObjectMonitor<span class="token operator">*</span> monitor <span class="token operator">=</span> <span class="token class-name">ObjectSynchronizer</span><span class="token double-colon punctuation">::</span><span class="token function">inflate</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">DTRACE_MONITOR_WAIT_PROBE</span><span class="token punctuation">(</span>monitor<span class="token punctuation">,</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">,</span> millis<span class="token punctuation">)</span><span class="token punctuation">;</span>
  monitor<span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span>millis<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* This dummy call is in place to get around dtrace bug 6254741.  Once
     that&#39;s fixed we can uncomment the following line and remove the call */</span>
  <span class="token comment">// DTRACE_MONITOR_PROBE(waited, monitor, obj(), THREAD);</span>
  <span class="token function">dtrace_waited_probe</span><span class="token punctuation">(</span>monitor<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法对应调用ObjectMonitor::wait方法，对应源码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">ObjectMonitor</span><span class="token double-colon punctuation">::</span><span class="token function">wait</span><span class="token punctuation">(</span>jlong millis<span class="token punctuation">,</span> <span class="token keyword">bool</span> interruptible<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   Thread <span class="token operator">*</span> <span class="token keyword">const</span> Self <span class="token operator">=</span> THREAD <span class="token punctuation">;</span>
   <span class="token function">assert</span><span class="token punctuation">(</span>Self<span class="token operator">-&gt;</span><span class="token function">is_Java_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Must be Java thread!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   JavaThread <span class="token operator">*</span>jt <span class="token operator">=</span> <span class="token punctuation">(</span>JavaThread <span class="token operator">*</span><span class="token punctuation">)</span>THREAD<span class="token punctuation">;</span>

   <span class="token function">DeferredInitialize</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

   <span class="token comment">// Throw IMSX or IEX.</span>
   <span class="token function">CHECK_OWNER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   EventJavaMonitorWait event<span class="token punctuation">;</span>

   <span class="token comment">// check for a pending interrupt</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptible <span class="token operator">&amp;&amp;</span> <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">is_interrupted</span><span class="token punctuation">(</span>Self<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>HAS_PENDING_EXCEPTION<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// post monitor waited event.  Note that this is past-tense, we are done waiting.</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">JvmtiExport</span><span class="token double-colon punctuation">::</span><span class="token function">should_post_monitor_waited</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Note: &#39;false&#39; parameter is passed here because the</span>
        <span class="token comment">// wait was not timed out due to thread interrupt.</span>
        <span class="token class-name">JvmtiExport</span><span class="token double-colon punctuation">::</span><span class="token function">post_monitor_waited</span><span class="token punctuation">(</span>jt<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// In this short circuit of the monitor wait protocol, the</span>
        <span class="token comment">// current thread never drops ownership of the monitor and</span>
        <span class="token comment">// never gets added to the wait queue so the current thread</span>
        <span class="token comment">// cannot be made the successor. This means that the</span>
        <span class="token comment">// JVMTI_EVENT_MONITOR_WAITED event handler cannot accidentally</span>
        <span class="token comment">// consume an unpark() meant for the ParkEvent associated with</span>
        <span class="token comment">// this ObjectMonitor.</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">should_commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">post_monitor_wait_event</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> millis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token function">TEVENT</span> <span class="token punctuation">(</span>Wait <span class="token operator">-</span> Throw IEX<span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token function">THROW</span><span class="token punctuation">(</span>vmSymbols<span class="token double-colon punctuation">::</span><span class="token function">java_lang_InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token function">TEVENT</span> <span class="token punctuation">(</span>Wait<span class="token punctuation">)</span> <span class="token punctuation">;</span>

   <span class="token function">assert</span> <span class="token punctuation">(</span>Self<span class="token operator">-&gt;</span>_Stalled <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
   Self<span class="token operator">-&gt;</span>_Stalled <span class="token operator">=</span> <span class="token function">intptr_t</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
   jt<span class="token operator">-&gt;</span><span class="token function">set_current_waiting_monitor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// create a node to be put into the queue</span>
   <span class="token comment">// Critically, after we reset() the event but prior to park(), we must check</span>
   <span class="token comment">// for a pending interrupt.</span>
   <span class="token comment">// 创建ObjectWaiter对象</span>
   ObjectWaiter <span class="token function">node</span><span class="token punctuation">(</span>Self<span class="token punctuation">)</span><span class="token punctuation">;</span>
   node<span class="token punctuation">.</span>TState <span class="token operator">=</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_WAIT <span class="token punctuation">;</span>
   Self<span class="token operator">-&gt;</span>_ParkEvent<span class="token operator">-&gt;</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
   <span class="token class-name">OrderAccess</span><span class="token double-colon punctuation">::</span><span class="token function">fence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// ST into Event; membar ; LD interrupted-flag</span>

   <span class="token comment">// Enter the waiting queue, which is a circular doubly linked list in this case</span>
   <span class="token comment">// but it could be a priority queue or any data structure.</span>
   <span class="token comment">// _WaitSetLock protects the wait queue.  Normally the wait queue is accessed only</span>
   <span class="token comment">// by the the owner of the monitor *except* in the case where park()</span>
   <span class="token comment">// returns because of a timeout of interrupt.  Contention is exceptionally rare</span>
   <span class="token comment">// so we use a simple spin-lock instead of a heavier-weight blocking lock.</span>

   <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">SpinAcquire</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>_WaitSetLock<span class="token punctuation">,</span> <span class="token string">&quot;WaitSet - add&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
   <span class="token comment">// 将对讲加入ObjectWaiter中</span>
   <span class="token function">AddWaiter</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>node<span class="token punctuation">)</span> <span class="token punctuation">;</span>
   <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">SpinRelease</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>_WaitSetLock<span class="token punctuation">)</span> <span class="token punctuation">;</span>

   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SyncFlags <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _Responsible <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   intptr_t save <span class="token operator">=</span> _recursions<span class="token punctuation">;</span> <span class="token comment">// record the old recursion count</span>
   _waiters<span class="token operator">++</span><span class="token punctuation">;</span>                  <span class="token comment">// increment the number of waiters</span>
   _recursions <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token comment">// set the recursion level to be 1</span>
   <span class="token function">exit</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Self<span class="token punctuation">)</span> <span class="token punctuation">;</span>                    <span class="token comment">// exit the monitor</span>
   <span class="token function">guarantee</span> <span class="token punctuation">(</span>_owner <span class="token operator">!=</span> Self<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

   <span class="token comment">// The thread is on the WaitSet list - now park() it.</span>
   <span class="token comment">// On MP systems it&#39;s conceivable that a brief spin before we park</span>
   <span class="token comment">// could be profitable.</span>
   <span class="token comment">//</span>
   <span class="token comment">// TODO-FIXME: change the following logic to a loop of the form</span>
   <span class="token comment">//   while (!timeout &amp;&amp; !interrupted &amp;&amp; _notified == 0) park()</span>

   <span class="token keyword">int</span> ret <span class="token operator">=</span> OS_OK <span class="token punctuation">;</span>
   <span class="token keyword">int</span> WasNotified <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
   <span class="token punctuation">{</span> <span class="token comment">// State transition wrappers</span>
     OSThread<span class="token operator">*</span> osthread <span class="token operator">=</span> Self<span class="token operator">-&gt;</span><span class="token function">osthread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     OSThreadWaitState <span class="token function">osts</span><span class="token punctuation">(</span>osthread<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">{</span>
       ThreadBlockInVM <span class="token function">tbivm</span><span class="token punctuation">(</span>jt<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// Thread is in thread_blocked state and oop access is unsafe.</span>
       jt<span class="token operator">-&gt;</span><span class="token function">set_suspend_equivalent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptible <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">is_interrupted</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">||</span> HAS_PENDING_EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// Intentionally empty</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>_notified <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Self<span class="token operator">-&gt;</span>_ParkEvent<span class="token operator">-&gt;</span><span class="token function">park</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            ret <span class="token operator">=</span> Self<span class="token operator">-&gt;</span>_ParkEvent<span class="token operator">-&gt;</span><span class="token function">park</span> <span class="token punctuation">(</span>millis<span class="token punctuation">)</span> <span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>

       <span class="token comment">// were we externally suspended while we were waiting?</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ExitSuspendEquivalent</span> <span class="token punctuation">(</span>jt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// TODO-FIXME: add -- if succ == Self then succ = null.</span>
          jt<span class="token operator">-&gt;</span><span class="token function">java_suspend_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

     <span class="token punctuation">}</span> <span class="token comment">// Exit thread safepoint: transition _thread_blocked -&gt; _thread_in_vm</span>


     <span class="token comment">// Node may be on the WaitSet, the EntryList (or cxq), or in transition</span>
     <span class="token comment">// from the WaitSet to the EntryList.</span>
     <span class="token comment">// See if we need to remove Node from the WaitSet.</span>
     <span class="token comment">// We use double-checked locking to avoid grabbing _WaitSetLock</span>
     <span class="token comment">// if the thread is not on the wait queue.</span>
     <span class="token comment">//</span>
     <span class="token comment">// Note that we don&#39;t need a fence before the fetch of TState.</span>
     <span class="token comment">// In the worst case we&#39;ll fetch a old-stale value of TS_WAIT previously</span>
     <span class="token comment">// written by the is thread. (perhaps the fetch might even be satisfied</span>
     <span class="token comment">// by a look-aside into the processor&#39;s own store buffer, although given</span>
     <span class="token comment">// the length of the code path between the prior ST and this load that&#39;s</span>
     <span class="token comment">// highly unlikely).  If the following LD fetches a stale TS_WAIT value</span>
     <span class="token comment">// then we&#39;ll acquire the lock and then re-fetch a fresh TState value.</span>
     <span class="token comment">// That is, we fail toward safety.</span>
     
     <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>TState <span class="token operator">==</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_WAIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">SpinAcquire</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>_WaitSetLock<span class="token punctuation">,</span> <span class="token string">&quot;WaitSet - unlink&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>TState <span class="token operator">==</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_WAIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">DequeueSpecificWaiter</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>node<span class="token punctuation">)</span> <span class="token punctuation">;</span>       <span class="token comment">// unlink from WaitSet</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>_notified <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>TState <span class="token operator">=</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_RUN <span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">SpinRelease</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>_WaitSetLock<span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token comment">// The thread is now either on off-list (TS_RUN),</span>
     <span class="token comment">// on the EntryList (TS_ENTER), or on the cxq (TS_CXQ).</span>
     <span class="token comment">// The Node&#39;s TState variable is stable from the perspective of this thread.</span>
     <span class="token comment">// No other threads will asynchronously modify TState.</span>
     <span class="token function">guarantee</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>TState <span class="token operator">!=</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_WAIT<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token class-name">OrderAccess</span><span class="token double-colon punctuation">::</span><span class="token function">loadload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>_succ <span class="token operator">==</span> Self<span class="token punctuation">)</span> _succ <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>
     WasNotified <span class="token operator">=</span> node<span class="token punctuation">.</span>_notified <span class="token punctuation">;</span>

     <span class="token comment">// Reentry phase -- reacquire the monitor.</span>
     <span class="token comment">// re-enter contended monitor after object.wait().</span>
     <span class="token comment">// retain OBJECT_WAIT state until re-enter successfully completes</span>
     <span class="token comment">// Thread state is thread_in_vm and oop access is again safe,</span>
     <span class="token comment">// although the raw address of the object may have changed.</span>
     <span class="token comment">// (Don&#39;t cache naked oops over safepoints, of course).</span>

     <span class="token comment">// post monitor waited event. Note that this is past-tense, we are done waiting.</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">JvmtiExport</span><span class="token double-colon punctuation">::</span><span class="token function">should_post_monitor_waited</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">JvmtiExport</span><span class="token double-colon punctuation">::</span><span class="token function">post_monitor_waited</span><span class="token punctuation">(</span>jt<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> ret <span class="token operator">==</span> OS_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>_notified <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> _succ <span class="token operator">==</span> Self<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// In this part of the monitor wait-notify-reenter protocol it</span>
         <span class="token comment">// is possible (and normal) for another thread to do a fastpath</span>
         <span class="token comment">// monitor enter-exit while this thread is still trying to get</span>
         <span class="token comment">// to the reenter portion of the protocol.</span>
         <span class="token comment">//</span>
         <span class="token comment">// The ObjectMonitor was notified and the current thread is</span>
         <span class="token comment">// the successor which also means that an unpark() has already</span>
         <span class="token comment">// been done. The JVMTI_EVENT_MONITOR_WAITED event handler can</span>
         <span class="token comment">// consume the unpark() that was done when the successor was</span>
         <span class="token comment">// set because the same ParkEvent is shared between Java</span>
         <span class="token comment">// monitors and JVM/TI RawMonitors (for now).</span>
         <span class="token comment">//</span>
         <span class="token comment">// We redo the unpark() to ensure forward progress, i.e., we</span>
         <span class="token comment">// don&#39;t want all pending threads hanging (parked) with none</span>
         <span class="token comment">// entering the unlocked monitor.</span>
         node<span class="token punctuation">.</span>_event<span class="token operator">-&gt;</span><span class="token function">unpark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>

     <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">should_commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">post_monitor_wait_event</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token punctuation">,</span> node<span class="token punctuation">.</span>_notifier_tid<span class="token punctuation">,</span> millis<span class="token punctuation">,</span> ret <span class="token operator">==</span> OS_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token class-name">OrderAccess</span><span class="token double-colon punctuation">::</span><span class="token function">fence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

     <span class="token function">assert</span> <span class="token punctuation">(</span>Self<span class="token operator">-&gt;</span>_Stalled <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     Self<span class="token operator">-&gt;</span>_Stalled <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>

     <span class="token function">assert</span> <span class="token punctuation">(</span>_owner <span class="token operator">!=</span> Self<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     ObjectWaiter<span class="token double-colon punctuation">::</span>TStates v <span class="token operator">=</span> node<span class="token punctuation">.</span>TState <span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_RUN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token function">enter</span> <span class="token punctuation">(</span>Self<span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
         <span class="token function">guarantee</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_ENTER <span class="token operator">||</span> v <span class="token operator">==</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_CXQ<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
         <span class="token function">ReenterI</span> <span class="token punctuation">(</span>Self<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">)</span> <span class="token punctuation">;</span>
         node<span class="token punctuation">.</span><span class="token function">wait_reenter_end</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token comment">// Self has reacquired the lock.</span>
     <span class="token comment">// Lifecycle - the node representing Self must not appear on any queues.</span>
     <span class="token comment">// Node is about to go out-of-scope, but even if it were immortal we wouldn&#39;t</span>
     <span class="token comment">// want residual elements associated with this thread left on any lists.</span>
     <span class="token function">guarantee</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>TState <span class="token operator">==</span> ObjectWaiter<span class="token double-colon punctuation">::</span>TS_RUN<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token function">assert</span>    <span class="token punctuation">(</span>_owner <span class="token operator">==</span> Self<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
     <span class="token function">assert</span>    <span class="token punctuation">(</span>_succ <span class="token operator">!=</span> Self <span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token comment">// OSThreadWaitState()</span>

   jt<span class="token operator">-&gt;</span><span class="token function">set_current_waiting_monitor</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token function">guarantee</span> <span class="token punctuation">(</span>_recursions <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
   _recursions <span class="token operator">=</span> save<span class="token punctuation">;</span>     <span class="token comment">// restore the old recursion count</span>
   _waiters<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token comment">// decrement the number of waiters</span>

   <span class="token comment">// Verify a few postconditions</span>
   <span class="token function">assert</span> <span class="token punctuation">(</span>_owner <span class="token operator">==</span> Self       <span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
   <span class="token function">assert</span> <span class="token punctuation">(</span>_succ  <span class="token operator">!=</span> Self       <span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
   <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>oop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> markOopDesc<span class="token double-colon punctuation">::</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

   <span class="token keyword">if</span> <span class="token punctuation">(</span>SyncFlags <span class="token operator">&amp;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">OrderAccess</span><span class="token double-colon punctuation">::</span><span class="token function">fence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// check if the notification happened</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>WasNotified<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// no, it could be timeout or Thread.interrupt() or both</span>
     <span class="token comment">// check for interrupt event, otherwise it is timeout</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptible <span class="token operator">&amp;&amp;</span> <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">is_interrupted</span><span class="token punctuation">(</span>Self<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>HAS_PENDING_EXCEPTION<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">TEVENT</span> <span class="token punctuation">(</span>Wait <span class="token operator">-</span> <span class="token keyword">throw</span> IEX from epilog<span class="token punctuation">)</span> <span class="token punctuation">;</span>
       <span class="token function">THROW</span><span class="token punctuation">(</span>vmSymbols<span class="token double-colon punctuation">::</span><span class="token function">java_lang_InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// NOTE: Spurious wake up will be consider as timeout.</span>
   <span class="token comment">// Monitor notify has precedence over thread interrupt.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法创建一个ObjectWaiter对象，接着获取_WaitSet队列锁将ObjectWaiter对象添加到该队列中，再释放队列锁。另外，它还会释放synchronized对应的锁，所以锁没有等到synchronized同步块结束时才释放。</p><h3 id="_2-10-finalize方法" tabindex="-1"><a class="header-anchor" href="#_2-10-finalize方法" aria-hidden="true">#</a> 2.10 finalize方法</h3><p>finalize方法的主要作用为：当垃圾回收确定对象不再有引用时，由垃圾回收器在对象上调用。子类重写finalize方法以处理系统资源或执行其他清理。<br> Java并不保证哪个线程将调用给定对象的finalize方法。但是，可以保证调用finalize的线程在调用finalize时不会持有任何用户可见的同步锁。如果finalize方法抛出了一个未捕获的异常，则该异常将被忽略，该对象的终结将终止。<br> 在为对象调用finalize方法之后，不会采取进一步的操作，直到Java虚拟机再次确定没有任何方法可以让任何尚未死亡的线程访问该对象，包括其他对象或准备完成的类可能的操作，此时对象可能会被丢弃。<br> 对于任何给定的对象，Java虚拟机只调用finalize方法一次。</p>`,39);function m(b,h){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[k,n("li",null,[n("ol",r,[n("li",null,[s("Thread state combined with xorshift ("),n("a",d,[s("https://en.wikipedia.org/wiki/Xorshift"),i(t)]),s(")")])])])]),v])}const _=p(l,[["render",m],["__file","Object.html.vue"]]);export{_ as default};
