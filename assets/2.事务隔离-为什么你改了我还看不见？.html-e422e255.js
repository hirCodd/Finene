import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,f as l}from"./app-297e668d.js";const t={},o=l('<h1 id="事务隔离" tabindex="-1"><a class="header-anchor" href="#事务隔离" aria-hidden="true">#</a> 事务隔离</h1><h2 id="_1-隔离性与隔离级别" tabindex="-1"><a class="header-anchor" href="#_1-隔离性与隔离级别" aria-hidden="true">#</a> 1.隔离性与隔离级别</h2><h3 id="_1-1-隔离性-acid" tabindex="-1"><a class="header-anchor" href="#_1-1-隔离性-acid" aria-hidden="true">#</a> 1.1 隔离性：ACID</h3><h3 id="_1-2-隔离级别" tabindex="-1"><a class="header-anchor" href="#_1-2-隔离级别" aria-hidden="true">#</a> 1.2 隔离级别</h3><ul><li>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20210325152903594.png" alt="image-20210325152903594" tabindex="0" loading="lazy"><figcaption>image-20210325152903594</figcaption></figure><ul><li>若隔离级别是“读未提交”， 则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2。</li><li>若隔离级别是“读提交”，则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。</li><li>若隔离级别是“可重复读”，则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：<strong>事务在执行期间看到的数据前后必须是一致的。</strong></li><li>若隔离级别是“串行化”，则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。</li></ul><p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁的方式来避免并行访问。</p><h3 id="_1-3-事务的启动方式" tabindex="-1"><a class="header-anchor" href="#_1-3-事务的启动方式" aria-hidden="true">#</a> 1.3 事务的启动方式</h3><ol><li><strong>显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。</strong></li><li>**set autocommit=0，这个命令会将这个线程的自动提交关掉。**意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。</li></ol><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20210325155703254.png" alt="image-20210325155703254" tabindex="0" loading="lazy"><figcaption>image-20210325155703254</figcaption></figure><p>建议你总是使用 set autocommit=1, 通过显式语句的方式来启动事务。</p><p>在 autocommit 为 1 的情况下，用 begin 显式启动的事务，如果执行 commit 则提交事务。如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省去了再次执行 begin 语句的开销。同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中。</p><h3 id="_1-4-如何避免长事务对业务的影响" tabindex="-1"><a class="header-anchor" href="#_1-4-如何避免长事务对业务的影响" aria-hidden="true">#</a> 1.4 如何避免长事务对业务的影响？</h3><p><strong>首先，从应用开发端来看：</strong></p><ol><li>确认是否使用了 set autocommit=0。这个确认工作可以在测试环境中开展，把 MySQL 的 general_log 开起来，然后随便跑一个业务逻辑，通过 general_log 的日志来确认。一般框架如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它改成 1。</li><li>确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin/commit 框起来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中。这种只读事务可以去掉。</li><li>业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。（为什么会意外？在后续的文章中会提到这类案例）</li></ol><p><strong>其次，从数据库端来看：</strong></p><ol><li>监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill；</li><li>Percona 的 pt-kill 这个工具不错，推荐使用；</li><li>在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；</li><li>如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。</li></ol>',18),n=[o];function r(c,_){return a(),e("div",null,n)}const h=i(t,[["render",r],["__file","2.事务隔离-为什么你改了我还看不见？.html.vue"]]);export{h as default};
