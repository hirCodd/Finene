import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as l,b as e,d as a,e as i,f as n}from"./app-9b1c5904.js";const r={},d=n(`<h1 id="_1-jvm终结篇" tabindex="-1"><a class="header-anchor" href="#_1-jvm终结篇" aria-hidden="true">#</a> 1 JVM终结篇</h1><h2 id="_1-1-重新认知jvm" tabindex="-1"><a class="header-anchor" href="#_1-1-重新认知jvm" aria-hidden="true">#</a> 1.1 重新认知JVM</h2><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/jvm-file.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-2-gc优化" tabindex="-1"><a class="header-anchor" href="#_1-2-gc优化" aria-hidden="true">#</a> 1.2 GC优化</h2><blockquote><p>内存被使用了之后，难免会有不够用或者达到设定值的时候，就需要对内存空间进行垃圾回收。</p></blockquote><h3 id="_1-2-1-垃圾收集发生的时机" tabindex="-1"><a class="header-anchor" href="#_1-2-1-垃圾收集发生的时机" aria-hidden="true">#</a> 1.2.1 垃圾收集发生的时机</h3><blockquote><p>GC是由JVM自动完成的，根据JVM系统环境而定，所以时机是不确定的。 当然，我们可以手动进行垃圾回收， 比如调用System.gc()方法通知JVM进行一次垃圾回收，但是具体什么时刻运行也无法控制。也就是说 System.gc()只是通知要回收，什么时候回收由JVM决定。 但是不建议手动调用该方法，因为消耗的资源比较 大。</p></blockquote><p>一般以下几种情况会发生垃圾回收:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>（1）当Eden区或者S区不够用了
（2）老年代空间不够用了
（3）方法区空间不够用了
（4）System.gc()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-2-实验环境准备" tabindex="-1"><a class="header-anchor" href="#_1-2-2-实验环境准备" aria-hidden="true">#</a> 1.2.2 实验环境准备</h3><h3 id="_1-2-3-gc日志文件" tabindex="-1"><a class="header-anchor" href="#_1-2-3-gc日志文件" aria-hidden="true">#</a> 1.2.3 GC日志文件</h3><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310232235655.png" alt="image-20220310232235655" tabindex="0" loading="lazy"><figcaption>image-20220310232235655</figcaption></figure><blockquote><p>要想分析日志的信息，得先拿到GC日志文件才行，所以得先配置一下，之前也看过这些参数。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps
-Xloggc:gc.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后启动项目，可以看到默认使用的是ParallelGC</p><h4 id="_1-2-3-1-parallel-gc日志" tabindex="-1"><a class="header-anchor" href="#_1-2-3-1-parallel-gc日志" aria-hidden="true">#</a> 1.2.3.1 Parallel GC日志</h4><blockquote><p>【吞吐量优先】</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2019-06-10T23:21:53.305+0800: 1.303:
[GC (Allocation Failure) [PSYoungGen: 65536K[Young区回收前]-&gt;10748K[Young区回收后]
(76288K[Young区总大小])] 65536K[整个堆回收前]-&gt;15039K[整个堆回收后](251392K[整个堆总大小]),
0.0113277 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 如果回收的差值中间有出入，说明这部分空间是Old区释放出来的</p></blockquote><h4 id="_1-2-3-2-cms日志" tabindex="-1"><a class="header-anchor" href="#_1-2-3-2-cms日志" aria-hidden="true">#</a> 1.2.3.2 CMS日志</h4><blockquote><p>【停顿时间优先】</p><p>参数设置：-XX:+UseConcMarkSweepGC -Xloggc:cms-gc.log</p></blockquote><h4 id="_1-2-3-3-g1日志" tabindex="-1"><a class="header-anchor" href="#_1-2-3-3-g1日志" aria-hidden="true">#</a> 1.2.3.3 G1日志</h4>`,20),g=e("p",null,"【停顿时间优先】",-1),p=e("p",null,"参数设置：-XX:+UseG1GC -Xloggc:g1-gc.log",-1),u={href:"https://blogs.oracle.com/poonam/understanding-g1-gc-logs",target:"_blank",rel:"noopener noreferrer"},m=n(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:+UseG1GC</span> <span class="token comment"># 使用了G1垃圾收集器</span>
<span class="token comment"># 什么时候发生的GC，相对的时间刻，GC发生的区域young，总共花费的时间，0.00478s，</span>
<span class="token comment"># It is a stop-the-world activity and all</span>
<span class="token comment"># the application threads are stopped at a safepoint during this time.</span>
<span class="token number">2019</span>-12-18T16:06:46.508+0800: <span class="token number">0.458</span>: <span class="token punctuation">[</span>GC pause <span class="token punctuation">(</span>G1 Evacuation Pause<span class="token punctuation">)</span> <span class="token punctuation">(</span>young<span class="token punctuation">)</span>,
<span class="token number">0.0047804</span> secs<span class="token punctuation">]</span>
<span class="token comment"># 多少个垃圾回收线程，并行的时间</span>
<span class="token punctuation">[</span>Parallel Time: <span class="token number">3.0</span> ms, GC Workers: <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token comment"># GC线程开始相对于上面的0.458的时间刻</span>
<span class="token punctuation">[</span>GC Worker Start <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>: Min: <span class="token number">458.5</span>, Avg: <span class="token number">458.5</span>, Max: <span class="token number">458.5</span>, Diff: <span class="token number">0.0</span><span class="token punctuation">]</span>
<span class="token comment"># This gives us the time spent by each worker thread scanning the roots</span>
<span class="token comment"># (globals, registers, thread stacks and VM data structures).</span>
<span class="token punctuation">[</span>Ext Root Scanning <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>: Min: <span class="token number">0.2</span>, Avg: <span class="token number">0.4</span>, Max: <span class="token number">0.7</span>, Diff: <span class="token number">0.5</span>, Sum: <span class="token number">1.7</span><span class="token punctuation">]</span>
<span class="token comment"># Update RS gives us the time each thread spent in updating the Remembered Sets.</span>
<span class="token punctuation">[</span>Update RS <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>: Min: <span class="token number">0.0</span>, Avg: <span class="token number">0.0</span>, Max: <span class="token number">0.0</span>, Diff: <span class="token number">0.0</span>, Sum: <span class="token number">0.0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),h=e("h3",{id:"_1-2-4-gc日志文件分析工具",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-2-4-gc日志文件分析工具","aria-hidden":"true"},"#"),a(" 1.2.4 GC日志文件分析工具")],-1),v=e("h4",{id:"_1-2-4-1-gceasy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-2-4-1-gceasy","aria-hidden":"true"},"#"),a(" 1.2.4.1 gceasy")],-1),b={href:"https://gceasy.io",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"可以比较不同的垃圾收集器的吞吐量和停顿时间",-1),_=e("p",null,"比如打开cms-gc.log和g1-gc.log",-1),x=n('<figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310232816712.png" alt="image-20220310232816712" tabindex="0" loading="lazy"><figcaption>image-20220310232816712</figcaption></figure><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310232830568.png" alt="image-20220310232830568" tabindex="0" loading="lazy"><figcaption>image-20220310232830568</figcaption></figure><h4 id="_1-2-4-2-gcviewer" tabindex="-1"><a class="header-anchor" href="#_1-2-4-2-gcviewer" aria-hidden="true">#</a> 1.2.4.2 GCViewer</h4><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310232844104.png" alt="image-20220310232844104" tabindex="0" loading="lazy"><figcaption>image-20220310232844104</figcaption></figure><h3 id="_1-2-5-g1调优与最佳指南" tabindex="-1"><a class="header-anchor" href="#_1-2-5-g1调优与最佳指南" aria-hidden="true">#</a> 1.2.5 G1调优与最佳指南</h3><h4 id="_1-2-5-1-调优" tabindex="-1"><a class="header-anchor" href="#_1-2-5-1-调优" aria-hidden="true">#</a> 1.2.5.1 调优</h4>',6),k=e("p",null,"是否选用G1垃圾收集器的判断依据",-1),G={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/G1.html#use_cases",target:"_blank",rel:"noopener noreferrer"},C=n(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>（1）50%以上的堆被存活对象占用
（2）对象分配和晋升的速度变化非常大
（3）垃圾回收时间比较长
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y={href:"https://blogs.oracle.com/poonam/increased-heap-usage-with-g1-gc",target:"_blank",rel:"noopener noreferrer"},X=n(`<p>(1)使用G1GC垃圾收集器: -XX:+UseG1GC</p><p>修改配置参数，获取到gc日志，使用GCViewer分析吞吐量和响应时间</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310233115552.png" alt="image-20220310233115552" tabindex="0" loading="lazy"><figcaption>image-20220310233115552</figcaption></figure><p>(2)调整内存大小再获取gc日志分析</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:MetaspaceSize=100M
-Xms300M
-Xmx300M
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如设置堆内存的大小，获取到gc日志，使用GCViewer分析吞吐量和响应时间</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310233227857.png" alt="image-20220310233227857" tabindex="0" loading="lazy"><figcaption>image-20220310233227857</figcaption></figure><p>(3)调整最大停顿时间</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:MaxGCPauseMillis=20 设置最大GC停顿时间指标
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如设置最大停顿时间，获取到gc日志，使用GCViewer分析吞吐量和响应时间</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310233319130.png" alt="image-20220310233319130" tabindex="0" loading="lazy"><figcaption>image-20220310233319130</figcaption></figure><p>(4)启动并发GC时堆内存占用百分比</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:InitiatingHeapOccupancyPercent=45 G1用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比例。值为 0 则表示“一直执行GC循环)&#39;. 默认值为 45 (例如, 全部的 45% 或者使用了45%).
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如设置该百分比参数，获取到gc日志，使用GCViewer分析吞吐量和响应时间</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220310233428017.png" alt="image-20220310233428017" tabindex="0" loading="lazy"><figcaption>image-20220310233428017</figcaption></figure><h4 id="_1-2-5-2-最佳指南" tabindex="-1"><a class="header-anchor" href="#_1-2-5-2-最佳指南" aria-hidden="true">#</a> 1.2.5.2 最佳指南</h4>`,16),M={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc_tuning.html#recommendations",target:"_blank",rel:"noopener noreferrer"},q=n(`<p><strong>(1)不要手动设置新生代和老年代的大小，只要设置整个堆的大小</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>G1收集器在运行过程中，会自己调整新生代和老年代的大小其实是通过adapt代的大小来调整对象晋升的速度和年龄，从而达到为收集器设置的暂停时间目标

如果手动设置了大小就意味着放弃了G1的自动调优
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(2)不断调优暂停时间目标</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>一般情况下这个值设置到100ms或者200ms都是可以的(不同情况下会不一样)，但如果设置成50ms就不太合理。暂停时间设置的太短，就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态。暂停时间只是一个目标，并不能总是得到满足。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>(3)使用-XX:ConcGCThreads=n来增加标记线程的数量</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>IHOP如果阀值设置过高，可能会遇到转移失败的风险，比如对象进行转移时空间不足。如果阀值设置过低，就会使标记周期运行过于频繁，并且有可能混合收集期回收不到空间。

IHOP值如果设置合理，但是在并发周期时间过长时，可以尝试增加并发线程数，调高ConcGCThreads。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(4)MixedGC调优</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:InitiatingHeapOccupancyPercent
-XX:G1MixedGCLiveThresholdPercent
-XX:G1MixedGCCountTarger
-XX:G1OldCSetRegionThresholdPercent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(5)适当增加堆内存大小</p><h2 id="_1-3-高并发场景分析" tabindex="-1"><a class="header-anchor" href="#_1-3-高并发场景分析" aria-hidden="true">#</a> 1.3 高并发场景分析</h2><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220311001043190.png" alt="image-20220311001043190" tabindex="0" loading="lazy"><figcaption>image-20220311001043190</figcaption></figure><h2 id="_1-4-jvm性能优化指南" tabindex="-1"><a class="header-anchor" href="#_1-4-jvm性能优化指南" aria-hidden="true">#</a> 1.4 JVM性能优化指南</h2><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/JVM性能优化.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-5-常见问题思考" tabindex="-1"><a class="header-anchor" href="#_1-5-常见问题思考" aria-hidden="true">#</a> 1.5 常见问题思考</h2><p><strong>（1）内存泄漏与内存溢出的区别</strong></p><p>内存泄漏：对象无法得到及时的回收，持续占用内存空间，从而造成内存空间的浪费。</p><p>内存溢出：内存泄漏到一定的程度就会导致内存溢出，但是内存溢出也有可能是大对象导致的。</p><p><strong>（2）young gc会有stw吗？</strong></p><p>不管什么 GC，都会有 stop-the-world，只是发生时间的长短。</p><p><strong>（3）major gc和full gc的区别</strong></p><p><strong>major gc指的是老年代的gc，而full gc等于young+old+metaspace的gc。</strong></p><p><strong>（4）G1与CMS的区别是什么</strong></p><p>CMS 用于老年代的回收，而 G1 用于新生代和老年代的回收。 G1 使用了 Region 方式对堆内存进行了划分，且基于标记整理算法实现，整体减少了垃圾碎片的产生。</p><p><strong>（5）什么是直接内存</strong></p><p>直接内存是在java堆外的、直接向系统申请的内存空间。通常访问直接内存的速度会优于Java堆。因此出于性能的考 虑，读写频繁的场合可能会考虑使用直接内存。</p><p><strong>（6）不可达的对象一定要被回收吗？</strong></p><p>即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对 象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此 对象是否有必要执行 finalize 方法。当对象没有覆盖 finalize 方法，或 finalize 方法已经被虚拟机调用过时，虚拟机 将这两种情况视为没有必要执行。 被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关 联，否则就会被真的回收。</p><p><strong>（7）方法区中的无用类回收</strong></p><p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？ 判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满 足下面 3 个条件才能算是 “无用的类” ： 该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。 加载该类的 ClassLoader 已经被回收。 该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。 虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然 被回收。</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220311003339439.png" alt="image-20220311003339439" tabindex="0" loading="lazy"><figcaption>image-20220311003339439</figcaption></figure><p><strong>（8）不同的引用</strong></p><p>JDK1.2以后，Java对引用进行了扩充：强引用、软引用、弱引用和虚引用</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220311002742261.png" alt="image-20220311002742261" tabindex="0" loading="lazy"><figcaption>image-20220311002742261</figcaption></figure><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220311002930038.png" alt="image-20220311002930038" tabindex="0" loading="lazy"><figcaption>image-20220311002930038</figcaption></figure><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/image-20220311003005058.png" alt="image-20220311003005058" tabindex="0" loading="lazy"><figcaption>image-20220311003005058</figcaption></figure>`,35);function w(S,V){const s=c("ExternalLinkIcon");return o(),l("div",null,[d,e("blockquote",null,[g,p,e("p",null,[a("理解G1日志格式："),e("a",u,[a("https://blogs.oracle.com/poonam/understanding-g1-gc-logs"),i(s)])]),m]),h,v,e("blockquote",null,[e("p",null,[a("官网 ："),e("a",b,[a("https://gceasy.io"),i(s)])]),f,_]),x,e("blockquote",null,[k,e("p",null,[e("a",G,[a("https://docs.oracle.com/javase/8/docs/technotes/guides/vm/G1.html#use_cases"),i(s)])]),C,e("p",null,[a("思考 ："),e("a",y,[a("https://blogs.oracle.com/poonam/increased-heap-usage-with-g1-gc"),i(s)])])]),X,e("blockquote",null,[e("p",null,[a("官网建议 ："),e("a",M,[a("https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc_tuning.html#recommendations"),i(s)])])]),q])}const P=t(r,[["render",w],["__file","JVM-5.html.vue"]]);export{P as default};
