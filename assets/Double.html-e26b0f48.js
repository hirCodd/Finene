import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-9c62f8e6.js";const p={},t=e(`<h2 id="_1-类图" tabindex="-1"><a class="header-anchor" href="#_1-类图" aria-hidden="true">#</a> 1.类图</h2><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/Double.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-存储位置" tabindex="-1"><a class="header-anchor" href="#_2-存储位置" aria-hidden="true">#</a> 2.存储位置</h2><ul><li>Double类中的静态属性存储在方法区中的静态区。</li><li>通过new Double()方法创建出来的对象存储在堆区。</li></ul><h2 id="_3-了解ieee-754" tabindex="-1"><a class="header-anchor" href="#_3-了解ieee-754" aria-hidden="true">#</a> 3.了解IEEE 754</h2><h3 id="_3-1-ieee-754简介" tabindex="-1"><a class="header-anchor" href="#_3-1-ieee-754简介" aria-hidden="true">#</a> 3.1 IEEE 754简介</h3><p>该标准定义了浮点数的格式还有一些特殊值，它规定了计算机中二进制与十进制浮点数转换的格式及方法。规定了四种表示浮点数值的方法，单精确度（32位）、双精确度（64位）、延伸单精确度（43位以上）与延伸双精确度（79位以上）。<br> 多数编程语言支持单精确度和双精确度，该标准的全称为IEEE二进制浮点数算术标准（ANSI/IEEE Std 754-1985），又称IEC 60559:1989，微处理器系统的二进制浮点数算术（本来的编号是IEC 559:1989）。后来还有“与基数无关的浮点数”的“IEEE 854-1987标准”，有规定基数为2跟10的状况。最新标准是“ISO/IEC/IEEE FDIS 60559:2010”。<br> Double就是Java的双精度实现。</p><h3 id="_3-2-ieee-754单精度浮点数表示" tabindex="-1"><a class="header-anchor" href="#_3-2-ieee-754单精度浮点数表示" aria-hidden="true">#</a> 3.2 IEEE 754单精度浮点数表示</h3><p>IEEE-754双精度浮点数(double floating-point)存储为64bit，由符号位(s)、有偏指数(e)、小数部分(f)组成：</p><figure><img src="https://new-blog-1251602255.cos.ap-shanghai.myqcloud.com/img/27925458-c5c2184a0e5896bf.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>组成</th><th>描述</th><th>位数</th><th>位置</th></tr></thead><tbody><tr><td>sign</td><td>符号，0表示正，1表示负</td><td>1bit</td><td>63</td></tr><tr><td>exponent</td><td>指数部分</td><td>11bit</td><td>52-62</td></tr><tr><td>fraction</td><td>小数部分</td><td>52bit</td><td>0-51</td></tr></tbody></table><p>11位的指数部分可存储00000000000 ~ 11111111111（十进制范围为0 ~ 2047），取值可分为3种情况：</p><p>11位指数不为00000000000和11111111111，即在00000000001 ~ 11111111110（1 ~ 2046）范围，这被称为规格化。<br> 指数值为00000000000（0），这被称为非规格化<br> 指数值为11111111111（2047），这是特殊值，有两种情况：<br> 当52位小数部分f全为0时，若符号位是0，则表示+Infinity(正无穷)，若符号位是1，则表示-Infinity(负无穷)<br> 当52位小数部分f不全为0时，表示NaN(Not a Number)</p><h3 id="_3-1-属性说明" tabindex="-1"><a class="header-anchor" href="#_3-1-属性说明" aria-hidden="true">#</a> 3.1 属性说明</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Double</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 用来表示正无穷大，按照IEEE 754浮点标准规定，任何有限正数除以0为正无穷大，正无穷的值为0x7ff0000000000000L。
     * System.out.println(Double.POSITIVE_INFINITY == Double.longBitsToDouble(0x7ff0000000000000L)); =&gt; true
     * System.out.println(Double.POSITIVE_INFINITY); =&gt; Infinity
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">POSITIVE_INFINITY</span> <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * 用来表示负无穷大，任何有限负数除以0为负无穷的，负无穷的值为(0xfff0000000000000L)。
     * System.out.println(Double.NEGATIVE_INFINITY == Double.longBitsToDouble(0xfff0000000000000L)); =&gt; true
     * System.out.println(Double.NEGATIVE_INFINITY); =&gt; -Infinity
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">NEGATIVE_INFINITY</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * NaN 用来表示处理计算中出现的错误情况，比如0除以0或负数平方根。对于单精度浮点数，IEEE 标准规定 NaN 的指数域全为 1，且尾数域不等于零的浮点数。它并没有要求具体的尾数域，所以 NaN 实际上不非是一个，而是一族。Java这里定义的值为0x7ff8000000000000L。
     * System.out.println(Double.isNaN(Double.longBitsToDouble(0x7ff8000000000000L))); // true
     * System.out.println(Double.longBitsToDouble(0x7ff8000000000000L)); // NaN
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token class-name">NaN</span> <span class="token operator">=</span> <span class="token number">0.0d</span> <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * MAX_VALUE 用来表示Double的最大值
     * System.out.println(Double.MAX_VALUE == Double.longBitsToDouble(0x7fefffffffffffffL)); // true
     * System.out.println(Double.longBitsToDouble(0x7fefffffffffffffL)); //1.7976931348623157E308
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">MAX_VALUE</span> <span class="token operator">=</span> <span class="token number">0x1.fffffffffffffP+1023</span><span class="token punctuation">;</span> <span class="token comment">// 1.7976931348623157e+308</span>

    <span class="token doc-comment comment">/**
     * 保持 double -1022类型的最小正正常值的常量。
     * System.out.println(Double.MIN_NORMAL == Double.longBitsToDouble(0x0010000000000000L)); // true
     * <span class="token keyword">@since</span> 1.6
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">MIN_NORMAL</span> <span class="token operator">=</span> <span class="token number">0x1.0p-1022</span><span class="token punctuation">;</span> <span class="token comment">// 2.2250738585072014E-308</span>

    <span class="token doc-comment comment">/**
     * 保持 double类型的最小正非零值的常量, 2^-1074
     * System.out.println(Double.MIN_VALUE == Double.longBitsToDouble(0x1L)); // true
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">MIN_VALUE</span> <span class="token operator">=</span> <span class="token number">0x0.0000000000001P-1022</span><span class="token punctuation">;</span> <span class="token comment">// 4.9e-324</span>

    <span class="token doc-comment comment">/**
     * Double类型的最大可能的指数值
     * System.out.println(Double.MAX_EXPONENT == Math.getExponent(Double.MAX_VALUE)); // true
     * System.out.println(Double.MAX_EXPONENT); // 1023
     * System.out.println(Math.getExponent(Double.MAX_VALUE)); // 1023
     *
     * <span class="token keyword">@since</span> 1.6
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_EXPONENT</span> <span class="token operator">=</span> <span class="token number">1023</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Double类型的最小指数值
     * System.out.println(Double.MIN_EXPONENT == Math.getExponent(Double.MIN_NORMAL)); // true
     * System.out.println(Double.MIN_EXPONENT); // -1022
     * System.out.println(Math.getExponent(Double.MIN_NORMAL)); // -1022
     *
     * <span class="token keyword">@since</span> 1.6
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_EXPONENT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1022</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 用于表示 double值的位数。
     *
     * <span class="token keyword">@since</span> 1.5
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SIZE</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 用于表示 double值所占用的字节数。
     *
     * <span class="token keyword">@since</span> 1.8
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BYTES</span> <span class="token operator">=</span> <span class="token constant">SIZE</span> <span class="token operator">/</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token constant">SIZE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-方法说明" tabindex="-1"><a class="header-anchor" href="#_3-2-方法说明" aria-hidden="true">#</a> 3.2 方法说明</h3><h4 id="_3-2-1-double构造方法" tabindex="-1"><a class="header-anchor" href="#_3-2-1-double构造方法" aria-hidden="true">#</a> 3.2.1 Double构造方法</h4><p>Double的构造方法有2哥，分别是将String类型的数字转为Double类型和将双精度浮点数double数装箱为Double类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Double</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token function">parseDouble</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-valueof方法" tabindex="-1"><a class="header-anchor" href="#_3-2-2-valueof方法" aria-hidden="true">#</a> 3.2.2 valueOf方法</h4><p>valueOf方法有两个，一个将String类型的数字转为Double类型的数字和将double数字装箱为Double类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Double</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-parsedouble方法" tabindex="-1"><a class="header-anchor" href="#_3-2-3-parsedouble方法" aria-hidden="true">#</a> 3.2.3 parseDouble方法</h4><p>parseDouble是将字符串类型转为双精度浮点数。valueOf与parseDouble的区别在于valueOf返回Double类型，而parseDouble返回double，valueOf在返回的时候用了构造方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Double</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">FloatingDecimal</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-4-isinfinite方法与isfinite方法" tabindex="-1"><a class="header-anchor" href="#_3-2-4-isinfinite方法与isfinite方法" aria-hidden="true">#</a> 3.2.4 isInfinite方法与isFinite方法</h4><p>isInfinite:如果此对象表示的值是正无穷大或负无穷大，则返回 true；否则返回false。</p><p>isFinite:确定指定值是否为有限值（零、不正常或正常）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Double</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isInfinite</span><span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NEGATIVE_INFINITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isInfinite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">isInfinite</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token class-name">DoubleConsts</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">isInfinite</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">&quot;Infinite or NaN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-5-doubletolongbits方法" tabindex="-1"><a class="header-anchor" href="#_3-2-5-doubletolongbits方法" aria-hidden="true">#</a> 3.2.5 doubleToLongBits方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Double</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">doubleToLongBits</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">doubleToRawLongBits</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check for NaN based on values of bit fields, maximum</span>
        <span class="token comment">// exponent and nonzero significand.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">&amp;</span> <span class="token class-name">DoubleConsts</span><span class="token punctuation">.</span><span class="token constant">EXP_BIT_MASK</span><span class="token punctuation">)</span> <span class="token operator">==</span>
                <span class="token class-name">DoubleConsts</span><span class="token punctuation">.</span><span class="token constant">EXP_BIT_MASK</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span>result <span class="token operator">&amp;</span> <span class="token class-name">DoubleConsts</span><span class="token punctuation">.</span><span class="token constant">SIGNIF_BIT_MASK</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
            result <span class="token operator">=</span> <span class="token number">0</span>x7ff8000000000000L<span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-6-doubletorawlongbits-native方法与longbitstodouble-native方法" tabindex="-1"><a class="header-anchor" href="#_3-2-6-doubletorawlongbits-native方法与longbitstodouble-native方法" aria-hidden="true">#</a> 3.2.6 doubleToRawLongBits native方法与longBitsToDouble native方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Double</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据IEEE 754浮点“双格式”位布局返回指定浮点值的表示，保留非数字（NaN）值。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">doubleToRawLongBits</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 返回与给定位表示相对应的 double值。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">double</span> <span class="token function">longBitsToDouble</span><span class="token punctuation">(</span><span class="token keyword">long</span> bits<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-7-compare-sum-max-min方法" tabindex="-1"><a class="header-anchor" href="#_3-2-7-compare-sum-max-min方法" aria-hidden="true">#</a> 3.2.7 compare/sum/max/min方法</h4><ul><li>sum方法是用来计算两个double值之和。</li><li>max方法是用来查找两个double值的最大值。</li><li>min方法是用来查找两个double值的最小值。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Double</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">double</span> d1<span class="token punctuation">,</span> <span class="token keyword">double</span> d2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">&lt;</span> d2<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">// Neither val is NaN, thisVal is smaller</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">&gt;</span> d2<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// Neither val is NaN, thisVal is larger</span>
        
        <span class="token comment">// Cannot use doubleToRawLongBits because of possibility of NaNs.</span>
        <span class="token keyword">long</span> thisBits    <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> anotherBits <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token punctuation">(</span>thisBits <span class="token operator">==</span> anotherBits <span class="token operator">?</span>  <span class="token number">0</span> <span class="token operator">:</span> <span class="token comment">// Values are equal</span>
                <span class="token punctuation">(</span>thisBits <span class="token operator">&lt;</span> anotherBits <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token comment">// (-0.0, 0.0) or (!NaN, NaN)</span>
                        <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// (0.0, -0.0) or (NaN, !NaN)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-说明" tabindex="-1"><a class="header-anchor" href="#_4-说明" aria-hidden="true">#</a> 4.说明</h2><h3 id="_4-1-如何判断两个double类型的数字大小" tabindex="-1"><a class="header-anchor" href="#_4-1-如何判断两个double类型的数字大小" aria-hidden="true">#</a> 4.1 如何判断两个double类型的数字大小</h3><p>1.使用<code>Double.doubleToLongBits</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>
<span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>
<span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>将double数转为字符串，判断字符串是否相等</li></ol><p>3.使用BigDecimal类型进行判断</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">0.001</span><span class="token punctuation">;</span> 
<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">0.0011</span><span class="token punctuation">;</span> 
<span class="token class-name">BigDecimal</span> data1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">BigDecimal</span> data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> 
data1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span> 
非整型数，运算由于精度问题，可能会有误差，建议使用<span class="token class-name">BigDecimal</span>类型！

当此 <span class="token class-name">BigDecimal</span> 在数字上小于、等于或大于 val 时，返回 <span class="token operator">-</span><span class="token number">1</span>、<span class="token number">0</span> 或 <span class="token number">1</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.判断是否在误差范围内</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> a <span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> b <span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1E-6d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),o=[t];function l(c,i){return s(),a("div",null,o)}const k=n(p,[["render",l],["__file","Double.html.vue"]]);export{k as default};
