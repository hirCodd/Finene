import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as s,c as d,a as g,b as r,d as i,e as c,w as l,f as e}from"./app-9b1c5904.js";const o={},m=e(`<h1 id="git分支操作" tabindex="-1"><a class="header-anchor" href="#git分支操作" aria-hidden="true">#</a> git分支操作</h1><h2 id="创建与合并分支" tabindex="-1"><a class="header-anchor" href="#创建与合并分支" aria-hidden="true">#</a> 创建与合并分支</h2><p>在版本回滚与更新中，git都是用master分支作为主线，通过时间顺序进行更新或者回滚。</p><h3 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支" aria-hidden="true">#</a> 创建分支</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -b dev 
==（相当于）
git branch dev
git checkout dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看分支信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),u=e(`<figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_branch.png" alt="git_branch" tabindex="0" loading="lazy"><figcaption>git_branch</figcaption></figure><p>现在已经在dev分支目录下，接下来可以在demo.txt中添加信息，我们添加一行数据：1111111111111</p><p>此时，我们在dev目录下添加内容，并且提交到暂存区，然后commit。</p><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_branch3.png" alt="git_branch" tabindex="0" loading="lazy"><figcaption>git_branch</figcaption></figure><p>接着，我们将目前分支切换到master主分支，查看文件新添加的内容是否存在。使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_branch4.png" alt="git_branch4" tabindex="0" loading="lazy"><figcaption>git_branch4</figcaption></figure><p>然后，发现master分支上并没有我们想要看到的内容，所以我们需要合并两个分支。</p><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git merge 分支名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在master分之下合并分dev分支。使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git merger dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_merge.png" alt="git_merge" tabindex="0" loading="lazy"><figcaption>git_merge</figcaption></figure><p>合并完成后即可删除没有用的额分支了，使用以下命令进行删除分支：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch -d dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_delete.png" alt="git_branch_delete" tabindex="0" loading="lazy"><figcaption>git_branch_delete</figcaption></figure><p>所有命令总结：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>查看分支：git branch
创建分支：git branch name
切换分支：git checkout name
创建+切换分支：git checkout -b name
合并某个分支到当前分支：git merge name
删除某个分支：git branch -d name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理分支矛盾" tabindex="-1"><a class="header-anchor" href="#处理分支矛盾" aria-hidden="true">#</a> 处理分支矛盾</h3><p>新建一个分支，并且other中添加数据：2222222222222，并且检查文件。</p><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_branch_other.png" alt="git_branch_other" tabindex="0" loading="lazy"><figcaption>git_branch_other</figcaption></figure><p>切换分支到master之中，并且master分支中增加内容：3333333333333，在增加之前使用cat命令，查看master坟之中是否存在2222222222222，增加后是否存在3333333333333。</p><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_checkout1.png" alt="git_checkout2" tabindex="0" loading="lazy"><figcaption>git_checkout2</figcaption></figure><p>master分支数据如上，接下来我们继续合并分支。</p><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_merge2.png" alt="git_merge" tabindex="0" loading="lazy"><figcaption>git_merge</figcaption></figure>`,25),h=e(`<p>然后我们就可以git log查看commit后的信息，在此我就截图了哈。</p><h3 id="分支策略" tabindex="-1"><a class="header-anchor" href="#分支策略" aria-hidden="true">#</a> 分支策略</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.创建一个dev分支。
2.修改demo.txt内容。
3.添加到暂存区。
4.切换回主分支(master)。
5.合并dev分支，使用命令 git merge –no-ff -m &quot;注释&quot; dev
6.查看历史记录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -b dev
在demo.txt文件中添加数据4444444444444
git add demo.txt
git commit -m &quot;add merge&quot;
git merge --no-ff -m &quot;merge with no-ff&quot; dev
git log 或者git log --graph --pretty=oneline --abbrev-commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_dev.png" alt="git_dev" tabindex="0" loading="lazy"><figcaption>git_dev</figcaption></figure><p><strong>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</strong></p><h2 id="bug分支" tabindex="-1"><a class="header-anchor" href="#bug分支" aria-hidden="true">#</a> Bug分支</h2><p>在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p><p>比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -b dev 
修改demo.txt文件添加数据：5555555555555
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_branch5.png" alt="git_branch5" tabindex="0" loading="lazy"><figcaption>git_branch5</figcaption></figure><p>并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。</p><p>隐藏分支：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git stash
git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_stash.png" alt="git_stash" tabindex="0" loading="lazy"><figcaption>git_stash</figcaption></figure><p>首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支。</p><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_bug.png" alt="git_bug" tabindex="0" loading="lazy"><figcaption>git_bug</figcaption></figure><p>修改后合并分支，然后删除bug分支即可。</p><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_bug2.png" alt="git_bug2" tabindex="0" loading="lazy"><figcaption>git_bug2</figcaption></figure><p>接着，我们继续回到dev分支下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout dev
git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>发现并没有文件，是因为stash隐藏了，所以我们需要从stash恢复。恢复命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git stash list
git stash apply
git stash drop
cat demo.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git stash list
git stash pop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://finen-1251602255.cos.ap-shanghai.myqcloud.com/images/blog/git_stash3.png" alt="git_stash" tabindex="0" loading="lazy"><figcaption>git_stash</figcaption></figure>`,27);function p(v,b){const a=n("font");return s(),d("div",null,[m,g("more"),u,r("p",null,[i("由于我之前在master分支写了一个2222222的信息，，所以这有一个2222222222222222222/33333333333333333这样的信息。不过这样的错误信息也不影响分支是错误。"),c(a,{color:"red"},{default:l(()=>[i("Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，其中<<<HEAD是指主分支修改的内容，>>>>>fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存。修改后就是上面的最后一个图。")]),_:1})]),h])}const _=t(o,[["render",p],["__file","git-branch-command.html.vue"]]);export{_ as default};
